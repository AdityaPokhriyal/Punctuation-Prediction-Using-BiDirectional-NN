Welcome to the introductory programming course on NPTEL MOOCs .PERIOD  The goal of this is to learn how to code basic programs in the C programming language .PERIOD  Basically the aim of this course is to teach you how to solve problems using a computer .PERIOD  And by the end of this course ,COMMA  we will hope that you can write medium-sized programs – maybe running to a couple of 100 lines of code comfortably in the C programming language .PERIOD  Programming nowadays is considered a basic skill similar to mathematics that is needed across all disciplines like engineering ,COMMA  in the sciences ,COMMA  and nowadays even in the arts .PERIOD  So ,COMMA  little bit of programming skill is an enhancement to any other skillset that you might already you have .PERIOD  This course we will start from the ground up ;SEMICOLON  we do not assume any prior experience in programming whether in C or in any other language .PERIOD  So ,COMMA  the focus will be to start from the basics ;SEMICOLON  and to use C as a medium of program .PERIOD  A couple of words about the process of programming ;SEMICOLON  it involves two basic steps .PERIOD  One is to define the problem ;SEMICOLON  often you get real-world problems ,COMMA  which are not precise enough to write a program for .PERIOD  So ,COMMA  the first step would be to define and model the problem .PERIOD  And this is a very important step in large scale software development ;SEMICOLON  however we will not focus on this as part of this course .PERIOD  During this course ,COMMA  you will not write large software system like the Indian railways reservation system ;SEMICOLON  those are extremely complex problems involving multiple programmers .PERIOD  In this course ,COMMA  we will assume that the problem is well-defined and already provided to you .PERIOD  So ,COMMA  they will be precise and they will be fairly short and simple .PERIOD  So ,COMMA  this is the first step of programming ,COMMA  which is definition of the problem ,COMMA  which you can assume will be given .PERIOD  Now ,COMMA  comes the second step ,COMMA  which is to obtain logical solution to your problem .PERIOD  And what do we mean by a logical solution ?QUESTIONMARK  A logical solution is a finite sequence of steps ;SEMICOLON  do this first ,COMMA  do this next ;SEMICOLON  if a certain condition is true do this ;SEMICOLON  otherwise ,COMMA  do something else .PERIOD  This is called an algorithm .PERIOD  So ,COMMA  an algorithm is basically a finite step-by-step procedure to solve a problem .PERIOD  One way to visualize an algorithm is using a flowchart .PERIOD  If you are new to programming ,COMMA  it is recommended that ,COMMA  you draw flowcharts to define the solution to your problem .PERIOD  Experienced programmers very rarely draw flowcharts ,COMMA  but that is not a reason for beginning programmers to avoid flowcharts .PERIOD  So ,COMMA  defining a problem is there ;SEMICOLON  then the process of coming up with an algorithm .PERIOD  This is a very important step in the programming process .PERIOD  And followed by this ,COMMA  there is a third step ,COMMA  which is to implement the algorithm in a usual programming language .PERIOD  So ,COMMA  is the concept of an algorithm a new concept ?QUESTIONMARK  I would claim that ,COMMA  it is not .PERIOD  An algorithm is a very familiar concept ;SEMICOLON  the most important example that you can think of are cooking recipes .PERIOD  Now ,COMMA  cooking recipes are written in a way that ,COMMA  they are almost algorithms .PERIOD  They are not quite precise enough for a computer ,COMMA  but they come quite close .PERIOD  For example ,COMMA  let us take an unnamed dish – a desert and let us look at how things specified in a recipe .PERIOD  And we will see that ,COMMA  this analogy is quite deep .PERIOD  There is a very strong similarity in the way that recipe is written and a program is written .PERIOD  So ,COMMA  usually ,COMMA  they will have a list of ingredients upfront .PERIOD  For example ,COMMA  you have ice cream ,COMMA  crushed cereal and so on .PERIOD  And then once you have all the ingredients in place ,COMMA  then you have instructions to say how do you start and how do you end up with the dish .PERIOD  Now ,COMMA  those instructions will be fairly precise ;SEMICOLON  of course ,COMMA  you assume that ,COMMA  the person preparing the dish is a fairly-experienced cook ,COMMA  so that certain instructions need not be given in very precise detail .PERIOD  For example ,COMMA  you can say do this ,COMMA  heat oil and so on .PERIOD  And it is assumed that ,COMMA  a person knows how to heat oil .PERIOD  Even so you will see that ,COMMA  certain recipes are fairly vague and other recipes are fairly detailed .PERIOD  And in any recipe ,COMMA  you can see certain things ,COMMA  which are vague and will cause confusion to most people .PERIOD  For example ,COMMA  here is a term ,COMMA  which says try to make each scoop about as large as your fist .PERIOD  Now ,COMMA  that of course ,COMMA  is a vague term ,COMMA  because my fist could be a different size than yours .PERIOD  And then you will see that ,COMMA  in a formation that makes it easy do dip in order .PERIOD  So ,COMMA  this is fairly vague and it is not very helpful to a cook ,COMMA  who is making this for the first time .PERIOD  So ,COMMA  think of algorithms as similar to recipes ,COMMA  but mentioned in a more precise manner .PERIOD   Another way you can be familiar with algorithms is when you have the – when you buy a make it yourself kit for a furniture or something like that ;SEMICOLON  and you will be provided with a step-by-step instructions on how to assemble the kit .PERIOD  Often when you buy disassembled table or something like that ,COMMA  it will come with a sheet telling you how to start with the components and build a table .PERIOD  Those are also similar to an algorithm .PERIOD  So ,COMMA  let us look at a flowchart to depict a mathematical algorithm and we will use this flowchart to explain certain conventions about how algorithms can be described .PERIOD  So ,COMMA  every flowchart will have a start and an end ;SEMICOLON  and it will have a finite number of boxes .PERIOD  So ,COMMA  this is the finite number of instructions that I was talking about .PERIOD  There are certain conventions in drawing flowcharts ;SEMICOLON  the start and the end are often described in circles .PERIOD  Then there are ordinary boxes and then there are diamonds .PERIOD  We will shortly describe what they mean .PERIOD  So ,COMMA  suppose you want to write an algorithm for adding the first n numbers ;SEMICOLON  all of you know how to do it .PERIOD  The point is how do you describe this step-bystep to somebody who does not know it already .PERIOD   So ,COMMA  first you have to take what is the upper limit N and then you have to sum them up .PERIOD  So ,COMMA  one way to sum them up is start with an initial sum of 0 and then add numbers one by one .PERIOD  So ,COMMA  increment a counter from 1 all the way up to n .PERIOD  So ,COMMA  you start with I equal to 1 and then add the I-th number to the sum ;SEMICOLON  and then increment I ;SEMICOLON  if I is already N ,COMMA  then you are done ;SEMICOLON  if I is not N ,COMMA  then you go back and do the sum all over again until you hit an I .PERIOD  When you reach I equal to N ,COMMA  you come out the program ;SEMICOLON  print the sum ;SEMICOLON  and end the program .PERIOD  So ,COMMA  this is a very simple flowchart .PERIOD  So ,COMMA  initially ,COMMA  if N is less than 1 ,COMMA  you have nothing to do ;SEMICOLON  if N is greater than 1 ,COMMA  you start a counter from I equal to 1 to n and add the numbers one by one until you hit the N-th number .PERIOD  If you wanted to compute a slightly different problem ,COMMA  which is let us say the factorial of N ,COMMA  which is just a product of the first N numbers ,COMMA  the flowchart will look fairly similar ;SEMICOLON  the only difference is that instead of adding numbers ,COMMA  you will multiply them .PERIOD  So ,COMMA  this flowchart is similar to the previous flowchart ;SEMICOLON  you will first input in N ,COMMA  and then increment N until you hit N equal to M .PERIOD  If so you will finally ,COMMA  print the factorial ;SEMICOLON  otherwise ,COMMA  you go back to the loop .PERIOD  So ,COMMA  here are the conventions used .PERIOD  The start symbol is often as a circle or an oval ;SEMICOLON  the input symbol and the output symbol are often represented as parallelograms ;SEMICOLON  and the normal operation boxes are represented as rectangles ;SEMICOLON  and the test box to see whether you have hit a limit to test some condition in general ,COMMA  they are represented as diamonds .PERIOD  In this session ,COMMA  we will write another algorithm to solve a mathematical problem .PERIOD  If you do not know this algorithm already ,COMMA  that is fine ;SEMICOLON  it is more for the purpose of demonstrating ,COMMA  if you know a solution ,COMMA  how do you come up with the algorithm to tell a computer how to solve it .PERIOD  The algorithm is for finding the greatest common divisor or the highest common factor ,COMMA  this is known under two names of two positive integers: m and n .PERIOD  So ,COMMA  this is an algorithm you probably know .PERIOD  How do you solve this ?QUESTIONMARK  Let us first try a naive solution .PERIOD  And before writing an algorithm ,COMMA  let us see what do I mean by the simple solution of GCD .PERIOD  So ,COMMA  you are asked to find the greatest common divisor of m and n ;SEMICOLON  take the smaller number n ;SEMICOLON  and now you start looking for each number k between 1 and n ,COMMA  remember that n is the smaller number ;SEMICOLON  in descending order ,COMMA  do the following .PERIOD  What you do is if k divides m and n ,COMMA  then k is the greatest common divisor of m and n .PERIOD   And this is obvious by the definition of greatest common divisor ;SEMICOLON  if k divides m and n ,COMMA  then it is obviously a divisor of m and n .PERIOD  Also we are coming in descending order ;SEMICOLON  we start from n and go down to n .PERIOD  So ,COMMA  the first divisor that you hit when you go down is going to be the greatest common divisor of m and n .PERIOD  So ,COMMA  this algorithm obviously works .PERIOD  It will compute the GCD correctly ,COMMA  but it is very slow .PERIOD  And think about a very large numbers: m and n ;SEMICOLON  and you will see that ,COMMA  it may go n steps before reaching the correct GCDs .PERIOD  So ,COMMA  compute the GCD of two very large numbers ,COMMA  which are relatively prime to each other ;SEMICOLON  that means that the GCD of m and n are 1 .PERIOD  Now ,COMMA  if you pick such a pair ,COMMA  this algorithm will compute the GCD correctly ,COMMA  but it will take n steps ,COMMA  because you have to go down all the way from n to 1 before you will hit the GCD .PERIOD  Can we do better ?QUESTIONMARK  There is a faster way and it is a very old algorithm .PERIOD  The algorithm is due to Euclid .PERIOD  We will see a slightly modified version of that algorithm .PERIOD  So ,COMMA  before we go into Euclid’s algorithm for GCD ,COMMA  we will describe what it does and give you a slight intuition of why it works .PERIOD  So ,COMMA  consider the GCD of 8 and 6 .PERIOD  Now ,COMMA  you can consider two rods: one of length 8 ,COMMA  and another of length 6 .PERIOD  Now ,COMMA  obviously ,COMMA  if a number divides 6 and 8 ,COMMA  then I should be able to make a stick of that length ,COMMA  so that I can measure 6 exactly with that shorter rod ;SEMICOLON  and I can measure 8 exactly with that shorter rod .PERIOD  This is the meaning of a common divisor ,COMMA  and we have to find the greatest common divisor .PERIOD   So ,COMMA  first ,COMMA  what we will do is we will measure the longer rod using the shorter rod .PERIOD  Now ,COMMA  it may not measure the longer rod exactly .PERIOD  For example ,COMMA  in this case ,COMMA  6 does not measure 8 exactly ;SEMICOLON  there will be a small piece of length 2 left over .PERIOD  So ,COMMA  take that reminder .PERIOD  And now ,COMMA  repeat the process ;SEMICOLON  now ,COMMA  2 has become the shorter rod and 6 has become the longer rod .PERIOD  Now ,COMMA  see if 2 measures 6 exactly ;SEMICOLON  it does .PERIOD  So ,COMMA  you are done .PERIOD  And then you can say that ,COMMA  2 is the GCD of 8 and 6 .PERIOD  The reason why this works is – by the nature of this algorithm ,COMMA  it is clear that 2 divides 6 ,COMMA  because that is why we stop the algorithm .PERIOD  And also ,COMMA  we know that ,COMMA  8 is basically 6 plus 2 .PERIOD  So ,COMMA  it is obviously ,COMMA  a multiple of 2 .PERIOD  So ,COMMA  it is a common divisor .PERIOD  And with a slightly more elaborate argument ,COMMA  we can argue that ,COMMA  it is the greatest common divisor .PERIOD  So ,COMMA  this is an algorithm ,COMMA  which is essentially due to Euclid .PERIOD  So ,COMMA  it was known for at least 2000 years .PERIOD  Let us pick a slightly more elaborate example .PERIOD  Let us say we want to find the GCD of 102 and 21 .PERIOD  The process of taking remainder is what is known as the modulo operator in mathematics .PERIOD  So ,COMMA  102 modulo 21 is the remainder of integer division of 102 by 21 .PERIOD  So ,COMMA  the remainder of when you divide 102 by 21 is 18 .PERIOD  So ,COMMA  that is the shorter rod for the next stage .PERIOD  Now ,COMMA  21 mod 18 is 3 .PERIOD  And that becomes the rod for the next stage ;SEMICOLON  the shorter rod for the next stage .PERIOD  And 18 mod 3 is 0 ;SEMICOLON  that is when you stop the algorithm .PERIOD  So ,COMMA  when the modulo operator gives you 0 result ;SEMICOLON  that means that ,COMMA  the shorter number exactly divides the larger number ;SEMICOLON  that means that ,COMMA  the shorter number is a divisor of the larger number and you stop the algorithm .PERIOD  Now ,COMMA  you say that ,COMMA  GCD of 102 and 21 is 3 .PERIOD  So ,COMMA  this is a slight modification of the classical Euclid’s method for GCD .PERIOD  And so ,COMMA  it is based on the following simple fact ,COMMA  which we have described .PERIOD  And you can prove this mathematically as well .PERIOD  So ,COMMA  suppose you take two positive numbers: a and b ;SEMICOLON  where ,COMMA  a is the larger number ;SEMICOLON  then GCD of a and b is the same as GCD of b and the remainder when you divide a by b .PERIOD  So ,COMMA  it is written by the equation GCD(a ,COMMA  b) is GCD(b ,COMMA  a % b) .PERIOD  The modulo operator is represented as the percentage sign ,COMMA  because this is the convention that we will use in C .PERIOD  And this equation can be seen by our previous slide ;SEMICOLON  a was the bigger rod ;SEMICOLON  b was the shorter rod .PERIOD  This was the first stage .PERIOD  The second stage was when b is the shorter rod .PERIOD  And the shorter rod for the next stage is modulo – is given by the modulo operator .PERIOD  To prove this ,COMMA  you can start by considering the division of a by b and writing a as bq + r .PERIOD  But ,COMMA  we will not go into the proof .PERIOD  From elementary properties of natural numbers ,COMMA  it is possible to prove that ,COMMA  Euclid’s method correctly computes the GCD .PERIOD  Right now ,COMMA  we will move into how do we write the GCD algorithm in the form of an input .PERIOD  So ,COMMA  here is a slightly abbreviated picture .PERIOD  I have skipped the start state ;SEMICOLON  but the start state is there .PERIOD  Let us focus on what happens during the algorithm .PERIOD  You have two numbers: a and b .PERIOD  The first thing to ensure is that ,COMMA  a is the larger number .PERIOD  The reason we do that is that ,COMMA  if a is the larger number ,COMMA  then the modulo operator is properly defined .PERIOD  So ,COMMA  if a is the larger number ,COMMA  then we are fine ;SEMICOLON  we can go into the GCD algorithm .PERIOD  If a is not the larger number ,COMMA  you merely swap a and b ,COMMA  so that whatever is the larger number ,COMMA  you called it a .PERIOD  So ,COMMA  exchange a and b ;SEMICOLON  means that you say that ,COMMA  the value of a is stored in a temporary variable ;SEMICOLON  then the value of b is stored in a ;SEMICOLON  and then the value of b is stored in t with the value of t stored in b .PERIOD  So ,COMMA  here is a way to exchange the values of a and b .PERIOD  So ,COMMA  ensure at first that ,COMMA  a is the larger number .PERIOD  Once you do that ,COMMA  you get into the code for the proper  utility in GCD .PERIOD  First you test whether b is 0 .PERIOD  If b is 0 ,COMMA  then there is nothing to do ;SEMICOLON  a is the GCD of a and b ;SEMICOLON  GCD(4 ,COMMA  0) is 4 ;SEMICOLON  GCD(4 ,COMMA  0) is 8 ,COMMA  and so on .PERIOD  So ,COMMA  if the smaller number is 0 ,COMMA  then there is nothing do in the algorithm ;SEMICOLON  the algorithm is over ;SEMICOLON  and you say that ,COMMA  print a .PERIOD  If b is not 0 ,COMMA  then we do the Euclidean equation .PERIOD  You take a % b ;SEMICOLON  store it in a variable g ;SEMICOLON  then assign the value of b to a and assign the value of g to b .PERIOD  So ,COMMA  this corresponds to the operation of taking b and a % b as the next step .PERIOD  After you do that ,COMMA  you again test the condition whether b has now become 0 .PERIOD  If it is 0 ,COMMA  then we are done and a is the GCD ;SEMICOLON  otherwise ,COMMA  we do another round of taking a % b and setting a = b and b = g .PERIOD  So ,COMMA  a ,COMMA  b and g are what are known as variables .PERIOD  And variables are used in programming to store exactly one value at a time .PERIOD  So ,COMMA  at any particular time ,COMMA  it will have one value ;SEMICOLON  then after the execution of another instruction ,COMMA  it will have a new value and so on .PERIOD  Now ,COMMA  for the purposes of describing an algorithm ,COMMA  imagine that ,COMMA  the variable is a box ;SEMICOLON  and it is a name of a box ;SEMICOLON  and the value is stored inside the box .PERIOD  For example ,COMMA  a ,COMMA  b and g are the variables that we have used in the program .PERIOD  And they are the names for these integer boxes .PERIOD  So ,COMMA  if we are computing ,COMMA  let us say the GCD of 5 and 3 ,COMMA  then you might start with a equal to 5 and b equal to 3 .PERIOD  The second operation that we have used in the code is the assignment operation .PERIOD  So ,COMMA  this is what an example of the assignment operator .PERIOD  And when we do an assignment ,COMMA  what we mean is that ,COMMA  you take the left variable ,COMMA  which is g in this case and assign it the value of what is the expression on the right-hand side ,COMMA  which is a % b  .PERIOD  So ,COMMA  assignment a = b replaces whatever is stored in a by what is stored in b .PERIOD  So ,COMMA  take the right-hand side ;SEMICOLON  take the value of that ;SEMICOLON  and put it into the variable that the left-hand side represents .PERIOD  For example ,COMMA  if a was 5 and b is 3 ;SEMICOLON  after a = b ,COMMA  you would take the value of b and put it in a .PERIOD  So ,COMMA  a will now become 3 and b will remain 3 .PERIOD  Another small thing that we have used in the code is sequential assignment .PERIOD  So ,COMMA  if you write a bunch of statements one after the other ,COMMA  let us say separated by semicolons ;SEMICOLON  then this means that ,COMMA  the instructions are to be executed one after the other in sequence .PERIOD  So ,COMMA  first ,COMMA  you do g equal to a % b ;SEMICOLON  then you do a = b ;SEMICOLON  and after that you do b = g .PERIOD  So ,COMMA  initially ,COMMA  let us say that a is 10 and b is 6 ;SEMICOLON  g is undefined .PERIOD  After you run the statement g equal to a % b ,COMMA  you take 10 modulo 6 ;SEMICOLON  you will have 4 .PERIOD And then a = b ;SEMICOLON  the value of b will be stored in a .PERIOD  So ,COMMA  a become 6 .PERIOD  And then b = g ;SEMICOLON  the value of g will be stored in b .PERIOD  So ,COMMA  b will become 4 .PERIOD  Now ,COMMA  let us just dry run the program or the algorithm and see how it computes the GCD of two numbers .PERIOD  So ,COMMA  I will denote the currently executing statement with an icon and I will call this the program counter .PERIOD  So ,COMMA  this is at any point ,COMMA  it is the next step to be executed .PERIOD  Initially ,COMMA  it is at the beginning of the code ;SEMICOLON  where ,COMMA  you take the input .PERIOD  And we will have three variables ,COMMA  which will represent the current state of a program .PERIOD  So ,COMMA  suppose you want to compute the GCD of 8 and 6 .PERIOD  So ,COMMA  you have a equal to 8 ;SEMICOLON  b equal to 6 .PERIOD  You know that a is greater than b .PERIOD  So ,COMMA  you proceed .PERIOD  Now ,COMMA  you test whether b is 0 .PERIOD  So ,COMMA  since b is non zero ,COMMA  you go into the main body of the loop .PERIOD  So ,COMMA  you do g equal to a % b ;SEMICOLON  a = b ;SEMICOLON  b = g ,COMMA  this step once .PERIOD  So ,COMMA  you will end up with a is now 6 ;SEMICOLON  b is 2 ;SEMICOLON  and g is 2 .PERIOD  You again comeback to the discussion and test whether b is 0 or not ;SEMICOLON  b is not 0 .PERIOD  So ,COMMA  you go back into the body of the loop again .PERIOD  So ,COMMA  you have g to be a % b .PERIOD  So ,COMMA  6 modulo 2 should be 0 .PERIOD  And then you do a = b and b = g .PERIOD  You will have a equal to 2 ;SEMICOLON  b equal to 0 ;SEMICOLON  and g equal to 0 .PERIOD  At this point ,COMMA  b is now 0 .PERIOD  So ,COMMA  you say that a is actually the GCD of three numbers – of the numbers 8 and 6 .PERIOD  So ,COMMA  you can ensure that ,COMMA  it computes the GCD correctly .PERIOD   Once we are understood what algorithms are ,COMMA  we will start writing a few simple programs in the C programming language .PERIOD  Before we begin ,COMMA  we will give a brief introduction to the process of programming .PERIOD  When you are programming ,COMMA  you follow typically ,COMMA  what is known as the programming cycle and this contains three parts .PERIOD  One is the process where you write the program or edit the program ,COMMA  and after you are done editing the program ,COMMA  you save it and then you compile your program .PERIOD  If your compilation succeeds ,COMMA  you are ready to run the program .PERIOD  If your compilation fails ,COMMA  then you return to the editing step and correct the errors and compile again .PERIOD  Once compilation process succeeds ,COMMA  then you can run the program and check whether the output is correct .PERIOD  If the output is correct ,COMMA  you are done ;SEMICOLON  if not you go back to the edit process .PERIOD  So ,COMMA  this is why it is known us the edit ,COMMA  compile ,COMMA  run cycle .PERIOD  So ,COMMA  you edit the program first ,COMMA  then compile it .PERIOD  If there are compilation errors you go back and edit it again ,COMMA  otherwise you run the program .PERIOD  When you run the program ,COMMA  if the logic is correct ,COMMA  then you are done .PERIOD  If your logic is incorrect ,COMMA  then you go back and make changes to the program ,COMMA  compile it and run it again .PERIOD  So ,COMMA  this is the process ,COMMA  that we have to follow in the ,COMMA  when we program .PERIOD  We look at each of the steps one by one .PERIOD  In editing ,COMMA  it is typically done in what is known as in editor .PERIOD  Now ,COMMA  editor is a program that lets you create a text file ,COMMA  make changes to the text file and update the text file ,COMMA  later save it .PERIOD  So ,COMMA  in order to create a program ,COMMA  pick up particular editor of your choice .PERIOD  If you are on Linux ,COMMA  I would recommend a simple editor like G Edit .PERIOD  If you are on windows ,COMMA  there is free editor called Notepadd + + .PERIOD  Be careful that this is not the usual notepad that comes along with the system .PERIOD  Write your code in ,COMMA  in editor of your choice and save it into a file .PERIOD  Let us call it Sample .PERIOD c .PERIOD  Once your code is saved ,COMMA  you have to compile a program .PERIOD  Now ,COMMA  why do we have to compile a program ?QUESTIONMARK  Why is this step necessary ?QUESTIONMARK  The computed does not understand C per say ,COMMA  it cannot execute a C program or the individual statements in a C ,COMMA  in C language correctly .PERIOD  For example ,COMMA  let us say that in C you can write g = a % b .PERIOD  The percentage operation stands for modulo .PERIOD  So ,COMMA  this statement says that you take a % b and assign it to the variable g .PERIOD  Now ,COMMA  the microprocessor ,COMMA  the processor in the computer cannot execute this statement because it does not understand this C programming language .PERIOD  So ,COMMA  it translates it into an equivalent piece of code consisting of even more basic statements .PERIOD  For example ,COMMA  a ,COMMA  this is just for the purpose of illustration and it is not important that you understand exactly what is going on ,COMMA  but in a statement like g = a % b ,COMMA  can be translated into bunch of statements saying load data from particular memory location into particular register ,COMMA  load the second piece of data from another memory location to the second register ,COMMA  divide the contents of these two registers ,COMMA  store the reminder in a third register and then finally ,COMMA  take the result and store it into a third memory location .PERIOD  So ,COMMA  the simple statement that we wrote ,COMMA  g = a % b or g = a % b ,COMMA  becomes a bunch of basic statements ,COMMA  that the microprocessor can understand and then it execute these statements .PERIOD   So ,COMMA  why not program in the microprocessor language or in assembly language ?QUESTIONMARK  Writing programs in machine language is very tedious .PERIOD  One line in a higher programming language like C translates into multiple lines of machine language .PERIOD  So ,COMMA  writing machine language code is very long and it is very tedious and is particularly prone to errors .PERIOD  Also ,COMMA  they are not portable .PERIOD  If you write machine code for a particular processor ,COMMA  let us say ,COMMA  you are writing the code for an Intel processor and you translate it to an AMD machine ,COMMA  it might not work .PERIOD  Whereas ,COMMA  if you take your C code and compile it in another machine ,COMMA  it will run on the machine .PERIOD  So ,COMMA  compilers work as a bridge .PERIOD  What they do is ,COMMA  take a high level C programming language and translate it into the equivalent machine code .PERIOD  So ,COMMA  think of them as a translator .PERIOD  So ,COMMA  you ,COMMA  the input is a C program and then you give it to a compiler .PERIOD  The output of the compiler will be the equivalent machine program for whichever machine you want to run it on .PERIOD  So ,COMMA  compiler is a translator ,COMMA  which translates from C to machine code .PERIOD  How do you compile ?QUESTIONMARK  We have just seen why we bother with compilation and on UNIX system or Linux systems ,COMMA  you can compile the program using the gcc compiler .PERIOD  So ,COMMA  gcc stands for the gnu c compiler .PERIOD  So ,COMMA  for example ,COMMA  if you have edited and saved your file as a Sample .PERIOD c ,COMMA  you can just type on the comment prompt on the terminal gcc Sample .PERIOD c .PERIOD  If your code does not have any errors ,COMMA  then the system will silently say ,COMMA  that the compilation is done and it will show you the prompt .PERIOD  If there are errors ,COMMA  the system will list the errors and so ,COMMA  you can go back to the editor ,COMMA  edit you code to correct errors and come back and compile again .PERIOD  As long as there are compilation errors ,COMMA  there will be no executable file created .PERIOD  So ,COMMA  the executable file is the code ,COMMA  is the file that you can finally run .PERIOD  And if there are compilation errors ,COMMA  the compiler will not produce executable code .PERIOD   So ,COMMA  name your file as whatever you want ,COMMA  let us call it ,COMMA  yourfilename .PERIOD c and then gcc yourfilename .PERIOD c .PERIOD  It will produce the executable file .PERIOD  If you are on Linux ,COMMA  the executable file that it creates is something called a .PERIOD out .PERIOD  If there are no errors and look at your directory ,COMMA  there will be a new file called a .PERIOD out in your directory and we will explain the directory structures in another session ,COMMA  ok .PERIOD  Let us look at a very simple C program .PERIOD  Open your editor depending on which system you are in .PERIOD  So ,COMMA  let us write a very simple program .PERIOD  It is ,COMMA  it is very short .PERIOD  What it has is ,COMMA  are three lines of code and some punctuation .PERIOD  This is known as the C syntax .PERIOD  Let us examine this code .PERIOD  What this code does is ,COMMA  it prints a particular massage ,COMMA  which is ,COMMA  welcome to C .PERIOD   And it has various components ,COMMA  you type it into an editor as it is ,COMMA  make no punctuation mistakes ,COMMA  syntax errors .PERIOD  Now ,COMMA  if you compile the program and you have typed the program correctly ,COMMA  then a new file called a .PERIOD out will be created .PERIOD  So ,COMMA  if you type ,COMMA  gcc Sample .PERIOD c and if there are no errors ,COMMA  it will just say nothing .PERIOD  If there are ,COMMA  if it says something ,COMMA  then there is a compilation error .PERIOD  Compilation creates an executable a .PERIOD out and now you can run the program by typing ,COMMA  and this is important ,COMMA   .PERIOD /a .PERIOD out .PERIOD  So ,COMMA  this syntax is important ,COMMA  what you type is ,COMMA   .PERIOD /a .PERIOD out and then when you run the program it will say ,COMMA  welcome dot ,COMMA  Welcome to C ,COMMA  because that is what the program is supposed to do… Let us look at the program little more carefully .PERIOD  What are its components ?QUESTIONMARK  It had three lines ,COMMA  the first line said # include <stdio .PERIOD h> .PERIOD  So ,COMMA  it has multiple components .PERIOD  One is the first symbol ,COMMA  which is ,COMMA  has the first symbol ,COMMA  which is the hash .PERIOD  Please do not forget to include that .PERIOD  And actually ,COMMA  there is no space between the hash and the first i ,COMMA  so there is no space here .PERIOD  So ,COMMA  # include <stdio .PERIOD h> .PERIOD  This line is supposed to tell C that please include the standard input-output library .PERIOD  The standard input-output library is what has the print routines ,COMMA  which will print output messages on to the terminal .PERIOD  So ,COMMA  if you want to have any input output component of your program ,COMMA  then you should include <stdio .PERIOD h> .PERIOD  Include this line routinely in your ,COMMA  in the first line of your C file because in the course of this class ,COMMA  we will often need scanf and printf statements .PERIOD  So ,COMMA  we will often need input statement and output statements .PERIOD  So ,COMMA  include this by default .PERIOD  Now ,COMMA  if you look at the second line ,COMMA  we will have a function called main .PERIOD  And again ,COMMA  note the parenthesis here that is also part of the syntax .PERIOD  So ,COMMA  main is supposed to be a function .PERIOD  All C programs start by executing the main function and it starts from first statements of the main function .PERIOD  Now ,COMMA  what dose the main function have ?QUESTIONMARK  It has a single line ,COMMA  which says printf Welcome to C .PERIOD  So ,COMMA  printf is the function called to output from a C program .PERIOD  So ,COMMA  to print a particular massage you enclose it in double quotes .PERIOD  So ,COMMA  whatever is enclosed in the double codes ,COMMA  will be printed .PERIOD  So ,COMMA  to repeat again ,COMMA  please note the extra punctuation symbols ,COMMA  which tell you ,COMMA  that these are valid C statements .PERIOD  So ,COMMA  all the underline statements are ,COMMA  all the underline symbols are important .PERIOD  So ,COMMA  in the line printf Welcome to C ,COMMA  this is what is known as a statement in C and statements in C end in a semicolon .PERIOD  So ,COMMA  this semicolon is also important because it tells you ,COMMA  that this is where the statements ends ,COMMA  what typical errors do we have when we code in C .PERIOD  Let us systematically enumerate a few common errors that could happen in even a simple program like what we have seen .PERIOD  For example ,COMMA  you could forget to include <stdio .PERIOD h> .PERIOD  If you do not include the standard input library ,COMMA  then the compiler will give you an error message .PERIOD  You may forget to include the main function ,COMMA  then also you will get some error message .PERIOD  You could forget to include the semicolon in the statement ,COMMA  you could forget to include the braces ,COMMA  the curly braces in main or forget to close the double quote ,COMMA  open or close the double quote in the printf statement .PERIOD  So ,COMMA  these are a few errors that you could make even in a simple code like what we have seen .PERIOD  We have only three lines ,COMMA  but they could also have errors .PERIOD  I would advise you to try deliberately making these mistakes in your code ,COMMA  try compiling them and study the error messages .PERIOD  Once you are familiar with error massages ,COMMA  this will help you later in your coding ,COMMA  because when you see the error massages you can guess what errors did you possibly make in your code .PERIOD  So ,COMMA  go back to the code and correct it .PERIOD   In this session let see another simple program ,COMMA  and try to study what is going on in there .PERIOD  So ,COMMA  here I have slightly more complicated program ,COMMA  then what we just saw .PERIOD  This has two printf statements ;SEMICOLON  once is welcome to ,COMMA  and the second says C programming .PERIOD  So ,COMMA  it is slightly more sophisticated then the code that we have seen .PERIOD  So ,COMMA  to recap the first line # include <stdio .PERIOD h> ,COMMA  tells the compiler to include the standard output library .PERIOD   Then we have the main function ;SEMICOLON  the open and close brackets immediately after name show that main is a function ,COMMA  execution always begins at the first line of the main statement .PERIOD  Then the body of the function the logic of the function is enclosed within two curly braces ;SEMICOLON  the first curly brace signals - beginning of the function ,COMMA  and the last curly brace says that the function is over here .PERIOD  This particular name function has two statements ;SEMICOLON  earlier be have just one statement .PERIOD  The each statement as I said before is terminated with a semicolon .PERIOD  So ,COMMA  this is the first semicolon ,COMMA  and this is the second semicolon .PERIOD  The first semicolon says that the statement printf welcome to ends that point ,COMMA  and then followed by the second statement .PERIOD  And the second statement is also terminated by semicolon .PERIOD  Every statement in C is terminated with the semicolon .PERIOD  Curly braces enclose a set of statement ,COMMA  and each statement in a sequence is executed in the exact sequence that we wrote in the code .PERIOD  Now ,COMMA  once we edit this in an editor save the file ,COMMA  now compile ,COMMA  and run the file .PERIOD  So ,COMMA  let us call it sample .PERIOD c or you may rename it any file you want .PERIOD  And then once the compilation is successful ,COMMA  you can run it using  .PERIOD /a .PERIOD out ,COMMA  and then it will print welcome to C programming ,COMMA  which was essentially the same messages as we seen before .PERIOD   Let us try’s what happens when we execute the program .PERIOD  By tracing we mean step by step looking at each statement ,COMMA  and C’s see what happens when the program executes .PERIOD  We have what is known as a program counter ,COMMA  which says here is the currently executing line of program .PERIOD  The program counter stars executing at the first statement of the mean ,COMMA  for is of reference I have given line numbers in the code .PERIOD  Now this is given just for clarity .PERIOD  Now let us just see ,COMMA  what happens when we run the program line by line .PERIOD  So first we execute the first line of the code ,COMMA  after we are done executing the line 4 .PERIOD  So ,COMMA  after we are done executing lines 3 and 4 ,COMMA  the message welcome to will be printed on the terminal .PERIOD  This will be followed by the next line ,COMMA  so the next lines is C programming .PERIOD  So ,COMMA  after the next line executes ,COMMA  it will print C programming % .PERIOD  I given this in two different colors to highlight that one was printed by the first line ,COMMA  and otherwise printed in second line ,COMMA  otherwise the colors have nosing ,COMMA  no special meaning .PERIOD  The program terminates when the main finishes execution ,COMMA  and this is what is typically known as returning from the function ,COMMA  we will see this terminology later in the course .PERIOD  Now ,COMMA  when you code in addition to the statements which are actually executed ,COMMA  you may also give a few additional remarks ;SEMICOLON  these are what are known as come program comments .PERIOD  For example ,COMMA  the lines a simple C program first print and second print ;SEMICOLON  these are the comments in the code .PERIOD  So ,COMMA  whatever is highlighted in red in the code is what are known as comments .PERIOD  Any text between forward /* ,COMMA  and then later followed by a */ .PERIOD  So ,COMMA  any text between successive /* and */ is a comment ,COMMA  and it will be ignored by the compiler .PERIOD  So ,COMMA  as far as the compiler is concerned a code with comments is the same as a code without comments .PERIOD  It does not effect the logic of the code .PERIOD  So ,COMMA  comments are not part of the program ;SEMICOLON  however ,COMMA  it is highly recommend that any program you write ,COMMA  you should comment the code .PERIOD  This is show that other people can understand your code also you yourself looking at the code 4 months later or five months later ,COMMA  it is it may be difficult to understand what you wrote ?QUESTIONMARK  Much before and comments help you understand the logical of the program .PERIOD   Now ,COMMA  it is a very good idea to comment your programs ,COMMA  and for lager program it is a must to comment the programs .PERIOD  This is standard industry practice ,COMMA  and even if you participating in large programming project like free software projects ,COMMA  comments are highly encouraged ,COMMA  because it will understand other developers ,COMMA  other programmers to understand your code .PERIOD  So ,COMMA  we will try to follow our own advice most of the programs that we will see in this code ,COMMA  we will comment it ,COMMA  so that it easy to follow the logic of the code .PERIOD  Now ,COMMA  a few notes just as a main is a function printf is also a function .PERIOD  Printf is a library function which means that it is given by the C programming language ,COMMA  and we wanted to tell the compiler to include this library function .PERIOD  The statement which set that is this # include <stdio .PERIOD h> .PERIOD  So ,COMMA  # include <stdio .PERIOD h> is the line telling that I want the standard input output library ,COMMA  because that is the library from which I will get the function printf .PERIOD  Now what does printf do ?QUESTIONMARK  Printf takes two arguments ,COMMA  just like arguments to mathematical function .PERIOD  So ,COMMA  it takes an input argument which in our first case was welcome to .PERIOD  So ,COMMA  this was the printf first printf statement in the program that we just soft .PERIOD  Now ,COMMA  this was enclosed in double codes ,COMMA  right .PERIOD  So ,COMMA  it was enclosed in open double quote ,COMMA  and then ended with a close double quote .PERIOD  A sequence of characters in double quotes it is what is known as a string constant .PERIOD  Now we can call the functions that we define or we can call the functions that the library provide .PERIOD  This is how once you define a function ,COMMA  you can call a function .PERIOD  Now we will see an additional concept ,COMMA  the printf statements that we have seen so far ,COMMA  we will print a message and it will print there .PERIOD  And then the prompt the terminal prompt will come immediately after the print .PERIOD  Now typically what we want to do this will print a message ,COMMA  then say tell the prompt to appear on the next line .PERIOD  So ,COMMA  for this we need what is known as the new line character .PERIOD  All letters digits ,COMMA  gamma ,COMMA  punctuation symbol ;SEMICOLON  these are called characters in the C programming language .PERIOD  There are the total of 256 characters in C ,COMMA  256 is 2 to the 8 .PERIOD  So ,COMMA  for example this small letters a to z ,COMMA  capital letters A to Z ,COMMA  0 to 9 ,COMMA  the at symbol ,COMMA  other punctuation symbols like dot ,COMMA  gamma ,COMMA  exclamation mark ,COMMA  and so on ;SEMICOLON  are all characters in C .PERIOD  Now in addition to this there are certain things call special characters .PERIOD  So ,COMMA  there is a special character call new line ,COMMA  in the C programming language it is denoted as \n .PERIOD  So ,COMMA  there are notice that there are two kinds slashes ;SEMICOLON  / ,COMMA  and \ on your keyboard .PERIOD  And the new line character is denoted as \n .PERIOD  So ,COMMA  even though it is single character ,COMMA  it is denoted by two letters .PERIOD  When used in printf it causes the current output line to end ,COMMA  and then printing will start from the new line .PERIOD  So ,COMMA  it is something which says the current line has enter ,COMMA  now whatever you have to print ,COMMA  print it in the next line .PERIOD  The new line character \n is like any other letter ,COMMA  and can be used multiple times in any particular line .PERIOD  For example ,COMMA  if you have something to printfollowed by \n ,COMMA  followed by C ,COMMA  followed by something to print .PERIOD  Now this will be treated as ,COMMA  so many characters and then a new line followed by C .PERIOD  So ,COMMA  let see a particular example ,COMMA  if you have the old program that we just wrote ,COMMA  but we end each message which a \n .PERIOD  So ,COMMA  we have printf welcome to \n ,COMMA  printf C programming \n .PERIOD  When we compile and execute ,COMMA  we will see something new .PERIOD  So ,COMMA  when we run this $ .PERIOD /a .PERIOD out ,COMMA  it will print welcome to ,COMMA  and then the next thing to print is is a \n which is a new line .PERIOD  So ,COMMA  printing will start from the next line ,COMMA  and then it will print the next message with C programming .PERIOD  So ,COMMA  it will print that followed by new line .PERIOD  So ,COMMA  the prompt will appear on the line after words .PERIOD  So ,COMMA  new line character is something that is use to make your output messages a little more here .PERIOD  So ,COMMA  let us just conclude by saying one more thing about new lines ,COMMA  the new line character \n is like any other character ,COMMA  and you can use it multiple times even within single message .PERIOD  For example ,COMMA  if I do the same program ,COMMA  but let us say I have welcome to \n \n C \n .PERIOD  So ,COMMA  I have repeated occurrences of \n in the same message ,COMMA  what it will do is if will print the message welcome to ,COMMA  then it will print a new line ,COMMA  and then it will print another line ,COMMA  and then it will print C followed by new line .PERIOD  So ,COMMA  when you run program you will have welcome to new line ,COMMA  then the blank line ,COMMA  then C ,COMMA  then another line .PERIOD  So ,COMMA  new lines are just like a any other characters ,COMMA  the difference is that ,COMMA  because it is a special character ,COMMA  it is represented by two letter .PERIOD  So ,COMMA  it is not represented by single letter it is represented by \n .PERIOD  So ,COMMA  they are together one character in C ,COMMA  call the new line character .PERIOD  In this session we will see slightly more sophisticated programs .PERIOD  Recall that in our discussion about flowcharts ,COMMA  we talked about variables ,COMMA  which were conceptually seen as little boxes in which you can hold values .PERIOD  So ,COMMA  let us see how to write simple C programs in which we make use of variables .PERIOD  So ,COMMA  we will illustrate with the help of a sample program .PERIOD  So ,COMMA  we have this following program ,COMMA  which is very simple ,COMMA  read a Celsius temperature and convert it into the equivalent Fahrenheit temperature .PERIOD  This is something that all of you must know .PERIOD  So ,COMMA  the flowchart is very simple ,COMMA  you have an input C ,COMMA  which is the current Celsius that you want to convert .PERIOD  Then you apply the formula F ,COMMA  which is 9C/5 + 32 .PERIOD  In this session ,COMMA  we well see how to write simple C programs ,COMMA  which makes use of variables .PERIOD  Recall that in our discussion about flowcharts we talked about variables ,COMMA  which were conceptually seen as little boxes in which you can hold values .PERIOD  So ,COMMA  let us illustrate a simple C program making use of variables with the help of a program .PERIOD  So ,COMMA  we have a small problem ,COMMA  which is convert a Celsius temperature into the equivalent Fahrenheit temperature .PERIOD  This is the formula that all of you must know .PERIOD  So ,COMMA  let us write a C program for it .PERIOD  So ,COMMA  we will draw the simple flowchart for doing the program .PERIOD  You input the temperature in C ,COMMA  in Celsius ,COMMA  convert it into Fahrenheit according to the formula 9C/5 + 32 .PERIOD  Once you have done that ,COMMA  the variable F holds the Fahrenheit value ,COMMA  so you output the F .PERIOD  So ,COMMA  here is the simple flowchart that we want to implement .PERIOD  Now ,COMMA  how do we write the equivalent C code .PERIOD  So ,COMMA  we ,COMMA  in the flowchart we have seen ,COMMA  that we have two variables ,COMMA  C and F .PERIOD  These are the variables that we would want to implement in the C code .PERIOD  So ,COMMA  let us see how to do it .PERIOD  So ,COMMA  we write the following C program in which now we have two more components ,COMMA  one is the variable declaration ,COMMA  float centigrade and then the second is another variable ,COMMA  float Fahrenheit .PERIOD  So ,COMMA  centigrade corresponds to C in the flowchart and Fahrenheit corresponds to F in the flowchart .PERIOD  So ,COMMA  I write the following code ,COMMA  which is supposed to implement the flowchart on the left .PERIOD  So ,COMMA  let us say ,COMMA  that the input is 50 degree Celsius and then the Fahrenheit ,COMMA  the formula is exactly the same as what we have in the flowchart .PERIOD  We have 9C/5 + 32 .PERIOD  Notice here ,COMMA  that these are arithmetic operators .PERIOD  So ,COMMA  the * arithmetic operator stands for multiplication ,COMMA  / stands for division and + stands for addition .PERIOD  So ,COMMA  this is exactly as in the flowchart except ,COMMA  that here in the flowcharts multiplication symbol is being swallowed ,COMMA  but in C you have to specify it using a * operator .PERIOD  So ,COMMA  Fahrenheit equal to 9C/5 + 32 is exactly similar to the analogous line in the flowchart .PERIOD  And finally ,COMMA  for outputting we will use printf statement .PERIOD  So ,COMMA  here is something new in the printf statement .PERIOD  We use what are known us format specifiers ,COMMA  this %f symbols are new and we will describe them shortly .PERIOD  So ,COMMA  let us look at the program in little more detail .PERIOD  So ,COMMA  we have two statements ,COMMA  which are of interest ,COMMA  in the beginning of the code ,COMMA  which are what are known as the definition of the two variables .PERIOD  Recall from are discussion on flowcharts that variables are boxes and each box has a name associated with it .PERIOD  So ,COMMA  you have two concepts associated with variable as far as flowcharts were concerned ,COMMA  one was the box and the second was the name of the box .PERIOD  Now ,COMMA  when we come to C ,COMMA  we will associate a third concept with variable ,COMMA  which is the type of the box .PERIOD  So ,COMMA  if you look at the first statement it says ,COMMA  float centigrade ;SEMICOLON  .PERIOD  Now ,COMMA  this defines a variable centigrades .PERIOD  It creates a box capable of storing a real number and names the box the centigrades .PERIOD  So ,COMMA  the box is of type float .PERIOD  Type float means ,COMMA  that box can hold real number .PERIOD  Similarly ,COMMA  fahrenheit is also a box ,COMMA  which can hold real number .PERIOD  So ,COMMA  you declare that the type of that variable is float .PERIOD  So ,COMMA  these are supposed to be the first two lines of the code .PERIOD  Now ,COMMA  centigrades = 50 that is the line ,COMMA  which assigns the value 50 to the variable centigrades .PERIOD  So ,COMMA  once you execute the code ,COMMA  the box associated with name centigrade will hold the value 50 followed by the line ,COMMA  which computes the value of fahrenheit .PERIOD  So ,COMMA  fahrenheit equal to 9C/5 + 32 .PERIOD  It is an ,COMMA  it associates an arithmetic expression .PERIOD  So ,COMMA  it evaluates an arithmetic expression ,COMMA  takes its value and stores it in the box associated with the fahrenheit .PERIOD  And as we just saw before ,COMMA  * is the multiplication operator ,COMMA  / is the division operator and + is the additional operator .PERIOD  Now ,COMMA  the brackets in an arithmetic expression are just like brackets in mathematics .PERIOD  So ,COMMA  they group together a particular thing .PERIOD  Now ,COMMA  let us just trys to the program .PERIOD  Let us see what happens step by step when we run the program .PERIOD  Let us say that we save the file as sample2 .PERIOD c and then run it as  .PERIOD /a .PERIOD out .PERIOD  So ,COMMA  first we will have two boxes created ,COMMA  one for centigrade and one for fahrenheit .PERIOD  These can store float numbers .PERIOD  Now ,COMMA  what are float numbers ?QUESTIONMARK  Basically ,COMMA  they are real numbers ,COMMA  which are saved by the microprocessor .PERIOD  Now ,COMMA  the microprocessor can store variable real number only using finite precision .PERIOD  So ,COMMA  this is different from actual real numbers that we encounter in mathematics .PERIOD  So ,COMMA  we have only a limited number of digits after the decimal point ,COMMA  but other than that you can think of them as real numbers .PERIOD  We will see floating point number later in the course in greater detail ,COMMA  right .PERIOD  For now ,COMMA  think of them as the machine representation of a real number .PERIOD  So ,COMMA  once you finish the declaration statements what you have are two boxes one first centigrade one for Fahrenheit and because you declare the types to be float it is under stood that those boxes will hold real number .PERIOD  So ,COMMA  let us execute the first executable assignment here .PERIOD  centigrades = 50 and you will see that the box contains 50 .PERIOD 000 something .PERIOD  Even though we specified it as an integer ,COMMA  it will convert it into real number ,COMMA  floating pointing number and store it .PERIOD  Then this is followed by the calculation of the Fahrenheit value ,COMMA  and let us say that you compute 9 times 50 divided by 5 plus 32 ,COMMA  it comes out as 122 .PERIOD  After that line is executed ,COMMA  the box associated with Fahrenheit will contain 122 .PERIOD  Then ,COMMA  the next line says ,COMMA  print ,COMMA  printf the temperature ,COMMA  there is no new line ,COMMA  so the next printf will start from where this printf ended and here you see something new ,COMMA  which is the %f symbol .PERIOD  So ,COMMA  these are what are known as format specifiers .PERIOD  So ,COMMA  the %f symbol say ,COMMA  that take the corresponding variable ,COMMA  which is given centigrades here .PERIOD  Now ,COMMA  print it as a float ,COMMA  print it as a real number .PERIOD  So ,COMMA  notice the difference between first printf and the second printf .PERIOD  The first printf just had a string between “ ,COMMA  the second printf has two arguments ,COMMA  one is a string between “ and the string is %f and then the second argument is centigrades .PERIOD  So ,COMMA  it says take value of the centigrade and print it as a floating point number .PERIOD  So ,COMMA  it does that and you see 50 .PERIOD 000 in the output .PERIOD  There is no new line .PERIOD  So ,COMMA  the next printf starts from the previous line where the previous printf left off ,COMMA  50 Celsius equals ,COMMA  it prints that .PERIOD  And now ,COMMA  you have another format specifier .PERIOD  It says printf %f fahrenheit .PERIOD  fahrenheit is 122 and it will print it as floating point number or as real number .PERIOD  So ,COMMA  it will print it as 122 .PERIOD 000 printf fahrenheit .PERIOD  So ,COMMA  the finial massage ,COMMA  that well be printed will be the temperature ,COMMA  50 centigrade ,COMMA  50 Celsius equals 122 Fahrenheit .PERIOD  So ,COMMA  the new thing we have seen in the program include variable definitions ,COMMA  how they have an associated type and similarly ,COMMA  how do we print these variables .PERIOD  So ,COMMA  we do not want to print the names of the variables ,COMMA  we want to print the ,COMMA  we want to print the content of the variable .PERIOD  We want to print what is stored in the box .PERIOD  For that we use the format specifiers like these %f .PERIOD   So ,COMMA  let us briefly introduce what are types in C .PERIOD  So ,COMMA  variables are the names of the boxes in which to store values ,COMMA  but these boxes are special .PERIOD  Certain boxes can hold only certain kinds of values ,COMMA  so all boxes are not the same .PERIOD  There are different kinds of boxes .PERIOD  Now ,COMMA  types are basically saying ,COMMA  that a particular box can hold a particular kind of data .PERIOD  So ,COMMA  variables are defined with an associated type and we will use some basic types during the course of this program language tutorial .PERIOD  One of the two common type ,COMMA  two of the common types that we see in this program are int ,COMMA  which stands for an integer and float ,COMMA  which stands for a floating point number ,COMMA  which stands for real number .PERIOD  Notice ,COMMA  that machine can hold only a fix number of bits .PERIOD  So ,COMMA  that does not mean ,COMMA  that the integer can go from minus infinite to infinite .PERIOD  It goes from a certain vary small negative number to a very large positive number .PERIOD  Similarly ,COMMA  floating point also is limited by a particular range .PERIOD  This is because machines cannot represent arbitrary values .PERIOD  The type of integer can store all numbers from M+1 ,COMMA  .PERIOD  .PERIOD  .PERIOD 0 ,COMMA 1 ,COMMA  .PERIOD  .PERIOD  .PERIOD  ,COMMA M .PERIOD  So ,COMMA  there will be some large M ,COMMA  for which ,COMMA  for which defines the upper limits and the lower limits of the particular machine .PERIOD  Now ,COMMA  that limit may depend on which particular machine that you use .PERIOD  On a ,COMMA  on a 32-bit machine it will be 232  ,COMMA  M will be 232 .PERIOD  A few final words about variables .PERIOD  Just like in a cooking recipe ,COMMA  you well never mention a step ,COMMA  which involves ingredient without mentioning ,COMMA  that ingredient is needed in the first place .PERIOD  So ,COMMA  you will never say ,COMMA  that use salt and if you look at the list of ingredients ,COMMA  you were ,COMMA  you will see ,COMMA  that there is no salt in the list of ingredients .PERIOD  Such recipes are considered bad .PERIOD  So ,COMMA  when you write a typical recipe ,COMMA  you list out all the ingredients first and then write the steps for the cooking .PERIOD  Similarly ,COMMA  in a program you define whatever variables that you need before those variables are used by any statement in the program .PERIOD  Always define a variable before use .PERIOD  Now ,COMMA  a word about names of variables in the C programming language .PERIOD  The names are consisting of numbers ,COMMA  letters and an underline symbol ,COMMA  an underscore symbol .PERIOD  And there is a particular convention that a variable cannot start with a number .PERIOD  So ,COMMA  the initial letter has to be a letter or an _ ,COMMA  it cannot be number ,COMMA  but further can be either capital letter ,COMMA  small letter or numbers or an _ .PERIOD  So ,COMMA  there are valid names like c_sq ,COMMA  csq1 ,COMMA  c_sq_1 .PERIOD  So ,COMMA  all these are valid .PERIOD  One thing to note is ,COMMA  that the names are sensitive to upper and lower case .PERIOD  So ,COMMA  for example ,COMMA  capital C Centigrade is different from a centigrade ,COMMA  which starts with a small c .PERIOD  So ,COMMA  these are two distinct variables that is the common source of errors when we start programming .PERIOD  Another thing to note or to watch out for is ,COMMA  that the assignment operation ,COMMA  which is equal to is not the same as mathematical equal .PERIOD  So ,COMMA  when mathematically we you say a equal to b ,COMMA  it means ,COMMA  that a and b are the same quantity .PERIOD  So ,COMMA  a equal to b is the same as saying b equal to a .PERIOD  This is not true in C .PERIOD  For example ,COMMA  let us say ,COMMA  that you have the statements b = 3 ;SEMICOLON  and then later you have a = 2 ;SEMICOLON  and further you have the statement a = b ;SEMICOLON  So ,COMMA  the statement a equal to b will set a to b's value .PERIOD  So ,COMMA  b's value is 3 and that value will be copied to a .PERIOD  So ,COMMA  it will set a to 3 and b we will be unchanged .PERIOD  So ,COMMA  watch out for this .PERIOD  If ,COMMA  if you were expecting the mathematical operator ,COMMA  after the operation a = b ,COMMA  a and b we will have the same value ,COMMA  but that is not the case .PERIOD  The meaning of the symbol equal to is ,COMMA  that take the value on the right hand side of the expression and copy that into the box specified by the life side .PERIOD  So ,COMMA  copy the value in the right hand side to the variable on the left .PERIOD  We have seen comparison operators ,COMMA  like less then ,COMMA  equal to ,COMMA  less than or equal .PERIOD  to and so ,COMMA  on .PERIOD  We will see bunch of few more operators in this session .PERIOD  So ,COMMA  let  us consider the modulo operator which we have already seen in when we discussed utility in GCD .PERIOD  So ,COMMA  a % b gives the reminder when a is divided by b .PERIOD  So ,COMMA  suppose we have the following problem ,COMMA  we get a number a and we want to check whether the given number is divisible by 6 .PERIOD  If it is divisible by 6 a % 6 will be 0 the reminder will be 00 .PERIOD  So ,COMMA  we will write a simple code ,COMMA  you have int a ,COMMA  a is of type int .PERIOD  Then ,COMMA  scan the number using scanf( “%d” ,COMMA  &a) .PERIOD  And then ,COMMA  you test whether a is divisible by 6 to test whether a is divisible by 6 you check whether a mod 6 is 0 .PERIOD  If it is divisible ,COMMA  you say that input is divisible by 6 %d a .PERIOD  Otherwise ,COMMA  else ,COMMA  printf the input is not divisible by 6 very simple operation .PERIOD  Now ,COMMA  let us make it slightly more elaborate .PERIOD  Suppose ,COMMA  you have to test whether ,COMMA  this a slight variant .PERIOD  Suppose ,COMMA  you have to test whether a give number is divisible by 6 and by 4 two numbers .PERIOD  How do you do this ?QUESTIONMARK  So ,COMMA  you scanf the number and you test whether a is divisible by 6 .PERIOD  So ,COMMA  a % 6 is 0 .PERIOD  If that is true ,COMMA  then you also check whether a % 4 is 0 .PERIOD  If both are true ,COMMA  then you print that the given number is divisible by 6 and 4 .PERIOD  So ,COMMA  percentage is divisible by 6 and 4 a .PERIOD  So ,COMMA  you can argue about this program and see that ,COMMA  if it is divisible by 6 ,COMMA  but not by 4 then ,COMMA  it will enter the first if ,COMMA  but not enter the second if .PERIOD  Therefore ,COMMA  it will not print that it is divisible by 6 and 4 .PERIOD  Similarly ,COMMA  if it is not even divisible by 6 it will not even enter the first if condition .PERIOD  So ,COMMA  you will in any case not print that it is divisible .PERIOD  So ,COMMA  convince yourself that this particular code will print a number is divisible by 6 and 4 if and only if the given number is divisible by both 6 and 4 .PERIOD  Now ,COMMA  that piece of code was slightly long is there any way to write the same code with a fewer number of lines .PERIOD  And for this c provides what are known as logical operators .PERIOD  Now ,COMMA  there are three logical operators in Boolean logic which are Boolean AND ,COMMA  Boolean OR and Boolean NOT .PERIOD  So ,COMMA  there are three logical operations AND ,COMMA  OR and NOT and C provides all of them .PERIOD  So ,COMMA  the same if condition that we wrote before ,COMMA  we could have easily said if it is divisible by 6 and if it is divisible by 4 then print the output .PERIOD  So ,COMMA  for this C provides an operator which is the Boolean AND operation .PERIOD  So ,COMMA  the Boolean AND operation in C is given by two ANDs .PERIOD  So ,COMMA  by know you should be familiar with the fact it certain operations in C have repeated characters .PERIOD  For example ,COMMA  we already have seen the equality operations which was equal ,COMMA  equal .PERIOD  Similarly ,COMMA  the Boolean operation and it is actually the and symbol on the keyboard .PERIOD  But ,COMMA  you have to have two of them that represents the logical AND .PERIOD  So ,COMMA  this expression says if a % 6 is 0 .PERIOD  So ,COMMA  this expression is what test for a is a multiple of 6 .PERIOD  And this is the expression which test whether a is the multiple of 4 .PERIOD  So ,COMMA  if both conditions are true ,COMMA  then you say that the given number is divisible by 6 and by 4 .PERIOD  So ,COMMA  consecutive ampersand signs ,COMMA  that is the and symbols without any blanks in between is the C operator corresponding to the mathematical and the logical AND function .PERIOD  So ,COMMA  it takes two values as input and returns a 0 .PERIOD  If any of the values is 0 ,COMMA  if both values are 1 then it returns a 1 .PERIOD  So ,COMMA  this is the same as the logical AND .PERIOD  If either of them is 0 then the result is 0 ,COMMA  if both of them are 1 ,COMMA  then the result is 1 .PERIOD  So ,COMMA  the truth table for the operation AND is as follows if a is a non-zero value and b is a non-zero value ,COMMA  then C considers that both are true .PERIOD  So ,COMMA  the output value is of a and b is 1 .PERIOD  If a is 0 and b is any value at all the output is 0 and b is not evaluated .PERIOD  So ,COMMA  this the same as logical end .PERIOD  The only think to notice that ,COMMA  if in evaluating a and b you already know that a is 0 ,COMMA  then you know the result is 0 .PERIOD  So ,COMMA  C will not bother to evaluate b .PERIOD  Because ,COMMA  it knows that the result is already 0 .PERIOD  Every expression has a type a and b is of type int regardless of the types of a and b .PERIOD  This is because a and b is a logical assertion .PERIOD  The type of a logical assertion is that ,COMMA  it is either true or false ,COMMA  it that it corresponds to a Boolean value .PERIOD  Therefore ,COMMA  at the type of an a and then b regardless of what a and b are the result is always 0 or 1 .PERIOD  So ,COMMA  it is of type int .PERIOD  Now ,COMMA  you can print the result as an int ,COMMA  you can say printf %d a and then b .PERIOD  Now ,COMMA  there are three logical operations as I mention .PERIOD  So ,COMMA  there is also OR in c it is denoted by two vertical bars which are there on your keyboard .PERIOD  So ,COMMA  a or b which is a || b evaluates to non-zero if either a is non-zero or b is non-zero .PERIOD  If both of them are zero ,COMMA  then the result is zero .PERIOD  So ,COMMA  this the meaning of a logical OR operation ,COMMA  if both of them are false ,COMMA  then a or b is false .PERIOD  If at least one of them is true then a or b is true .PERIOD  So ,COMMA  you can write the truth table for that .PERIOD  If a and b are 0 then the output is 0 ,COMMA  if a is non zero and b is any value .PERIOD  Then ,COMMA  in already know that the output of a or b is 1 .PERIOD  So ,COMMA  the output is 1 and b will not be evaluated .PERIOD  This is similar to in the case of AND .PERIOD  If a was 0 and b was any other value ,COMMA  then you know that the output of and is 0 .PERIOD  Therefore ,COMMA  b will not be evaluated .PERIOD  Similarly ,COMMA  if here if a is non-zero ,COMMA  then you know the value is 1 .PERIOD  So ,COMMA  b will not evaluated and as before a or b is of type int .PERIOD  So ,COMMA  the third logical operation is NOT .PERIOD  Now ,COMMA  NOT in C is denoted as the exclamation mark .PERIOD  So ,COMMA  let us see an example of that .PERIOD  So ,COMMA  NOT is the logical complement and it takes only one argument ,COMMA  this is different from the previous two that we have seen a or b and a and b both took two arguments it is not takes only one arguments .PERIOD  So ,COMMA  it is called a unary operators .PERIOD  So ,COMMA  NOT of a is an expression of type integer and the value is the negation of a .PERIOD  So ,COMMA  if a is 0 NOT of a will be 1 and if a is non zero then NOT of a will be 0 .PERIOD  So ,COMMA  for example ,COMMA  if I want to say that a is not divisible by 3 I will just write NOT of a mod 3 equal to 0 .PERIOD  You know that a mod 3 equal to 0 test for a being divisible by 3 .PERIOD  So ,COMMA  negation of that it will say that the given number is not divisible by 3 .PERIOD  Let us finish this by slightly complicated example which is that of leap years .PERIOD  So ,COMMA  I am given a particular year number and I want say whether the given number is a corresponds to leap year or not .PERIOD  Now ,COMMA  what is a leap year it is that you add a few years will have February 29th in February all other years will have 28 days in February .PERIOD  So ,COMMA  what is the logic of a leap year .PERIOD  So ,COMMA  roughly an average solar year is 365 .PERIOD 242375 rotations .PERIOD  So ,COMMA  in particular is not an integer .PERIOD  So ,COMMA  we normally say that year has 365 days that is not quite true ,COMMA  this it is a rounding .PERIOD  So ,COMMA  how much are we losing .PERIOD  So ,COMMA  you can calculate it as follows .PERIOD  The remaining number after the decimal point is a roughly 0 .PERIOD 25 .PERIOD  So ,COMMA  at a rough cut let say that every 4 years .PERIOD  Because of this 0 .PERIOD 25 you will lose one day .PERIOD  So ,COMMA  every year you are losing about a quarter of a day .PERIOD  So ,COMMA  if every 4 years you will add a day .PERIOD  Now ,COMMA  when you do that you go back to .PERIOD  .PERIOD  .PERIOD  So ,COMMA  just a minute .PERIOD  So ,COMMA  you have 365 point let us say 25 .PERIOD  So ,COMMA  every 4 years you would lose about a day approximately 1 day .PERIOD  So ,COMMA  in order to compensate for that you add 1 day every 4 years .PERIOD  So ,COMMA  in 100 years you would have added 25 days .PERIOD  But ,COMMA  that is 1 day too much .PERIOD  Because ,COMMA  remember that this number is only 365 .PERIOD 24 something .PERIOD  So ,COMMA  in 100 days you should have added only 24 days .PERIOD  But ,COMMA  now you added a 25 days .PERIOD  So ,COMMA  to compensate for that every 100 year skip adding the extra day .PERIOD  So ,COMMA  every 4 years you have add 1 extra day ,COMMA  ,COMMA  but every 100 years every 100th year you do not add that extra day ,COMMA  you skip it .PERIOD  Because ,COMMA  you would have added 1 more day then you .PERIOD  And then again you can look at what remains ,COMMA  what remains is roughly  .PERIOD 24 which means that every 400 years if you do this adjustment you are losing about a day .PERIOD  Because ,COMMA  every 100 years you are losing about quarter of a day from this 0 .PERIOD 2375 part .PERIOD  So ,COMMA  you do the same logic again every 400 years .PERIOD  So ,COMMA  every 400 years add an extra day .PERIOD  So ,COMMA  this is the logic of the leap year that we all know .PERIOD  So ,COMMA  how do you decide whether year will be leap year .PERIOD  So ,COMMA  the logic that I have outlined just now says that ,COMMA  if a year is a multiple of 4 then it is a leap year .PERIOD  But ,COMMA  if a year is a multiple of 100 as well then it is not a leap year .PERIOD  But ,COMMA  if it is a multiple 400 than it is a leap year .PERIOD  So ,COMMA  here is a pretty complicated expression .PERIOD  So ,COMMA  every 4th year is a leap year .PERIOD  But ,COMMA  skip every 100th year unless it is also a 400th year .PERIOD  And you can write this expression in C ,COMMA  it is slightly complex has you can imagine .PERIOD  So ,COMMA  if the first line the first expression says that ,COMMA  wise year is a multiple of 4 .PERIOD  So ,COMMA  if year is divisible by 4 also the following should be true ,COMMA  it should not be a multiple of 100 unless it is a multiple of 400 .PERIOD  So ,COMMA  it should not be divisible by 100 that should be true or it should be true that ,COMMA  it should be a multiple of 400 .PERIOD  For example ,COMMA  if you have 400 then it is a leap year .PERIOD  So ,COMMA  what will happen is that year modulo 4 400 modulo 4 is 0 .PERIOD  Then ,COMMA  what happens is that you have 400 modulo 100 that is 0 .PERIOD  So ,COMMA  this is equal to 0 that is 1 NOT of 1 is 0 .PERIOD  So ,COMMA  this part is entirely 0 ,COMMA  but it is divisible by 400 ,COMMA  400 divided by 400 is 0 .PERIOD  Therefore ,COMMA  this part is true ,COMMA  this or 0 or 1 is true .PERIOD  Therefore ,COMMA  the whole expression becomes 1 and 1 .PERIOD  So ,COMMA  it is true .PERIOD  So ,COMMA  this logical expression slightly complicated logical expression encodes the logic for saying that the given year is a leap year .PERIOD  So ,COMMA  try this out yourself this is a slightly tricky expression .PERIOD  And convince yourself that ,COMMA  this exactly encodes the logic of the leap year .PERIOD  In this session ,COMMA  we will look at loops in the C Programming language .PERIOD  And we will start with very basic kind of loop which is known as the while statement .PERIOD   So ,COMMA  the general form of a while statement this similar to that of and if which is that there is an expression and you say while that expression ,COMMA  then do this statement .PERIOD  So ,COMMA  the flow chart corresponding to the while expression will be ,COMMA  you test whether the expression is true or false .PERIOD  If it is true you do this statement ,COMMA  if it is false you exit out of the loop and execute the next statement outside the loop .PERIOD  So ,COMMA  if the expression is true in C that is the expression is non-zero ,COMMA  then execute the statement and go to the step outside the loop .PERIOD  If it is false then directly go outside the next statement after the while loop .PERIOD  This is similar if you recall to the ,COMMA  if block without the else .PERIOD  So ,COMMA  loops are a new thing that explicitly there was no loop construct in a flow chart ,COMMA  we just had this way of going back to the expression .PERIOD  But ,COMMA  in programming languages loops are such a basic programming need that in addition to the if block ,COMMA  you have loop construct as well .PERIOD  So ,COMMA  slightly different variant of the while expression will be that while expression statement 1 and then statement 2 .PERIOD  So ,COMMA  the flow chart here is easy to follow if the .PERIOD  .PERIOD  .PERIOD  So ,COMMA  if first test whether the expression is true .PERIOD  If the expression is true then you execute statement 1 .PERIOD  And then after you execute statement 1 ,COMMA  then go to go back to the expression .PERIOD  If the expression is false then you go to statement 2 .PERIOD  So ,COMMA  while the expression is true execute statement 1 and if the expression is false ,COMMA  then execute statement 2 .PERIOD  So ,COMMA  the difference in the ,COMMA  if condition will be that if this was an if block .PERIOD  Then ,COMMA  if the expression is true you do statement 1 and you exit out of the while loop .PERIOD  And that is not done in the case of a normal while loop .PERIOD  After you execute the statement you go back to the expression .PERIOD  So ,COMMA  as long as the expression is true you keep executing statement 1 and if the expression becomes false then you execute statement 2 .PERIOD  So ,COMMA  let us illustrate the use of a while loop with the help of a program .PERIOD  So ,COMMA  we will introduce a very simple problem which is ,COMMA  read a sequence of integers from the terminal until -1 is encountered .PERIOD  So ,COMMA  -1 signals that the input is at end .PERIOD  Now ,COMMA  what I want do is that sum up all the numbers until the -1 and output the sum .PERIOD  It is a very simple program .PERIOD  What you have to do is to read a sequence of numbers ,COMMA  until you hit the first -1 and then add this numbers and output their sum .PERIOD  So ,COMMA  let us first introduce the very simple loop which will do only the basic thing of reading the numbers until a -1 is encounter .PERIOD  So ,COMMA  how do you write the loop you have stdio .PERIOD h .PERIOD  And then you declare an integer variable and read the variable .PERIOD  So ,COMMA  this is supposed to be the first number .PERIOD  If that number is -1 then you do not have to read any more numbers .PERIOD  So ,COMMA  if the number is not -1 .PERIOD  So ,COMMA  if a = -1 is false then you read one more number .PERIOD  After you read one more number you do not finish the loop ,COMMA  you go back and test whether the loop condition is still true .PERIOD  So ,COMMA  you go back and check whether the second number you read was -1 or not .PERIOD  And then ,COMMA  you keep on reading it until you hit a -1 .PERIOD  At some point when you hit a -1 you go back to the loop and the condition that a = -1 will be true .PERIOD  So ,COMMA  NOT of that will be false and you will exit the loop .PERIOD  So ,COMMA  read the first number if it is a -1 do not enter the loop ;SEMICOLON  otherwise ,COMMA  keep on reading numbers until you hit a -1 .PERIOD  That is the meaning of the while loop .PERIOD  So ,COMMA  let us just trace the execution of the loop on a sample input to understand how it works .PERIOD  So ,COMMA  in a box I will represent the memory location a and its current content .PERIOD  So ,COMMA  I run the program after compiling a .PERIOD out and let us say that I enter the number 4 .PERIOD  Now ,COMMA  you scan the number 4 .PERIOD  So ,COMMA  memory location a becomes 4 .PERIOD  Now ,COMMA  4 is not -1 .PERIOD  So ,COMMA  you enter the loop .PERIOD  So ,COMMA  then n let us say the next number is 50 ,COMMA  you read the number into a .PERIOD  So ,COMMA  memory location a is now 15 ,COMMA  15 is not -1 .PERIOD  So ,COMMA  you again enter the loop ,COMMA  you enter -5 ,COMMA  -5 is not -1 .PERIOD  So ,COMMA  you enter the loop again .PERIOD  At this point you enter ,COMMA  you scan the number into a and a becomes -1 .PERIOD  So ,COMMA  you go back to the loop again and now the test that so ,COMMA  a = -1 ,COMMA  so ,COMMA  naught of that is false .PERIOD  So ,COMMA  the while condition becomes false at this point you exit the program .PERIOD  So ,COMMA  this is a very simple part of the program that we want to write ,COMMA  recall that we want to read a bunch of numbers and sum them .PERIOD  And the end of the numbers is represented by a -1 .PERIOD  Until now we have just read those numbers .PERIOD  In this session ,COMMA  we will continue the program that we were writing .PERIOD  Recall that ,COMMA  we were writing a while loop ,COMMA  which will read a bunch of numbers .PERIOD  And it is supposed to sum them up ,COMMA  until you hit a -1 .PERIOD  In the loop that we have seen ,COMMA  so far we just read the numbers until -1 was encountered .PERIOD  So ,COMMA  let us now complete the program and compute their sum as well .PERIOD  So ,COMMA  for computing there sum ,COMMA  how do we normally do it ?QUESTIONMARK  We will add numbers two at a time .PERIOD  So ,COMMA  the first two numbers will be added .PERIOD  Then ,COMMA  that sum will be added to the third number and so on ,COMMA  until you hit a -1 .PERIOD  So ,COMMA  let us try to do that ,COMMA  in the course of a while loop .PERIOD  What I will declare is ,COMMA  I will declare a new variable s .PERIOD  So ,COMMA  here is the new variable s that ,COMMA  I have declared .PERIOD  s is supposed to the hold the sum of the variables that ,COMMA  I have read so far .PERIOD  Now ,COMMA  it is very ,COMMA  very important that ,COMMA  when you declare a variable ,COMMA  you should initialize them properly .PERIOD  In the case of a ,COMMA  we did not initialize it because ,COMMA  we were reading the first number ,COMMA  as soon as was declared .PERIOD  But ,COMMA  in the case of sum ,COMMA  you would use s to maintain the sum ,COMMA  as you read numbers .PERIOD  So ,COMMA  it is important that ,COMMA  you start with s = 0 .PERIOD  So ,COMMA  the initialization step marked by this arrow is quite important .PERIOD  If you do not initialize it properly ,COMMA  then the sum may not be correct ,COMMA  as we will see soon .PERIOD  So ,COMMA  we keep a variable s ,COMMA  which is supposed to hold the sum of n numbers ,COMMA  sum of these numbers and initialize the sum to 0 .PERIOD  Then ,COMMA  the difference from the loop that ,COMMA  we have seen so far is highlighted in red .PERIOD  So ,COMMA  earlier recall that ,COMMA  we were reading the number .PERIOD  And just testing ,COMMA  whether the number is 1 ,COMMA  if it was not -1 ,COMMA  you read one more number so ,COMMA  that was the loop .PERIOD  Now ,COMMA  inside the loop ,COMMA  what we will do is ,COMMA  we will keep up ,COMMA  running sum of the numbers that we have seen so far .PERIOD  So ,COMMA  initially s sum is initialized to 0 .PERIOD  Then ,COMMA  if the first number is not -1 ,COMMA  you add the first number to s .PERIOD  So ,COMMA  s will now be the first number .PERIOD  Now ,COMMA  read the second number .PERIOD  If the second number is not -1 ,COMMA  you will enter the loop again .PERIOD  So ,COMMA  you will add the second number to s .PERIOD  So ,COMMA  s is now first number plus second number .PERIOD  And this keeps on going until you hit -1 ,COMMA  in the input .PERIOD  So ,COMMA  let us continue with this .PERIOD  Let us try to trace the execution of this program ,COMMA  on a sample input and try to understand ,COMMA  how it works .PERIOD  Let us say that ,COMMA  I compile the program successfully and run the program .PERIOD  So ,COMMA  I run a dot out and let us as before ,COMMA  let us the first number be 4 .PERIOD  So ,COMMA  after initialization ,COMMA  when you declare the variable a is undefined and s is also undefined .PERIOD  After the initial statement ,COMMA  s = 0 ,COMMA  s is now 0 .PERIOD  And then ,COMMA  you scan the variable a .PERIOD  So ,COMMA  a becomes 4 ,COMMA  because 4 was the input .PERIOD  And sum is still 0 .PERIOD  You enter the loop and you say ,COMMA  s = s + a .PERIOD  So ,COMMA  sum becomes 0 plus 4 ,COMMA  which is 4 .PERIOD  And you read the next number .PERIOD  Let us say the next number was 15 .PERIOD  So ,COMMA  a becomes 15 ,COMMA  a is not -1 .PERIOD  Therefore ,COMMA  you enter the loop again .PERIOD  And sum is now 4 plus 15 ,COMMA  which is 19 .PERIOD  So ,COMMA  sum at any point of time is the sum of the number that ,COMMA  we have read so far .PERIOD  So ,COMMA  we have read 4 and 15 .PERIOD  So ,COMMA  the sum is 19 .PERIOD  Now ,COMMA  you read the next number .PERIOD  Let us say ,COMMA  the next number was -5 .PERIOD  -5 is not -1 .PERIOD  Therefore ,COMMA  you enter the loop again s equal to s plus -5 .PERIOD  So ,COMMA  s becomes 14 .PERIOD  Then ,COMMA  you read the next number .PERIOD  And let us say ,COMMA  the next number was -1 .PERIOD  So ,COMMA  since the number read is -1 .PERIOD  You go back to the loop .PERIOD  And this condition becomes false .PERIOD  So ,COMMA  you exit out of the loop .PERIOD  And then print that ,COMMA  the sum is let us say 14 .PERIOD  So ,COMMA  when you verify it by hand ,COMMA  you would see 4 plus 15 plus -5 is 14 .PERIOD  So ,COMMA  you have ,COMMA  the program has executed correctly .PERIOD  The important thing to note is ,COMMA  the final -1 is not summed up .PERIOD  So ,COMMA  that is ,COMMA  it is used as the end of the input and you should not compute the sum of the numbers ,COMMA  including -1 .PERIOD  -1 is excluded .PERIOD  Then ,COMMA  the program executed ,COMMA  correctly .PERIOD   We will introduce a few terminology associated with the notion of a loop .PERIOD  Each execution of a loop is known as an iteration .PERIOD  So ,COMMA  in the above loop ,COMMA  when the input was 4 ,COMMA  15 -5 -1 ,COMMA  the loop runs for three iterations ,COMMA  corresponding to the inputs 4 ,COMMA  15 and -5 .PERIOD  So ,COMMA  for input -1 ,COMMA  the loop is broken .PERIOD  So ,COMMA  you do not enter the loop .PERIOD  So ,COMMA  you do not count an iteration corresponding to -1 .PERIOD  So ,COMMA  you entered four numbers including the -1 and the loop executed three times .PERIOD  So ,COMMA  you say that ,COMMA  the loop had three iterations .PERIOD  So ,COMMA  this is a technical term associated with the loops .PERIOD  And here is a concept that ,COMMA  I will introduce to help you argue about the correctness of a loop .PERIOD  So ,COMMA  there is a notion known as a loop invariant .PERIOD  Now ,COMMA  a loop invariant is a property relating values of the variable that holds at the beginning of each loop .PERIOD  So ,COMMA  thus bit abstract let me just illustrate with the example ,COMMA  that we just saw .PERIOD  So ,COMMA  loop invariants are a good way of thinking about the correctness of loops that ,COMMA  you have to do .PERIOD  So ,COMMA  in our program what will be the loop in invariant ?QUESTIONMARK  Let us look at the property of that ,COMMA  we are interested in .PERIOD  There are two variables in the program ,COMMA  s and a .PERIOD  And both of those variables are involved in the loop .PERIOD  But ,COMMA  the interesting property that we have relates to s .PERIOD  What is the property that ,COMMA  s holds with respect to the loop .PERIOD  So ,COMMA  we can see that ,COMMA  s holds the sum of all values read so far ,COMMA  except the last value is that true ,COMMA  the first time that we enter the loop ?QUESTIONMARK  Yes ,COMMA  because s was initialized to 0 .PERIOD  And you had actually read the number .PERIOD   So ,COMMA  it is true that ,COMMA  s holds the sum of all values ,COMMA  except the first one .PERIOD  So ,COMMA  that is true ,COMMA  when you first enter the loop .PERIOD  And that ,COMMA  any point when you enter the loop ,COMMA  you sum the last value that was the read .PERIOD  And read one more number .PERIOD  So ,COMMA  you will see that ,COMMA  s still holds the sum of all values read so far ,COMMA  except the last one .PERIOD  So ,COMMA  this is the loop invariant in the program .PERIOD  And loop invariants help you ,COMMA  argue about the correctness of the loops .PERIOD  So ,COMMA  if the loop invariant is correct and the program maintains loop invariant ,COMMA  then the value of s when the program stops ,COMMA  will be correct .PERIOD  Why is that ?QUESTIONMARK  Because ,COMMA  the loop terminates ,COMMA  because the last value read was a -1 .PERIOD  And the invariants says that ,COMMA  s holds the sum of all values ,COMMA  except the last value .PERIOD  So ,COMMA  this means that s holds the sum of all numbers ,COMMA  except the -1 .PERIOD  Therefore ,COMMA  when the program ends that is ,COMMA  you exit out of the loop ,COMMA  s holds the sum of all number that you were supposed to add .PERIOD  So ,COMMA  here is how arguing about loop invariant and seeing ,COMMA  whether loop invariant holds in the loop that you have written ,COMMA  helps you argue that the program is correct .PERIOD  We will see a few more examples ,COMMA  because loops are really important .PERIOD  Let us go back to the first problem that we discussed ,COMMA  which was the problem of computing the greatest common divisor of two positive numbers .PERIOD  So ,COMMA  the problem is to read the two numbers ,COMMA  find their GCD and compute the output .PERIOD  Now ,COMMA  we had a flowchart of the problem based on the fact that ,COMMA  if a >= b ,COMMA  then GCD(a ,COMMA 0) if b is 0 ,COMMA  then GCD(a ,COMMA 0) is a .PERIOD  Otherwise ,COMMA  GCD(a ,COMMA b) is the same as GCD(b ,COMMA  a%b) ,COMMA  with a % b is a % b is the remainder ,COMMA  when a / b .PERIOD  So ,COMMA  let us now try to write the program in C using a while loop .PERIOD  So ,COMMA  we have to do a few preliminary things .PERIOD  So ,COMMA  let us call up the first half of the program .PERIOD  In the first half I declare three variables ,COMMA  a ,COMMA  b and there is another variable t ,COMMA  whose need we will see right now .PERIOD  But ,COMMA  let us say that I need an extra variable for now ,COMMA  let us just take it on faith .PERIOD  So ,COMMA  what I will do is scan two variables a and b .PERIOD  Now ,COMMA  recall in the GCD equation that we saw right now ,COMMA  we assume that a >=b .PERIOD  Now ,COMMA  what if the user is unaware of his condition and enter the lesser number first .PERIOD  So ,COMMA  he just entered the numbers in such a way that ,COMMA  a < b .PERIOD  So ,COMMA  we need to correct that ,COMMA  we need to make sure that a is the greater number .PERIOD  So ,COMMA  we need to exchange the values of a and b ,COMMA  if it is true that a is less then b .PERIOD  Now ,COMMA  how do we do this ?QUESTIONMARK  So ,COMMA  the first thing to note to try will be to say that for example ,COMMA  if I say that let us say a was 3 and b was 4 .PERIOD  And suppose ,COMMA  I just said a = b I want to exchange the values of a and b .PERIOD  I just said a = b and b = a .PERIOD  What will be the effect of this ?QUESTIONMARK  Note that ,COMMA  this is the assignment statement .PERIOD  So ,COMMA  after I execute this line ,COMMA  b is 4 so ,COMMA  a will be 4 ,COMMA  a = b results in a equal to 4 .PERIOD  After the execution of this line .PERIOD  So ,COMMA  what this situation that we will have is that b equal to 4 and a equal to 4 .PERIOD  And we will have no memory of ,COMMA  what was the original value of a ?QUESTIONMARK  That is lost .PERIOD  So ,COMMA  it is just simply lost .PERIOD  So ,COMMA  this idea that we can exchange two values by just writing a equal b ,COMMA  b = a does not work .PERIOD  So ,COMMA  what is the correct way to do it ?QUESTIONMARK  So ,COMMA  we have an idea known as the cyclic exchange and this is a really neat idea .PERIOD  The idea is that… So ,COMMA  how can I motivate it ?QUESTIONMARK  Let us say that you have two rooms and these two rooms are full of steps .PERIOD  And I want to change the contents of the first room to the second and the second room to the third .PERIOD  One way I can do it is that I will move the contents of the first room to a different room .PERIOD  So ,COMMA  have a temporary room and then copy the contents of the second room to the first and copy the contents of the third room to the second .PERIOD  So ,COMMA  this is a very nice intuition and it almost is similar to what we need to do .PERIOD  So ,COMMA  we have two variables a and b that we need to swap .PERIOD  So ,COMMA  one thing we can do is ,COMMA  I will keep a third variable t .PERIOD  First what I will do is ,COMMA  I will copy the value of a to t .PERIOD  So ,COMMA  now I have a backup copy .PERIOD  Now ,COMMA  then I will say a = b ,COMMA  .PERIOD  So ,COMMA  at this point the value of b will be copy to the a ,COMMA  So ,COMMA  now ,COMMA  a is 6 ,COMMA  b is 6 .PERIOD  But ,COMMA  still we have a memory of what was a before ?QUESTIONMARK  Because ,COMMA  the old value of a was told in t .PERIOD  So ,COMMA  in order to complete the routine ,COMMA  all you need to do is to copy the value of t to b and that can be a complete by the equation by the assignment statement b equal to t .PERIOD  So ,COMMA  this idea is known as cyclic exchange .PERIOD  So ,COMMA  recall the physical intuition of swapping the contents of two rooms which are almost full .PERIOD  You have a third room and you move the contents of the first room to the third room ,COMMA  move the contents of the second to the first and move the contents to the third to the second .PERIOD  So ,COMMA  this is similar to what we did .PERIOD  In the case of physical contents ,COMMA  we cannot copy ,COMMA  in the case of variables ,COMMA  we can copy .PERIOD  So ,COMMA  now let us complete the GCD program .PERIOD  We have just done the first part of the program which is to ensure that a is actually the greater number .PERIOD  If it was not the greater number ,COMMA  you swap or exchange .PERIOD  Now ,COMMA  So ,COMMA  after exchange we have ensure that a >=b .PERIOD  Now ,COMMA  we have to write the main loop for the GCD function .PERIOD  So ,COMMA  just by translating the flowchart ,COMMA  what we will do is while b is not 0 .PERIOD  What you do is ,COMMA  you say that store the value of a and t .PERIOD  Assign a to b ,COMMA  a = b and b becomes t % b .PERIOD  Recall the equation was written as follows that .PERIOD  So ,COMMA  recall that the equation was GCD(a ,COMMA  b) is the same as GCD(b ,COMMA  a % b) .PERIOD  So ,COMMA  when you assign a to b ,COMMA  the old value of a is lost and we can no longer do a % b .PERIOD  So ,COMMA  the way to do that is ,COMMA  you use the idea of temporary variable ,COMMA  store the old value of a and t ,COMMA  before you do a = b .PERIOD  So ,COMMA  that finally ,COMMA  a % b can be done by t % b .PERIOD  I do not want the new value of a ,COMMA  I want the old value of a .PERIOD  So ,COMMA  let us just trace the execution of this program .PERIOD  Let us say that I scan two numbers a and b and the user was correct in entering it .PERIOD  So ,COMMA  he actually enter the greater number first .PERIOD  So ,COMMA  we have 16 and 9 ,COMMA  a equal to 16 and b equal to 9 and t is undefined .PERIOD  So ,COMMA  after you read the numbers ,COMMA  you just say GCD of… After these you enter a message which is printed message which is the GCD of a and b is ,COMMA  .PERIOD  So ,COMMA  GCD of 16 and 9 is and then you enter the loop .PERIOD  So ,COMMA  in the initial execution of the loop you have t equal to a ,COMMA  which will store t equal to 16 ,COMMA  a = b ,COMMA  which is a will become 9 .PERIOD  And then ,COMMA  but you want to compute the modulo 16 % 9 ,COMMA  but 16 was lost in a ,COMMA  because a is not 9 .PERIOD  So ,COMMA  you have do t % b ,COMMA  .PERIOD  So ,COMMA  16 % 9 which is 7 .PERIOD  So ,COMMA  you go back to the while loop and then you see that b is not 0 ,COMMA  b is 7 .PERIOD  So ,COMMA  you enter the loop again .PERIOD  T is equal to a ,COMMA  .PERIOD  So ,COMMA  t is 9 ,COMMA  a = b ,COMMA  .PERIOD  So ,COMMA  a become 7 ,COMMA  b becomes 2 .PERIOD  Again b is not 0 ,COMMA  So ,COMMA  you enter the loop again .PERIOD  So ,COMMA  t is 7 ,COMMA  a equal to 2 and b equal to 1 .PERIOD  Again you enter the loop ,COMMA  b is not 0 ,COMMA  t is 2 ,COMMA  a becomes 1 and b becomes 0 at this point ,COMMA  you exit the loop and at this point a that we ended with is the GCD of these numbers .PERIOD  So ,COMMA  16 and 9 are relatively prime .PERIOD  Therefore ,COMMA  their GCD is 1 .PERIOD  Now ,COMMA  let us think a minute about what is the loop invariant in this program ?QUESTIONMARK  What is it that ?QUESTIONMARK  We have a central while loop which computes the GCD .PERIOD  What was the invariant in that loop ?QUESTIONMARK  So ,COMMA  for this I will just introduce a slight notation which makes it easier to discuss this invariant .PERIOD  So ,COMMA  let capital A and capital B be the original numbers that I input .PERIOD  And little a and little b represent the numbers which are involved in the loop .PERIOD  So ,COMMA  capital A and capital B are the original input and the invariant that I have is that at every stage ,COMMA  the GCD of the original inputs are the same as the GCD of little a and b .PERIOD  We call that little a and b are the loop variables involved in the loop .PERIOD  So ,COMMA  little a and b keep changing through the loop ,COMMA  whereas ,COMMA  capital A and B are fixed ,COMMA  they are the input .PERIOD  So ,COMMA  the invariant that I have is that every time you enter the loop ,COMMA  the GCD of the input where the same as the GCD of the variable .PERIOD  Now ,COMMA  this guarantees the correctness .PERIOD  Because ,COMMA  when you exit out of the loop ,COMMA  you will correctly compute .PERIOD  You exit out of the loop ,COMMA  because b equal to 0 ,COMMA  and by the original equation ,COMMA  you know that when b is equal to 0 ,COMMA  a is the GCD of a and b .PERIOD  So ,COMMA  this guarantee is correctness .PERIOD  Now ,COMMA  you could also ask other questions like ,COMMA  how many times has the loop run ?QUESTIONMARK  And this question is big complicated ,COMMA  because you have to compute it based on the input numbers .PERIOD  So ,COMMA  such questions are of interest to computer science .PERIOD  But ,COMMA  we will not going to computing the efficiency or the performance of this code .PERIOD  But ,COMMA  it is also a very crucial question .PERIOD  So ,COMMA  we will see one more example for writing loops ,COMMA  we see as slightly trickier example and will cover this over multiple sessions .PERIOD  So ,COMMA  the problem is the following .PERIOD  We have to read as sequence of numbers until a -1 is read ,COMMA  -1 indicates that then the sequence of sent it .PERIOD  And the question is we have to output the length of the longest contiguous increasing subsequence .PERIOD  So ,COMMA  that is a lot of words let us illustrate it with an example .PERIOD  Let us say that the input is of the following numbers - 9 2 4 0 3 4 6 9 2 ,COMMA  and then finally a -1 .PERIOD  And we have to output the length of the longest contiguous increasing subsequence .PERIOD  So ,COMMA  let us say what do I mean by a contiguous increasing subsequence ?QUESTIONMARK  So ,COMMA  I say that 9 is an increasing subsequence ,COMMA  then the next number is 2 ;SEMICOLON  2 is less than 9 .PERIOD  So ,COMMA  9 and 2 cannot be part of a subsequence ,COMMA  where the numbers keep on increasing .PERIOD   So ,COMMA  2 is the start of a new sequence ,COMMA  again the next number is 4 .PERIOD  So ,COMMA  2 and 4 form an increasing sequence .PERIOD  So ,COMMA  you can continue increasing a sequence .PERIOD  The next number is 0 ,COMMA  0 is less than 4 ,COMMA  so break the sequence there .PERIOD  Then when you look at then succeeding numbers 0 3 4 6 9 ;SEMICOLON  they form an increasing sequence .PERIOD  And the last number is 2 ,COMMA  which is lesser than 9 .PERIOD  So ,COMMA  the increasing sequence stops here .PERIOD  So ,COMMA  these are the increasing contiguous subsequences ;SEMICOLON  contiguous means together occurring adjacent to each other .PERIOD  So ,COMMA  the largest of the longest contiguous subsequence is obviously ,COMMA  0 3 4 6 9 ,COMMA  and the length of that sequence is 5 .PERIOD  Let us take another example 11 9 7 8 11 12 15 15 and -1 .PERIOD  So ,COMMA  just to illustrate the point 11 is greater than 9 .PERIOD  So ,COMMA  that cannot be an increasing sequence ,COMMA  9 is greater than 7 ,COMMA  so that is another the increasing sequence is just 9 ,COMMA  but then 7 8 11 12 15 ;SEMICOLON  these are increasing .PERIOD  And I decided to stop here even though the next number was 15 ,COMMA  because I am interested in and increasing subsequence .PERIOD  So ,COMMA  15 and 15 are equal numbers .PERIOD  So ,COMMA  we break it .PERIOD  So ,COMMA  the longest increasing subsequence is 7 8 11 12 15 and its length is 5 .PERIOD  So ,COMMA  this the longest contiguous increasing subsequence .PERIOD  So ,COMMA  here is a basic property given any sequence of numbers ,COMMA  we can break it into a collection of increasing contiguous subsequences .PERIOD  For example the numbers that the sequence that we have seen .PERIOD  So ,COMMA  9 2 4 0 3 4 6 4 6 9 2 ,COMMA  and that the length of the increasing ,COMMA  the longest increasing contiguous subsequence is 5 .PERIOD  So ,COMMA  we have to write a program to do this ,COMMA  given a sequence of numbers find the length of the longest increasing subsequence .PERIOD  So ,COMMA  how do we do it ?QUESTIONMARK  We do it in the way that we have been writing loops so far ,COMMA  like adding n numbers and finding this sum and so on .PERIOD  The idea was that you start from the first number and keep on adding the numbers until you hit -1 at which point you have this sum .PERIOD  So ,COMMA  the idea of this algorithm was that you start from the first ,COMMA  and you keep reading ,COMMA  until certain condition happens .PERIOD  We will adopt that idea to solve our current problem .PERIOD  So ,COMMA  what we need to do is to keep track of the current increasing subsequence .PERIOD  Let us say that it is denoted by s .PERIOD  So ,COMMA  before we get into the code ,COMMA  let see how we will do it by hand .PERIOD  So ,COMMA  initially the increasing subsequence is s ,COMMA  and let say that it is empty .PERIOD  After you read 9 ,COMMA  you have an increasing subsequence which consist of exactly 1 number .PERIOD  So ,COMMA  s is 9 .PERIOD  Now ,COMMA  the next number is 10 ;SEMICOLON  10 is greater than 9 .PERIOD  So ,COMMA  you extend this .PERIOD  Read the next number 4 ;SEMICOLON  4 is less than 10 .PERIOD  So ,COMMA  9 10 4 cannot be an increasing subsequence ,COMMA  therefore you say that you break the subsequence there ,COMMA  so 9 10 is a different subsequence .PERIOD   Now you start a new subsequence which is 4 .PERIOD  So ,COMMA  the current subsequence is just 4 .PERIOD  So ,COMMA  0 is less than 4 ,COMMA  so you break it there ,COMMA  the current increasing subsequence become 0 .PERIOD  Read the next number 3 ,COMMA  3 is greater than 0 .PERIOD  See you extend the subsequence s is now 0 3 4 ,COMMA  4 is greater than 3 .PERIOD  So ,COMMA  the sequence becomes 0 3 4 and so on .PERIOD  So ,COMMA  what are we doing here ?QUESTIONMARK  We are reading the read ,COMMA  we are reading the numbers integer by integer ,COMMA  and we are keeping track of the current increasing subsequence .PERIOD  So ,COMMA  this is part of what we want to do ?QUESTIONMARK  Now ,COMMA  in order to decided whether we should increase the subsequence extend it or break the subsequence ,COMMA  and start a new sequence what we need to do is we should remember what was the previous number we saw ,COMMA  and what is the current number that we have seen .PERIOD  So ,COMMA  with two variables we can say whether the subsequence should be extended or should be broken at this point .PERIOD  So ,COMMA  if the previous number is less than the current number ,COMMA  then we should increase the we should extend the subsequence .PERIOD  If the previous number is greater than or equal to the current number then we should break the subsequence and start a new sequence .PERIOD  So ,COMMA  extend the sequence means add 1 to the length of the current increasing subsequence ,COMMA  and add that number to the subsequence .PERIOD  Reset means you start a new sequence of length 1 .PERIOD   So ,COMMA  from the current from the description that we have seen so far ,COMMA  we need the following variables ,COMMA  we need C which is for the current rate c number ,COMMA  p which is the previous number that we have seen ,COMMA  and length which is the length of the current increasing sequence .PERIOD  So ,COMMA  we store the previous number into p ,COMMA  store the current length of the increasing subsequence into length ,COMMA  and read the next number into c .PERIOD   So ,COMMA  if the previous number is less than the current number .PERIOD  So ,COMMA  we take the true branch in which case we extend the sequence .PERIOD  So ,COMMA  the new number that we have read is part of the of the currently increasing subsequence .PERIOD  So ,COMMA  increase the length of the sequence by 1 and now we move lockstep .PERIOD  So ,COMMA  what we do is ?QUESTIONMARK  So ,COMMA  we are a stage where suppose we have numbers 1 2 and 3 ,COMMA  suppose p was pointing to 1 ,COMMA  c was pointing to 2 .PERIOD  So ,COMMA  since 2 was greater than 1 ,COMMA  we extend the sequence .PERIOD  After extending the sequence ,COMMA  we have to proceed and see what will happen with the next number .PERIOD  So ,COMMA  when you do that you can do the following ,COMMA  I will extend the current sequence by doing the following ,COMMA  I will now set p equal to 2 ,COMMA  and c equal to 3 .PERIOD   So ,COMMA  this is the idea that we will advance both the variables by 1 number each .PERIOD  So ,COMMA  that it is always true that previous is 1 number behind current .PERIOD  So ,COMMA  I hope this idea is clear that in order to ensure that p is 1 number behind current ,COMMA  you have to advance both p and c .PERIOD  So ,COMMA  assign p to c ,COMMA  this will advance p and then read the next number .PERIOD  So ,COMMA  that will become c .PERIOD  Now what happens if c >= p ,COMMA  then the new number is not part of the current increasing subsequence .PERIOD  So ,COMMA  you start a new sequence which is of length 1 and again do the same assign p to c ,COMMA  which is advancing the pointer and read the next number .PERIOD  So ,COMMA  here is the method that we will follow in order to keep track of the current increasing subsequence .PERIOD  Now what is left is to find the longest of all the increasing subsequences that we find .PERIOD  In this session we will try to code up the C code for finding the length of the longest increasing contiguous sub sequence .PERIOD  So ,COMMA  let us first examine what we need to do ,COMMA  we will write a code ,COMMA  and from the previous discussion we saw that we need at least three variables ;SEMICOLON  one for a storing the previous number ,COMMA  one for storing the current number ,COMMA  and the third for storing the length of the current decreasing sub sequence .PERIOD  So ,COMMA  we start by declaring all those three variables and initializing length to 0 .PERIOD  So ,COMMA  here is a new construct that we are seeing for the first time ,COMMA  which is that when you declare a variable ,COMMA  you can also initialize it immediately by saying len equal to 0 .PERIOD  So ,COMMA  this is a very intuitive notation .PERIOD  So ,COMMA  this will declare a variable and immediately initialized it to 0 .PERIOD  Once we declare these three variables ,COMMA  let say that we scan the first variable into previous .PERIOD  Now ,COMMA  let us focus on ,COMMA  on the main body of the program .PERIOD  If the currently read number is if the currently read number is ! = -1 ,COMMA  then you say that you start with length 1 .PERIOD  So ,COMMA  the length of the current increasing sub sequences 1 ,COMMA  and then you scan the next number into curr .PERIOD  So ,COMMA  here is current number .PERIOD  So ,COMMA  this part of the code is just to initialize .PERIOD  So ,COMMA  if the current ,COMMA  if the first number is -1 ,COMMA  then there is no point in getting into the program ,COMMA  because the its equivalent to the empty inputs .PERIOD  So ,COMMA  there is no increasing sub sequence to be found .PERIOD  So ,COMMA  you just exit out of the program .PERIOD  So ,COMMA  initially we just check to see whether the first number is -1 or not .PERIOD  If the first number is ! = -1 ,COMMA  you scan the next number ,COMMA  so current will be the second number .PERIOD  And if current is ! = -1 while the currently read number is ! = -1 .PERIOD  What you do is exactly the logic that we were discussing before .PERIOD  If the previous number is less than the current number then you extend the length by 1 .PERIOD   So ,COMMA  length equal to length plus 1 says that I am continuing the current increasing sub sequence by increasing its length .PERIOD  Otherwise that is current is less than or equal to previous ,COMMA  you break the sequence and say length equal to 1 .PERIOD  Then we have this step previous equal to current ,COMMA  which is the advancing both variables by 1 .PERIOD  So ,COMMA  previous becomes the currently read number ,COMMA  and current becomes the next number to be .PERIOD  So ,COMMA  recall from the diagram that previous and current were at some position ,COMMA  and we will advance both of them by 1 .PERIOD  And when the loop condition is check the next time we will check whether the currently seen number is -1 .PERIOD  So ,COMMA  so far we have coded up part of the logic ,COMMA  which is the part of the logic dealing with when the current when the next number is read do we extend the sequence or do we break the sequence and start a new sequence .PERIOD  So ,COMMA  this is just part of the work that we need to do to solve the problem .PERIOD  So ,COMMA  lets continue with the logic .PERIOD  So ,COMMA  let us start with a few boundary cases ,COMMA  and let see that whether these works .PERIOD  If it works we can try or logic on other cases .PERIOD  So ,COMMA  let us say that by boundary cases I mean may be very long inputs or very short inputs .PERIOD  So ,COMMA  these are cases where your code normally breaks .PERIOD  So ,COMMA  when you test your code it is always a good idea to check boundary cases .PERIOD  And one thing that makes programming difficult is that in or when we do things by hand ,COMMA  we know how to handle the boundary cases elegantly ,COMMA  but in a program unless you say how to handle the boundary cases ,COMMA  the program might break .PERIOD  And the lot of testing and the lot of errors come from incorrectly handling the boundary cases .PERIOD  So ,COMMA  it is always good to handle the boundary cases ,COMMA  let us try test our code on very small inputs .PERIOD  So ,COMMA  let us say that I enter a sequence 5 - 1 .PERIOD  So ,COMMA  previous becomes ,COMMA  so length is 0 ;SEMICOLON  previous becomes 5 and then since prev ! = -1 ,COMMA  I have used an abbreviation here which is the not equal to operator ,COMMA  this is the same as saying not of previous equal to equal to 1 .PERIOD  So ,COMMA  previous not equal to 1 is the same as saying not of previous equal to equal to 1 ,COMMA  its an operator in C ,COMMA  then you say that the len equal to 1 ,COMMA  then you say that the length is 1 ,COMMA  because you have seen 1 ,COMMA  1 number and scan the next number .PERIOD  The next number is -1 .PERIOD  So ,COMMA  you scan the next number ,COMMA  and the next number is -1 ,COMMA  so you break the sequence .PERIOD  So ,COMMA  immediately exit out of the sequence ,COMMA  and the length of the increasing sub sequence that we saw ,COMMA  so 5 is the only increasing sub sequence .PERIOD  And when we exited the length was 1 .PERIOD  So ,COMMA  we handle the boundary case of an extremely small sequence ,COMMA  a sequence with exactly 1 element correctly .PERIOD  This gives us confidence that the code could be correct ,COMMA  of course we have handle only the boundary case .PERIOD  Now ,COMMA  we see need to test it for other cases as well .PERIOD   So far the program is not doing any anything useful ,COMMA  because we are just extending the sequence and breaking the sequence .PERIOD  What recall that the what we was suppose to do was to fine the length of the longest increasing sub sequence .PERIOD  So ,COMMA  this is the main ,COMMA  this the main thing that we have to do in the logic .PERIOD  So ,COMMA  to do this what we do is something simple .PERIOD  We keep track of the maximum length sequence that we have seen so far ,COMMA  keep track of the length of the longest sequence that we have seen so far .PERIOD  Also we have the current sequence .PERIOD  Now all we need to do is whether to check whether the current sequence is longer than the previously known longest one .PERIOD  So ,COMMA  for this what we do is keep track of the maximum length that we have seen so far .PERIOD  So ,COMMA  this is a standard technique in program .PERIOD  And how do I do that .PERIOD  So ,COMMA  let us modify the program a little bit .PERIOD  So ,COMMA  earlier we resend out that we need at least three variables .PERIOD  Now in order to keep track of the length the maximum length that we have seen so far ,COMMA  I need a new variable .PERIOD  So ,COMMA  this part we have already done before .PERIOD  And here is the maxlen = 0 .PERIOD  So ,COMMA  that is the new variable which is the maximum length that we have seen so far .PERIOD  When we start the program we have not seen any increasing sub sequence ,COMMA  and therefore the length of the longest increasing sequence ,COMMA  the current increasing sequence is 0 ;SEMICOLON  that is len equal to 0 .PERIOD  And the length of the maximum length that we have seen so far is also 0 .PERIOD   Then you scan the new number ;SEMICOLON  if the new number is not -1 you continue .PERIOD  So ,COMMA  length equal to 1 ,COMMA  now max length equal to 1 ,COMMA  because currently the longest sequence that we have seen so far is 1 1 long .PERIOD  You scan the num next number .PERIOD  If you… So ,COMMA  here is the main body of the loop ,COMMA  and what we need to do is the following ,COMMA  if the currently read number is greater than the previous number ,COMMA  we extend the sequence .PERIOD  So ,COMMA  this logic is the same as before .PERIOD  Otherwise which means that current number is that less than or equal to previous .PERIOD  So ,COMMA  we are starting the new sequence .PERIOD  So ,COMMA  the situation is the following we have some maxlen sequence somewhere in the past .PERIOD  So ,COMMA  maxlen is the length of the sequence that we have seen somewhere in the past .PERIOD   Now we are scanning in the sequence we have a current sequence .PERIOD  And we have decided to break this sequence .PERIOD  So ,COMMA  we have we are now starting a new sequence starting at current .PERIOD  So ,COMMA  we are a this part of the logic .PERIOD  So ,COMMA  we have decided to start a new sequence ,COMMA  that is because the current sequences last number is greater than or equal to the current number .PERIOD  So ,COMMA  here is previous ,COMMA  and this is current .PERIOD  So ,COMMA  we are deciding to start a new sequence what we need to see is whether this sequence is longer than the previously known maximum length .PERIOD  If the sequence that we just stopped is longer than the previously known maximum length sequence .PERIOD  So ,COMMA  if maxlen < len notice that length is then sequence that length of the sequence that we just stopped .PERIOD  Then we say that maxlen = len .PERIOD  So ,COMMA  if the current sequence is longer than the previously known maxlen ,COMMA  what we do is that maxlen becomes the length of this sequence .PERIOD  Otherwise if the current sequence was shorter than the previously known maximum length ,COMMA  we do not do anything ,COMMA  so maximum length is the same…  So ,COMMA  when we extent the sequence we don’t have to do anything special when we  break a sequence ,COMMA  and we start a new sequence ,COMMA  then all we have to do is you check whether the currently say the sequence that you just saw was longer than the previously known longest sequence .PERIOD  If that is the case then the sequence that just ended is becoming the longer sequence we have seen so far .PERIOD  Otherwise you maintain the max length .PERIOD  So ,COMMA  just forget about the currently stop sequence .PERIOD  Now there is a .PERIOD  .PERIOD  .PERIOD  So ,COMMA  that this loop ,COMMA  and at the end we have to do slight tricky logic ,COMMA  it could so happen that the sequence ends with a longest sequence increasing sub sequence .PERIOD  In that case ,COMMA  we will never reset the max length .PERIOD  So ,COMMA  if the last sequence is the longest ,COMMA  you also have to handle the case separately .PERIOD  So ,COMMA  we will see an example where ,COMMA  if you exit out of the loop that is you have already seen a -1 ,COMMA  you just have to check whether the last increasing sequence that you saw was in fact the longest .PERIOD  So ,COMMA  there is a small if block at the end to do that .PERIOD   In this part we will just see ,COMMA  small tracing of this program on a sample input .PERIOD  So ,COMMA  that the logic of the program become slightly more clear .PERIOD  So ,COMMA  I have picked a particular input 3 2 1 3 5 -1 ,COMMA  and you will see that the longest increasing sequences are 3 .PERIOD  So ,COMMA  the increasing sequences are 3 ,COMMA  then 2 ,COMMA  then 1 3 5 .PERIOD  So ,COMMA  1 3 5 is going to with a longest increasing sub sequence ,COMMA  and let us see how our program will find that out .PERIOD  So ,COMMA  initially you have a bunch of variables which should be declare .PERIOD  So ,COMMA  len = 0 ,COMMA  maxlen = 0 ,COMMA  and previous and current are undefined .PERIOD  Then you first read previous .PERIOD  So ,COMMA  previous becomes 3 ,COMMA  it is not -1 ,COMMA  so you enter the if condition ,COMMA  at which point you set length and max length to 1 .PERIOD    Now you scan the current number .PERIOD  So ,COMMA  current becomes 2 .PERIOD  So ,COMMA  remember that previous is now 3 ,COMMA  and current is 2 .PERIOD  So ,COMMA  current is not -1 ,COMMA  therefore you enter the while loop .PERIOD  Prev < curr is false ,COMMA  because previous is 3 and current is 2 .PERIOD  Therefore ,COMMA  you enter the else part ,COMMA  maxlen < len is false ;SEMICOLON  both are 1 .PERIOD  Therefore ,COMMA  you start a new sequence with length equal to 1 .PERIOD  Now you continue the loop with previous becoming current .PERIOD    So ,COMMA  previous is now 2 and current you read the next number which is 1 .PERIOD  So ,COMMA  previous and current have both more 1 step .PERIOD  So ,COMMA  current is not -1 ,COMMA  prev < curr is again false ,COMMA  because 2 is greater than 1 .PERIOD  So ,COMMA  you enter the else part .PERIOD  Max length and length there is no change .PERIOD  So ,COMMA  you reset the length to 1 ,COMMA  previous is current .PERIOD  So ,COMMA  current previous becomes 1 ,COMMA  and you scan the next number which is 3 .PERIOD  Now at this point previous is 1 ,COMMA  and current is 3 .PERIOD  So ,COMMA  the if condition is true .PERIOD  So ,COMMA  you extend the length ;SEMICOLON  length increases by 1 .PERIOD  Again you advance previous and current .PERIOD  So ,COMMA  previous becomes 3 ,COMMA  current becomes 5 .PERIOD  Again 3 is less than 5 ,COMMA  so increase the length we are extending the sequence .PERIOD  So ,COMMA  the length becomes 3 .PERIOD  Advance ,COMMA  so previous becomes 5 ,COMMA  and current becomes -1 at this point you exit the loop .PERIOD   And now you encounter the situation that max length ,COMMA  which is the length that we have seen so far ,COMMA  recall that it is one ,COMMA  but the length of the sequence that we just stop the see the input with is 3 ;SEMICOLON  that is that happen ,COMMA  because the longest increasing contiguous sub sequence ,COMMA  well was at the end of the input .PERIOD  So ,COMMA  it happen right at the end .PERIOD  So ,COMMA  when we exit the loop we have to do 1 additional check ,COMMA  we cannot simply say that the maximum length that we have seen in the sequence is 1 ,COMMA  because max length is the length of the longest sequence we have seen before the current 1 .PERIOD  The current 1 was the 1 that we just stop to with it had a length of 3 .PERIOD  So ,COMMA  we just check ,COMMA  if max length equal to length is less than the length ,COMMA  then we set max length to be the length .PERIOD  So ,COMMA  once you do that max length becomes 3 .PERIOD  This is just to handle the case when the longest increasing sub sequence is the last .PERIOD  Now you can exit out of the exit out of the if condition ,COMMA  and then print that the maximum length that you have seen is 3 .PERIOD   So far we have been using while loops in C ,COMMA  now C programming language also provides you other kinds of loops .PERIOD   Let’s look at some of them .PERIOD  The first alternative loop mechanism in C that we will look at is what is known as a do-while loop ?QUESTIONMARK  And so it is a variant of a while loop ,COMMA  I am the general form is what you see here ,COMMA  you have do statement followed by while expression .PERIOD  And here is an important syntactic difference which causes some syntax errors ,COMMA  when you code .PERIOD  The do while terminates within semicolon ,COMMA  where is the while loop does ?QUESTIONMARK  So ,COMMA  the while loop has the following a form which is while expression ,COMMA  and then statement ;SEMICOLON  the difference is that here the statement is occurring before the while the test expression .PERIOD  So ,COMMA  the way it execute is the following .PERIOD  We first execute the statement ,COMMA  then evaluate the expression .PERIOD  If the expression is true ,COMMA  you go back to step 1 ;SEMICOLON  that is execute this statement .PERIOD  If the expression is false ,COMMA  then you get out .PERIOD   So ,COMMA  you execute the x statement then test whether the expression is true or not ,COMMA  if it is true you go back and the execute the statement again ,COMMA  so you loop .PERIOD  If the statement is false ,COMMA  you get out of the loop .PERIOD  The difference from while loop and do while loop is the following ,COMMA  you have statement that will be executed without testing the expression even once .PERIOD  So ,COMMA  when you start executing the loop ,COMMA  you will first execute the statement without testing the expression ,COMMA  and after testing the expression you will go back and test the loop expression ,COMMA  if it is true and you start executing the loop again .PERIOD  So ,COMMA  the first execution of the statement there is no test done for that .PERIOD  So ,COMMA  let us see the comparison between a loop while loop and do while loop .PERIOD  So ,COMMA  we will look at the following problem ,COMMA  you have to read numbers and output in integer until a -1 is seen .PERIOD  Now the difference is that in this problem you have to include the -1 .PERIOD  So ,COMMA  read all the numbers up to an including -1 ,COMMA  and print all the numbers .PERIOD  So ,COMMA  we will have the following programs using while loop and do while loop .PERIOD  Now the important thing to notice is that the while construct and the do while construct are equally expressive .PERIOD  So ,COMMA  you cannot right any more new programs using the do while construct ,COMMA  then you could using the while construct ,COMMA  but certain kinds of programs or easier using or shorted using the do while construct .PERIOD  For example let us all this problem using the while construct .PERIOD  So ,COMMA  what you do initially is ,COMMA  you declare a variable then scan the variable ;SEMICOLON  if the variable is -1 ,COMMA  you immediately exit out of the loop ,COMMA  and print -1 and finish the program .PERIOD  If the number is not -1 ,COMMA  you print the value and scan the next number .PERIOD  If the number you scan this not -1 ,COMMA  you just print it and repeat the loop .PERIOD  If it is -1 ,COMMA  you exit out of the loop and print the -1 that you show .PERIOD  So ,COMMA  here is the logic using the do while loop ,COMMA  in using the while loop .PERIOD  And notice that when we existed out of the loop we needed a printf statement ,COMMA  and before you yes ,COMMA  enter the loop you needed a scanf statement .PERIOD  So ,COMMA  this was the structure of the program .PERIOD  This problem can be elegantly solved using the do while loop .PERIOD  What you initially need to do is to declare a variable ,COMMA  then scan the variable and print it any way .PERIOD  Either the number is -1 or it is not .PERIOD  In any case we need to print it .PERIOD   So ,COMMA  go ahead and print it then test whether the number was -1 .PERIOD  If it is -1 ,COMMA  your done and you exit out of the program .PERIOD  If it is not -1 ,COMMA  you go back and scan the next number and print it .PERIOD  So ,COMMA  this is a program that we have seen where you could do this same think with the while loop .PERIOD  The only difference is that the do while program is shorter .PERIOD  And please be careful about the syntactic difference between the while loop and the do while loop ,COMMA  notice the semicolon at the end this causes a lot of confusion when you compile the program it is easy to miss this .PERIOD  If you are new to C programming ,COMMA  you can strict to one particular loop .PERIOD  As I said before you cannot write any new programs that you can do is using the do while loop ,COMMA  then you could previously do using the while loop .PERIOD  So ,COMMA  you can write the same logic ,COMMA  you can write the same number of programs using the while loop ,COMMA  and the do while loop it gives you no further power .PERIOD  So ,COMMA  it is recommended that you stick to one loop pick while or pick do while whatever you do ,COMMA  but stick to that loop in when you right the program .PERIOD  When you are comfortable with one of the loops programming using the other loop becomes easy .PERIOD  So ,COMMA  let us try to solve a problem that we have already seen ,COMMA  which is to find the length of the longest contiguous increasing subsequence ending in -1 .PERIOD  The difference that we have is that earlier we did not include -1 in the sequence when you computed the length of the sequence ,COMMA  now we will include -1 .PERIOD  So ,COMMA  here is the program to do that and the logic - the core logic ,COMMA  so here is the initialization ,COMMA  and here is the loop logic ,COMMA  and the final check .PERIOD   So ,COMMA  if you recall from the lecture which covered the problem solving the longest increasing subsequence ,COMMA  then you will see that the main structures in the code .PERIOD  The main lines of logic in the code are pretty much the same .PERIOD  All I have done is to change the while logic to the do while logic .PERIOD  And let see what that is accomplish for us .PERIOD  So ,COMMA  what this does is that you will scan a particular number ,COMMA  if the particular number is bigger than the previous number ,COMMA  then you extend the sequence .PERIOD  If it is less than or equal to the previous number ,COMMA  then you stop this sequence and started new sequence ,COMMA  this was the logic .PERIOD   And when you start a new sequence the length is new start with 1 .PERIOD  Then you say current equal to the next number ,COMMA  and previous equal to the number that was just red .PERIOD  So ,COMMA  the logic here is that the testing for whether the currently rate number is -1 is done at the end of the loop .PERIOD  So ,COMMA  is the first number is -1 ,COMMA  you just do all this and then say that the length of the increasing subsequence is 1 ,COMMA  then you test if the currently read number is -1 or not .PERIOD  If the currently read number is -1 ,COMMA  then you are already done and you exit out of the loop .PERIOD  Then you check whether max length is less then length as before .PERIOD  difference between this logic ,COMMA  and the logic that we have seen before is that we do this execution without testing whether the currently read number is -1 .PERIOD  So ,COMMA  automatically what happens is that if the number is -1 ,COMMA  all these steps will be performed before we test that the sequence has ended .PERIOD  So ,COMMA  automatically we ensure that -1 is also included when we calculate the increasing subsequence .PERIOD  In this session ,COMMA  let us look at a matrix problem and the problem is given as follows .PERIOD  You have a bunch of lines of input .PERIOD  The first line of the input consists of two numbers ,COMMA  m and n .PERIOD  This line is followed by m lines ,COMMA  each containing n integers .PERIOD  So ,COMMA  this is supposed to represent the matrix of size m time m cross n .PERIOD  We have to calculate the sum of the squares of the sum of numbers in each row ,COMMA  that is quite a mouthful ,COMMA  let us look at the formula .PERIOD  So ,COMMA  what I want to do is ,COMMA   .PERIOD  So ,COMMA  once you do this sum ,COMMA  you square that and then do the   .PERIOD  So ,COMMA  i is an index which goes over the rows .PERIOD  In C ,COMMA  we adopt the convention that the first row is starting with 0 and so ,COMMA  it goes from 0 to m minus 1 .PERIOD  Similarly ,COMMA  the first column starts with index 0 ,COMMA  so it goes on till n minus 1 .PERIOD  So ,COMMA  the input will be given as follows .PERIOD  The first number m represents that there are 3 rows ,COMMA  the second number represents the number of columns in each row and then this is followed by a matrix of size 3 cross 4 .PERIOD  Now ,COMMA  the numbering is given as follows .PERIOD  For example ,COMMA  if you have  ,COMMA  this means second row zeroth column .PERIOD  Note that ,COMMA  second row means we start with row 0 ,COMMA  then row 1 ,COMMA  then row 2 and zeroth column is this ,COMMA  the first column .PERIOD  So ,COMMA   is this number which is 2 .PERIOD  Similarly ,COMMA   is first row ,COMMA  row number 1 column number 2 ,COMMA  which is also 2 .PERIOD  So ,COMMA  the desired output that we have is  and so on .PERIOD  So ,COMMA  how do we do this by hand ?QUESTIONMARK  Let us just look at the calculation .PERIOD    So ,COMMA  we have 4 7 11 2 1 1 2 4 and 2 9 0 minus 1 .PERIOD  Notice that the formula that we have to calculate is i going from 0 to 2 ,COMMA  j going from 0 to 3 squared .PERIOD  So ,COMMA  how do we do this ?QUESTIONMARK  First ,COMMA  we sum the numbers in each column so ,COMMA  I will name that as j going from 0 to 3  and then square .PERIOD  So ,COMMA  if you sum all this ,COMMA  you see 11 22 242 which is 576 and similarly ,COMMA  this is 64 82 and this is 102 ,COMMA  which is 100 .PERIOD  So ,COMMA  what I have tallied on the right hand side is ,COMMA  for each row you sum the numbers take that sum and square it .PERIOD  And then finally in order to compute what we want ,COMMA  which is  .PERIOD  In order to calculate this ,COMMA  all we need to do is to sum these numbers up and this turns out to be 740 .PERIOD  So ,COMMA  notice when we did by hand ,COMMA  we did the following ,COMMA  we first calculated row wise ,COMMA  we summed over all the numbers in that row .PERIOD  Take the sums ,COMMA  square it .PERIOD  Then ,COMMA  you repeated the same operation for the next row and then for the third row .PERIOD  So ,COMMA  we have three numbers and then we added them in sequence .PERIOD  So ,COMMA  we will see how we will code this up ?QUESTIONMARK   So ,COMMA  what we need here is something called an inner loop or a double loop ,COMMA  we need a loop inside a loop .PERIOD  Now ,COMMA  the inner loop is doing what we did first ?QUESTIONMARK  It is taking a row and adding all the numbers in that row ,COMMA  then squaring it .PERIOD  So ,COMMA  we need one loop to do the rowsum of each row .PERIOD  Once a row is finished ,COMMA  we square the rowsum .PERIOD  Once that is done ,COMMA  remember that once we tallied numbers on the right hand side and squared them .PERIOD  We have to add those numbers up .PERIOD  So ,COMMA  we need another loop ,COMMA  an outer loop to add these squares of rows sums .PERIOD  So ,COMMA  let us do this program in stages .PERIOD  First ,COMMA  let us write the inner loop ,COMMA  this is the loop ,COMMA  so that for a given row you sum up all the numbers in that row .PERIOD  Now ,COMMA  let us assume that we are at the beginning of a row and we have not read any numbers yet .PERIOD  Now ,COMMA  what we have to do is to start reading the numbers .PERIOD  So ,COMMA  we write a while loop .PERIOD  We declare four variables a ,COMMA  column index ,COMMA  then we need something for the rowsum and some integer variable for rowsumsquare .PERIOD  Now ,COMMA  what you do is you go along the row and add the numbers in each column .PERIOD  So ,COMMA  while the column index is less than n ,COMMA  recall that the matrix size was m cross n .PERIOD  You scan the next number ,COMMA  the next number is added to the rowsum and then increment the column index .PERIOD  Until you hit n ,COMMA  recall that the last column is n minus 1 ,COMMA  because we start the column numbers from 0 .PERIOD  Now ,COMMA  once you have done you have the sum of the numbers in that row and what you need to do is to square that number .PERIOD  So ,COMMA  we have rowsum times rowsum will be rowsumsquare .PERIOD  That completes the inner loop ,COMMA  which is what we did ,COMMA  when we added the numbers along a given row and then finally ,COMMA  squared the sum .PERIOD  Now ,COMMA  what we need is an outer loop structure over these .PERIOD  So ,COMMA  we have a code that reads the next n integers from the terminal and sums them .PERIOD  Now ,COMMA  what we need is some further code ,COMMA  that takes the output of the previous code and then sums all those numbers up .PERIOD  Remember ,COMMA  when we did this by hand ,COMMA  this was the second operation we did ,COMMA  we went over the right most column and added all those numbers up and that was the result that we wanted .PERIOD  So ,COMMA  how do we modify the code ?QUESTIONMARK  So ,COMMA  let us what we need is something like this .PERIOD  Assume that we have the output available from the previous code in some variable called rowsumsquare .PERIOD  And we need a loop over that ,COMMA  which is going from rowindex 0 to m minus 1 and tallying up all the numbers in rowsumsquare .PERIOD  So ,COMMA  for each row you will end up with a rowsumsquare and you have to add all those rowsumsquare to get in .PERIOD  So ,COMMA  in this the rowsumsquare comes from the previous code .PERIOD  So ,COMMA  this is how we will visualize the outer loop .PERIOD  Now ,COMMA  note that this is not completely specified code .PERIOD  This is just a very intuitive picture ,COMMA  that instead of rowsumsquare ,COMMA  it should come from some inner loop which actually calculates it .PERIOD  So ,COMMA  we should plugin the output from the previous inner loop and this is the outer loop over it .PERIOD   So ,COMMA  here is how we put these two loops together ,COMMA  we have a while loop inside the while loop .PERIOD  Remember that ,COMMA  this was the previous loop that we had written .PERIOD  So ,COMMA  this was the inner loop that we have written ,COMMA  where at the end of the inner loop you have the rowsumsquare .PERIOD  Now ,COMMA  at the end of the code what you will end up is the exact rowsumsquare of a particular column .PERIOD  So ,COMMA  you can imagine that after this inner loop finishes execution ,COMMA  the rowsumsquare is the correct rowsum is the correct square of the sum of the elements in the row .PERIOD  Now ,COMMA  the outer index does the following ,COMMA  you start from rowindex 0 and sum the rowsumsquare over all columns .PERIOD  So ,COMMA  this is the structure of the code .PERIOD  Let us look at the code in slightly more detail .PERIOD  We have a rowindex ,COMMA  a column index ,COMMA  a column sum ,COMMA  a rowsum and the rowsumsquare ,COMMA  a is supposed to be the current number that we are read in .PERIOD  Suppose ,COMMA  we know that the size of the matrix is m cross n .PERIOD  So ,COMMA  rowindex can go from 0 to m minus 1 .PERIOD  So ,COMMA  the termination condition of this while loop is rowindex equal to m .PERIOD  Now ,COMMA  for all that you are currently at a particular row .PERIOD  So ,COMMA  you have to initialize the rowsum to 0 and the column index to 0 .PERIOD  Because ,COMMA  for a given row you have to start from row 0 for a given row you have to start from column 0 and you go on ,COMMA  until column n minus 1 .PERIOD  Also this previous rowsum should not influence the next row .PERIOD  So  ,COMMA  for every row you have to initialize the rowsum variable .PERIOD  Once that is done ,COMMA  you go over the columns of that given row and you scan the numbers add the number to the rowsum and increment the column index ,COMMA  until you hit n columns ,COMMA  column 0 through n minus 1 .PERIOD  When you read all the columns in that row ,COMMA  you have the correct rowsum .PERIOD  So ,COMMA  that rowsumsquare can now be calculated .PERIOD  Once rowsumsquare is calculated ,COMMA  you have the rowsumsquare for that particular row .PERIOD  So ,COMMA  add the rowsumsquare to the previously computed columns .PERIOD  So ,COMMA  If you go back and think about how you did this by hand ,COMMA  you can convince yourself that this is exactly the coding of the logic that we had earlier .PERIOD  So ,COMMA  let us try this on a small example to see exactly ,COMMA  how the code works ?QUESTIONMARK  Suppose ,COMMA  the input is 2 3 followed by two rows of three numbers each .PERIOD  So ,COMMA  the input matrix size is 2 cross 3 and the entries are 1 0 minus 1 and 0 1 1 .PERIOD  Let us see ,COMMA  how the code executes on this ?QUESTIONMARK  So ,COMMA  the output should be 4 ,COMMA  if you do it by hand and let us see ,COMMA  the variables are m ,COMMA  n ,COMMA  a ,COMMA  rowindex ,COMMA  column index ,COMMA  rowsum and square sum .PERIOD  Finally ,COMMA  the result should be in square sum .PERIOD  You start with rowindex equal to 0 ,COMMA  column index equal to 0 and you scan m and n .PERIOD  So ,COMMA  you already know the size of the matrix ,COMMA  when you scanned m and n .PERIOD  So ,COMMA  m becomes 2 and n becomes 3 .PERIOD  Now ,COMMA  rowindex is 0 which is less than 2 .PERIOD  So ,COMMA  it starts the loop which reads the row 0 .PERIOD  So ,COMMA  notice the arrow here ,COMMA  you are starting to read this particular row ,COMMA  the first row ,COMMA  which is row 0 .PERIOD  Or you initialize rowsum equal to 0 ,COMMA  column index equal to 0 and while column index is less than n ,COMMA  you scan the next number which is 1 .PERIOD  Add a to the rowsum .PERIOD  So ,COMMA  rowsum becomes 1 ,COMMA  increment the column index .PERIOD  So ,COMMA  it reach column 1 row 0 read that number .PERIOD  Add it to the rowsum ,COMMA  go to the second column and read the number and add in to the rowsum .PERIOD  So ,COMMA  once you are done ,COMMA  now column index is 3 .PERIOD  So ,COMMA  just means that we have read all the entries in the row 0 .PERIOD  So ,COMMA  we have got the correct rowsum .PERIOD  What we will do is ,COMMA  add the rowsumsquare to the square sum .PERIOD  So ,COMMA  rowsum is 0 ,COMMA  0 square to square sum ,COMMA  so square sum remains 0 .PERIOD  Now ,COMMA  you go to the second row .PERIOD  So ,COMMA  increment rowindex .PERIOD  Now ,COMMA  rowindex is less than 2 rowindex is 1 .PERIOD  So ,COMMA  it is less than 2 we are reading row 1 and you repeat the same execution .PERIOD  We reinitialize the rowsum to 0 ,COMMA  column index to 0 .PERIOD  and then ,COMMA  scan the next number which is 0 .PERIOD  Add it to the rowsum ,COMMA  increment the column index ,COMMA  scan the next number which is 1 and so on ,COMMA  until you finish reading the second row as well .PERIOD  So ,COMMA  once you read the second row ,COMMA  you will find that the rowsum is 2 and square sum would be square sum plus 2 square which is 4 .PERIOD  After you do that ,COMMA  you increment rowindex and rowindex becomes 3 ,COMMA  which is greater than the given rowindex .PERIOD  So ,COMMA  you exit the loop .PERIOD  So ,COMMA  we have correctly computed the sum that we wanted .PERIOD  In this session we will see a very popular loop construct in C .PERIOD  We have already seen while loops and do while loops ,COMMA  will see that do while loops are not all that common in C code ,COMMA  when C programmers code .PERIOD  Among the most popular loop construction C is this ,COMMA  for loop .PERIOD  So ,COMMA  let say what it stands for ?QUESTIONMARK  The expression for the general form of the for statement ,COMMA  the slightly more complex than that of a while loop .PERIOD  While loop was very simple ,COMMA  while as the certain expression was true ,COMMA  you execute the statement and when the expression becomes false ,COMMA  you exit out of the loop ,COMMA  for loop is slightly more complex .PERIOD  So ,COMMA  it has the following components ,COMMA  it has an initialization expression ,COMMA  then the test expression ,COMMA  this the expression corresponding to the expression inside the while loop and then there is an update expression ,COMMA  followed by the loop statement .PERIOD  This looks complex at first ,COMMA  ,COMMA  but it is quit intuitive once you start using it .PERIOD  The execution is as follows ,COMMA  first you execute the initialization expression ,COMMA  then you test whether the test expression is true or not .PERIOD  If the test expression is true ,COMMA  you execute the statement and then come back and execute the update expression .PERIOD  After you execute the update expression go back to step 2 ,COMMA  which is go to the test expression .PERIOD  So ,COMMA  init expression is the initialization expression ,COMMA  update expression is the update expression and test expression is the expression ,COMMA  that is evaluates to either true or false .PERIOD  So ,COMMA  if you look at the flow of how the code goes ,COMMA  then it is first you start from the initialization expression ,COMMA  then you go to first you start from the initialization expression ,COMMA  then you go to the test expression .PERIOD  If the test expression is true ,COMMA  you go to the statement ,COMMA  then you go to the update expression and you go to the test expression again .PERIOD  So ,COMMA  the loop is here you test the expression ,COMMA  execute the statement ,COMMA  update and test again ,COMMA  initialization is done only once .PERIOD  So ,COMMA  this is the first step and here is the loop ,COMMA  this sounds bit complex at first ,COMMA  ,COMMA  but it is quite simple to use ,COMMA  once you get the hang of it .PERIOD  So ,COMMA  the execution of the for loop can be understood in terms of the while loop .PERIOD  The execution of the for loop is almost equivalent to the following while loop ,COMMA  you have the initialization expression before the while loop ,COMMA  then the test expression ,COMMA  while test expression ,COMMA  then you have statement and then you have the update expression .PERIOD  So ,COMMA  if you have a for loop you can write the equivalent code using while loop .PERIOD  So ,COMMA  if you say that I do not want to use for loops ,COMMA  here is how you have a for loop and you can write the equivalent while loop in the following way .PERIOD  Or if you have a while loop ,COMMA  you can write a equivalent for loop by looking at the this form and how it is translate to the corresponding for loop ?QUESTIONMARK  Now ,COMMA  there why did I say execution is almost equivalent ,COMMA  we will see this later in the course .PERIOD  Whenever ,COMMA  there is a continues statement or a break statement ,COMMA  you will see that we need to modify this as equivalents between the for loop and the while loop .PERIOD  But ,COMMA  for now for with the features of see that we have seen so far .PERIOD  The for loop is equivalent to the while loop and we will have to modify this slightly later .PERIOD  So ,COMMA  the init expression maps to the first part of the for loop ,COMMA  the test expression maps to the second part and the update expression maps to the third part .PERIOD  One important thing to notices is that ,COMMA  the update expression is after the statement .PERIOD  So ,COMMA  we have the following first we execute the initialization expression ,COMMA  then we test whether the expression is true .PERIOD  If it is true ,COMMA  you execute the statement ,COMMA  update expression and then again go to the test expression ,COMMA  if it is true you execute statement ,COMMA  update and then test again .PERIOD  So ,COMMA  you initialize the expression then when the test the test expression if it is true ,COMMA  you execute the statement after the statement is true ,COMMA  after the statement is executed you update the expression and go back to the test expression .PERIOD  Because ,COMMA  that is how you execute it in the while loop ?QUESTIONMARK  You first initialize ,COMMA  then test whether it is true execute the statement ,COMMA  update and then go back to the test expression .PERIOD  So ,COMMA  this is how a while loop can be translated to a for loop and vice versa .PERIOD  So ,COMMA  let us do some examples very simple think ,COMMA  let us say that print the sum of reciprocals of the first 100 natural numbers .PERIOD  So ,COMMA  what do I want to do ?QUESTIONMARK  I want to do the following ,COMMA  I want to do  .PERIOD  So ,COMMA  how would I do it ?QUESTIONMARK  I would initialize a variable call sum ,COMMA  sum will be initialized 1 and then 2 sum I will add  ,COMMA  then to that I will add  and keep on going until  .PERIOD   So ,COMMA  let see how to code this in C using the for loop .PERIOD  So ,COMMA  I have a variable call reciprocal sum and even though I am summing over integers ,COMMA  we know that the reciprocal numbers will be real numbers .PERIOD  So ,COMMA  in order to keep the reciprocal sum I need a floating point number ,COMMA  floating point variable and then I have an integer variable ,COMMA  which goes from 1 to 100 .PERIOD  So ,COMMA  here is how I will do the loop ?QUESTIONMARK  First initialize i to 1 ,COMMA  if i <= 100 ,COMMA  you enter the loop and do reciprocal sum equal to the current reciprocal sum plus 1 over i .PERIOD  After doing that you update by saying i = i + 1 ,COMMA  .PERIOD  So ,COMMA  increment i .PERIOD  Once the increment is done ,COMMA  you test whether the new number is less than or equal to 100 ,COMMA  if it is less than or equal to 100 ,COMMA  you do the reciprocal sum come back update ,COMMA  until you reach 101 .PERIOD  At the point where you reach 101 you test whether i <= 100 that becomes false and you exit .PERIOD  So ,COMMA  you will see that when you exit out of the loop ,COMMA  the reciprocal sum will be the sum of reciprocals of numbers from 1 to 100 .PERIOD  So ,COMMA  here is how the for loop functions .PERIOD   So ,COMMA  instead of 100 let us try to executed on a particularly very small number to see how this for loop executes .PERIOD  So ,COMMA  let us instead of summing from 1 to 100 ,COMMA  let us sum from 1 to 4 .PERIOD  So ,COMMA  first you have the initialization expression .PERIOD  So ,COMMA  i is undefined before you enter the while loop ,COMMA  reciprocal sum is of course initialize to 0 .PERIOD  So ,COMMA  I can after initialization i will be 1 ,COMMA  as soon as it is initialized we will test whether it is less than or equal to 4 ,COMMA  1 is less than or equal to 4 that is true .PERIOD  So ,COMMA  you will enter the for  loop ,COMMA  then you add to the reciprocal sum 1 over i ,COMMA  i is 1 ,COMMA  .PERIOD  So ,COMMA  1 over 1 is 1 .PERIOD  So ,COMMA  reciprocal sum will be updated 2 reciprocal sum plus 1 .PERIOD  So ,COMMA  reciprocal sum would be 1 ,COMMA  then you go to the update expression ,COMMA  at this point you have i = i + 1 ,COMMA  So ,COMMA  i becomes 2 .PERIOD  Now ,COMMA  test whether i <= 4 yes it is and enter the loop .PERIOD  So ,COMMA  1 plus 0 .PERIOD 5 then go back to the update expression i becomes 3 now and test whether 3 is less than or equal to 4 it is ,COMMA  .PERIOD  So ,COMMA  enter the loop .PERIOD  So ,COMMA  you add 1 .PERIOD 5 plus  ,COMMA  1 .PERIOD 833 and .PERIOD  So ,COMMA  on ,COMMA  update again you have 4 ,COMMA  4 is less than or equal to 4 that is true .PERIOD  So ,COMMA  you enter the loop one more time and add 1 over 4 .PERIOD 25 to the current number .PERIOD  So ,COMMA  you get 2 .PERIOD 0833 and .PERIOD  So ,COMMA  on update again i becomes 5 ,COMMA  at this point 5 is not less than or equal to 4 ,COMMA  .PERIOD  So ,COMMA  you exit out of the for loop .PERIOD  Now ,COMMA  you say that print that the sum of reciprocals from 1 to 4 is reciprocal sum ,COMMA  which is 2 .PERIOD 0833 .PERIOD  So ,COMMA  even though the for loop looks complicated ,COMMA  once you start using it ,COMMA  it is very nice to right ,COMMA  you have a initialization expression ,COMMA  you have a test expression and then you have the update expression ,COMMA  that you should do after every execution of the loop ,COMMA  after every iteration you should have the update expression .PERIOD  As soon as the update is over ,COMMA  you test whether I can execute the loop one more time ,COMMA  if I can enter the loop update and test again and .PERIOD  So ,COMMA  on ,COMMA  until the loop condition is false .PERIOD  Let us take another example ,COMMA  you have two lines ,COMMA  the first line contains a single number m ,COMMA  which specifies how many numbers are there in the second line .PERIOD  The second line contains m integers and we have to just output the sum of the m numbers .PERIOD  Now ,COMMA  we know how to do this ,COMMA  we have already done this using a while loop ,COMMA  let us try to do it using a for loop .PERIOD  So ,COMMA  the sample input is let say the first line is 5 and then I have 5 integers on the second line .PERIOD  The strategy is very simple ,COMMA  you read the number on the first line into m and then have a variable called sum ,COMMA  which will start with the first number and keep on adding the subsequent numbers ,COMMA  until you have read m numbers initialize sum to 0 .PERIOD  So ,COMMA  run a for loop from the first number to the mth number and keep adding the numbers to sum .PERIOD  So ,COMMA  this loop will run for m times .PERIOD  So ,COMMA  let us code this up ,COMMA  you have m ,COMMA  i ,COMMA  sum and numbers which are all integers .PERIOD  First you scan the number m ,COMMA  initialize sum to 0 this is important .PERIOD  Because ,COMMA  if sum is not properly initialized it is sum garbage value and you keep adding numbers to it ,COMMA  you will get garbage value as the output .PERIOD  So ,COMMA  initialize the number sum properly to 0 and then here is the for loop ,COMMA  what the for loop does is ,COMMA  you start with i = 0 and go on until i less than m .PERIOD  Now ,COMMA  you could also do the following could start with i equal to 1 and go on until exactly m .PERIOD  So ,COMMA  if you start with i equal to 1 you will say i less than or equal to m ,COMMA  you can adapt either convention ,COMMA  in C it is more popular to start from 0 and go on until m minus 1 .PERIOD  So ,COMMA  you break the loop when i is equal to m .PERIOD  So ,COMMA  here is the test condition for the loop and then you have the loop body ,COMMA  which is you read the number and add the number to sum and after you have done that ,COMMA  you have the update expression which is i = i + 1 .PERIOD  So ,COMMA  here is the how the for loop looks you start from 0 and go on until i becomes m ,COMMA  you add the number and just increment i ,COMMA  which is i is the number of integers we have seen so far .PERIOD  Let us do trace of this execution ,COMMA  you start you have this integer variables and you first read m which is 5 ,COMMA  the number on the first line and then we do things in order ,COMMA  you have initialized sum to 0 ,COMMA  you start with i = 0 .PERIOD  Once you do the initialization expression i become 0 ,COMMA  i is less than m 0 less than 5 that is fine .PERIOD  So ,COMMA  you execute the loop ,COMMA  scan that next number ,COMMA  which is 2 add it to the sum .PERIOD  So ,COMMA  sum becomes 2 now update ,COMMA  update is increment i ,COMMA  .PERIOD  So ,COMMA  i becomes 1 and test whether 1 is less than 5 it is .PERIOD  So ,COMMA  you read the next number add it to the sum ,COMMA  .PERIOD  So ,COMMA  this sum becomes 1 update again and keep repeating this ,COMMA  until you have read all 5 numbers .PERIOD  So ,COMMA  when you read the 5th number i will be 4 ,COMMA  after that you add the 5th number to the summation .PERIOD  Once you done i will be incremented to 5 ,COMMA  5 is not less than 5 ,COMMA  5 is equal to 5 .PERIOD  So ,COMMA  you will exit out of the loop ,COMMA  at this point you will have the correct sum ,COMMA  .PERIOD  So ,COMMA  the correct sum will be 25 and you exit on .PERIOD  So ,COMMA  the printf will come out on one line ,COMMA  it will say that the sum of given 5 numbers is 25 .PERIOD  So ,COMMA  what I will recommend is ,COMMA  write the same program using a while loop and a for loop and see how you can easily go from while to for and for to while .PERIOD  The advantage of the for loop and the reason why for loop become ,COMMA  .PERIOD  So ,COMMA  popular among programmers is that ,COMMA  in comparison to the while loop ,COMMA  it is first of all it is easier to read .PERIOD  Because ,COMMA  you have all the initialization expression ,COMMA  the update expression and the test expression all on one line .PERIOD  So ,COMMA  you see what the loop is about .PERIOD  The second is that ,COMMA  it involves fewer lines of code ,COMMA  then the corresponding while loop .PERIOD  So ,COMMA  it is a very popular loop among programmers .PERIOD  Now ,COMMA  here is a syntactic convenient that C providers and let me make this remark as the final thing in this session .PERIOD  So ,COMMA  notices that we had to initialize two variables here .PERIOD  So ,COMMA  the first is sum was initialized to 0 and the second was that i was initialize to 0 .PERIOD  Now ,COMMA  would not be convenient ,COMMA  if I could do this together and that is what C provides us .PERIOD  So ,COMMA  I have something known as the comma operator .PERIOD  So ,COMMA  the normal comma that we have seen .PERIOD  So ,COMMA  in order to initialize multiple variables at the same time ,COMMA  I can say sum equal to 0 comma i = 0 .PERIOD  So ,COMMA  C will initialize the variables in the order ,COMMA  that it is given ,COMMA  first it in will initialize sum to 0 and then it will initialize the i = 0 .PERIOD  So ,COMMA  here is a very synthetically convenient notation that C provide for as the advantage again is that you end up with fewer lines of code .PERIOD   In this section ,COMMA  we will use the ,COMMA  for loop to code of the matrix problem .PERIOD  So ,COMMA  remember that we have seen while loop and we have seen a do while loop .PERIOD  Inside while loops we have written nested loops or double loops .PERIOD  So ,COMMA  let us look at a for loop which problem ,COMMA  where the solution involves a nested loop .PERIOD  So ,COMMA  the for loops are a good choice when the number of iterations is known in advance .PERIOD  So ,COMMA  a good example of such a condition is when you program for matrices ,COMMA  because the dimensions of a matrices are known in advance .PERIOD  So ,COMMA  let us consider a sample problem .PERIOD  So ,COMMA  the first line of the input has a number n now the matrix size is n X n and there are n floating point numbers in the matrix given row by row ,COMMA  each line contains a distinct row .PERIOD  Now ,COMMA  the problem is to compute the trace of the matrix ,COMMA  the trace of the matrix is the sum of the diagonal elements .PERIOD  So ,COMMA  it is defined as  .PERIOD  Notice that the matrix row indexing starts from 0 ,COMMA  similarly the matrix column indexing also starts from 0 .PERIOD  So ,COMMA  let us write a c program to solve this problem .PERIOD  Now ,COMMA  you should be familiar with how we compute the trace of a matrix .PERIOD  So ,COMMA  for example ,COMMA  if that matrix is given as let say 1 2 3 4 5 6 7 8 9 .PERIOD  So ,COMMA  the way we do it by hand is ,COMMA  look at the first row only this element goes into the trace .PERIOD  So ,COMMA  it is trace is 1 + ,COMMA  no other element of the row goes into the trace ,COMMA  in the second row the second element goes into the trace .PERIOD  So ,COMMA  it is 5 + and then no other remaining element goes into that trace and you go to the third row .PERIOD  And the third element goes in to the trace so ,COMMA  1 + 5 + 9 ,COMMA  this is how we do it by hand .PERIOD  You go row by row and then pick out for each row pick some element which goes into that trace only the diagonal element will go into the trace .PERIOD  Let us try to code this .PERIOD  So ,COMMA  in this we have two variables i and j which I will use to iterate over the row indices and the column indices n is the designator for the size of the matrix .PERIOD  For example ,COMMA  the dimension of the matrix is n X n .PERIOD  Now ,COMMA  a is the variable in to which I will read the current entry and then trace is the sum of the diagonal elements seen so far .PERIOD  I assume that it is an integer matrix ,COMMA  it is not general enough you can use a float variable as well .PERIOD  I will first scanf the size of the matrix n ,COMMA  the matrix is of dimension n X n .PERIOD  Once I have done that ,COMMA  here is what I was talking about in the previous slide ,COMMA  once you scan the number n you know that the matrix is n X n .PERIOD  So ,COMMA  the number of times that you are going to iterate is known in advance .PERIOD  So ,COMMA  the number of times that you have to iterate is known before you enter the for loop .PERIOD  In such cases the for loop is more convenient to write than the while loop .PERIOD  So ,COMMA  the outer loop is for each row from i = 0 ,COMMA  to i = n excluding i = n you increment the row .PERIOD  Similarly ,COMMA  for j = 0 to n you increment the column index so ,COMMA  j is supposed to be the column index .PERIOD  Now ,COMMA  you scan the number a now if i = j remember that we wanted to add the only the diagonal elements .PERIOD  So ,COMMA  the diagonal elements will be when the row index is the same as the column index .PERIOD  So ,COMMA  when the row index is the same as the column index ,COMMA  you should add the corresponding numbers to the trace .PERIOD  So ,COMMA  once j becomes n - 1 ,COMMA  you will fail the test j < n .PERIOD  So ,COMMA  we will exit out of the inner for loop ,COMMA  and you will go to the outer for loop .PERIOD  In the outer for loop you have i iterating over the row indices .PERIOD  So ,COMMA  you will go to the next row and do the same processing for the next row ,COMMA  until you hit row index n at which point you will exit out of the outer for loop .PERIOD  So ,COMMA  let us look at a sample input let say that you have 1 2 3 1 3 3 and -1 0 -1 .PERIOD  Here ,COMMA  is a particular convenience that c gives you which I have used in this code .PERIOD  So ,COMMA  notice that this if block I did not put the braces .PERIOD  So ,COMMA  it could have been necessary to put the braces according to the syntax that we have discussed so ,COMMA  far .PERIOD  But if there is only a single statement in the if block then ,COMMA  we do not need to put the braces and it is syntactically correct to do so .PERIOD  So ,COMMA  let us just run the program on a sample input .PERIOD  So ,COMMA  we have some sample array 2 0 -1 1 3 4 -1 0 1 .PERIOD  So ,COMMA  initially there is this number 3 .PERIOD  So ,COMMA  you know that it is a 3 X 3 matrix .PERIOD  So ,COMMA  once you do that you know that n is 3 so ,COMMA  representing that it is a 3 X 3 matrix .PERIOD  So ,COMMA  then you start with i = 0 and go on until i less than n incrementing i by 1 each time i is 0 i < n ,COMMA  because n is 3 .PERIOD  So ,COMMA  you enter the outer loop the first statement of the outer loop is itself a for loop ,COMMA  you start with j = 0 j < 3 .PERIOD  So ,COMMA  you enter the inner loop you scan a number a ,COMMA  which is a floating point number and if i = j .PERIOD  So ,COMMA  remember that we are looking for diagonal elements .PERIOD  So ,COMMA  we are currently at this point and i = 0 and j = 0 .PERIOD  So ,COMMA  we are entering we are scanning the zeroth element of the zeroth column of the zeroth row .PERIOD  So ,COMMA  that element has to go into the trace .PERIOD  So ,COMMA  i = j is true and then you say that trace = trace + a trace was initialize to 0 so ,COMMA  trace becomes now 2 .PERIOD  Once you do that ,COMMA  you iterate the inner for loop .PERIOD  So ,COMMA  you go to the updates statement in a inner for loop j becomes j + 1 .PERIOD  So ,COMMA  you go to the next column and the j < 3 .PERIOD  So ,COMMA  you scan the next number 0 if i = j that is false now ,COMMA  because i is 0 and j =1 .PERIOD  So ,COMMA  you do not execute the if statement and go to the update statement .PERIOD  So ,COMMA  j becomes 2 ,COMMA  2 < 3 .PERIOD  So ,COMMA  you scan 1 more number which is -1 ,COMMA  i is not j .PERIOD  So ,COMMA  you update again j becomes 3 ,COMMA  now 3 is not less than 3 ,COMMA  so ,COMMA  you exit out of the inner loop .PERIOD  When you exit out of the inner loop there are no more statements to execute .PERIOD  So ,COMMA  you go directly to the update statement in the outer loop which becomes i = i + 1 .PERIOD  So ,COMMA  you are reading the first row ,COMMA  row number 1 you are finished reading row number 0 .PERIOD  Again you scan the numbers when j = 1 that is the second number in the second row ,COMMA  you will see that i = j ,COMMA  because i is 1 and j =1 .PERIOD  So ,COMMA  you will add it to the trace .PERIOD  So ,COMMA  that is 2 + 3 which is 5 .PERIOD  So ,COMMA  trace gets updated and after you do that you scan the remaining entry in the same row ,COMMA  but it does not go to the trace ,COMMA  and then you have done with the row .PERIOD   After that again you go to the outer loop you update the row index of the row index is less is 2 which is less than 3 .PERIOD  So ,COMMA  you exit so ,COMMA  you enter the if condition and you execute the inner loop when i = 2 and j = 2 you will find an element which is -1 which will go in to the trace .PERIOD  So ,COMMA  the elements that will be added to that trace are when 2 3 and -1 .PERIOD  Once you are done you get out of the inner loop and then you go into the outer loop and update it ,COMMA  but then i becomes 3 it is no longer true that 3 is less than 3 .PERIOD  So ,COMMA  you have done reading all the rows .PERIOD  So ,COMMA  you exit the program when you exit the program you have the correct trace which is 4 .PERIOD   In this session we will see one more feature that is present in C associated with loops .PERIOD   So ,COMMA  we will in motivate these statements using the concept of an infinite loop .PERIOD  Here is a drawing that supposed to be a representation of an infinite loop .PERIOD    And a trivia ,COMMA  for example ,COMMA  the apple head quarters ;SEMICOLON  the address is one infinite loop .PERIOD    So ,COMMA  let us see what is an infinite loop ?QUESTIONMARK  So ,COMMA  the basic or the simplest kind of infinite loop is when you have a while statement .PERIOD  And the test condition ,COMMA  you can see that it will never be false .PERIOD  So ,COMMA  remember that 1 is true in c .PERIOD  So ,COMMA  this statement means that you will enter the while loop ,COMMA  you will test the condition .PERIOD  The test is true ,COMMA  so ,COMMA  you will execute the statement .PERIOD  You will go back and test the condition again ,COMMA  it is again true ,COMMA  does not changed ;SEMICOLON  it is 1 .PERIOD  Therefore ,COMMA  you will enter the statement again .PERIOD  So ,COMMA  you will have an infinity loop .PERIOD  If the test is executed then the control enters the body of the loop ,COMMA  and this happens without any change .PERIOD  So ,COMMA  let us look at this simple while loop which is while 1 .PERIOD  The statement is print f Hi! I am an infinite loop .PERIOD  So ,COMMA  if you will run this code ,COMMA  compile and run this code after you write the mean function and all that ,COMMA  then the program will keep on printing the same message over and over again .PERIOD  And you cannot exit out of the program .PERIOD  If you are running a Linux system you can press control c ,COMMA  and the program will exit immediately .PERIOD  But here is an infinite loop ;SEMICOLON  it executes an infinite number of times .PERIOD  So ,COMMA  is there a statement which helps us to exit from a loop ?QUESTIONMARK  Now ,COMMA  this is useful not just to handle infinite loops ,COMMA  even when you write normal loops it is important to have these constructs ;SEMICOLON  they make your programming easier .PERIOD  So ,COMMA  c allows a programmer to explicitly break out of a loop using a particular statement known as break .PERIOD  When the break statement is encountered ,COMMA  the execution breaks out of the inner most loop .PERIOD  So ,COMMA  what is a loop ?QUESTIONMARK  So far we have seen while loop ,COMMA  do-while loop ,COMMA  and for loop ;SEMICOLON  later we will see a construct called switch .PERIOD   So ,COMMA  whatever is the inner most loop ,COMMA  notice that we have talked about double loops ,COMMA  we have talked about the while loop within a while loop ,COMMA  we have talked about a for loop within a for loop ,COMMA  whatever is the inner most for loop within which a particular break occurs ,COMMA  it will exit out of that .PERIOD   So ,COMMA  let us write a very simple program which reads all numbers still -1 is seen and adds them up ;SEMICOLON  -1 is excluded .PERIOD  So ,COMMA  you will ,COMMA  you can write a while loop ;SEMICOLON  you have written this before where the while loops test condition was somewhat most sophisticated .PERIOD  Earlier we wrote something like while ,COMMA  if you recall ,COMMA  if you ,COMMA  we had written a loop saying ,COMMA  while (!(a == -1)) .PERIOD  So ,COMMA  this was the earlier loop that we had written .PERIOD   And in this case ,COMMA  let us write a similar program ,COMMA  but with a simpler test expression which is just while 1 .PERIOD  So ,COMMA  you always enter the loop ,COMMA  no matter what number you read .PERIOD  So ,COMMA  initialize the variable sum to 0 ,COMMA  declare the integer variable a ,COMMA  and then you enter the while loop because the test is true ;SEMICOLON  you scan a number ;SEMICOLON  and here is a use of the break statement .PERIOD   If the scanned number is -1 you break out of the loop ;SEMICOLON  if it is not -1 ,COMMA  you go to the next statement which is sum = sum + a .PERIOD  So ,COMMA  you add the number .PERIOD  Again you go back to the loop ;SEMICOLON  the test condition is always true ,COMMA  so ,COMMA  you enter and read the next number .PERIOD  So ,COMMA  the net effect of the loop is that whenever you see a -1 ,COMMA  it immediately exits out of a loop ;SEMICOLON  otherwise ,COMMA  it adds that number to the loop .PERIOD  So ,COMMA  let us look at using a sample input .PERIOD  Initially ,COMMA  a ,COMMA  is undefined ;SEMICOLON  it is just declared .PERIOD  So ,COMMA  it has some garbage value .PERIOD  And sum is initialized to 0 .PERIOD  Let us say that the input is 5 ,COMMA  3 ,COMMA  2 ,COMMA  -1 .PERIOD  While 1 ,COMMA  so ,COMMA  1 is true ;SEMICOLON  therefore ,COMMA  you enter the while loop ;SEMICOLON  you scan f ,COMMA  the first number .PERIOD  So ,COMMA  a ,COMMA  becomes 5 ;SEMICOLON  a ,COMMA  is not -1 .PERIOD  Therefore ,COMMA  you go to sum = sum + a .PERIOD  So ,COMMA  sum becomes 5 .PERIOD   And then you go back to the while loop ;SEMICOLON  the test condition is still true ,COMMA  while 1 .PERIOD  So ,COMMA  you read the next number 3 ;SEMICOLON  3 is not -1 .PERIOD  So ,COMMA  you add it to the sum ;SEMICOLON  sum becomes 8 .PERIOD  And you go back ;SEMICOLON  the same thing occurs .PERIOD  So ,COMMA  you have the third number read which is 2 ;SEMICOLON  add it to the sum ,COMMA  and sum becomes 10 .PERIOD  Then you read the next number ;SEMICOLON  and now ,COMMA  a ,COMMA  is -1 .PERIOD  So ,COMMA  what happens ?QUESTIONMARK  The ,COMMA  if condition ,COMMA  the expression within the if statement is true ;SEMICOLON  and you execute the statement inside the if condition ,COMMA  the statement is break .PERIOD   So ,COMMA  recall that the rule of break says that exit out of the inner most loop .PERIOD  So ,COMMA  in particular ,COMMA  what is the inner most loop ?QUESTIONMARK  You look ,COMMA  you starting from here ,COMMA  and imagine that you are going outwards towards the top of the program .PERIOD  The first loop that you will encounter on its way that is the loop that you will exit out of… In particular ,COMMA  break does not mean that exit out of the if condition ;SEMICOLON  break means that exit out of the first loop that you see when you start from the statement and work outwards .PERIOD  So ,COMMA  that is this while loop .PERIOD  Break means you will exit out of that while loop and print this statement .PERIOD  So ,COMMA  you will print that the output is 10 .PERIOD  So ,COMMA  let we have been dealing with integers for a long time .PERIOD  Let us write a small program using characters .PERIOD  So ,COMMA  here is a problem ,COMMA  and let us say that we are writing a very simple editor .PERIOD  Now ,COMMA  the editor has the following property .PERIOD  There are a particular number of maximum characters that you can read ;SEMICOLON  maybe it is 1000 .PERIOD  So ,COMMA  you can type in a bunch of characters until one of the two conditions occur ;SEMICOLON  either you enter a blank line by itself which is indicating that I am done entering the text or you enter more than the maximum number of characters available .PERIOD   So ,COMMA  recall ,COMMA  there are two conditions for exiting out of our so called editor ;SEMICOLON  you can type a lot of characters ,COMMA  if your limit was 1000 and you exit 1000 then you cannot type in any more characters ,COMMA  and you exit .PERIOD  Otherwise ,COMMA  if you are within 1000 characters but you entered a blank line that is indicating that you are done ,COMMA  you have nothing more to enter ,COMMA  then also you should exit .PERIOD  So ,COMMA  there are two conditions .PERIOD  Let us try to write this code .PERIOD   So ,COMMA  you have maximum characters .PERIOD  And let us say ,COMMA  I scan that .PERIOD  Then an ,COMMA  i ,COMMA  which counts how many characters I have read so far ;SEMICOLON  so ,COMMA  i should initialize to 0 .PERIOD  And then there is a current character ,COMMA  and then there is a previous character .PERIOD  So ,COMMA  I will initialize current to the new line character .PERIOD  Now ,COMMA  there is a particular reason for that which will become clear later .PERIOD  So ,COMMA  you should initialize current to a particular character .PERIOD   And then what I do is ,COMMA  use the getchar function .PERIOD  So ,COMMA  getchar function reads a particular character from the input and stores it in some variable if you need to .PERIOD  Instead you can also say something like scanf %c ,COMMA  and some ,COMMA  into some variable .PERIOD  So ,COMMA  you can do either of these two things .PERIOD  And they are almost equal .PERIOD  So ,COMMA  you read one more character .PERIOD  Now ,COMMA  what should you do ?QUESTIONMARK  You initialize by starting from 0 .PERIOD  So ,COMMA  you have read no characters until now .PERIOD  And until you read maximum member of characters ,COMMA  so you execute this loop .PERIOD  Remember that I said that for loop is good when you know the number of iterations in advance .PERIOD  So ,COMMA  we know that atmost we will execute maximum number of character times because that is the maximum number of characters we are allowed to field .PERIOD  So ,COMMA  for loop is slightly better than a while loop .PERIOD  You can also do it using a while loop if you want .PERIOD  So ,COMMA  you say for i = 0 ,COMMA  i less than maximum characters ,COMMA  i = i + 1 .PERIOD  Now ,COMMA  we will do this programming style that we should be familiar with right now .PERIOD  So ,COMMA  previous becomes current and current becomes the next character ;SEMICOLON  so ,COMMA  previous equal to current .PERIOD  So ,COMMA  this will store the current character into the variable previous .PERIOD  Then you read the next character using getchar .PERIOD  And as I said before ,COMMA  you can also write equivalently scanf (“%c” ,COMMA  & current) .PERIOD  So ,COMMA  both these are almost equivalent that is a slight difference ,COMMA  but we will it is not important as of now .PERIOD  Now ,COMMA  if current is new line and the previous was new line ,COMMA  so ,COMMA  when will that happen ?QUESTIONMARK  Suppose I write this is a sentence ,COMMA  I will explicitly represent the new line .PERIOD  So ,COMMA  when I press enter I will have a new line character here .PERIOD  And when will a blank line occur ?QUESTIONMARK  When the next character is also new line .PERIOD  So ,COMMA  by a blank line what I mean is that the current sentence is over ,COMMA  so I press a new line ;SEMICOLON  and the next character on the next line is also a new line ;SEMICOLON  that is what is actually meant by a blank line .PERIOD   So ,COMMA  when that happens then we know that an empty line has been encountered ;SEMICOLON  and here is the important thing break because one of the conditions to exit out of that loop was that either at maximum number of characters is encountered or a blank line is encountered .PERIOD  So ,COMMA  you may not have encountered maximum number of characters ,COMMA  but you have encountered a blank line .PERIOD  So ,COMMA  you should exit out of the proof ,COMMA  exit out of the loop .PERIOD  Again the rule is that break out of the inner most for loop ,COMMA  inner most loop ,COMMA  which in this case is just for loop .PERIOD  So ,COMMA  you get out of that loop and printf a new line .PERIOD   Now ,COMMA  as with many constructs in c ,COMMA  you can avoid break all together .PERIOD  You can write code if you have used break ,COMMA  you can right equivalent logic without using break .PERIOD  So ,COMMA  here is a standard way to do it .PERIOD  So ,COMMA  here is the code that we just dealt with .PERIOD  It had 2 exit conditions - one is that the number of characters that you read is greater than the maximum allowed ;SEMICOLON  another exit condition was that you had entered a blank line .PERIOD  So ,COMMA  here we used the break statement .PERIOD   And now I want to write an equivalent loop without using the break statement .PERIOD  And here is a very standard programmatic style .PERIOD  These are known as flags .PERIOD  So ,COMMA  flag is just a variable which indicates that a particular condition has occurred .PERIOD  Initialize flag to just 0 .PERIOD  In our code ,COMMA  what flag is supposed to do is that it will indicate whether a blank line has occurred or not .PERIOD  So ,COMMA  let us first look at the body of the loop ;SEMICOLON  without looking at the loop head first .PERIOD  Let us just look at the body of the loop .PERIOD  So ,COMMA  it is similar to what went before .PERIOD  Instead of the break statement ,COMMA  what I will do is ,COMMA  if I realize that an empty line has happened then I will set flag to 1 ;SEMICOLON  notice that flag was initially 0 .PERIOD   So ,COMMA  flag = 1 will indicate that an empty line has been seen .PERIOD  Now ,COMMA  I will modify the loop as follows .PERIOD  Remember that the test condition here is just that maximum number of characters has occurred .PERIOD  Instead ,COMMA  I will check for two conditions in the for loop .PERIOD  I will check that maximum number of characters have not occurred ,COMMA  and I will also check that flag is not 1 because flag is 1 means that a new line ,COMMA  a blank line has been encountered .PERIOD  So ,COMMA  I will check for both these conditions in the for loop itself .PERIOD  If either of them is true that is ;SEMICOLON  sorry ,COMMA  if either of them is false that is if i is greater than or equal to maximum characters ,COMMA  or flag = 1 ,COMMA  then the test condition will become false and you will exit out of the loop .PERIOD  So ,COMMA  here is a standard way to avoid a break .PERIOD  And notice that this condition is negated in the for loop because the condition in the for loop is the condition for entering the loop .PERIOD  So ,COMMA  to exit out of the loop you need flag = 1 .PERIOD  So ,COMMA  in summary ,COMMA  what I want to say is that if you want to write a code using break ,COMMA  you can also write it without using break .PERIOD  One of the standard way to do it is by using a flag variable for whatever condition that we want to check .PERIOD  You can pick either of this style whichever suits you more .PERIOD  So ,COMMA  how do we decide whether to use the break statement or not ?QUESTIONMARK  Sometimes the use of the break statement can simplify the exit condition .PERIOD  And on the other hand ,COMMA  it could also make the code a bit harder to read .PERIOD  What do I mean by harder to read ?QUESTIONMARK  When I see the for loop in the code on the right hand side ,COMMA  it is clear that there are two ways to exit out of the for loop - one is i greater than or equal to maximum characters ,COMMA  the other is flag = 1 .PERIOD  Just by looking at the for loop ,COMMA  I can say that ,COMMA  ok ,COMMA  here are the two conditions for which the loop will terminate - i greater than are equal to maxchar ,COMMA  or flag = 1 .PERIOD  On the other hand ,COMMA  if you look at this left hand side code ,COMMA  I actually have to look at the body of the code to realize what are the ways of exiting out of loop .PERIOD  So ,COMMA  you have to understand the body of the loop in order to see what are the conditions for the loop to exit .PERIOD  It is not just i greater than or equal to maxchar .PERIOD  So ,COMMA  in that sense ,COMMA  the code with break is harder to understand than the code without break .PERIOD  It still recommended to use break when you have two or more exit conditions out of a for loop .PERIOD  So ,COMMA  typically programmers do use break and it is just a matter of style whether you we will use break or not ;SEMICOLON  I myself prefer using a break .PERIOD  One final thing about the break statement ;SEMICOLON  when you use break statement initially ,COMMA  it is important to notice that break causes an exit immediately out of the loop .PERIOD  So ,COMMA  remember when you have a for loop ,COMMA  the normal execution order is you initialize ,COMMA  then you test .PERIOD  So ,COMMA  this is step 1 ,COMMA  this is step 2 ,COMMA  then you execute the body of the loop that step 3 ,COMMA  and then you update this is step 4 ,COMMA  and then go back to the test condition .PERIOD  So ,COMMA  this is the normal execution order of the loop .PERIOD  When you encounter a break ,COMMA  you exit immediately out of the loop .PERIOD  In particular ,COMMA  when you break you do not go back to the update statement .PERIOD  So ,COMMA  let us examine what this code will do ?QUESTIONMARK  You have ,COMMA  i = 0 ,COMMA  i<10 ;SEMICOLON  increment i .PERIOD  So ,COMMA  you start with i = 0 ;SEMICOLON  i%2 will be 0%2 which is 0 .PERIOD  So ,COMMA  it will say ,COMMA  ok fine ,COMMA  you need not get into the if condition .PERIOD   Then i = i + 1 ;SEMICOLON  so ,COMMA  i equal to 1 ;SEMICOLON  1 < 10 ;SEMICOLON  you enter the for loop ;SEMICOLON  1%2 is 1 ;SEMICOLON  so ,COMMA  you will break .PERIOD  When you break you immediately get out of a loop .PERIOD  So ,COMMA  when you print this then i will be 1 .PERIOD  So ,COMMA  in particular ,COMMA  i is not 2 ,COMMA  which is what will happen if you go back and update i = i + 1 ,COMMA  before exiting out of the loop .PERIOD  So ,COMMA  the important thing to notice is that it is not 2 ,COMMA  since i = i + 1 is not done when you break .PERIOD  When you break you get out the loop immediately without doing the update state .PERIOD   We have seen the break statement ,COMMA  which is a statement used when you are in the middle of a loop and you encounter a condition and you want to exit the inner most loop .PERIOD  There will also be occasions in a program ,COMMA  when you are in the middle of a loop and you encounter some condition and then ,COMMA  you realize that you do not need to execute this iteration ,COMMA  you just can go to the next iteration .PERIOD  So ,COMMA  skip the current iteration .PERIOD  The break statement was ,COMMA  you encounter a condition and you say ,COMMA  I am done ,COMMA  I will exit out of the inner most loop .PERIOD  Here ,COMMA  it is not exiting out of the inner most loop ,COMMA  it just skipping the current iteration .PERIOD  For this ,COMMA  we will see the continuous statement and let us motivate this by an example .PERIOD   So ,COMMA  continue the statement causes the next iteration of the closest enclosing for while or do while loop .PERIOD  Let us motivate it with a very simple example .PERIOD  Let us say that we are reading numbers coming in a stream and what we have to do is to skip the negative numbers .PERIOD  So ,COMMA  we have to read all the positive numbers and reading should be finally over ,COMMA  when you encounter some input which is not a number .PERIOD  How do we do this ?QUESTIONMARK  Let us imagine that you have the main and things like that written and the central part of the code can be analyzed as follows .PERIOD  So ,COMMA  you have integer variable a and let us examine the code in closer details .PERIOD  So ,COMMA  what we need to do is ,COMMA  we may have an input sequence that looks like this ,COMMA  1 ,COMMA  -1 ,COMMA  2 and then  .PERIOD  .PERIOD  So ,COMMA  let us say that the input sequence is something like this .PERIOD  What we will do is ,COMMA  we will do this scanf operation to get the numbers .PERIOD  So ,COMMA  scanf operation will read the first entry as 1 ,COMMA  it will read the second entry as 1 .PERIOD  The third entry as -1 and the third entry is 2 and so ,COMMA  on .PERIOD  So ,COMMA  that is what is scanf( “%d” ,COMMA  &a ) ,COMMA  we are already familiar with this .PERIOD  But ,COMMA  what does = 1 mean ?QUESTIONMARK  So ,COMMA  this is something that we have not uncounted .PERIOD  So ,COMMA  far the scanf statement has a return value ,COMMA  it gives you the number of inputs that was successfully read .PERIOD  For example ,COMMA  we are trying to read an integer in the %d specifier .PERIOD  So ,COMMA  when we try to read the first entry ,COMMA  it should succeed .PERIOD  So ,COMMA  this will succeed ,COMMA  when you try to read the second entry ,COMMA  it should succeed ,COMMA  when you try to read the third entry ,COMMA  it should succeed .PERIOD  In all these ,COMMA  the scanf %d will return a 1 .PERIOD  Because ,COMMA  one entry has been read correctly .PERIOD  Here ,COMMA  it will fail ,COMMA  because it tries to read a natural number here ,COMMA  but what it see is a  .PERIOD  ,COMMA  a full stop character and that is not a number .PERIOD  So ,COMMA  scanf %d will simply fail .PERIOD  So ,COMMA  this is what I said ,COMMA  it returns the number of conversions that have been successfully made .PERIOD  So ,COMMA  when you try to read an input like 1 ,COMMA  -1 ,COMMA  2 ,COMMA   .PERIOD  it was succeed in a first three scanf and the last scanf ,COMMA  it will fail .PERIOD  So ,COMMA  that is what the scanf is supposed to do .PERIOD  So ,COMMA  as long as you have read a number .PERIOD  So ,COMMA  while you have read a number ,COMMA  you examine whether it is a positive number .PERIOD  If it is a negative number that is ,COMMA  if a < 0 ,COMMA  then you say continue which is saying that ,COMMA  I do not need to execute the remaining part of the loop .PERIOD  So ,COMMA  this part of the loop will be skipped ,COMMA  if a < 0 .PERIOD  Continue means ,COMMA  go from here and start executing the next iteration of the loop .PERIOD  Let us go head and complete the code .PERIOD  So ,COMMA  let us modify the problem as a little bit ,COMMA  read the integers until a non digit is found .PERIOD  And let us do something with the positive integers .PERIOD  Let us say that we have to find the largest of the positive integers .PERIOD  So ,COMMA  what should we do ?QUESTIONMARK  Again ,COMMA  let us try to do it by hand to get a feel for ,COMMA  what I will be doing ?QUESTIONMARK  So ,COMMA  I have 1 -1 2  .PERIOD  .PERIOD  Let us say that I initialize the maximum to some reasonable value .PERIOD  Since ,COMMA  we are looking at the largest of the positive integers I can initialize maximum to 0 .PERIOD  Then ,COMMA  I look at the first one ,COMMA  the maximum read .PERIOD  So ,COMMA  for .PERIOD  So ,COMMA  it is a positive entry ,COMMA  .PERIOD  So ,COMMA  I will update max = 1 .PERIOD  Then ,COMMA  I read the next number and it is a negative numbers ,COMMA  .PERIOD  So ,COMMA  skip it .PERIOD  Then ,COMMA  I read the third number which is a positive number .PERIOD  So ,COMMA  I will update the maximum to 2 .PERIOD  So ,COMMA  this is the part that we want to focus ,COMMA  if it is a negative number ,COMMA  skip .PERIOD  So ,COMMA  here is the code for doing that ,COMMA  while the currently read input is a number ,COMMA  that is why the %d succeeded and one entry was correctly read .PERIOD  So ,COMMA  if the number was read ,COMMA  check whether the number is negative .PERIOD  If the number is negative ,COMMA  continue .PERIOD  Continue means go to the next iteration of the loop .PERIOD  Do not do ,COMMA  what is remaining in the loop .PERIOD  So ,COMMA  if the currently read number is non negative ,COMMA  what you will check whether their current maximum is less than the new number .PERIOD  If it is less than the new number ,COMMA  you reset the maximum to the new number .PERIOD  So ,COMMA  this is the code that we have written similar to other codes that we have seen .PERIOD  So ,COMMA  you update the maximum number and go and read the next number .PERIOD  If the currently read number is negative ,COMMA  then we will say continue .PERIOD  So ,COMMA  we will not update the maximum .PERIOD  This is what the continue is supposed to be .PERIOD  Now ,COMMA  as in break you can also write equivalent code without using the continuous statement .PERIOD  So ,COMMA  let us try to do that and for doing that all we have do is ,COMMA  make sure that the maximum is updated only if it is a non-negative number .PERIOD  So ,COMMA  this says if it is a negative number ,COMMA  do not do the next statement .PERIOD  This says ,COMMA  if it is a non-negative number ,COMMA  then update maximum if necessary .PERIOD  So ,COMMA  it can be written with one more level of nested if .PERIOD  So ,COMMA  this is that if a is non-negative ,COMMA  then execute the next statement .PERIOD  Here .PERIOD  it says that if a is negative ,COMMA  then continue which means skip to the next statement .PERIOD  So ,COMMA  notice that these two conditions are the negations of each other .PERIOD  The long and short of it is that continue is not really necessary .PERIOD  But ,COMMA  if you have it ,COMMA  then it is useful and it makes the code clearer in certain occasions .PERIOD  What happens to continue in a for loop ?QUESTIONMARK  Noticed that ,COMMA  for loop has the following form ,COMMA  you have for ,COMMA  then there is an initialization expression .PERIOD  Then ,COMMA  there was a test and finally ,COMMA  there was update and then ,COMMA  you have the body of the loop .PERIOD  What happens if you encounter a continue in the middle of the loop ?QUESTIONMARK  In the case of a while loop ,COMMA  it is very clear ,COMMA  you go to the test expression ,COMMA  you go to the next iteration .PERIOD  The only contention is ,COMMA  in the case of a for loop ,COMMA  do you go to the update statement ?QUESTIONMARK  And the answer is yes ,COMMA  then you skip the remaining part of the loop .PERIOD  So ,COMMA  this is the remaining part of the loop that you would skipped .PERIOD  When you skip that you go directly to the update statement .PERIOD  Notice that ,COMMA  when you do the break .PERIOD  So ,COMMA  if the statement has a break ,COMMA  you break immediately out of the loop without doing the update .PERIOD  In the case of a continue ,COMMA  you have to do the update .PERIOD  And as with the break statement ,COMMA  the continue statement is also redundant ,COMMA  you can program without using the continue statement as well .PERIOD  But ,COMMA  it is useful if whereas ,COMMA  already a few levels of nesting of the if statements inside it .PERIOD  We saw in the previous slide that ,COMMA  you could avoid continue statement by using an extra level of nested if statement .PERIOD  Now ,COMMA  if you do not want to complicate the code in that way ,COMMA  you can use a continues statements .PERIOD  Otherwise ,COMMA  in other cases you may want to exit out of the loop ,COMMA  in that case you can use the break statement .PERIOD  So ,COMMA  they are extra feature that the C language provides ,COMMA  they are not really necessary ,COMMA  but they are used with .PERIOD  Let us do a sample program using continue statements ,COMMA  I will introduce the problem initially ,COMMA  the problem is that of finding Pythagorean triples .PERIOD  By the way Pythagorean triples are numbers like are triplets of numbers like 3 ,COMMA  4 and 5 .PERIOD  Because ,COMMA  you know that  .PERIOD  So ,COMMA  the Pythagorean triples because there can be a right triangle ,COMMA  where let say the base 3 ,COMMA  the altitudes is 4 and the hypotenuse is 5 .PERIOD  So ,COMMA  3 ,COMMA  4 and 5 could be the sides of right triangle ,COMMA  because they satisfy the Pythagorean identity .PERIOD  So ,COMMA  here is a problem we a given a stream of numbers and let us say there are n numbers .PERIOD  So ,COMMA  the initial number says how many other numbers there are .PERIOD  So ,COMMA  8 says that there are 8 numbers to process ,COMMA  after you read n ,COMMA n >=2 ,COMMA  you have to read n integers and then you have to identify Pythagorean triplets occurring consecutively .PERIOD  By consecutively we will say that consecutive positive integers .PERIOD  Because ,COMMA  in the middle there could be negative numbers sees you have to just ignore them .PERIOD  For example ,COMMA  you have that 3 ,COMMA  4 and 5 are consecutive ,COMMA  positive entries in this data .PERIOD  Because ,COMMA  -3 ,COMMA  -4 and -5 are negative numbers .PERIOD  So ,COMMA  consecutive in this context need not mean that they occur together ,COMMA  it just means that ,COMMA  if we ignore the negative numbers and between then they are together .PERIOD  So ,COMMA  we have to identify all such Pythagorean triples .PERIOD  So ,COMMA  in this case the Pythagorean triple in the input sequence is 3 ,COMMA  4 and 5 .PERIOD  So ,COMMA  let us try to code it .PERIOD  I hope you see how it can be done ?QUESTIONMARK  So ,COMMA  let us try to do it my hand .PERIOD  So ,COMMA  let us say that I have and then some negative numbers in between and so on .PERIOD  So ,COMMA  some positive numbers ,COMMA  some negative numbers in between till I find the .PERIOD  .PERIOD  .PERIOD  So ,COMMA  I have let us if four ,COMMA  six numbers .PERIOD  So ,COMMA  the input is of the following for what I need to do is ,COMMA  at any point I may have to remember some triple .PERIOD  So for example ,COMMA  the first triple that I will find is the following .PERIOD  So ,COMMA  this is the first number ,COMMA  this is the second number and this is the third number and what I have to do is to check whether ,COMMA   .PERIOD  So ,COMMA  this is what I have to check ?QUESTIONMARK  Now ,COMMA  suppose that 1 ,COMMA  3 and 4 are not a Pythagorean triple ,COMMA  they are not .PERIOD  Because ,COMMA   is not  .PERIOD  Then ,COMMA  what do you have to do ?QUESTIONMARK  You have to advance all these first ,COMMA  second and third variables .PERIOD  So ,COMMA  let us try to advance the third variable ,COMMA  the next interesting number is 5 ,COMMA  because that is the next positive number .PERIOD  So ,COMMA  the next iteration should check for the following ,COMMA  this should be the third number ,COMMA  4 should be the second number and 3 should be the first number .PERIOD  If you do that ,COMMA  then you know that  and you will indentify a Pythagorean triple .PERIOD  So ,COMMA  what we do is ,COMMA  that we have to shift all these variables ,COMMA  first ,COMMA  second and third by one positive entry .PERIOD  So ,COMMA  this is what we have to do ,COMMA  we have to remember three numbers ,COMMA  the current number that we have seen ,COMMA  the previous positive number that we have seen and the previous to previous positive number that we have seen .PERIOD  So ,COMMA  this is one situation where you need to remember three variables .PERIOD  And once you check whether the current triplets satisfy it ,COMMA  if you satisfy it fine .PERIOD  If you do not satisfy it ,COMMA  you have to advance the variables by one .PERIOD  So ,COMMA  first will take over second ,COMMA  second will take over third and third will go to the next positive number .PERIOD  So ,COMMA  this is the method of programming this ,COMMA  let us try to code this out .PERIOD  So ,COMMA  we will write the code as follows ,COMMA  we need three variables ,COMMA  the current number ,COMMA  the previous number and the previous to previous number .PERIOD  Currently will leave all of them undefined ,COMMA  n is the number of integers to read ,COMMA  i is we will eventually try to do .PERIOD  So ,COMMA  for the for loop we need a counter .PERIOD  So ,COMMA  I will basically count from 1 to n to ensure that n numbers have been read .PERIOD  I will also have an extra variable call count ,COMMA  i is suppose to count the numbers seen so for and count will count the positive numbers seen ,COMMA  so for .PERIOD  So ,COMMA  I need two half them in this code I mean in that .PERIOD  Now ,COMMA  after you do that you scan the n ,COMMA  which tells you how many numbers are there in the input ?QUESTIONMARK  Now ,COMMA  a for loop has to go here which will do most of the work in the code .PERIOD  So ,COMMA  let us see what that loop looks like ?QUESTIONMARK  So ,COMMA  recall what we did by hand ,COMMA  you will look at the current number which is the next number to read ,COMMA  if the next number is 0 or less than 0 you say continue .PERIOD  So ,COMMA  this is the application of the continue statement here .PERIOD  So ,COMMA  if says if the current number is not positive ,COMMA  you just go onto the next iteration of the loop .PERIOD  Now ,COMMA  here is some logic which is not easy to read ,COMMA  but we can motivate it the following ,COMMA  if the current number that I have seen is the first positive number .PERIOD  When obviously ,COMMA  then this was the first number that I have read .PERIOD  Therefore ,COMMA  there was no previous number and there was no previous to previous number .PERIOD  So ,COMMA  I will because this the first positive number that I am reading ,COMMA  then I will just set there the previous to previous number is the current number ,COMMA  also I have seen one positive number .PERIOD  So ,COMMA  I will say increment count ,COMMA  count = 1 .PERIOD  So ,COMMA  if the current number that I have seen is positive and it is not the first positive number .PERIOD  That means ,COMMA  if count = 1 I already seen one positive number ,COMMA  then what to you do is ,COMMA  you know that there is a previous to previous number ,COMMA  you set the previous number to the current number and you continue the loop setting that count = 2 ,COMMA  which says that I have seen two positive numbers .PERIOD  So ,COMMA  I have a previous to previous number and I have a previous number ,COMMA  now I will read the next number .PERIOD  This is because in order to identify a triple ,COMMA  you need at least three numbers .PERIOD  So ,COMMA  previous to previous and previous should already been to some positive values in the input ,COMMA  this is why we initially said that ,COMMA  we need at least two inputs .PERIOD  So ,COMMA  we will go back to the loop if count = 1 ,COMMA  otherwise let us say that count is at least 2 ,COMMA  so it is 2 or more .PERIOD  So ,COMMA  in this case we will just say that as for as count is consent I do not need to keep track of how many positive numbers are needed ?QUESTIONMARK  It was used only to see that I have at least two positive numbers to begin with .PERIOD  So ,COMMA  that I can add the next number as the possible third number in the triple .PERIOD  So ,COMMA  I will not update count from now one ,COMMA  you can also do that ,COMMA  but count after words serves no purpose .PERIOD  So ,COMMA  I will say that count is 2 and I will just adopt the convention that it will remain to .PERIOD  So ,COMMA  I will seen at least two positive numbers ,COMMA  now I have also a third number in the current .PERIOD  So ,COMMA  you have previous to previous ,COMMA  you have previous and you have current .PERIOD  So ,COMMA  these are the three numbers that you have .PERIOD  So ,COMMA  what you have to check is ,COMMA  whether .PERIOD  So ,COMMA  that is what we will check ,COMMA  we will check whether previous to previous square plus previous square is equal to current square ,COMMA  if that is true then you have found the Pythagorean triple .PERIOD  So ,COMMA  you will just say that I will printf that I have found the Pythagorean triple ,COMMA  which is found by previous to previous ,COMMA  previous and current .PERIOD  Now ,COMMA  what I will do if the Pythagorean triple is found is that I will advance previous to previous by one .PERIOD  So ,COMMA  previous to previous will become previous ,COMMA  previous will become current .PERIOD  So ,COMMA  recall that figure that I first true and then we will go back to the loop .PERIOD  So ,COMMA  this is the code for kind identifying the Pythagorean triples and the encodes exactly the logic that we did by hand .PERIOD  In this session ,COMMA  we will learn about one more fundamental data type in C .PERIOD  So ,COMMA  far we have seen ints and floats .PERIOD  Ints are supposed to represent integers and floats are supposed to represent real numbers .PERIOD  We will see the third most important data type which is character .PERIOD  So ,COMMA  it is called char in c or char .PERIOD  C allows a character data type to be 1 byte that is 8 bits wide ,COMMA  and 1 byte can hold exactly one character .PERIOD  For example ,COMMA  a character may be a digit like 0 so ,COMMA  on up to 9 .PERIOD  It can be lower case letter like a up to z ,COMMA  it can be upper case letter like capital A through capital Z and so ,COMMA  on .PERIOD  Similarly ,COMMA  there are other characters question marks and sharp and so ,COMMA  on .PERIOD  So ,COMMA  how do you declare a character variable ,COMMA  how do you assign it and how do you print or scan it .PERIOD  So ,COMMA  these are the basic operations that you can do with any data type .PERIOD  So ,COMMA  you declare a character variable using the data type char ch will declare variable of name ch and of data type char .PERIOD  In order to assign it to any particular constant ,COMMA  any particular character ,COMMA  what you have to do is ,COMMA  you write ch = ‘A’ .PERIOD  So ,COMMA  this is how you would assign any character in constants .PERIOD  All the character in constants are supposed to be enclosed in this single code .PERIOD  For example ,COMMA  ‘0’ stands for the character 0 and not the number 0 and similarly ,COMMA  a within single code stands for character a .PERIOD  Now ,COMMA  how do you prints print a characters you can use the format specifier %c .PERIOD  So ,COMMA  recall that %d prints an integer and %f prints of float ,COMMA  we have the third fundamental data type which is character which can be printed using a %c .PERIOD  So ,COMMA  if you say print f %c ch ,COMMA  it will print a .PERIOD  There is also an abbreviator notation where as soon as you declare the variable ,COMMA  you can initialize it using character ch equal to a .PERIOD  This is similar to saying int I equal to zero .PERIOD  It is the same concept .PERIOD  Now ,COMMA  what can we do with a character data type ?QUESTIONMARK  For example ,COMMA  we can assign character constants to those characters variables .PERIOD  Now ,COMMA  what does a character variable mean ?QUESTIONMARK  Here is the first surprise .PERIOD  The value of a character constant is an integer that the machines represent ,COMMA  machine stores which is usually the ASCII set .PERIOD  What does this mean ?QUESTIONMARK  The machine deals with fundamentally bits .PERIOD  So ,COMMA  you have a data field which is 8 bits wide and this is sequence of bits say 1 0 1 1 0 1 1 1 .PERIOD  Now ,COMMA  here is the bit pattern and if you see that this bit pattern is a char ,COMMA  then the machine takes this integer ,COMMA  takes this bit pattern as an integer and looks up a table known as the ASCII set table and sees which character it is .PERIOD  So ,COMMA  the value of the character constant is actually an integer .PERIOD  What does that integer represents ?QUESTIONMARK  The integer represents a particular entry in an ASCII character table and what entry is in that particular location ,COMMA  that is the character constant .PERIOD  So ,COMMA  think of it like the following .PERIOD  The character is just an uninterpreted sequence of bites .PERIOD  If you tell the machine ,COMMA  please read this as an integer ,COMMA  it will read this as an integer .PERIOD  If you read this ,COMMA  if you tell the machine please read this as a character ,COMMA  it will take that integer ,COMMA  go look up the ASCII table and see that this integer stands for the character c and prints that .PERIOD  So ,COMMA  by itself the bit pattern can be interpreted in multiple ways .PERIOD  So ,COMMA  here is a surprising thing which is different from natural language .PERIOD  There are certain natural languages where this does not typically happen with Indian languages ,COMMA  but there are certain languages where you have a character and how you read it depends on where you saw it .PERIOD  So ,COMMA  if it was in the middle of a text ,COMMA  then this is an alphabet .PERIOD  If you saw this in the middle of a numbers sequence ,COMMA  then it is a number .PERIOD  What happens in the machine is somewhat similar .PERIOD  You have a bit sequence and this thing is interpreted as a character by looking up the ASCII set .PERIOD  ASCII stands for American Standard Code for Information Interchange ,COMMA  and it is one of the popular encodings for characters used in computers .PERIOD  So ,COMMA  the code chart looks something like this .PERIOD  You have 256 characters and characters can be looked up in a table .PERIOD  The table entries are in hexadecimal so ,COMMA  base 16 .PERIOD  We will come to that little in the course why basic 16 is convenient ,COMMA  ,COMMA  but there are 8 rows and 16 columns in the table .PERIOD  So ,COMMA  in base 16 notation ,COMMA  a stands for 10 ,COMMA  b stands for 11 ,COMMA  c for 12 so ,COMMA  on up to f for 15 .PERIOD  So ,COMMA  this is what is meant by base 16 notation .PERIOD  So ,COMMA  let us look at what does the number 7 a represent .PERIOD  7 a is row 7 column number 10 .PERIOD  So ,COMMA  that is the number that I am interested in .PERIOD  What does 7 a represents ?QUESTIONMARK  It means 7 times 16 plus 10 .PERIOD  So ,COMMA  in base 10 notations ,COMMA  the number 76 let us say so ,COMMA  if I have this number 7 in base 10 notation ,COMMA  this ;SEMICOLON  obviously ,COMMA  stands for the numerical values 7 into 10 plus 6 .PERIOD  Similarly ,COMMA  in base 16 notation ,COMMA  7 a stand for 7 into 16 plus 10 .PERIOD  Remember that a is 10 .PERIOD  So ,COMMA  you have 112 and similarly ,COMMA  hexadecimal 2 3 .PERIOD  So ,COMMA  row 2 column 3 for example ,COMMA  hexadecimal 2 3 means look up 2 time 16 plus 3 ,COMMA  the 35th entry in the table .PERIOD  Now ,COMMA  here is the structure of the ASCII code set that you use in c ,COMMA  the first 32 characters basically from 0 0 hexadecimal to 1 f hexadecimal .PERIOD  So ,COMMA  these 32 characters which are shaded ,COMMA  are what are known as special characters ,COMMA  and they are not printable .PERIOD  They are required by the computer for certain special purposes .PERIOD  Code 2 0 that is decimal 32 ,COMMA  2 0 is 2 times 16 plus 0 .PERIOD  So ,COMMA  this particular entry corresponds to the space characters .PERIOD  So ,COMMA  this is just a blank space .PERIOD  Code 21 corresponds to the exclamation character and so ,COMMA  on .PERIOD  So ,COMMA  the printable characters in the ASCII code are hexadecimal 20 ,COMMA  that is decimal 32 until 126 .PERIOD  So ,COMMA  what is enclosed in the green parenthesis ,COMMA  these are all printable characters .PERIOD  Now ,COMMA  out of this ,COMMA  the capital letters start from x 41 which is 65 in decimal and go on up till decimal 90 .PERIOD  Small letters start from 97 and go on till 122 and so ,COMMA  on digits 0 to 9 occur before any character .PERIOD  So ,COMMA  why we need this information ?QUESTIONMARK  This is how the characters are stored in the computer and do we really need to know it ?QUESTIONMARK   The point is not that you have to memorize this table .PERIOD  You do not need to memorize the table ,COMMA  but you need to remember certain abstract properties of the table .PERIOD  We will make that precise in a moment .PERIOD  We do not have to say that the ASCII code for a is 65 or 42 that is a waste of our memory .PERIOD  So ,COMMA  let us just see what we can do with this table without really remembering what that table looks like .PERIOD  So ,COMMA  there are some ideas behind the design of the table ,COMMA  how the table is structured which c programmers can use .PERIOD  There is no need to remember that a particular character has a particular ASCII value .PERIOD  So ,COMMA  let us just recall .PERIOD  A character constant is an integer ,COMMA  namely the ASCII code for that character now which means that I will emphasize this with a very strange code .PERIOD  I can declare character ch and say char ch =‘A’ that ;SEMICOLON  obviously ,COMMA  initializes the character to a .PERIOD  It assigns the value a to the variable ch ,COMMA  but I could also do the following characters ch = 65 .PERIOD  Why 65 ?QUESTIONMARK  The ASCII value for a was 65 .PERIOD  So ,COMMA  instead of writing it as a within single code ,COMMA  I can write ch = 65 ,COMMA  and it will be the correct ASCII character anyway .PERIOD  Now ,COMMA  this means that the same character can also be interpreted as an integer if you really want to think of it that way .PERIOD  So ,COMMA  for example ,COMMA  I can say %f %c ch if I do it in print f ,COMMA  it will print it as .PERIOD  So ,COMMA  the first print f will print a ,COMMA  but I could also take a character variable and ask c to print it as an integer using %d ,COMMA  it will print 65 .PERIOD  So ,COMMA  remember that the external form that we see in some sense is the letter a .PERIOD  The internal representation is the number 65 because 65 is the entry in the ASCII table corresponding to the character a .PERIOD  Now ,COMMA  one more thing is that you can print arbitrary numbers ,COMMA  even non-printable characters you can sort of print them using c and one way to do that is I can print any 8 bit character with a hexadecimal representation like \s ,COMMA  \x followed by the hexadecimal to digit .PERIOD  For example ,COMMA  \x followed by 7 is the bell character .PERIOD  So ,COMMA  let me go back a couple of times ,COMMA  couple of slides .PERIOD  So ,COMMA  if you look at the 7th entry in the ASCII table ,COMMA  it is represented as bell .PERIOD  It is a small bell in your system .PERIOD  So ,COMMA  if you ask the system to print the 7th character in the ASCII table ,COMMA  what will happen is that your computer will make a small beep sound .PERIOD  So ,COMMA  there are certain non-printable characters which can also be printed directly using… ok .PERIOD  Similarly ,COMMA  let say \xb is the 11th number in the ASCII table ,COMMA  it is a vertical space .PERIOD  So ,COMMA  if you print that character ,COMMA  it prints a vertical space .PERIOD  Similarly ,COMMA  if I ask it to print hexadecimal 41 using \x41 so ,COMMA  x 41 is 4*16 + 1 which is 64 + 1=65 and we just saw that ASCII value 65 was the character a .PERIOD  So ,COMMA  if I ask it to print ch which is hexadecimal 41 as a character ,COMMA  then it will print the value a .PERIOD  So ,COMMA  when you run this program ,COMMA  what it will do is ,COMMA  first because you ask it to print a bell character ,COMMA  it will beep once ,COMMA  it will ring the bell and then ,COMMA  it will print the second character which is a vertical space .PERIOD  So ,COMMA  it will print a vertical space and then ,COMMA  the third character was a printable character a ,COMMA  it will print a .PERIOD  So ,COMMA  you can ask the system to print arbitrary entries in the ASCII table .PERIOD  If it is a printable character ,COMMA  it will print that corresponding character .PERIOD  If it is non-printable character ,COMMA  it might take a suitable action .PERIOD  So ,COMMA  just for information sake ,COMMA  instead of printing it as \x followed by the x code ,COMMA  c provides certain escape characters ,COMMA  some special sequences as well in order to print these non-printable characters .PERIOD  First of all until now we have seen one such number which is \n .PERIOD  So ,COMMA  \n is the new line character .PERIOD  It is a non-printable character ,COMMA  but it corresponds to some ASCII corrected .PERIOD  Similarly ,COMMA  for the other non-printable characters ,COMMA  c has some escape characters .PERIOD  For example ,COMMA  back slash a is the bell character and so ,COMMA  on .PERIOD  In the previous session ,COMMA  we were talking about ASCII character set .PERIOD  And I said that ,COMMA   we do not need to remember the ASCII table .PERIOD  But ,COMMA  we need to remember some general properties of the ASCII table .PERIOD  So ,COMMA  what are those general properties ?QUESTIONMARK  First ,COMMA  we know that the initial 32 characters of the ASCII table are non printable characters .PERIOD  Then ,COMMA  the remaining or rather from ASCII value 32 to ASCII value 126 are printable values .PERIOD  Among them ,COMMA  you know that the integers ,COMMA  the digits are occurring together .PERIOD  Similarly ,COMMA  the capital letters occur consecutively ,COMMA  one after the other .PERIOD  And the small letters occur consecutively ,COMMA  one after the other .PERIOD  So ,COMMA  this is an abstract property of the ASCII code chart that ,COMMA  helps us in writing some useful code .PERIOD  We will see in a minute ,COMMA  what kind of use we can obtain using these general properties .PERIOD  Rather ,COMMA  than knowing the specific things like ,COMMA  the character value of A is hex value 41 or decimal value 65 .PERIOD  This kind of information ,COMMA  we need not remember this .PERIOD  For example ,COMMA  let us write a small program that prints… In our previous session ,COMMA  we had said that ,COMMA  we do not need to remember the exact ASCII code of certain characters .PERIOD  We just need to remember some abstract properties of the ASCII table .PERIOD  For example ,COMMA  abstract properties like all the digits occur together from 0 to 9 .PERIOD  All the capital letters from A to Z occur together in the table ,COMMA  in the alphabetical order .PERIOD  Similarly ,COMMA  all the small letters occur together in consecutive locations in the ASCII table .PERIOD  Also ,COMMA  another property that you can observe is that ,COMMA  the small letters occur after all the capital letters .PERIOD  Let us see ,COMMA  how we can write some interesting code using these properties .PERIOD  And not by remembering the exact ASCII code of certain letters .PERIOD  So ,COMMA  let us write a simple program ,COMMA  to print the alphabet .PERIOD  The ASCII codes of the upper case letters are consecutive and the ASCII codes of the lower case letters are consecutive .PERIOD  This is the property that ,COMMA  we will exploit in order to print the alphabet .PERIOD  So ,COMMA  for example ,COMMA  let us say that ,COMMA  we are going to print the letters of the alphabet in capital letters .PERIOD  So ,COMMA  for that we can use the following program using a for loop .PERIOD  So ,COMMA  what you have to do is ,COMMA  to initialize a particular character variable to capital letter A so ,COMMA  the ASCII character A .PERIOD  So ,COMMA  note that A within single codes stands for the character constant A .PERIOD  If you look at the integer value ,COMMA  then it is the ASCII code for A .PERIOD  We are not particularly interested to know ,COMMA  what exactly the number is .PERIOD  Now ,COMMA  we can write the for loop in an interesting way .PERIOD  We can say that ,COMMA  start from capital A and then ,COMMA  print the characters until you hit capital Z .PERIOD  And the update statement is ,COMMA  after printing go to the next ASCII letter .PERIOD  So ,COMMA  what this is doing is ,COMMA  starting from A and then ,COMMA  it will go to A + 1 ,COMMA  which is the ASCII code for B .PERIOD  Then ,COMMA  it will go to B + 1 ,COMMA  which is the ASCII code for C ,COMMA  so on up till Z .PERIOD  So ,COMMA  once you reach Z ,COMMA  it will print that character .PERIOD  It will update once more ,COMMA  where it is the ASCII character one more than ,COMMA  the ASCII character next to Z in the ASCII table .PERIOD  We do not really need to know ,COMMA  what it is .PERIOD  But ,COMMA  certainly it will be greater than the ASCII value of Z and at that point ,COMMA  we will exit the code .PERIOD  So ,COMMA  the output of it will be consecutively A to Z .PERIOD  Let us look at ,COMMA  what is happening here in greater detail .PERIOD  All the characters are stored as 8 bit integers .PERIOD  Now ,COMMA  they can be assigned as integers ,COMMA  incremented ,COMMA  decremented ,COMMA  etcetera because ,COMMA  essentially they behave like integers .PERIOD  So ,COMMA  suppose A has ASCII code 65 ,COMMA  but we are not concerned about that .PERIOD  Now ,COMMA  so ch equal to character constant A ,COMMA  sets c h equal to 65 .PERIOD  Now ,COMMA  ch + 1 is the number 66 ,COMMA  which corresponds to the ASCII code of B .PERIOD  So ,COMMA  addition ,COMMA  subtraction all these can be performed on character values because ,COMMA  internally they are represented as 8 bit integers .PERIOD  Similarly ,COMMA  relational operations like less than ,COMMA  greater than ,COMMA  <= ,COMMA  >= ,COMMA  all of these also make sense .PERIOD  So ,COMMA  for example ,COMMA  if we use the relational expression capital letter A ,COMMA  ASCII constant A less than character constant B .PERIOD  Then ,COMMA  notice that A is the ASCII value 65 and B is the ASCII value 66 .PERIOD So ,COMMA  A less than B is correct .PERIOD   Now ,COMMA  for realizing that A less than B is correct ,COMMA  we do not need to know that ,COMMA  A is 65 and B is 66 .PERIOD  All we know is that ,COMMA  the abstractly in the ASCII table ,COMMA  the character code for A is less than the character the code for 6 because ,COMMA  B occurs after A .PERIOD  So ,COMMA  if it is 65 and 66 or it is 0 and 1 ,COMMA  the answer is still the same .PERIOD  Now ,COMMA  let us write a few more interesting programs ,COMMA  where the spirit is that ,COMMA  we do not need to understand what the exact ASCII code of a letter is .PERIOD  But ,COMMA  just we want to remember the layout of the ASCII table .PERIOD  For example ,COMMA  suppose I want to write a conditional expression an if condition ,COMMA  which says that ,COMMA  if the given character is capital letter ,COMMA  then print that ,COMMA  it is in upper case .PERIOD  So ,COMMA  all I need to do is ,COMMA  if the character value is >= the character constant A and <= the character constant Z .PERIOD  Then ,COMMA  you print that ,COMMA  the given letter is in upper case .PERIOD  Again ,COMMA  please remember that we did not need to know that ,COMMA  this was 65 and this was ,COMMA  whatever it is 90 .PERIOD  It could as well have been 0 and 25 .PERIOD  It would still have worked because ,COMMA  all we are need to remember in the ASCII table is that ,COMMA  A through Z occurs in consecutive locations in the standard alphabetical order .PERIOD  From that we can understand that ,COMMA  if I write this if expression ,COMMA  it will print up the message upper case ,COMMA  only if the given character ch is an upper case letter .PERIOD  Similarly ,COMMA  let us say that ,COMMA  if you want to check whether a character is in lower case .PERIOD  You can analogously write ,COMMA  character is >= ‘A’  ,COMMA  ‘a’ .PERIOD  And it is <= little z ,COMMA  in single quotes .PERIOD  If that is true ,COMMA  then you print that ,COMMA  it is in a lower case .PERIOD  Now ,COMMA  if you want to check whether a given character is a digit ,COMMA  similarly you can say that ,COMMA  it is >= the character 0 .PERIOD  And this is <= the character 9 .PERIOD  Now ,COMMA  here is a suttle point which I hope ,COMMA  you notice .PERIOD  The character 0 is the ASCII constant ,COMMA  ASCII character constant 0 .PERIOD  So ,COMMA  it corresponds to some particular ASCII value .PERIOD  It is different from the number 0 .PERIOD  So ,COMMA  this is something that .PERIOD  .PERIOD  .PERIOD  So ,COMMA  we are looking for the ASCII value corresponding to 0 it is >= that and <= the character value corresponding to that character 9 .PERIOD  So ,COMMA  if that is true ,COMMA  then the given character is a digit .PERIOD  Now ,COMMA  here is a snippet that ,COMMA  I would advise you to take a look at it .PERIOD  And tell me ,COMMA  what it actually does .PERIOD  So ,COMMA  take a moment yourself and try to figure it out .PERIOD  So ,COMMA  what it does is ,COMMA  the given character ch ,COMMA  if it is a lower case letter .PERIOD  Remember ,COMMA  this is the example that we just saw .PERIOD  This condition checks ,COMMA  whether the given character is a lower case letter ,COMMA  a small letter between a and z ,COMMA  little a and little z .PERIOD  If it is true ,COMMA  then what you do is ,COMMA  add capital A - a ,COMMA  to the character .PERIOD  So ,COMMA  what does it accomplish ?QUESTIONMARK  So ,COMMA  let us say that ,COMMA  we actually had c h equal to little a .PERIOD  Now ,COMMA  for the purpose of illustration let us say that little a ,COMMA  was ASCII value 100 .PERIOD  I do not know ,COMMA  whether that is true .PERIOD  But ,COMMA  it is not important .PERIOD  That is ,COMMA  what I want to illustrate .PERIOD  Now ,COMMA  what does capital A represent .PERIOD  It represents some ASCII value let us say 65 .PERIOD  So ,COMMA  if the given character was little a ,COMMA  what I would do is ,COMMA  I would say character = ch - 100 +65 Similarly ,COMMA  if ch was character constant b ,COMMA  I would still add ch = ch - 100 +65 So ,COMMA  it is adding a constant difference to the given character regardless of what ,COMMA  whether it was a or b .PERIOD  The additive constant that we are adding is still the same .PERIOD  And if you think about ,COMMA  what is happening it is adding ,COMMA  exactly the difference between little a and capital A .PERIOD  Notice ,COMMA  that the difference between little b and capital B is the same as little a and capital A .PERIOD  Why ?QUESTIONMARK  Because ,COMMA  all the capital letters occur consecutively and all the small letters occur consecutively .PERIOD  So ,COMMA  suppose a minus z ,COMMA  little a minus capital A is… Let us say 35 ,COMMA  then little b minus capital B will also be 35 ,COMMA  because you advance one in each case .PERIOD  So ,COMMA  if you think for a minute ,COMMA  you will see that what this code does is… Take the ASCII code corresponding to the small letter .PERIOD  And add a constant difference .PERIOD  What is that difference ?QUESTIONMARK  That difference is ,COMMA  what will take you to the capital letter ,COMMA  corresponding capital letter .PERIOD   So ,COMMA  in short what this does is ,COMMA  to convert the given character in lower case letter to an upper case letter .PERIOD  So ,COMMA  if it is a lower case letter ,COMMA  it will convert it to an upper case letter .PERIOD  Otherwise ,COMMA  it does nothing .PERIOD  Now ,COMMA  let us think about ,COMMA  what we mean by scanning a character verses scanning an integer .PERIOD  So ,COMMA  let us say that I have two variables ,COMMA  in number and character letter .PERIOD  So ,COMMA  let us say that I am scanning now n ,COMMA  which is a number and the input was 12 .PERIOD  So ,COMMA  when I say scanf( "%d" ,COMMA  &n) ,COMMA  I am trying to read 12 into an integer variable .PERIOD  Now ,COMMA  on a typical machine an integer variable may occupy 32 bits .PERIOD  or 4 bytes .PERIOD  So ,COMMA  it has 32 bits in it .PERIOD  And if you know the binary notation ,COMMA  you will see that 1100 in binary is the number 12 .PERIOD  So ,COMMA  this is 8 + 4 ,COMMA  which is 12 .PERIOD  So ,COMMA  when you see that ,COMMA  the input is 12 .PERIOD  And then ,COMMA  I ask in the c program ,COMMA  I am doing scanf( “%d” ,COMMA  &n) .PERIOD  What will happen is that ,COMMA  n is an integer with 32 bits wide .PERIOD  And it will have the following pattern encoded into it .PERIOD  This is what ,COMMA  it means by scanning an integer .PERIOD  And if you try to print it out ,COMMA  it will try to interpret n as a decimal number .PERIOD  And it will print and the digit 12 ,COMMA  here the number 12 .PERIOD  On the other hand ,COMMA  for the same input ,COMMA  here is the difference I want to emphasize .PERIOD  If the code was saying ,COMMA  %c and letter ,COMMA  so scan the input 12 using the scanf statement ,COMMA  scanf %c and letter .PERIOD  What will happen is that ,COMMA  the c program is looking at the first character ,COMMA  which is the digit 1 and scanning it in .PERIOD  Now ,COMMA  character 1 is ASCII 49 it is not important ,COMMA  you remember that .PERIOD  But ,COMMA  it has some ASCII value ,COMMA  and that ASCII value 49 is 31 in hexadecimal because ,COMMA  it is 3 * 16 + 1 ,COMMA  which is 48 + 1= 49 .PERIOD  So ,COMMA  that character 1 is 31 in hexadecimal .PERIOD  And hence ,COMMA  what will be stored ?QUESTIONMARK  Remember ,COMMA  that a character ASCII character is 8 bits wide .PERIOD  So ,COMMA  it will store 31 in hexadecimal .PERIOD  So ,COMMA  it will be 3 .PERIOD  This is the number 3 and this is the number 1 .PERIOD  So ,COMMA  when you scan the input into a character variable called letter .PERIOD  What will happen is that ,COMMA  letter will have the number ,COMMA  hexadecimal 31 or ASCII value 49 ,COMMA  which corresponds to the number ,COMMA  which corresponds to the character constant 1 .PERIOD   So ,COMMA  this is the difference between scanning a given input as a number and scanning a given input using a character .PERIOD  So ,COMMA  when you scan it using a number ,COMMA  this entire thing will be scanned .PERIOD  It will be converted into binary and you will store it in an integer variable .PERIOD  When you scan it as a letter ,COMMA  it will scan the first digit only because ,COMMA  that is the character and then store the ASCII value ,COMMA  inside the letter variable ,COMMA  inside the character variable .PERIOD  So ,COMMA  this corresponds to the letter variable 1 within a single quote ,COMMA  the character constantIn the session ,COMMA  we will discuss operators and expressions .PERIOD  So ,COMMA  we have already used C expressions in our programs before .PERIOD  And expressions in c are similar to expressions in mathematics and they follows tools ,COMMA  similar to what mathematical expressions also follow .PERIOD  They are a basic unit of evaluation and each expression has a value .PERIOD  Say ,COMMA  that an expression returns a value of a particular type .PERIOD  So ,COMMA  let us consider a few example expressions .PERIOD  For example ,COMMA  I have the following ,COMMA  a is 3 ,COMMA  b is 4 and I have a variable c ,COMMA  which is just declared to be of type A .PERIOD  And then ,COMMA  say that c = (a * a) + (b * b) .PERIOD  So ,COMMA  the right hand side of the assignment operator ,COMMA  this is a assignment operator .PERIOD  And the right hand side is an expression and that expression has sub expressions ,COMMA  a * a and b * b within parenthesis .PERIOD  So ,COMMA  an expression can be made up of variables ,COMMA  it can be made up of constants .PERIOD  These are the atoms or the basic components of an expression .PERIOD  And sub expressions can be combined into bigger expressions ,COMMA  using operators .PERIOD  Now ,COMMA  operators can be unary that is ,COMMA  they take one argument operation .PERIOD  For example ,COMMA  on unary operators the examples can be  ,COMMA  which is the unary - .PERIOD  For example ,COMMA  -3 is a negative number .PERIOD  Similarly ,COMMA  NOT operator that we have seen in connection with logical operations so ,COMMA  NOT of zero ,COMMA  for example ,COMMA  the logical negation operator .PERIOD  Both of these operations take one argument .PERIOD  Now ,COMMA  there is also the binary operations like + ,COMMA  - ,COMMA  * ,COMMA  etcetera .PERIOD  So ,COMMA  + takes two arguments .PERIOD  For example ,COMMA  an expression like 2 + 3 and here is the binary - .PERIOD  So ,COMMA  if I say 2 -3 ,COMMA  this is actually a binary operator which takes two arguments ,COMMA  which are 2 and 3 .PERIOD  Similarly ,COMMA  the binary multiplication 2 * 3 would be the product of 2 and 3 .PERIOD  So ,COMMA  notice the difference between… It is the same sign for the unary - and the binary - .PERIOD  But ,COMMA  the unary - takes only one argument and the binary - takes two arguments .PERIOD  We have used the assignment operation many times and let us understand that in ,COMMA  somewhat more detail .PERIOD  For example ,COMMA  if you consider the expression b = b + 1 .PERIOD  Now ,COMMA  if you remove the semicolon at the end .PERIOD  So ,COMMA  the statement is b = b + 1 semicolon .PERIOD  And if you omit the semicolon ,COMMA  what you get is an assignment expression ,COMMA  b = b + 1 without the semicolon .PERIOD   So ,COMMA  how does the assignment operation work ?QUESTIONMARK  For example ,COMMA  consider an expression like a = (b = 10) .PERIOD  What does this do ?QUESTIONMARK  So ,COMMA  assume that a and b are integer variables .PERIOD  Now ,COMMA  assignment assigns to the left hand variable ,COMMA  left hand operand ,COMMA  the value of the expression on the right hand side .PERIOD  For example ,COMMA  in this assignment operation there are two assignment expressions .PERIOD  One is the expression b = 10 .PERIOD  And the second is the expression a = b = 10 .PERIOD  So ,COMMA  the first assignment expression is supposed to do the following ,COMMA  assign 10 to b .PERIOD  So ,COMMA  what it does is ,COMMA  it assigns the value of the right expression which is 10 in this case to the left hand side operand that is one thing ,COMMA  it does .PERIOD  And also ,COMMA  it returns the value after the assignments .PERIOD  So ,COMMA  10 has been assigned to b .PERIOD  And the return value of this expression is 10 .PERIOD  So ,COMMA  we can now analyze a = b = 10 ,COMMA  as follows .PERIOD  First ,COMMA  evaluate the expression in parenthesis .PERIOD  The expression b = 10 has an assignment operator .PERIOD  So ,COMMA  evaluate the expression on the right hand side and then assign it to b .PERIOD  Now ,COMMA  that operation returns .PERIOD  So ,COMMA  that expression returns a particular value ,COMMA  which is 10 .PERIOD  Now ,COMMA  the original expression can be thought of as ,COMMA  just a = 10 .PERIOD  This is evaluated as usual .PERIOD  So ,COMMA  you take 10 and assign it to a .PERIOD  And the return value of the whole expression becomes 10 .PERIOD  So ,COMMA  when executing this expression ,COMMA  when evaluating this expression ,COMMA  two variables are assigns their values .PERIOD  One is b ,COMMA  which is assigned the value 10 and the second is a ,COMMA  which is also assigned the value 10 .PERIOD  The assignment operation can be used to initialize a number of variables ,COMMA  in one shot .PERIOD  For example ,COMMA  if I write a statement like a = (b= (c = (d= (e=0)))) .PERIOD  What does this mean ?QUESTIONMARK  Now ,COMMA  here there is some ambiguity here ,COMMA  because we do not know which order to evaluate this .PERIOD  Should ,COMMA  we evaluate from left to right .PERIOD  Should ,COMMA  we evaluate from right to left .PERIOD  Does it matter ?QUESTIONMARK  So ,COMMA  should the assignment be treated as the following ,COMMA  where a = b is done first ,COMMA  then ,COMMA  = c ,COMMA  then ,COMMA  = d and .PERIOD  So ,COMMA  on .PERIOD  Or should it be the opposite way right to left ,COMMA  where e = 0 is first done .PERIOD  Then ,COMMA  d = that ,COMMA  then c = that ,COMMA  .PERIOD  So ,COMMA  on until a .PERIOD  So ,COMMA  the expression is evaluated from right to left ,COMMA  in the case of the assignment operation .PERIOD  For example ,COMMA  the above expression that we just saw will be done as ,COMMA  a =… So ,COMMA  e = 0 ,COMMA   first and then backward ,COMMA  until a is assigned .PERIOD  Now ,COMMA  this is also the standard mathematical convention .PERIOD  We are not introducing a new strange rule ,COMMA  here .PERIOD  Why is this ?QUESTIONMARK  First ,COMMA  we will evaluate the inner most expression ,COMMA  which is e = 0 .PERIOD  So ,COMMA  e will be assigned 0 ,COMMA  then the return value of this sub expression .PERIOD  So ,COMMA  this sub expression will return the value 0 .PERIOD  So ,COMMA  this becomes d = 0 ,COMMA  d is assigned the value 0 .PERIOD  And the return value of this sub expression becomes 0 .PERIOD  So ,COMMA  then we have c = 0 and .PERIOD  So ,COMMA  on .PERIOD  So ,COMMA  finally ,COMMA  every variable here will be assigned the value 0 .PERIOD  So ,COMMA  the reason for doing this is that ,COMMA  if you try to do it in the opposite way ,COMMA  you will see that uninitialized variables are initialized to other uninitialized variable .PERIOD  For example ,COMMA  if you go from left to right ,COMMA  in the previous .PERIOD  This simply does not make any sense ,COMMA  because you have just declared a b c and .PERIOD  So ,COMMA  on .PERIOD  And when you say a = b ,COMMA  a and b are not initialized yet .PERIOD  So ,COMMA  this assignment hardly makes any sense .PERIOD  The basic rule of assignment is that ,COMMA  left hand side = right hand side .PERIOD  So ,COMMA  the left hand side is some value that can be assigned to .PERIOD  For example ,COMMA  this is a variable .PERIOD  The right hand side can be anything ,COMMA  variable ,COMMA  constant or it can be an expression .PERIOD  So ,COMMA  all these are valid assignment .PERIOD  So ,COMMA  what is an invalid assignment ?QUESTIONMARK  So ,COMMA  a = 0 can be a valid assignment but ,COMMA  0 = a .PERIOD  So ,COMMA  the assignment operation is evaluated ,COMMA  right to left .PERIOD  Now ,COMMA  we have the concept of associativity of operators .PERIOD  So ,COMMA  what does associativity mean ?QUESTIONMARK  It is ,COMMA  we have just argued that ,COMMA  a = b = c = d = 0 .PERIOD  An expression like that will be evaluated from right to left .PERIOD  So ,COMMA  it is as though ,COMMA  we have parenthesized the expression as d = 0 ,COMMA  inner most .PERIOD  Then ,COMMA  c = that ,COMMA  then b = that and .PERIOD  So ,COMMA  on .PERIOD  So ,COMMA  on the other hand ,COMMA  if you take an operator like binary + the addition symbol ,COMMA  then the usual custom is that you parenthesis from left to right .PERIOD  So ,COMMA  the evaluation is done ,COMMA  a + b first .PERIOD  Then ,COMMA  that sum is added to c .PERIOD  Then ,COMMA  that is added to d .PERIOD  So ,COMMA  the assignment operation goes right to left .PERIOD  The addition symbol operates left to right .PERIOD  So ,COMMA  this concept of associativity of an operator tells us ,COMMA  the order in which we evaluate the operations ,COMMA  if there are multiple occurrences of the same operator .PERIOD  So ,COMMA  the first there are multiple occurrences of the = sign .PERIOD  In the second ,COMMA  there are multiple occurrences of the addition symbol .PERIOD So ,COMMA  associativity rules tells you that ,COMMA  if there are identical operators in an expression ,COMMA  in which order do you evaluate them ?QUESTIONMARK  Do you evaluate them from left to right ?QUESTIONMARK  If you do ,COMMA  then it is called a left associative operator .PERIOD  If you evaluate from right to left ,COMMA  in the case of ,COMMA  for example ,COMMA  the assignment ,COMMA  then it is called a right associative operator .PERIOD  Binary - is also left associative .PERIOD  For example ,COMMA  a - b - c - d is evaluated as a - b ,COMMA  then c then - c ,COMMA  then - d .PERIOD  So ,COMMA  for example ,COMMA  if you say 10 - 5 - 15 ,COMMA  what will be done is 10 - 5 and then - 15 .PERIOD  So ,COMMA  this is 5 - 15 ,COMMA  which is - 10 .PERIOD  Whereas ,COMMA  if the parenthesis had been in the opposite way ,COMMA  it would be 10 - 5 - 15 ,COMMA  which case it could be 10 - ,COMMA  this is - 10 which is 20 .PERIOD  Notice that ,COMMA  this is not how you are supposed to do it ,COMMA  even in mathematics .PERIOD  So ,COMMA  the way that c does handles the associativity of the binary operation ,COMMA  is correct .PERIOD  So ,COMMA  the correct parenthesis is 10 - 5 and then - 15 .PERIOD  In general ,COMMA  for every operator c defines an associativity .PERIOD  So ,COMMA  let us see the part of the associativity of operations in c .PERIOD  There are several operations that we have seen ,COMMA  .PERIOD  So ,COMMA  far .PERIOD  The parenthesis ,COMMA  the Boolean naught ,COMMA  the logical naught and the unary - ,COMMA  the binary multiplication ,COMMA  division and .PERIOD  So ,COMMA  on .PERIOD  Addition symbol ,COMMA  comparison less than ,COMMA  less than or = and .PERIOD  So ,COMMA  on .PERIOD  Equality ,COMMA  logical AND ,COMMA  logical OR and then the assignment operator .PERIOD  We have seen ,COMMA  all these operations ,COMMA  .PERIOD  So ,COMMA  far .PERIOD  And of this ,COMMA  the typical associativity is left to right .PERIOD  There are couple of exceptions ,COMMA  one we have already seen .PERIOD  Assignment operation is right to left .PERIOD  The unary operations are also right to left .PERIOD  Most of the other operations are left to right .PERIOD  So ,COMMA  if you think for a little bit ,COMMA  you can see that the associativity for unary operations is also easily seen to be right to left .PERIOD  That makes more sense .PERIOD  So ,COMMA  the idea is not that you should memorize this table but ,COMMA  you should understand .PERIOD  Given the table ,COMMA  can I understand ,COMMA  what will happen with an expression ?QUESTIONMARK  How c will evaluate it ?QUESTIONMARK  It is not that ,COMMA  you should remember this .PERIOD  But ,COMMA  rather if you are given the table and an expression ,COMMA  can you correctly calculate what the value of the expression will be .PERIOD  This one more concept that we have to understand ,COMMA  before we really understand how c evaluates expressions ,COMMA  that is the concept of precedence .PERIOD  So ,COMMA  what do we mean by a precedence ?QUESTIONMARK  Let us pick a expression which involves multiple operators .PERIOD  Like for example ,COMMA  in this expression you have two operations ,COMMA  the assignment operation and the addition operation .PERIOD  Now ,COMMA  how do we know ,COMMA  how to evaluate this expressions .PERIOD  So ,COMMA  what are the two ways in which the above expression can be interpreted ,COMMA  the first way is you could say a = b and then say + c or you can say a = b + c .PERIOD  To decide which of the above possibilities to really do ,COMMA  c also defines what is known as a precedence between operators .PERIOD  So ,COMMA  we have already seen in the notion of associativity which is what happens ,COMMA  when the many occurrences of the same operator occur in an expression .PERIOD  Precedence on the other hand is to mediate between two different or multiple different operations in the same expression .PERIOD  So ,COMMA  let us see what is an example of using precedence .PERIOD  So ,COMMA  in c the + operation is given more precedence than the = operation .PERIOD  So ,COMMA  I really want to interpret this expression as a = b + c .PERIOD  So ,COMMA  this is how I want to interpret their operation and not as a = b + c .PERIOD  So ,COMMA  I want to avoid this and I want to do it in this way .PERIOD  So ,COMMA  one way I can ensure that is by saying that ,COMMA  please do b + c first ,COMMA  then take that result and assign it to it .PERIOD  So ,COMMA  one way of doing that is to say ,COMMA  whenever = and + appear together give more importance to + ,COMMA  do that first .PERIOD  So ,COMMA  proceed means going first .PERIOD  So ,COMMA  + has a greater precedence over assignment + and - have the same precedence and both have the same associativity we have seen this ,COMMA  addition and subtraction have the same precedence ,COMMA  ,COMMA  but multiplication and division have a higher precedence .PERIOD  So ,COMMA  if I want to evaluate a complicated expression ,COMMA  let us say that a + b - c * d % e / f .PERIOD  So ,COMMA  suppose I have a fairly complicated expression ,COMMA  what I can do is ,COMMA  what are the operations here ?QUESTIONMARK  So ,COMMA  the operations are + ,COMMA  - ,COMMA  * ,COMMA  % and / .PERIOD  Now ,COMMA  according to the precedence I know that * ,COMMA  % and / have equal precedence about + and - .PERIOD  So ,COMMA  I know that these operations have to be done before + and - .PERIOD  So ,COMMA  they have a lower precedence .PERIOD  So ,COMMA  these have to be done first ,COMMA  ,COMMA  but among them how do you know which to do first ,COMMA  for that we use the left to right associativity of these operations .PERIOD  So ,COMMA  as for as with in the same precedence is concerns ,COMMA  let us just simplify this situation in a little bit and think of them as the same operation ,COMMA  their different operations of the same precedence .PERIOD  But ,COMMA  I will just the thing a little bit to say that ,COMMA  let say that they are the same operation ,COMMA  all of them have left or right associativity .PERIOD  Therefore ,COMMA  I will according to the associativity rule I will do c * d first ,COMMA  then that % e and then that / f ,COMMA  because that is what the left to right associativity it says .PERIOD  So ,COMMA  by precedence we will know that these three operations have to be done first ,COMMA  among them how do you do this ,COMMA  * occurs first when you scan from left to right .PERIOD  So ,COMMA  c * d has to be done first and then the % operation and then the / operation .PERIOD  So ,COMMA  and once you done there then you come to + and - .PERIOD  So ,COMMA  currently once we have finished with this ,COMMA  you will have some situation like this ,COMMA  c * d % e / f and then on the remaining side you have a + b - this .PERIOD  And now you have to decide ,COMMA  which may you will do the + and - ,COMMA  again we know that they have the same precedence .PERIOD  So ,COMMA  let us found a little bit and think of them as the same operator ,COMMA  both of them have the left or right associativity .PERIOD  So ,COMMA  I do a + b first and then the - .PERIOD  So ,COMMA  with in the same precedence level ,COMMA  you will decide which operation to do first purely based on the left to right associativity .PERIOD  So ,COMMA  let us take a look at the precedence of associativity table .PERIOD  Again I want to emphasis is not to memorise ,COMMA  it is just that if you are given this table ,COMMA  you should be able to understand how an expression is going to be evaluated ?QUESTIONMARK  So ,COMMA  parenthesis is above all because once a parenthesis an expression ,COMMA  then you really saying this is the order that I want .PERIOD  So ,COMMA  it over writes any other precedence or associativity rule .PERIOD  Then ,COMMA  you have the unary operations which have the second higher precedence ,COMMA  then the arithmetic operations ,COMMA  then the comparison operation ,COMMA  logical operators ,COMMA  assignment and so ,COMMA  on .PERIOD  The comma is an operation we will see later .PERIOD  So ,COMMA  with in the arithmetic operations multiply ,COMMA  divide and % operator have higher precedence over + and - .PERIOD  + and - have higher precedence over relational operations ,COMMA  like < ,COMMA  < or = and so ,COMMA  on .PERIOD  So ,COMMA  we will see a few examples of how to use this table to understand what will happen with an expression ?QUESTIONMARK So ,COMMA  let us take 10 + 5 * 4 % 2 and assign to a ,COMMA  let us examine what will happen here .PERIOD  So ,COMMA  what I will do is I will make a list of operations .PERIOD  So ,COMMA  they are = ,COMMA  + ,COMMA  * ,COMMA  % and then precedence I know that multiplication and % have very high precedence .PERIOD  Then ,COMMA  the next level is + and then assignment has the least precedence .PERIOD  Now ,COMMA  both of these occurring in this expression * and % ,COMMA  how do we decide which goes first ,COMMA  both of them have left to right associativity .PERIOD  So ,COMMA  whatever happens first in the looking from left to right ,COMMA  we will do that first .PERIOD  So ,COMMA  among all these operations we know that 5 * 4 will happen first ,COMMA  then this will be followed by % 2 and then this will be followed by 10 + .PERIOD  And finally ,COMMA  the last which is that you do all these operations get the value and assign it way .PERIOD  So ,COMMA  this is the way in which the above expression will be evaluated .PERIOD  So ,COMMA  the above expression corresponds to giving the parentheses in the wave that we have done .PERIOD  So ,COMMA  once you do that a will get the value 10 .PERIOD  Let us see a few more examples of expression evaluation in C ;SEMICOLON  what kinds of expressions are allowed ,COMMA  what kind of errors do people usually make ,COMMA  and so on .PERIOD  Let us say that we have given an expression a = 1 ,COMMA  b = 1 ,COMMA  c = 2 .PERIOD  And then we have an expression a < b and then b >= c .PERIOD  So ,COMMA  this is the expression that we want to see how it will be evaluated .PERIOD  So ,COMMA  let us just go through it systematically .PERIOD  The operations on are <= ,COMMA  then we have the logical AND operation the >= symbol .PERIOD  Of these ,COMMA  the relational comparison operations <= and >= – have greater precedence over the logical AND .PERIOD  So ,COMMA  the precedence will be AND .PERIOD  And among operations of the same precedence level ,COMMA  we have left to right .PERIOD  So ,COMMA  whatever happens first when looking from left to right will be evaluated first .PERIOD  So ,COMMA  these two operations have the same precedence .PERIOD  So ,COMMA  we will have (a <= b) ;SEMICOLON  then (b >= c) ;SEMICOLON  these have to be done first and then AND .PERIOD  So ,COMMA  this will be done first ,COMMA  this will be done second ,COMMA  and this is the third operation .PERIOD  Conceptually ,COMMA  using just precedence and associativity rules ,COMMA  this is how the expression should be evaluated .PERIOD  So ,COMMA  when we evaluate it ,COMMA  a < are = b is 1 < are = 1 .PERIOD  So ,COMMA  that is 1 .PERIOD  b >= c is 1 >= 2 .PERIOD  So ,COMMA  that is 0 .PERIOD  So ,COMMA  this becomes 1 and 0 ;SEMICOLON  in which case ,COMMA  it is 0 .PERIOD  Now ,COMMA  let us look at a few tricky examples .PERIOD  So ,COMMA  if you have an expression of the following form ,COMMA  if a = b > 1 ;SEMICOLON  then c = 1 .PERIOD  So ,COMMA  let us see what happens here .PERIOD  We will do the same thing ;SEMICOLON  operations sorted by precedence is… There is greater-than symbol ,COMMA  which has a higher precedence over the equal-to symbol .PERIOD  So ,COMMA  the expression a = b > 1 will be evaluated as b > 1 ,COMMA  because that has higher precedence .PERIOD  So ,COMMA  this goes first .PERIOD  And then a = b > 1 .PERIOD  Now ,COMMA  b is 2 .PERIOD  So ,COMMA  b > 1 is 1 .PERIOD  So ,COMMA  you have a = 1 .PERIOD  And a = 1 is an assignment expression .PERIOD  It assigns the value 1 to a .PERIOD  And the return value is 1 because a is assigned to 1 .PERIOD  So ,COMMA  then this whole if expression becomes if 1 – c = 1 ;SEMICOLON  in which case ,COMMA  we know that ,COMMA  c = 1 ;SEMICOLON  that statement will be executed .PERIOD  Now ,COMMA  typically ,COMMA  what is expected… The typical programming style is to say something like a assigned to b ;SEMICOLON  and if that result is > 1 .PERIOD  So ,COMMA  we may want to deliberately violate the precedence .PERIOD  How do you do that ?QUESTIONMARK  So ,COMMA  C does it some way ;SEMICOLON  if you do not parenthesize it ,COMMA  you can always change the order of evaluation in C by introducing parenthesis ,COMMA  so that the meaning is very clear .PERIOD  So ,COMMA  if you do not parenthesize it ,COMMA  then a = b > 1 is the same as a = b > 1 .PERIOD  But ,COMMA  what if you really want to do a = b and then that > 1 ?QUESTIONMARK  So ,COMMA  that case ,COMMA  you parenthesize it .PERIOD  Why ?QUESTIONMARK  Because parenthesis has the highest precedence .PERIOD  So ,COMMA  whatever is within parenthesis will be evaluated first .PERIOD  So ,COMMA  = b will be evaluated first and b is 2 .PERIOD  So ,COMMA  a will get the value 2 .PERIOD  So ,COMMA  the assignment a = b will have returned the value 2 .PERIOD  And 2 is > 1 .PERIOD  So ,COMMA  it will execute ((Refer Time: 05:17)) One particular way in which such an expression can be seen ;SEMICOLON  we have already seen such an example is – you read all integers from the terminal until a -1 is read .PERIOD  So ,COMMA  suppose the input is of the form 3 2 -1 ;SEMICOLON  and then let us say dot or something of that sort .PERIOD  So ,COMMA  what this expression does is scanf returns a value ,COMMA  which is the number of tokens that – number of inputs that ,COMMA  it was successfully able to read .PERIOD  So ,COMMA  if you try to read a character as an integer ,COMMA  it may not succeed .PERIOD  And so ,COMMA  as long as you have correctly written the integer and the integer is not -1 ,COMMA  then you do a particular ((Refer Time: 06:19)) So ,COMMA  this is the kind of expression that is often used ;SEMICOLON  where ,COMMA  you assign some value to a using the assignment statement .PERIOD  Or ,COMMA  maybe you want to check the return value of a function whether it is positive or not .PERIOD  And based on that ,COMMA  you want to write a condition .PERIOD  So ,COMMA  the logical and operation does operates in the following way .PERIOD  It evaluates the left operand first .PERIOD  If this condition is false ,COMMA  then you know that ,COMMA  the whole expression is going to be false .PERIOD  If at least one of the terms is false ,COMMA  then you know that ,COMMA  the whole thing is false .PERIOD  So ,COMMA  it will not even evaluate the second operand .PERIOD  On the other hand ,COMMA  if the operation is true ,COMMA  then it will check whether the second operand is true .PERIOD  If the second operand is also true ,COMMA  then the whole expression is true .PERIOD  If the second operand is false ,COMMA  then the whole expression is false .PERIOD  This method of evaluation is also called short-circuiting because it may not evaluate the whole expression in order to get the result .PERIOD  So ,COMMA  if I know that ,COMMA  this expression is false ;SEMICOLON  then there is no need to evaluate this ,COMMA  because I know that ,COMMA  the whole expression is going to be false .PERIOD  Here is a common mistake that people do ,COMMA  because this is similar to mathematical notation .PERIOD  When you want to check a condition that a is between 1 and 5 ;SEMICOLON  what happens if you right 1 < a < 5 ?QUESTIONMARK  Because this is the way we do it in mathematics .PERIOD  C will apply the precedence and the associativity .PERIOD  In this case ,COMMA  it is the same operation .PERIOD  So ,COMMA  only associativity applies .PERIOD  And according to associativity ,COMMA  it is left to right .PERIOD  So ,COMMA  this will be evaluated as 1 < a < 5 .PERIOD  Now ,COMMA  a is 2 .PERIOD  So ,COMMA  1 < a is false .PERIOD  So ,COMMA  this becomes 0 .PERIOD  So ,COMMA  the whole thing is 0 < 5 .PERIOD  So ,COMMA  it is true .PERIOD  So ,COMMA  if you execute this code ,COMMA  it will eventually become an infinite loop ,COMMA  because this is an expression that always evaluates to true .PERIOD  Now ,COMMA  what you probably mean is that ,COMMA  I want to check that ,COMMA  a is between 1 and 5 ;SEMICOLON  a is 2 .PERIOD  So ,COMMA  the correct way to write such an expression would be 1 < a and a < 5 ;SEMICOLON  that will check the betweenness condition .PERIOD  So ,COMMA  notice that ,COMMA  this is different from the way we normally write in mathematics .PERIOD  This is how we would write such a test in mathematics .PERIOD  But ,COMMA  that will cause an infinite loop .PERIOD  This is because C will apply the precedence and the associativity rules and not what you think it should do .PERIOD  Now ,COMMA  let us look at can there be expressions ,COMMA  which make no sense ?QUESTIONMARK  We have seen several examples ,COMMA  where you can always make sense out of it .PERIOD  So ,COMMA  let us take this expression .PERIOD  Again ,COMMA  list out the operations ;SEMICOLON  see you have = = ;SEMICOLON  then you have the % operation ,COMMA  which is highest precedence ;SEMICOLON  then you have minus ;SEMICOLON  then you again have an = ;SEMICOLON  and then you have a + .PERIOD  So ,COMMA  these are the operations in the expression .PERIOD  So ,COMMA  what needs to be done first ?QUESTIONMARK  b % c .PERIOD  And then you have -a ;SEMICOLON  and then you have a + 1 .PERIOD  This is by following precedence and associativity rules .PERIOD  Now ,COMMA  we come to the assignment statement .PERIOD  Assignment statements are done right to left .PERIOD  So ,COMMA  the first thing that you would try to do is the following .PERIOD  So ,COMMA  you try to do the… So ,COMMA  here is a sub expression ;SEMICOLON  here is a sub expression ;SEMICOLON  here is a sub expression ;SEMICOLON  and here is a sub expression .PERIOD  So ,COMMA  it is like assigning four terms .PERIOD  And the innermost thing will be done first ;SEMICOLON  the rightmost thing will be done first .PERIOD  So ,COMMA  the rightmost assignment is b % c -a is assigned to a + 1 .PERIOD  Now ,COMMA  this is a syntax error .PERIOD  So ,COMMA  what happen is as we just discussed if you work out the whole assignment ;SEMICOLON  if you workout the whole expression ,COMMA  it becomes something like this .PERIOD  And somewhere when you work out the assignment from right to left ,COMMA  you will see that ,COMMA  it is trying to assign a number -3 to -7 .PERIOD  That does not make any sense .PERIOD  The left-hand side of an assignment statement should be an assignable value ,COMMA  which is essentially a variable .PERIOD  And in this case ,COMMA  you are trying to assign a number to another number ,COMMA  which does make sense .PERIOD  So ,COMMA  here is a syntax error .PERIOD  We will conclude the discussion on operations with one more operation ,COMMA  which is quite common in C ;SEMICOLON  which is the  ;SEMICOLON  operator .PERIOD  Now ,COMMA  this is not very common in mathematics .PERIOD  But ,COMMA  let us just discuss what does it mean in C .PERIOD  So ,COMMA  let us say that ,COMMA  we have two expressions: expression 1 and expression 2 separated by a  ;SEMICOLON  .PERIOD  Now ,COMMA  think of the  ;SEMICOLON  as an operation just like any other operation like + or minus .PERIOD  So ,COMMA  it must have a precedence it must have an associativity and so on .PERIOD  So ,COMMA  what will happen when we have an expression like i + 2  ;SEMICOLON  sum = sum -1 .PERIOD  So ,COMMA  how does it follows ?QUESTIONMARK  First ,COMMA  you evaluate the expression 1 .PERIOD  So ,COMMA  first ,COMMA  in this case ,COMMA  you evaluate i + 2 ;SEMICOLON  then you evaluate sum = sum -1 ;SEMICOLON  and return the value of the lost expression .PERIOD  So ,COMMA  the whole – the  ;SEMICOLON  operation is involved in an expression called the  ;SEMICOLON  expression .PERIOD  Every expression has a value and the value of the  ;SEMICOLON  expression will be expression 2 .PERIOD  So ,COMMA  what if you have multiple expressions ?QUESTIONMARK  You figure out what is the associativity of the  ;SEMICOLON  expression .PERIOD  The  ;SEMICOLON  expression associates left to right .PERIOD  So ,COMMA  this expression will become scanf and so on ;SEMICOLON  sum = 0 ;SEMICOLON  i = 0 .PERIOD  So ,COMMA  this… For the first  ;SEMICOLON  ,COMMA  this is expression 1 and this is expression 2 .PERIOD  So ,COMMA  this expression evaluates to the result of sum = 0 ;SEMICOLON  which is 0 as we know .PERIOD  Now ,COMMA  the second level is you have 0  ;SEMICOLON  i = 0 .PERIOD  So ,COMMA  the first  ;SEMICOLON  expression is evaluated and its result is expression 2 of that expression ,COMMA  which is a value of sum = 0 ,COMMA  which is 0 .PERIOD  So ,COMMA  the outer expression becomes 0  ;SEMICOLON  i = 0 .PERIOD  The value of that expression is the value of expression 2 in that bigger expression ,COMMA  which is the value of i = 0 .PERIOD  So ,COMMA  here is how you will apply the rule that ,COMMA  it is the value of the second expression for a more general expression involving multiple commas .PERIOD  So ,COMMA  what you do is – first ,COMMA  evaluate the first expression and it has some value .PERIOD  For example ,COMMA  in this case ,COMMA  it is an assignment expression .PERIOD  So ,COMMA  it will have value 0 .PERIOD  And then the second expression is evaluated .PERIOD  And the value of  ;SEMICOLON  expression is the value of the second expression .PERIOD  Note that ,COMMA  you may… At first sight ,COMMA  you may see multiple commas in the same expression ;SEMICOLON  but the way you do it is that ,COMMA  you group them using associativity rules into a sequence of  ;SEMICOLON  expressions ,COMMA  where each  ;SEMICOLON  expression has exactly two terms .PERIOD  This is what we did in the previous example .PERIOD  Now ,COMMA   ;SEMICOLON  expression is very convenient ,COMMA  because you can do things like when you want to initialize multiple variables in a for loop for example ,COMMA  you can just say sum = 0 ,COMMA   ;SEMICOLON  i = 0 .PERIOD  It will initialize both values at the same time ;SEMICOLON  both variables at the same time .PERIOD  So ,COMMA   ;SEMICOLON  are evaluated left to right .PERIOD  This is what I just worked out an example of the following form .PERIOD  So ,COMMA  if you have multiple sub expressions in a  ;SEMICOLON  expression ;SEMICOLON  if we have multiple  ;SEMICOLON  ,COMMA  what you do is you associate them just like you did with + and star ;SEMICOLON  you have multiple  ;SEMICOLON  expressions .PERIOD  And then group them two at a time .PERIOD  So ,COMMA  it becomes two  ;SEMICOLON  expressions .PERIOD  And then evaluate them .PERIOD  Now ,COMMA  the  ;SEMICOLON  expression has the lowest precedence of any operator in C .PERIOD  So ,COMMA  if you have an operation like a = a + 5  ;SEMICOLON  sum = sum + a ,COMMA  what will happen is you do this expression a = a + 5 ;SEMICOLON  then do this expression sum = sum + a .PERIOD  And then evaluate the  ;SEMICOLON  expression .PERIOD  And therefore ,COMMA  when you have a  ;SEMICOLON  expression ,COMMA  you do not need explicit parenthesis ,COMMA  because the precedence takes care of it ;SEMICOLON  it has the lowest precedence .PERIOD  So ,COMMA  it will never get swallowed into a bigger expression ,COMMA  which involves other operations .PERIOD  So ,COMMA  it will always be evaluated at the end .PERIOD  So ,COMMA  just to remind you ,COMMA  here is the table once again .PERIOD  And notice that ,COMMA  as we discussed the  ;SEMICOLON  operation is the lowest precedence and the associates left to right .PERIOD  This is also a slightly different meaning of the  ;SEMICOLON  in C .PERIOD  We will just mention that in passing .PERIOD  There is also the normal separator .PERIOD  So ,COMMA  the separator can be seen in multiple occasions in C .PERIOD  When you initialize an expression ;SEMICOLON  when you say sum = 0 ,COMMA   ;SEMICOLON  = zero ,COMMA   ;SEMICOLON  j = 0 ;SEMICOLON  this is not the  ;SEMICOLON  expression ;SEMICOLON  it is just a separator as in English .PERIOD  So ,COMMA  similarly ,COMMA  when you call a function ,COMMA  you have  ;SEMICOLON  to separate out the arguments .PERIOD  That does not mean that ,COMMA  the arguments are inside a  ;SEMICOLON  expression .PERIOD  Here  ;SEMICOLON  is just a separator as in English .PERIOD  And it is always clear from the context whether a  ;SEMICOLON  is a separator or an operator .PERIOD  As an operator ,COMMA  it has a particular value ;SEMICOLON  as a separator ,COMMA  it does not do anything other than saying that ,COMMA  this first and then this .PERIOD  So ,COMMA  we have seen several operators in C and discussed the concepts of precedence and associativity .PERIOD  And what is important is – given the precedence and the associativity tables ,COMMA  can you understand an expression ;SEMICOLON  see whether it is a valid expression ,COMMA  and if it is a valid expression ,COMMA  what will be its value .PERIOD  In this session we are going to introduce a new concept of programming in C called functions .PERIOD  So ,COMMA  initially ,COMMA  let us just try to motivate why we need functions ,COMMA  and then we will try to see whether programming becomes easier ,COMMA  if we have functions .PERIOD  So ,COMMA  let us say that ,COMMA  why do we need functions ?QUESTIONMARK  There are essentially two different reasons for it .PERIOD  And I will mention these reasons one after the other .PERIOD  The first reason is to break up a complex problem into simple sub problems .PERIOD  All of us ,COMMA  for example ,COMMA  like to drop to do less saying that these are the things I wish to accomplish today .PERIOD  So ,COMMA  step 1 ,COMMA  you know ,COMMA  get to college ,COMMA  step 2 - attend classes ,COMMA  step 3 - finish home work or something like that .PERIOD  And then each of those main task will have several sub task .PERIOD  In order to get to college ,COMMA  maybe you need to renew the ticket subscription ,COMMA  get on the bus ,COMMA  get to college ,COMMA  and so on .PERIOD   So ,COMMA  each of those higher level task involves several search smaller sub task .PERIOD  And conceptually ,COMMA  it is cleaner to say that these are the big level things that I want to do .PERIOD  Each of those big level task have several sub tasks ,COMMA  so that I can think of it ,COMMA  what I want to accomplish in a layer wise manner .PERIOD  So ,COMMA  this is something that we do intuitively .PERIOD  We always break up complex problem into simpler sub problems so that we can analyze the simpler sub problem and perform it completely ,COMMA  and then come back to the bigger problem .PERIOD  So ,COMMA  we need to solve it each separately .PERIOD   And the main tool for this programming in C which allows you to accomplish breaking up a complex sub problem into simpler sub problems is what is known as functions .PERIOD  So ,COMMA  this enables you to do what is known as modular programming in c .PERIOD  And functions are not new .PERIOD  We have already seen three functions in particular - main was a function that we always wrote ,COMMA  and then we have printf and scanf which we use for outputting and inputting respectively .PERIOD  So ,COMMA  let us just motivate the notion of functions by using the second motivation that I was talking about .PERIOD   So ,COMMA  suppose ,COMMA  you have ,COMMA  you want to say ,COMMA  I want to compute  ,COMMA  which is  ,COMMA  correct ?QUESTIONMARK  So ,COMMA  this is the definition of n choose k for  as it is known .PERIOD  Now ,COMMA  suppose I want to write this ,COMMA  n code this into C program ,COMMA  so I will have ,COMMA  let us say ,COMMA  a main function .PERIOD  And then inside the main function I will have ,COMMA  let us say ,COMMA  three variables – a ,COMMA  b ,COMMA  c ,COMMA  and then float result because the result of a division will be a float .PERIOD  So ,COMMA  I will have ,COMMA  what should I do intuitively ,COMMA  one way to do it is I will have a block of code which says it will calculate n! which is the numerator ,COMMA  then I will say that a = n! ;SEMICOLON  at end of this ,COMMA  let us say ,COMMA  that a stores n! .PERIOD   Then ,COMMA  I will have another block of code which says that I will calculate k! .PERIOD  And then this will say ,COMMA  let us say ,COMMA  b = k! .PERIOD  And the third block of code will calculate n - k! ;SEMICOLON  let us say ,COMMA  I will store this in c .PERIOD  And then I will say ,COMMA  ok result =  ,COMMA  some code that looks like this .PERIOD  And you would notice what is inconvenient about it ;SEMICOLON  all these three blocks of code ,COMMA  once we complete it ,COMMA  will look very similar .PERIOD  They are all calculating the! of a particular number .PERIOD  But ,COMMA  there is nothing in c ,COMMA  which will ,COMMA  that using the features that we have seen so far ,COMMA  which will tell us that this code ,COMMA  this code and this code are essentially the same ,COMMA  and I need to write that similar code only once .PERIOD  So ,COMMA  there is no simple way to use loops to accomplish these .PERIOD  So ,COMMA  it seems like this redundant business of writing similar code again and again can be avoided .PERIOD  So ,COMMA  this is the second motivation for introducing the notion of functions which is basically to avoid duplication of code .PERIOD  So ,COMMA  here is a side benefit of functions ,COMMA  avoid code replication .PERIOD  We have already seen loops to some extend avoid code replication .PERIOD  But ,COMMA  here is a newer method to avoid code replication in a greater unit .PERIOD  So ,COMMA  the second reason why we write functions is to avoid writing similar code again and again .PERIOD   So ,COMMA  let us try to write functions by motivating it with the help of an example .PERIOD  This example will show the benefit of how we can avoid code duplication using functions ,COMMA  and also how we can breakup a complex problem into simpler sub problems .PERIOD  So ,COMMA  in this I will introduce the problems similar to what have we seen before .PERIOD  We have a sequence of numbers .PERIOD  The first number tells you how many inputs there are .PERIOD  And then what we need to do is to pick out the numbers which are relatively prime in these sequences .PERIOD  So ,COMMA  two numbers are relatively prime if there gcd is 1 .PERIOD  So ,COMMA  16 and 7 are relatively prime ;SEMICOLON  4 and 6 are not because they have a common factor of 2 ;SEMICOLON  6 and 16 are not ,COMMA  they have a common factor of 2 ;SEMICOLON  16 and 7 do not have a common factor other than 1 ;SEMICOLON  7 and 8 are similarly relatively prime ;SEMICOLON  8 and 9 are relatively prime ;SEMICOLON  9 and 10 are relatively prime ;SEMICOLON  and 10 and 11 are relatively prime .PERIOD   So ,COMMA  these are the relatively prime pairs .PERIOD  And we need to write a function which given a sequence of these numbers count how many pairs ,COMMA  how many successively occurring numbers are relatively prime to each other .PERIOD  In this case there are 5 such pairs .PERIOD  So ,COMMA  in this problem we can clearly see that there is a sub problem which is ,COMMA  given two numbers are they relatively prime ?QUESTIONMARK  That is one sub problem .PERIOD  And if we have the solution to that sub problem then we can compose the solution to the whole problem as follows .PERIOD  Given two numbers ,COMMA  I check whether they are relatively prime .PERIOD  If they are relatively prime I will increment the count of the relatively prime pairs I had seen so far ,COMMA  otherwise I will skip to the next pair and see whether they are relatively prime .PERIOD  So ,COMMA  for each new pair of numbers I am seeing that is the sub task of checking whether they are relatively prime .PERIOD   So ,COMMA  let us say that suppose we have a function ;SEMICOLON  a function is something that we will see in a minute .PERIOD  Suppose we have a small component which will perform the task of testing iscoprime a ,COMMA  b .PERIOD  So ,COMMA  iscoprime a ,COMMA  b ,COMMA  that function will take two numbers a and b and check whether they are relatively prime or not .PERIOD  If a and b are relatively prime it evaluates to 1 .PERIOD  It is ,COMMA  we say that it returns 1 if they are relatively prime ;SEMICOLON  and if they are not co-prime to each other ,COMMA  if there not relatively prime ,COMMA  then it has to return as 0 .PERIOD  So ,COMMA  it has to evaluate to 0 .PERIOD  Now ,COMMA  associated with every function there are three concepts .PERIOD  We will see them one by one .PERIOD  There is this declaration of a function which says what does the function look like ,COMMA  what is the type of the function .PERIOD  So ,COMMA  the declaration of the function will be written in the following way .PERIOD  It will be written as int iscoprime ( int a ,COMMA  int b ) .PERIOD  This means that iscoprime is the function name ,COMMA  and then it takes two arguments - a and b which are of type int ;SEMICOLON  so int a and int b .PERIOD  If we had written another function which takes a float a and int b ,COMMA  we would say ,COMMA  function int ,COMMA  float a ,COMMA  int b .PERIOD   So ,COMMA  in this case we are taking two integers as arguments ,COMMA  so you have to say ,COMMA  int a ,COMMA  int b .PERIOD  A small syntactic point that you have to notice ,COMMA  that ,COMMA  you cannot abbreviate this as int a ,COMMA  b ;SEMICOLON  so that is not allowed .PERIOD  Each variable needs to have a separate type signature .PERIOD  So ,COMMA  these are called the input arguments .PERIOD  So ,COMMA  that is the second part of the declaration .PERIOD  The first part of the declaration ,COMMA  the first ,COMMA  which says that ,COMMA  it is an int ,COMMA  is actually the type of the return value .PERIOD  So ,COMMA  the return value is 1 if the pairs is co-prime ,COMMA  and it is 0 if the pair is not coprime .PERIOD  So ,COMMA  the return value is an integer .PERIOD  So ,COMMA  we need a function name ,COMMA  we need a declaration of the input arguments .PERIOD  The arguments need to be named ,COMMA  and the return value of the output .PERIOD   So ,COMMA  let us say how do we design the higher level function ?QUESTIONMARK  So ,COMMA  here is how you use functions when you program .PERIOD  You assume that the function is already available to you ,COMMA  and it does what it is supposed to do .PERIOD  Using that how do I build the solution to the whole program ?QUESTIONMARK  So ,COMMA  in this case ,COMMA  let us just assume that we have written int iscoprime ;SEMICOLON  we have written that function .PERIOD  And we are interested in ,COMMA  how do we build the solution to the entire problem using that ?QUESTIONMARK   So ,COMMA  how do you do that ?QUESTIONMARK  Use ,COMMA  have a flow chart which reach numbers one by one .PERIOD  And count is the number of co-prime pairs that you have seen so far .PERIOD  So ,COMMA  you check whether you have seen n numbers .PERIOD  If you have not seen n numbers then you read the next number and check whether the previous number and the current number form a co-prime pair .PERIOD  So ,COMMA  you give iscoprime prev current ;SEMICOLON  it will return 1 ,COMMA  if they are co-prime .PERIOD  So ,COMMA  that will get added to the count .PERIOD  If there not co-prime ,COMMA  they will ,COMMA  it will return a 0 .PERIOD  So ,COMMA  count will remain as it is .PERIOD   Once you do that you say prev is = current ,COMMA  and indicate that you are going to read the next number .PERIOD  This is similar to other problems where we scanned this bunch of numbers and did some function based on that .PERIOD  The new think here is the iscoprime function which we just assumed that it is correctly written ,COMMA  and it does what it is supposed do .PERIOD  So ,COMMA  this is the function declaration .PERIOD  Now ,COMMA  how do you code this up ?QUESTIONMARK  You basically code this up in c ,COMMA  just as you did it with other program ,COMMA  other functions like scan f .PERIOD  You just say ,COMMA  count + iscoprime previous current .PERIOD  So ,COMMA  this is how you can encode the flowchart including the function called as a C program .PERIOD  Now ,COMMA  let us come to the interesting part which is ,COMMA  how do we design the int iscoprime function ?QUESTIONMARK  So ,COMMA  the top is the declaration part of the function where I say that what is its type .PERIOD  So ,COMMA  the function name is iscoprime .PERIOD  It takes two variables a and b ;SEMICOLON  a is of type int ,COMMA  b is of type int .PERIOD  And it is supposed to written in integer value .PERIOD  So ,COMMA  that much is clear from the type declaration the type signature so called of iscoprime .PERIOD   Now ,COMMA  what you do with it ?QUESTIONMARK  You say that ,COMMA  so this is the classic gcd code ;SEMICOLON  you declare a t variable ;SEMICOLON  if a is less than b ,COMMA  you swap a and b .PERIOD  And this part of the code is just calculating the gcd .PERIOD  This is code that we have seen before .PERIOD  And at the end of that ,COMMA  a ,COMMA  will become the gcd .PERIOD  If a and b are co-prime then a ,COMMA  will be 1 .PERIOD  If ,COMMA  a ,COMMA  is any number greater than 1 ,COMMA  then they are not co-prime .PERIOD  So ,COMMA  if ,COMMA  a is = 1 ,COMMA  you return 1 .PERIOD  And for returning ,COMMA  you use the keyword return .PERIOD  So ,COMMA  you return the value 1 ;SEMICOLON  otherwise you return the value 0 .PERIOD  So ,COMMA  this is how you write the function iscoprime .PERIOD  So ,COMMA  now we have to put both these go together .PERIOD  So ,COMMA  I will say ,COMMA  include <stdio .PERIOD h> ;SEMICOLON  this is the first line of the code .PERIOD  Then I will have the source code for iscoprime .PERIOD  So ,COMMA  I will write that .PERIOD  And afterwards write name function ,COMMA  so that ,COMMA  when main calls iscoprime function ,COMMA  then we already have the code for iscoprime available .PERIOD  First this line ,COMMA  then the iscoprime function ,COMMA  and then the main function .PERIOD  So ,COMMA  let us look at the function in somewhat greater detail ;SEMICOLON  a and b are what are called the formal parameters of the function .PERIOD  They are viewed as variables .PERIOD  Now ,COMMA  the formal parameters are visible only within the function .PERIOD  So ,COMMA  we say that their scope is inside the function .PERIOD   Now ,COMMA  there is ,COMMA  this is what is known as the declared definition of the function .PERIOD  Every function can be called .PERIOD  Notice that we have already called the functions like print f and scan f .PERIOD  So ,COMMA  once you define a function you can call a function ;SEMICOLON  calling a function will be evaluating that function with particular arguments ;SEMICOLON  you can do that .PERIOD  So ,COMMA  when you call a function you execute the function with the given arguments .PERIOD  So ,COMMA  5 becomes a ,COMMA  and 6 become b .PERIOD  Once a function call is encountered what happens is that formal parameters are mapped to actual parameters .PERIOD  So ,COMMA  a becomes ;SEMICOLON  so the value 5 is copied to a ,COMMA  and the value 6 is copied to b .PERIOD  This process of copying values is known as parameter passing .PERIOD  Then what you do is ,COMMA  you store the return address of the call .PERIOD  The return address is the line of the main function where the function was called .PERIOD  So ,COMMA  let us say that it was called in the second line of main .PERIOD  Once the function finishes it has to come back to this point .PERIOD   Now ,COMMA  in addition ,COMMA  we also create a box for storing the return value .PERIOD  At the end of function either 1 or 0 will be returned .PERIOD  So ,COMMA  we also need some space in memory to store that return value .PERIOD  So ,COMMA  to look at it in slightly greater detail ,COMMA  so let us say that iscoprime 9 ,COMMA  4 is called in step 20 a .PERIOD  So ,COMMA  this is the address ;SEMICOLON  20 a by which I mean it is line 20 and some location a .PERIOD  So ,COMMA  now ,COMMA  you have to allocate the space for the return value ;SEMICOLON  store the return address and pass the parameters .PERIOD  Now ,COMMA  at ,COMMA  when you pass the inputs ,COMMA  9 and 4 ,COMMA  the space is allocated for ,COMMA  a = 9 ,COMMA  and b = 4 .PERIOD  This is the process of parameter passing .PERIOD  So ,COMMA  we visualize the memory as a stack .PERIOD  So ,COMMA  when you start the programs you start executing from line 1 of many ;SEMICOLON  so x is initialized to - 1 .PERIOD  And then you come to the function called iscoprime 9 ,COMMA  4 .PERIOD  So ,COMMA  when you execute this you do the following: you allocate the space for the return value ,COMMA  you pass the parameters and then execute the function ,COMMA  and finally pass back the return value .PERIOD   So ,COMMA  when you execute the function you imagine that the stack is now divided into a separate space .PERIOD  So ,COMMA  here is a clean separation between the memory that is required for main .PERIOD  So ,COMMA  above here is main ,COMMA  and below here is the memory required for iscoprime .PERIOD  So ,COMMA  in that I have stored a box for return value .PERIOD  I have stored the return address which is 20 a .PERIOD  And then I have ,COMMA  a = 9 ,COMMA  and b = 4 .PERIOD  Now ,COMMA  I will execute the function as though memory is limited to here .PERIOD  So ,COMMA  I will declare t ,COMMA  and then execute the gcd algorithm .PERIOD  So ,COMMA  this is stuff that we have seen before .PERIOD  And finally ,COMMA  a is the gcd which is 1 .PERIOD  If a is 1 we have to return 1 .PERIOD  So ,COMMA  the value 1 will be copied to the return value ,COMMA  and that is the value that will be passed back ;SEMICOLON  so x will be 1 .PERIOD  So ,COMMA  the return value will be copied back to the main function .PERIOD   When comes to C functions ,COMMA  we have seen the following concepts .PERIOD  One is the declaration in the definition of the function by which I mean the declaration is what type is the function ?QUESTIONMARK  What are the input arguments ?QUESTIONMARK  What types are the input arguments ?QUESTIONMARK  And what is the result return type ?QUESTIONMARK  So ,COMMA  these form the declaration .PERIOD  Definition is the logic of a function .PERIOD  So ,COMMA  this is what is known as the declaration and the definition of the function and we do it only once .PERIOD  So ,COMMA  function is defined only once .PERIOD  Once we define a function we can of course ,COMMA  call the function multiple times .PERIOD  So ,COMMA  definition is done only once and calling can be done any number of times .PERIOD  Now ,COMMA  we refer to a stack which is ,COMMA  what is the central concept in executing a function .PERIOD  Stack is just a part of the memory ,COMMA  that goes only in one direction .PERIOD  So ,COMMA  that is what it is supposed to mean .PERIOD  Basically ,COMMA  you can think of it as a stack of boxes or a stack of paper on a table or a stack of a plates .PERIOD  So ,COMMA  it grows in one direction .PERIOD  So ,COMMA  the stack grows as the main calls of a particular function ,COMMA  that function calls a different function and so ,COMMA  on .PERIOD  And you can imagine the stack is growing upwards or growing downwards .PERIOD  It does not matter .PERIOD  As functions get called it either grow keeps growing upwards or keeps going downwards .PERIOD  We will usually represent it us keeping growing downward .PERIOD  So ,COMMA  let us look at this function that we were talking about earlier .PERIOD  So ,COMMA  n choose k is n factorial upon k factorial times n minus k factorial and let us try to code this up .PERIOD  We know that factorial is something that we will need over and over in this program .PERIOD  So ,COMMA  let us say that I write factorial as a function .PERIOD  So ,COMMA  factorial takes an integer and returns an integers .PERIOD  So ,COMMA  the declaration is int fact int r ,COMMA  r is a input argument and the return type is int .PERIOD  Now ,COMMA  inside that we will write the code for factorial .PERIOD  All variables declared inside the factorial or local or private to the factorial function ,COMMA  they cannot be seen outside .PERIOD  So ,COMMA  the input argument as well as any variables declared inside factorial or private or local to the factorial function .PERIOD  So ,COMMA  I have i and this encodes the logic of factorial that we have seen earlier .PERIOD  So ,COMMA  you start with the product equal to 1 and keep on multiplying the numbers ,COMMA  till you reach r factorial .PERIOD  So ,COMMA  once you reach r you return the r factorial .PERIOD  This logic is something that we have seen before .PERIOD  Now ,COMMA  we will see how do we put this together in order to produce the function .PERIOD  So ,COMMA  what we need to do is ?QUESTIONMARK  We will just encode this solution that we have .PERIOD  So ,COMMA  it is (fact(n)/fact(k))/fact(n-k)  .PERIOD  So ,COMMA  here are the encoded just a logic .PERIOD   So ,COMMA  I will add slightly larger code ,COMMA  this is not proper c code .PERIOD  I let us say that I have three extra variables which have declared of int t1 ,COMMA  t2 and t3 .PERIOD  Now ,COMMA  t1 will be factorial of n ,COMMA  t2 will be factorial of k and t3 will be fact(n-k)  ,COMMA  have separated this out .PERIOD  So ,COMMA  that ,COMMA  I can clearly explain what happens when the code executes .PERIOD  Let us say that I want to calculate 4 c 2 .PERIOD  Now ,COMMA  first when the program starts executing ,COMMA  you start with code on the first line of the main .PERIOD  So ,COMMA  you scanf n and k .PERIOD  So ,COMMA  n is 4 and k is 2 .PERIOD  Now ,COMMA  use do t1 = fact(n)  .PERIOD  So ,COMMA  when t1 = fact(n)  is called ,COMMA  what you do is ,COMMA  you set up the return value and return address .PERIOD  So ,COMMA  return value is not yet decided to return address is 5 ,COMMA  because ,COMMA  you have to go back to line 5 of the code .PERIOD  So ,COMMA  that is why the return value is 5 .PERIOD  Also what you need to do ,COMMA  you need to copy the parameter value which is 4 .PERIOD  So ,COMMA  this is the actual parameter 4 and you have to copy it to the input argument r .PERIOD  So ,COMMA  r is the input argument ,COMMA  r should be assign to the value n here ,COMMA  n is 4 .PERIOD  So ,COMMA  that is known as passing the argument .PERIOD  Now ,COMMA  once that is done the code can be seen us jumping to factorial .PERIOD  So ,COMMA  as soon as the function is called ,COMMA  you actually pass the execution to the factorial function .PERIOD  Now ,COMMA  inside the factorial function you have two in local variables i and ans which is answered .PERIOD  And we start executing the factorial function .PERIOD  So ,COMMA  let us see what happens ,COMMA  when we execute the factorial function .PERIOD  So ,COMMA  far we have passed the arguments and so ,COMMA  on .PERIOD  Now ,COMMA  I have just hidden the part of the stack that was used for name .PERIOD  And let us focus just on the factorial function .PERIOD  This computes the factorial function ,COMMA  that we are familiar with this nothing new here .PERIOD  So ,COMMA  it has a variable I which keep track of how many times it has loop has executed and r is notice 4 .PERIOD  So ,COMMA  you compute the factorial of 4 .PERIOD  Finally ,COMMA  when r = 4  ;SEMICOLON  ans = 24  now ,COMMA  this 24 value we say return the answer value .PERIOD  So ,COMMA  answer value is 24 .PERIOD  So ,COMMA  this will be copied to the return value location .PERIOD  So ,COMMA  the return value will get the value 24 and now jump back to return address .PERIOD  So ,COMMA  return address is line 5 .PERIOD  So ,COMMA  will jump back to line 5 and there we will say that t1 = 24  .PERIOD  Only the return value is copied back to the main program all other things are irrelevant .PERIOD  So ,COMMA  the correct way to imagine what happens .PERIOD  When the function has returned is that ,COMMA  the stack that was allocated to main to the execution of fact is completely erased .PERIOD  So ,COMMA  once we go back to main as soon as the function returns back to the main .PERIOD  You should imagine that the entire stack is deleted ,COMMA  and only the memory that was originally allocated to main remains .PERIOD   So ,COMMA  the correct way to think about a function executing ,COMMA  you can imagine that ,COMMA  you are main and you have a friend ,COMMA  who can calculate factorial for you .PERIOD  Now ,COMMA  you can ask your friend to calculate factorial for you and things are done in a very hygienic manner .PERIOD  So ,COMMA  what you do is ,COMMA  you write on a piece of paper the number 4 and give it your friend .PERIOD  Now ,COMMA  your friend is another room .PERIOD  So ,COMMA  he has at his disposal some black board .PERIOD  So ,COMMA  he looks at the number 4 and using the private local variables that he has ,COMMA  which is i and a result or answer ,COMMA  he calculates the factorial of these numbers .PERIOD  Once see does that ,COMMA  he copies the result back on to a piece of paper .PERIOD  So ,COMMA  4 factorial is 24 and brings it back to you .PERIOD  Before he does that ,COMMA  he erases the black board and he will bring back the number 24 on a piece of paper .PERIOD  Now ,COMMA  you can imagine that the space that your friend used to compute 24 has now been wipe clean .PERIOD  And all that remains is the value 24 which you can copy back on to your note book .PERIOD  So ,COMMA  this allegory tells you exactly what happens in the case of function execution .PERIOD  You write down what you want the factorial of on a piece of paper ,COMMA  pass it your friend ,COMMA  he will go to a separate room .PERIOD  And he will calculate whatever he wants .PERIOD  Once he does that ,COMMA  he will clean his black board ,COMMA  right down the result on a piece of paper and bring that paper back to you .PERIOD  So ,COMMA  as far as you are concerned you are least bothered with how he is computing the factorial function .PERIOD  All you want as the result .PERIOD  And this is the basic way to thing about functions .PERIOD  You should be able to reason out a bigger program by saying ,COMMA  what does as a smaller program ,COMMA  what does as a smaller function do regardless of how that function does it .PERIOD  Now ,COMMA  let us get on with the remaining execution .PERIOD  We have just computed factorial of 4 .PERIOD  Now ,COMMA  we need to calculate factorial of 2 and factorial of 4 minus 2 .PERIOD  So ,COMMA  we go to the next line ,COMMA  the next line also involves the call to factorial of k .PERIOD  So ,COMMA  we do the same things again ,COMMA  we save the return address .PERIOD  Now ,COMMA  the return address is 6 .PERIOD  Because ,COMMA  we are executing line 6 ,COMMA  then we create a box for the return value and pass the parameters ,COMMA  and finally ,COMMA  jump to the called function .PERIOD  So ,COMMA  we do all that we have some memory for main .PERIOD  But ,COMMA  we allocate a new space in the stack for executing factorial .PERIOD  At this point return address is 6 .PERIOD  Because ,COMMA  it is a second factorial that is being called ,COMMA  r is 2 ,COMMA  because ,COMMA  k is 2 and you execute the factorial function .PERIOD  So ,COMMA  you again go to the factorial function and calculate 2 factorial ,COMMA  2 factorial is 2 .PERIOD  So ,COMMA  that will be transferred back to the return value And now you can imagine that ,COMMA  you will get back to the address 6 ,COMMA  where t2 will have the value 2 .PERIOD  So ,COMMA  once you do that again the thing to imagine is that ,COMMA  this slate is wiped clean .PERIOD  And all the memory that you allocated to the stack is now free .PERIOD  So ,COMMA  all once you are back in main all you have as the memory for me .PERIOD  Now ,COMMA  there is the third call to factorial .PERIOD  Fact(n-k)  and it is done in exactly the same manner without much elaboration .PERIOD  So ,COMMA  it will create n - k is 4 - 2 which is also 2 and the return address is 7 equation n .PERIOD  And once you do that ,COMMA  it will execute the factorial code again ,COMMA  and calculate the factorial of 2 which is again 2 and return to line 7 .PERIOD  So ,COMMA  2 will be copied as the return value and once the execution finishes ,COMMA  you return to line 7 of main program .PERIOD  At this point ,COMMA  you say that t3 = 2 .PERIOD  And you can imagine that the stack allocated to factorial is now erased .PERIOD  So ,COMMA  at this point main has t1 = 24  ,COMMA  t2 = 2 and t3 = 2 .PERIOD  You have all the information that you need in order to calculate your result .PERIOD  So ,COMMA  you calculate (24/2)/2 and the answer is 6 which is 4 choose two .PERIOD  So ,COMMA  this illustrates how do you write a function ?QUESTIONMARK  How do you define a function ?QUESTIONMARK  And how do you call it ?QUESTIONMARK  And what actually happens when you execute a main function ?QUESTIONMARK  So ,COMMA  the execution of a function can be visualized as a stack .PERIOD  A stack is a part of memory ,COMMA  that is allocated as private to a new function that is being called .PERIOD  Once that function finishes execution ,COMMA  the stack is erased and you go back to the previous function .PERIOD  And you go back to the calling function .PERIOD  We have been talking about designing programs using functions .PERIOD  And the general  philosophy is that ,COMMA  you have a large task that you want to accomplish and you break it in to sub task ,COMMA  may be each of those sub task are split it in to smallest sub task  and so on .PERIOD  So ,COMMA  break them until some sub task can be easily solved by single function .PERIOD  And then ,COMMA  you put all these function together in order to solve the whole problem .PERIOD  So ,COMMA  design your program from top down ,COMMA  big task decomposing into small task and so on .PERIOD  And debug your program or make sure that they are free of errors from the bottom up .PERIOD  So ,COMMA  test each functions thoroughly and then test the overall program .PERIOD  In this ,COMMA  we will discuss a few technical details about how C executes its functions .PERIOD  In particular we will see how C passes arguments to it is functions ,COMMA  and also how does a return values .PERIOD  When passing arguments will talk about issues like evaluation order ,COMMA  in what order are arguments evaluated ,COMMA  if there are multiple arguments .PERIOD  And we will discuss what are known as side effects .PERIOD  So ,COMMA  let us start by considering a very simple example .PERIOD  I have very simple function called sum which just adds up two variables x and y which are integers .PERIOD  Therefore ,COMMA  the return value is also an integer .PERIOD  Now ,COMMA  inside the main program I will call a = sum(a ,COMMA b) .PERIOD  A is 1 and b is 2 .PERIOD  And then ,COMMA  you will sum this up and the return value is assigned to a .PERIOD  So ,COMMA  this is suppose to do 1 plus 2 3 and a is assigned the value 3 .PERIOD  So ,COMMA  after passing the parameters sum is called with x as a ,COMMA  which is 1 and y as b which is 2 .PERIOD  So ,COMMA  sum returns 3 .PERIOD  So ,COMMA  the return value is 3 and the 3 is assigned back to a .PERIOD  So ,COMMA  when you print it ,COMMA  the output will be 3 followed by 2 .PERIOD  So ,COMMA  this is simple enough .PERIOD  Now ,COMMA  let us try ,COMMA  slightly more tricky example .PERIOD  So ,COMMA  here is the novelty in this example .PERIOD  Some instead of being declared with x and y are now being declared with two variables called a and b .PERIOD  The main program also has two variables ,COMMA  named a and b .PERIOD  So ,COMMA  what will happen here ?QUESTIONMARK  The output is the same as before .PERIOD  So ,COMMA  3 2 if you compile the program and execute it ,COMMA  it will be same as before .PERIOD  So ,COMMA  what really happened here ?QUESTIONMARK  After passing the parameters sum is call with a as 1 and b as 2 .PERIOD  And so it returns a value 3 assigned to the a of mean .PERIOD  Now ,COMMA  these variables are called a and b in main and they are called a and b in sum as well .PERIOD  Now ,COMMA  the variables a and b inside sum are different from the variables a and b inside main .PERIOD  So ,COMMA  the scope of these variable is mean and the scope of these variables a and b is the sum function .PERIOD  So ,COMMA  in other words the a and b inside sum has scope just this function ,COMMA  they are not visible or addressable outside especially in main .PERIOD  So ,COMMA  if you want to think of it ,COMMA  you can think of them as sum .PERIOD a ,COMMA  sum .PERIOD b .PERIOD  So ,COMMA  they are the a variable belonging to sum and the b variable belonging to sum .PERIOD  So ,COMMA  even though you would think that this a and this a may get confused they are actually different variables .PERIOD  One is the a variable belonging to main ,COMMA  and the other is the a variable inside sum and they are different ,COMMA  even though they have a common name .PERIOD   So ,COMMA  now let us a try a slightly more elaborate program ,COMMA  what happens if you have sum(sum(a ,COMMA b) ,COMMA b) ,COMMA  this is the program .PERIOD  In this case what will happen ?QUESTIONMARK  So ,COMMA  first evaluate the in a program ,COMMA  in a function sum of a b .PERIOD  So ,COMMA  a is 1 and b is 2 .PERIOD  So ,COMMA  that will return 3 ,COMMA  then you add b again to it b is 2 ,COMMA  you have 5 as the total sum .PERIOD  So ,COMMA  the total the complete output is a will be assigned 5 and b is still 2 .PERIOD  So ,COMMA  this is similar to evaluating a normal mathematical expression .PERIOD  One thing that we need to take care of is to handle expression with side effects .PERIOD  Now ,COMMA  what are expression with side effects ?QUESTIONMARK  So ,COMMA  let us classify expression into two kinds ,COMMA  one is what are known as pure expressions .PERIOD  So ,COMMA  they are the normal mathematical expression ,COMMA  like a- b * c/d and so on .PERIOD  Similarly evaluating function ,COMMA  these normally do not have any effect other then returning you the value .PERIOD  So ,COMMA  they will they will be correctly evaluated and they will return some value ,COMMA  other than that ,COMMA  they have no effect .PERIOD  Now ,COMMA  expressions with side effects change the state of the program .PERIOD  For example ,COMMA  when I execute an expression a = a +1 .PERIOD  Now ,COMMA  this is an expression ,COMMA  it has a value .PERIOD  So ,COMMA  let us say that a was 1 before a = a +1 .PERIOD  A plus 1 has value 2 and a is assign the value 2 .PERIOD  The state of the program involves ,COMMA  for example ,COMMA  what values are stored in the variables .PERIOD  When you execute the expression a = a +1 ,COMMA  the value of the variable a changes .PERIOD  Contrast this with previous expression ,COMMA  like a minus b star c slash d .PERIOD  You can see that ,COMMA  unless you assign to something no variables value is changing ,COMMA  it will just evaluated and the value will be return .PERIOD  Here ,COMMA  the value will be returned also variable a is changing .PERIOD  Here ,COMMA  in this second function you have two arguments ,COMMA  two function f .PERIOD  The first is the expression a = b +1 ,COMMA  the second is an expression b = a + 1 .PERIOD  This might sound like a very strange way to code .PERIOD  But ,COMMA  you know that any expression can be given as arguments .PERIOD  So ,COMMA  in particular assignment expressions can be given as arguments .PERIOD  For example ,COMMA  a = b +1 is an assignment expression ,COMMA  which is given as an argument to the function .PERIOD  Now ,COMMA  such expressions are called expressions with side effects ,COMMA  because ,COMMA  the change the state of the program .PERIOD  When you have side effects you should be careful .PERIOD  For example ,COMMA  what will happen in the following program ?QUESTIONMARK  You have function int minus(int a ,COMMA  int b) and it returns b - a .PERIOD  Now ,COMMA  in this program main calls the minus function with two expressions as arguments a = b +1 and b = a + 1 .PERIOD  They are expressions with side effects ,COMMA  because ,COMMA  once evaluate these arguments ,COMMA  you know that the variable a will change in the first expression and the variable b will change the second expression .PERIOD  So ,COMMA  what will happen in this program ?QUESTIONMARK  So ,COMMA  how should we evaluate it ?QUESTIONMARK  The general rule is that all arguments are evaluated before the function call is made .PERIOD  So ,COMMA  before the function is executing ,COMMA  we know that a = b +1 and b = a + 1 both will be executed .PERIOD  But ,COMMA  and here is the major problem ,COMMA  we know that both have to be executed .PERIOD  But ,COMMA  C does not specify in which order they have to be executed ,COMMA  so ,COMMA  it was the left to the compiler .PERIOD  So ,COMMA  let is evaluate it in first in left right order .PERIOD  So ,COMMA  this expression first and then b = a + 1 .PERIOD  So ,COMMA  what will happen then ?QUESTIONMARK  a = b +1 b is 1 .PERIOD  So ,COMMA  a will get the value 2 ,COMMA  b = a + 1 will be executed after that a is now 2 .PERIOD   So ,COMMA  b will get the value 3 .PERIOD  Now ,COMMA  you execute minus .PERIOD  So ,COMMA  you will return 3 - 2 which is 1 and b has value 3 .PERIOD  So ,COMMA  this is the expected output .PERIOD  But ,COMMA  when you run it on some machines ,COMMA  you may get the output -1 3 .PERIOD  So ,COMMA  what happened here ?QUESTIONMARK  Now ,COMMA  this happens for example ,COMMA  when the compiler would evaluate it right to left .PERIOD  So ,COMMA  when you evaluate it right to left what will happen is that b = a + 1 will be executed first .PERIOD  So ,COMMA  b = a + 1 ,COMMA  b gets the value 2 plus 1 3 .PERIOD  And then ,COMMA  you will execute a = b +1 ,COMMA  b is now 3 .PERIOD  So ,COMMA  a gets the value 4 .PERIOD  So ,COMMA  when you call minus of 4 comma 3 minus will return 3 -4 which is -1 .PERIOD  So ,COMMA  in this case you know that b gets the value 3 ,COMMA  a gets the value 4 and the result will be -1 .PERIOD  So ,COMMA  what was the mistake ?QUESTIONMARK  The mistake was that we assume that both arguments will be evaluated before the function is called .PERIOD  But ,COMMA  we assume that it will be evaluated left to right .PERIOD  And the first expression will be evaluated before the second expression ,COMMA  that is the reasonable assumption to make .PERIOD  But ,COMMA  c does not guarantee you that ,COMMA  c leaves this decision to the compiler .PERIOD  Now ,COMMA  compilers may evaluate arguments in different orders .PERIOD  For example ,COMMA  a very common order is right to left .PERIOD  So ,COMMA  both answers like 1 and 3 and -1 and 3 are both consistent with the c specification .PERIOD  Now ,COMMA  this is the very troubling is scenario ,COMMA  what should we do ?QUESTIONMARK  So ,COMMA  we should write this function in such a way that ,COMMA  they do not depend on whether the arguments are evaluated left to right or whether they are evaluated right to left .PERIOD  So ,COMMA  write expressions in such way ,COMMA  that they are free of side effects ,COMMA  when you pass them into functions .PERIOD  So ,COMMA  how do we do that ?QUESTIONMARK  We can do the following .PERIOD  For example ,COMMA  if we really wanted the left to right order ,COMMA  that is if you want a = b +1 to happen first and then b = a + 1 .PERIOD  Why not write them explicitly that order in the main function .PERIOD  So ,COMMA  first this will be executed then b = a + 1 will executed .PERIOD  So ,COMMA  a will get the value 2 and then b will get the value 3 .PERIOD  So ,COMMA  minus ( a ,COMMA  b) will execute as 3 - 2 in which case you will get 1 .PERIOD  So ,COMMA  the important thing to note is that ,COMMA  in this particular function called ,COMMA  the arguments do not have any side effects .PERIOD  Because ,COMMA  we explicitly coded them up before to specify that ,COMMA  this is the order in which I want .PERIOD  If put it here ,COMMA  then it is up to the compiler ,COMMA  the compiler can do whatever is best in for several criteria .PERIOD  So ,COMMA  now let us come back to what the  function ,COMMA  we have the function definition which is the entire function .PERIOD  The logic of the function is what is known as the function body .PERIOD  And the heading is what we call the type signature .PERIOD  The type signature has for example ,COMMA  two arguments a and b these are call the formal parameters .PERIOD  Now ,COMMA  we focus on the return expression .PERIOD  So ,COMMA  return followed by some expression is the only mechanism for returning the value from a function .PERIOD  If the type of return expression does not match the declare type of the return .PERIOD  So ,COMMA  if for example ,COMMA  a is of a variable which is different from int .PERIOD  In this case they are the same ,COMMA  then it is fine .PERIOD  But ,COMMA  otherwise the return expression is converted to this type and then returned .PERIOD  So ,COMMA  it might lead to some undesirable variable .PERIOD  Now ,COMMA  we have discussed parameter passing’s in when passing parameters in c ,COMMA  the values from the calling function are copied to formal parameters in the called function .PERIOD  So ,COMMA  the actual parameters are converted to the formal parameter type and separate copies made .PERIOD  So ,COMMA  this is known as call by value .PERIOD  So ,COMMA  formal parameters and local variables are the function are accessible only within the function ,COMMA  we have already see in this .PERIOD  And memory for the formal parameters and the local variables of the called function will be erased as soon as function returns .PERIOD  So ,COMMA  executing return any where inside the function will immediately return from the function .PERIOD  And transfer control back to the calling function at the specified return address So ,COMMA  when you execute there are few things keep in mind .PERIOD  Whenever ,COMMA  you execute any return expression ,COMMA  it will cause the function to immediately return .PERIOD  Now ,COMMA  main is a function so ,COMMA  we can use return statement inside main what ;SEMICOLON  that means ,COMMA  the main will immediately stop execution .PERIOD  That is the whole program will stop execution .PERIOD  Now ,COMMA  when you return a particular value ,COMMA  the calling function may choose to ignore the value .PERIOD  For example ,COMMA  let us say that I write some dummy function int f and it takes two argument float a and int b and we some code here .PERIOD  And then ,COMMA  I have the main function in which I have two variable int x and float y .PERIOD  Then ,COMMA  I have some code and here is the interesting thing ,COMMA  I call f(y ,COMMA x) ,COMMA  y is an float x is an int .PERIOD  So ,COMMA  I am find ,COMMA  but this function returns an integer value .PERIOD  But ,COMMA  I am not assigning it to anything .PERIOD  So ,COMMA  I am not saying something like x = f(y ,COMMA x) .PERIOD  So ,COMMA  this is not required .PERIOD  So ,COMMA  if this is the case ,COMMA  then why call the function in the first place ?QUESTIONMARK  This is ,COMMA  because the function also may have side effects .PERIOD  So ,COMMA  remember that side effects are something some expressions ,COMMA  we change the state of the program .PERIOD  So ,COMMA  functions may have side effects ,COMMA  your already seen one such function which has the side effect for examples ,COMMA  scanf .PERIOD  So ,COMMA  the side effect of calling scanf is that the input from the keyboard is copied into some variable .PERIOD  So ,COMMA  function may have side effect ,COMMA  this is why you can call the function and choose to ignore the output or the return value .PERIOD  Now ,COMMA  just for curiosity sake executing return will calls the function to immediately return to the return address .PERIOD  Now ,COMMA  the return value if you omit it ,COMMA  then the return value is unpredictable .PERIOD  So ,COMMA  here is a example ,COMMA  you should in general avoid doing things like this .PERIOD  But ,COMMA  just for completeness ,COMMA  I am supposed to return a float value instead if I just say a return ,COMMA  the program will compile .PERIOD  But ,COMMA  when you execute some unpredictable behavior may result .PERIOD  So ,COMMA  the printed value in this case can in general will not predictable .PERIOD  With the concepts we have seen so far ,COMMA  let us design a sample program .PERIOD  So ,COMMA  the… What we … The problem that we want to solve is we want to write a program that reads the input line-by-line ,COMMA  and counts how many lines has the user input .PERIOD  Program should terminate when the end-of-file character is encountered .PERIOD  So ,COMMA  we will try to solve this problem .PERIOD  By the way ,COMMA  the end of file is a character ,COMMA  which you can enter using control-D if you are running Linux .PERIOD  So ,COMMA  the flowchart at the very top level can be envisioned as follows .PERIOD  So ,COMMA  we will just check has the end-of-file been reached .PERIOD  If the end-of-file has not been reached ,COMMA  you read the next line .PERIOD  If it is has been and check again .PERIOD  If the end-of-file has been reached ,COMMA  then you halt ;SEMICOLON  otherwise you read another line .PERIOD  So ,COMMA  here is the very toplevel picture of what we want to do .PERIOD  So ,COMMA  this design is just meant to read the input lineby-line .PERIOD  So ,COMMA  it is a very vague flowchart ,COMMA  but at the top level ,COMMA  this is what we want to do .PERIOD  So ,COMMA  let us say more details about how we are going to accomplish this .PERIOD  In particular ,COMMA  we want to see how we can read and put line-by-line .PERIOD  So ,COMMA  here is the top-level design .PERIOD  And now we are going to essentially expand this box .PERIOD  We want to say how do we read the next line .PERIOD  So ,COMMA  let us design the read next line box .PERIOD  So ,COMMA  the read next line box ,COMMA  first you read a character and then you check whether the character read is new line character ;SEMICOLON  that means that the user has pressed an enter .PERIOD  So ,COMMA  the line is ended at that point or the user can enter a bunch of characters ;SEMICOLON  and instead of pressing enter ,COMMA  press control D .PERIOD  So ,COMMA  the user can enter end-of-file .PERIOD  If either of these are true ,COMMA  then the line has ended .PERIOD  So ,COMMA  you halt .PERIOD  Otherwise ,COMMA  if the character is neither new line nor end-of-file ,COMMA  then you read the next character .PERIOD  So ,COMMA  here is the design for the function to read the next character – next line .PERIOD  So ,COMMA  you read character-by-character ;SEMICOLON  after every character ,COMMA  you check whether a new line or an end-of-file has been encountered .PERIOD  If either of them happen ,COMMA  then the line has ended ;SEMICOLON  otherwise ,COMMA  you go back and read another character .PERIOD   So ,COMMA  let us start by writing the top-level function .PERIOD  So ,COMMA  let us translate the top-level function into code .PERIOD  So ,COMMA  here we will introduce a new concept called what is known as a forward declaration .PERIOD  So ,COMMA  when you define a function ,COMMA  you can either give the logic – the full function body when you define the function or you can just say that ,COMMA  here is what the function will look like ;SEMICOLON  here is the type signature ;SEMICOLON  basically ,COMMA  it is taking no arguments and it will return an integer value .PERIOD  And I will terminate that statement by using a semicolon ;SEMICOLON  which says that ,COMMA  this function… I will currently just say the type of the function ;SEMICOLON  I will define the function later .PERIOD  This is done ,COMMA  so that we can write a function ,COMMA  which uses this particular function .PERIOD  So ,COMMA  when we write a function ,COMMA  which uses that function ,COMMA  the type of the function should be known .PERIOD  For that we can just declare the type of the function .PERIOD  This is what is known as a declaration of a function .PERIOD  Unless you define the function ,COMMA  you cannot use it ;SEMICOLON  but in order for another function to just see what the function looks likes ,COMMA  declaration is sufficient .PERIOD  So ,COMMA  let us design the top-level function .PERIOD  So ,COMMA  we declare this function that ,COMMA  we will use in this function that we are about to write .PERIOD  So ,COMMA  this user function will be called read all lines .PERIOD  Now ,COMMA  in that ,COMMA  we will keep a line count initialized to 0 ;SEMICOLON  and then I will keep a flag called isline .PERIOD  Now ,COMMA  what this will do is we have to check for whether an end-of-file has been reached or not .PERIOD  For that ,COMMA  I will use the function feofstdin .PERIOD  We will see that in a minute .PERIOD  While the end-of-file has not been encountered ,COMMA  you say that ,COMMA  read next line ;SEMICOLON  read next line will return a 1 if a line has been encountered ;SEMICOLON  otherwise ,COMMA  it will return a 0 .PERIOD  So ,COMMA  line count will be incremented by 1 if I read another line ;SEMICOLON  otherwise ,COMMA  it will remain as it is .PERIOD  Finally ,COMMA  you return the number of lines read .PERIOD  So ,COMMA  this is a realization of the flowchart on the left .PERIOD  Now ,COMMA  there are a couple of things that require explanation .PERIOD  First is that even though the read next line function has not yet been defined ,COMMA  just based on the declaration ,COMMA  I can say that ,COMMA  it is going to return an integer and I can use the integer here .PERIOD   The other thing is what do we mean by feofstdin ?QUESTIONMARK  So ,COMMA  what do we mean by the function feof ?QUESTIONMARK  So ,COMMA  feofstdin is a function that is part of the stdio library .PERIOD  We have already used other functions from that library .PERIOD  For example ,COMMA  printf and scanf .PERIOD  Now ,COMMA  the feof function – what it does is – it returns a function ;SEMICOLON  it returns a value 1 if the end-of-file has been encountered in the input argument .PERIOD  So ,COMMA  stdin means that ,COMMA  I am using the standard input ,COMMA  which is the keyboard input .PERIOD  So ,COMMA  if and end-of-file has been entered via the keyboard ,COMMA  then feofstdin will return 1 .PERIOD  So ,COMMA  stdin is usually the keyboard input .PERIOD  And usually ,COMMA  if the user enters the control D character ,COMMA  then feof will say 1 ,COMMA  because end-of-file has been entered .PERIOD   Now ,COMMA  let us design the function to read a line .PERIOD  We earlier wrote a function ,COMMA  which assumed that ,COMMA  there is a function ,COMMA  which will read the next line ;SEMICOLON  and based on that ,COMMA  I will keep on reading lines until the end-of-file is encountered .PERIOD  So ,COMMA  we are now about to write the bottom function .PERIOD  So ,COMMA  we want to read a line .PERIOD  So ,COMMA  we have already drawn the flowchart for that .PERIOD  Now ,COMMA  let us try to make it into code .PERIOD  So ,COMMA  we have to design a few variables ;SEMICOLON  we will have int ch for reading a character ;SEMICOLON  we will come to that in a minute ;SEMICOLON  then we will keep a count of how many characters have been read .PERIOD  And let us write the basic loop .PERIOD  So ,COMMA  we will just write the loop corresponding to the flowchart ;SEMICOLON  ch will be getchar .PERIOD  So ,COMMA  get the next character .PERIOD  And while ch is… While the read character is neither end-of-file nor new line ,COMMA  you should keep reading characters .PERIOD  So ,COMMA  if neither of this is true ,COMMA  then you should read the next character ,COMMA  which is what the flowchart says .PERIOD  A slight… a small point here is that ,COMMA  getchar returns an integer .PERIOD  This is a technicality because end-of-file is negative 1 .PERIOD  ASCII characters if you remember ,COMMA  go from 0 until 127 or something like that ;SEMICOLON  whereas ,COMMA  end-of-file is defined to be -1 .PERIOD  So ,COMMA  because of this -1 ,COMMA  you cannot keep the return value of getchar as a character ;SEMICOLON  it technically has to be an integer .PERIOD  Now ,COMMA  this is a technicality .PERIOD  So ,COMMA  keep that in mind .PERIOD  Now ,COMMA  we need to do something further in the loop .PERIOD  So ,COMMA  we will complete this in a minute .PERIOD  So ,COMMA  what should we do inside the loop ?QUESTIONMARK  This should be character .PERIOD  So ,COMMA  what is this function supposed to do overall ?QUESTIONMARK  We have to return a 1 ,COMMA  if the number of characters in the current line that we have read is at least 1 .PERIOD  So ,COMMA  if the current line contains at least a character ,COMMA  then we have to return 1 .PERIOD  For example ,COMMA  if the user just entered a new line ,COMMA  which is just press the enter key ,COMMA  there is a blank line .PERIOD  In that case ,COMMA  we would not say that ,COMMA  we have read a line ,COMMA  because it was a blank line .PERIOD  So ,COMMA  if there is at least one character ,COMMA  which is neither new line nor end-of-file in that line ,COMMA  we have to return a 1 ;SEMICOLON  otherwise ,COMMA  let us say we return a 0 .PERIOD  So ,COMMA  one way to do that is to keep a count of the number of the characters we have read .PERIOD  So ,COMMA  for every character read ,COMMA  we will keep a count of every character ,COMMA  which is neither end-of-file nor a new line ;SEMICOLON  we will keep a count of characters .PERIOD  So ,COMMA  notice the way that ,COMMA  the loop has been return .PERIOD  So ,COMMA  if the first character is a new line ,COMMA  it will not enter the loop .PERIOD  Hence ,COMMA  count remains 0 .PERIOD  At the same time ,COMMA  the way the loop is returned ;SEMICOLON  count will count exactly those characters ,COMMA  which are neither new line nor end-of-file .PERIOD   So ,COMMA  now ,COMMA  let us decide what should be the return value .PERIOD  We have to return a 1 if the number of characters in the current line including new line is at least 1 .PERIOD  So ,COMMA  if count is greater than 0 ,COMMA  we can return a 1 .PERIOD  If exactly 1 ;SEMICOLON  if the last character was end-of-file without having any other characters ,COMMA  then will return a 0 .PERIOD  So ,COMMA  how we do that ?QUESTIONMARK  We can check whether at least a character has been read by just checking the value of count .PERIOD   So ,COMMA  if count is greater than 0 ,COMMA  then at least one character has been entered ;SEMICOLON  otherwise ,COMMA  for example ,COMMA  we can also say that ,COMMA  if the user has just entered a blank line ,COMMA  then also we can say that ,COMMA  one more line has been entered .PERIOD  So ,COMMA  that is up to the way you want to do it ;SEMICOLON  you can also take the stance that ,COMMA  maybe a blank line does not count as a line .PERIOD  If that is the case ,COMMA  then you do not have to do it ;SEMICOLON  but in this case ,COMMA  let us just assume that ,COMMA  if at least a character has been entered ,COMMA  which is either a normal character on a new line ,COMMA  we will say that ,COMMA  return 1 .PERIOD  If the only character entered in that line is end-of-file ,COMMA  we will say that ,COMMA  there is no more new line .PERIOD  So ,COMMA  what we have to do is return count greater than 0 ;SEMICOLON  this tells you how many non-new-line ,COMMA  non-end-of-file characters have been entered .PERIOD  So ,COMMA  this should be at least 1 ;SEMICOLON  or ,COMMA  there is exactly one character entered ,COMMA  which is a new line .PERIOD  So ,COMMA  neither these cases we will return a 1 ;SEMICOLON  otherwise ,COMMA  we will return a 0 .PERIOD   So ,COMMA  we can put these programs together by concatenating all the code that we have written .PERIOD  Notice one thing that declare the function first ;SEMICOLON  we use the function here .PERIOD  So ,COMMA  here is a top-level function ,COMMA  which will use read next line .PERIOD  When read all lines uses read next line ;SEMICOLON  read next line has not been defined yet .PERIOD  So ,COMMA  you can go here after read all lines has been defined ,COMMA  you can define read next line .PERIOD  So ,COMMA  here is a function here .PERIOD  So ,COMMA  this is function 1 ,COMMA  this is function 2 ,COMMA  and finally you have made .PERIOD  Read all lines does not need any forward declaration ,COMMA  because when main uses read all lines ,COMMA  it has already been defined .PERIOD  That was not the case here .PERIOD  When read all lines used to read next line ,COMMA  read next line was not defined yet .PERIOD  That is why we needed a forward declaration .PERIOD  In this program ,COMMA  you can reorder the code such that read next line code can be written before in which case you do not need the forward declaration .PERIOD  But the concept of forward declaration is useful for later discussion .PERIOD  So ,COMMA  I have just introduced that .PERIOD     This session will learn about arrays in C .PERIOD  Now ,COMMA  what is the word array mean ,COMMA  it means a grouping or a collection of objects .PERIOD  So ,COMMA  for example ,COMMA  you could say that he could not dismiss the array of facts .PERIOD  So ,COMMA  that means ,COMMA  a collection of facts and it also implies a regular order or arrangement that is in the case of a series .PERIOD  So ,COMMA  what do we mean by an array ?QUESTIONMARK  And why do we need it ?QUESTIONMARK   So ,COMMA  let us consider that I have a bunch of numbers say 1 ,COMMA 2 ,COMMA 3 ,COMMA 4 and I want to consider them as being part of the sequence .PERIOD  Let us say 1  ,COMMA  2  ,COMMA  3  ,COMMA  4 .PERIOD  So ,COMMA  the first element is 1 and so on .PERIOD  Now ,COMMA  I want them to be stored and one way I can do it is that ,COMMA  I can store them in to separate variables .PERIOD  For example ,COMMA  I can say that a is 1 ,COMMA  b is 2 and c is 3 and d is 4 .PERIOD  But ,COMMA  when I do it in that way ,COMMA  they are separate variables and the relationship between those variables ,COMMA  the fact that b comes after a and things like that is something that the programmer knows ,COMMA  but it is hard for somebody else looking at the code to figure out .PERIOD  Often we need to store sequence as a sequence itself .PERIOD   So ,COMMA  an array has the following properties ,COMMA  one it is a collection of objects of the same type .PERIOD  Second ,COMMA  is that it has some size ,COMMA  some finite size say n there are n elements in the array and the third is that ,COMMA  I should be able to selectively update only a single element in the array .PERIOD  By which I mean ,COMMA  suppose I have four elements in the array I should be able to say that ,COMMA  I want to replace the third element by 5 .PERIOD  So ,COMMA  3 will be replaced by 5 without touching the other elements ,COMMA  that is what the third thing is about The first thing says that I want a collection such that it is a collection of objects of all of type integer and not of any other type .PERIOD  And the second says that ,COMMA  it has a some finite size so ,COMMA  it is not an infinite collection ,COMMA  so ,COMMA  that is what an array is supposed to do .PERIOD  Now ,COMMA  let us see how we can define arrays ,COMMA  will try to motivate why arrays are needed by introducing certain problems .PERIOD  And I will try to convince you that it is easy to do using arrays and whereas ,COMMA  it was difficult to do without using arrays ,COMMA  using only the facilities in c that we have seen so ,COMMA  far .PERIOD   So ,COMMA  an array is defined in c ,COMMA  similar to how we define a variable .PERIOD  If we had an integer variable we would say int a semicolon instead of that when we declare an array we have int a 5 .PERIOD  So ,COMMA  this would declare that it is an array containing 5 integers .PERIOD  Now ,COMMA  one thing that is certain about arrays in c is that ,COMMA  the five integers which makeup the array will be allocated consecutively in memories so ,COMMA  they will happen one after the other .PERIOD  Also one think to note is that ,COMMA  arrays in c start with index 0 so ,COMMA  the first element is a 0 .PERIOD  So ,COMMA  if we have an array of five elements it will go from a 0 to a 4 .PERIOD  So ,COMMA  have we seen arrays and mathematics for example ,COMMA  you can think of vectors similarly matrices these are all arrays and c arrays will have similarities to mathematical vectors and mathematical arrays .PERIOD  But ,COMMA  note that in mathematics ,COMMA  it is customary to start from index 1 ,COMMA  here it is from index 0 .PERIOD  So ,COMMA  the boxes are addressed as a 0 to a 4 these are called the elements of array .PERIOD  The array is the whole collection of boxes and each box in it will be called an element of array .PERIOD   Now ,COMMA  let us consider a simple program using an array .PERIOD  So ,COMMA  I mentioned that the third requirement that I want for in array is that… So ,COMMA  that first requirement was that all elements of the array are of the same type .PERIOD  Second requirement was that ,COMMA  it has a finite size and that the third requirement is that I should be able to selectively update only one element of the array without touching the other elements .PERIOD  So ,COMMA  let us see a program where we can do all that .PERIOD  So ,COMMA  here is a simple program it declares an integer I and integer array a five and then a for loop .PERIOD  So ,COMMA  let see what the for loop is supposed to do .PERIOD  So ,COMMA  the for loop starts from i qual to 0 and then goes from i = 0 to 5 ,COMMA  filling in the elements by sing the statement a[i] equal to i .PERIOD  So ,COMMA  let us  see what that is supposed to do .PERIOD   So ,COMMA  this is the notation a i is the notation used to address the elements of the array .PERIOD  So ,COMMA  notice the similarity here a 5 when you declare it say's that it is an array of size 5 .PERIOD  a[i] is saying that I want the I th element in the array .PERIOD  So ,COMMA  when i = 0 it will refer to the 0th element in the array until i = 4 .PERIOD  It will go on and till the fourth element of the array .PERIOD  So ,COMMA  a of 5 similar to a of 5 the way we row declare the array say's I want the ith element of the array .PERIOD  So ,COMMA  the variable I is being used as an index for a ,COMMA  that means ,COMMA  if I say a[i] will pick the ith cell ,COMMA  in the ith element in the array .PERIOD  Now ,COMMA  this is similar to the mathematical notation a subscript i ,COMMA  which is what we normally use for vector and matrices .PERIOD   So ,COMMA  let us run through the program once to see what is doing .PERIOD  So ,COMMA  first we declare a 5 ,COMMA  which is five consecutively allocated integers in the memory .PERIOD  And we also have a variable i ,COMMA  i starts with 0 and for this 0th iteration a[i] is allocated let say i + 1 ,COMMA  so ,COMMA  a 0 will be 1 then we update i .PERIOD  So ,COMMA  this statement becomes  a[1] = 1 + 1which is 2 .PERIOD  So ,COMMA  and then execute it a 2 becomes 3 ,COMMA  a 3 becomes 4 and a 4 becomes 5 .PERIOD  So ,COMMA  notice that because we have indices ,COMMA  and indices can be numbers ,COMMA  they can also be replaced by integer expressions ,COMMA  ,COMMA  this is the trick that we have used here .PERIOD  So ,COMMA  a a[i] goes from a 0 all the way up to a 4 .PERIOD    So ,COMMA  one thing is ,COMMA  we have to take care of the size of the array .PERIOD  For example ,COMMA  if we have an integer array of size 5x this means that 5 integer variables named x0 to x4 are allocated .PERIOD  Now ,COMMA  the variables x0 to x4 are integers and they can be assigned and also they can be operated on ,COMMA  they can be part of other expressions and so ,COMMA  on .PERIOD  Now ,COMMA  what about arbitrary integers ,COMMA  we know that 0 to 4 are valid integers what about 5 and so ,COMMA  on .PERIOD  What happens to x5 ,COMMA  x66 something like that .PERIOD  Similarly ,COMMA  what happens what will happen if I right x[-1] what are these valid .PERIOD  So ,COMMA  the answer is no ,COMMA  you cannot in general assume that indices other then 0 to 4 make any sense .PERIOD  Your program may crash and this is the most important thing in c programing when we use the array it is the main part of it ,COMMA  because it is not even guaranteed that a program will crash .PERIOD  So ,COMMA  you may run the program once with x of 5 let us say and the program will work fine .PERIOD  And you will be under the false impression that everything is correct in our program ,COMMA  but the next time you run it ,COMMA  may be your program will crash .PERIOD  So ,COMMA  it is not even guaranteed that it will crash ,COMMA  if it is guaranteed that it will crash ,COMMA  then of course you can know that there is an error ,COMMA  and you can go back to the code .PERIOD  In this case you just you have to be careful when you write the code .PERIOD  So ,COMMA  x 5 x 6 and so ,COMMA  on are undefined ,COMMA  these are names ,COMMA  but there are no storage location that they correspond to ,COMMA  so ,COMMA  you should not access them .PERIOD   So ,COMMA  if you ask a very specific question ,COMMA  shouldn’t I access them are can’t I access them .PERIOD  So ,COMMA  what will happen if I write a code like this where I declare an integer array of size 5 then I know that x0 to x4 are valid location they are the first five locations .PERIOD  But the problem comes with statements like x[5] = 5 x of 6 equal 6 5 and 6 do not refer to valid locations in the array so ,COMMA  what will happen .PERIOD  So ,COMMA  the initial statements up to x[4] are all fine ,COMMA  but the last two statements x[5] = 5 x[6] = 6 lead to arrays will it compile ?QUESTIONMARK  Yes ,COMMA  if you just give the source code ,COMMA  with these erroneous locations it will compile ,COMMA  but c compiler does not check that the indices are within the proper range .PERIOD  So ,COMMA  it will compile and the compile will not tell you that there is anything wrong with there ,COMMA  but when you run a program the program will give something called a segmentation fault it may are may not give that .PERIOD  So ,COMMA  this is one of the most notorious errors when you program in c .PERIOD  So ,COMMA  we will see this error in greater detail when we understand something called pointers .PERIOD  But in general when you exceed the bounce of the array ,COMMA  when you go beyond the locations permissible in the array ,COMMA  your code may crash and the code will crash usually with the error segmentation fault .PERIOD  So ,COMMA  if you run the program and if you see a segmentation fault this is a good indication that may be you are referring to locations in your array that do not exist .PERIOD  So ,COMMA  you should go back and rectify the code ,COMMA  but the danger is that ,COMMA  it may not always crash .PERIOD  So ,COMMA  the only way to be really sure is to go through your source code and examine it .PERIOD   Your program may crash ,COMMA  so ,COMMA  we have seen certain aspects of arrays in c so far .PERIOD   So ,COMMA  for example ,COMMA  let say that I declare a character array str of size 5 ,COMMA  so ,COMMA  it has five characters inside it .PERIOD  And let us say that I use the variable I as an index into the array .PERIOD  So ,COMMA  str[0] to str[4] can be addressed using the index i .PERIOD  So ,COMMA  if I have the index ,COMMA  I know that I can set particular values as str[i] = ‘a’ .PERIOD  Since ,COMMA  i is 0 this will set the 0th element in the array to character a .PERIOD  Similarly ,COMMA  if I say ch equal to str[i + 1] it will take whatever is in the first cell in str[1] and assign it to the variable ch .PERIOD  So ,COMMA  we can set particular element in an array like this .PERIOD  Similarly ,COMMA  we can also read the value in an element and then assign it to something else .PERIOD  So ,COMMA  these are possible with the help of an array now let us consider a particular example ,COMMA  which is the problem is as follows .PERIOD  We want a character array let say a size 100 and then we have to read input which is from the key board and store them in the array ,COMMA  After we have stored it we should stop ,COMMA  once at least hundred character have been written ,COMMA  because that is array size or when the user first end a file .PERIOD  Remember that you can press <Ctrl-D> to enter the end of file .PERIOD   Now ,COMMA  what we have to do is take the error ,COMMA  take the array and print it in the reverse order .PERIOD  Now ,COMMA  if you think for a little bit you can see that it is difficult to do this without an array .PERIOD  Instead of an array ,COMMA  if you are storing it in a single character ,COMMA  there is no way to store hundred characters in one variable and then print them in the reverse order right .PERIOD  Because the first character has to be printed at the end and last character entered has to be printed first .PERIOD  So ,COMMA  you need to remember all the characters ,COMMA  this is an intuitive reason why arrays are important for this problem .PERIOD  So ,COMMA  what is an example problem let say that we have m e or then new line then Moo <Ctrl-D> .PERIOD  So ,COMMA  when you reverse it ,COMMA  you will have oom then the new line then or emn and so ,COMMA  on .PERIOD  So ,COMMA  you have to reverse everything input .PERIOD  Similarly ,COMMA  if you have a string what you have to output is the exact reverse of the string including the spaces .PERIOD     So ,COMMA  this is what we just mentioned ,COMMA  the end of file character is usually -1 .PERIOD  So ,COMMA  it is not a valid as key value .PERIOD  So ,COMMA  the code at the top level looks like this ,COMMA  we have the logic to read a next character into the ch using getchar ,COMMA  and then we have a let us say while loop which says that ,COMMA  while the character is not the end of file ant the number of characters read count is less than 100 .PERIOD  You store the character into the array increment count and then read the next character .PERIOD  So ,COMMA  please look at the structure of the loop very carefully the s is a character array .PERIOD  So ,COMMA  technically it cannot hold end of file ,COMMA  but then if you think about it little bit you will see that we will never encounter the situation where ,COMMA  you will store end of file into the s array ,COMMA  because suppose first character is end of file then we will not even enter the loop .PERIOD  Now ,COMMA  at any point when we enter end of file ,COMMA  it will be at this point right we will read the character only here ,COMMA  before storing it into the array we will actually check whether it is end of file .PERIOD  So ,COMMA  we will not accidentally set the array to -1 at any point ,COMMA  so ,COMMA  character array suffices .PERIOD  So ,COMMA  think carefully about the way this loop has been interpreted .PERIOD   In particular ,COMMA  if I had just done this as the last line before the loop ended then ,COMMA  you would run into problems because you could store the end of files character into the s array by mistake so ,COMMA  just think about that issue .PERIOD  Now ,COMMA  here is an initial design and so ,COMMA  the overall design is that first you have to read into the array and then you have print it in reverse .PERIOD  So ,COMMA  let us make the read into array little bit more precise .PERIOD  So ,COMMA  we have ch = getchar() and because you are using the getchar function we have int ch ,COMMA  because it could also be an end of file .PERIOD  Now ,COMMA  the while loop says that while the ch is not end of file and the number of characters read is strictly less than hundred increment .PERIOD  So ,COMMA  you first set s[count] equal to the character read ,COMMA  ,COMMA  the increment count and then get the next character .PERIOD  So ,COMMA  this loop keeps on filing characters into the character array until you see either end of file or you have enter 100 characters .PERIOD    So ,COMMA  this is the array that we were doing and so ,COMMA  here is the code for printing the characters in reverse .PERIOD  So ,COMMA  here is the pseudo code where we said print s of I instead of that in c we have a particular function which will print the character which is put char .PERIOD  So ,COMMA  due to this the dual function of getchar .PERIOD  So ,COMMA  put char takes an character as an argument and prints it on to the standard output .PERIOD  So ,COMMA  you have int i i is set to be count -1 because that way we will get the last index of the character in the array and then you start counting down until use print the first character and till the end of the array ok .PERIOD   So ,COMMA  putting these two together ,COMMA  you have the read into array part and then you have the reverse part print in reverse part .PERIOD  So ,COMMA  when you put these two together the first thing you do is ,COMMA  bring all the declarations together .PERIOD   So ,COMMA  this is the declarations for read into array as well as print to put together .PERIOD  Similarly ,COMMA  first you have to print ,COMMA  you have to put the code for the read into array part and then the code for the print in reverse part ok .PERIOD   So ,COMMA  let us trace the execution for a small sample input .PERIOD  So ,COMMA  then we have the input is hello and then the user presses <Ctrl-D> for end of file ,COMMA  let see what will happen .PERIOD  So ,COMMA  you start reading into the array .PERIOD  So ,COMMA  s[count] with count equal to 0 starts setting the array .PERIOD  So ,COMMA  s 0 will be h and then h s 1 will be e and so ,COMMA  on .PERIOD  So ,COMMA  once ch becomes <Ctrl-D> the end of file character you will exit the loop .PERIOD  So ,COMMA  the character array is hello .PERIOD     In this lecture will just talk about how to initialize arrays .PERIOD  So ,COMMA  recall that we have  defined arrays as follows ,COMMA  if you declare an array float w[100] ,COMMA  it will declare an array of floats 100 floats consecutively allocated in memory .PERIOD  And we have also mention the fact that there is a separate box w ,COMMA  which will point to the first location in the array .PERIOD  So ,COMMA  it contains the address of the first location .PERIOD  In num[10] will declare and integer array of 10 integers plus one box which will hold the address of the first location ,COMMA  and so on .PERIOD  So ,COMMA  the arrays names ,COMMA  the cells of the array or the elements of the array are index from w[0] through w[99] the indices start from 0 .PERIOD  And we also mentioned that conceptually there is a separate variable called w ,COMMA  the name of the array which stores the address of w[0] .PERIOD    Now ,COMMA  it is not important that we use numbers as the size of the arrays ,COMMA  we can also use constant expression ;SEMICOLON  for example ,COMMA  we can say float w[10 * 10] .PERIOD  So ,COMMA  instead of saying 100 ,COMMA  we can give an arithmetic expression which evaluates 200 ,COMMA  and this has the same effect it will evaluate an array of 100 elements staring from w[0] to w[99] .PERIOD  And there is a separate box called w which move to the address of the first location ,COMMA  but what about using variables or variables size arrays ,COMMA  this is feature that we often which we had .PERIOD  So ,COMMA  what do I mean by that ?QUESTIONMARK  I could declare the following code int size ,COMMA  and then float w size and I could say scanf ( “%d” .PERIOD  &size ) ;SEMICOLON  .PERIOD  So ,COMMA  user enters the size of the array ,COMMA  and then I can enter 10 elements in to the array for example ,COMMA  but here the size of the array itself is a variable which depends on the user input .PERIOD  And we often wish that we would we would be able to allocate variable size arrays ,COMMA  but this is not allowed in Ansi C ,COMMA  it is allowed in the latest versions of C 99 C 11 and so on .PERIOD  We will avoid this feature for the purposes of this course ,COMMA  let us assume that array means they are declared to be of constant size .PERIOD  By constant size you can give the size as a particular number or you can give it as a constant expression ,COMMA  that is an arithmetic expression involving constants ,COMMA  but not general expressions .PERIOD   Now ,COMMA  let us just look at how can we create an integer array num and also initialize it to particular values ;SEMICOLON  for example ,COMMA  I want the num array to look like the following ,COMMA  it contains 7 cells having the values - 2 ,COMMA  3 ,COMMA  5 ,COMMA  - 7 ,COMMA  and so ,COMMA  on .PERIOD  Now I know that if C did not allow me to initialize arrays when I declared it ,COMMA  I could declare the array as int num 7 and then I will just write num[0] = - 2 ,COMMA  num[1] = 3 ,COMMA  and so on until num[6] = 11 .PERIOD  So ,COMMA  here is a way that I can create an array and ensured that this state is reached ,COMMA  but is there more convenient way of doing it .PERIOD  Can I start of the array with these contents .PERIOD  So ,COMMA  C allows you two ways do it .PERIOD  The first is I declare an int num[] and then specify what are the initial values ,COMMA  so - 2 so on up to - 11 within {} .PERIOD   So ,COMMA  this is one way to that C allows you to do this .PERIOD  The initial values are placed within curly braces and separated by  ,COMMA  ,COMMA  the size of the array need not be specified .PERIOD  So ,COMMA  I need not say that num[] has size 7 ,COMMA  it will allocate an array with enough space to hold 7 integers .PERIOD  Array elements are assigned in the order that you specified .PERIOD  So ,COMMA  num[0] will be - 2 ,COMMA  num[1] will be 3 ,COMMA  and so on .PERIOD  So ,COMMA  it is done in a reasonable manner .PERIOD  This also another way to do it ,COMMA  which is slightly different from way above ,COMMA  I can declare the size of an array .PERIOD  So ,COMMA  I declare an array of size 10 ,COMMA  and then give this initial value .PERIOD  What will happen in this case ,COMMA  is that it will make sure that the size of the array is at least equal to the size of list that I have given .PERIOD  So ,COMMA  I have given 7 elements ,COMMA  and I have declared an array of size 10 ,COMMA  7 is less than 10 .PERIOD  So ,COMMA  it is fine .PERIOD  So ,COMMA  I can declare an array of size 10 ,COMMA  I should give a value ,COMMA  I should give values at most 10 in number .PERIOD  So I can give a 10 or below .PERIOD  In this case ,COMMA  I give 7 numbers .PERIOD  So ,COMMA  what happens is that ,COMMA  array is initialized in the order elements given num[0] will be - 2 ,COMMA  num[1] will be three and so on ,COMMA  until num[6] will be 11 .PERIOD  7 elements are filled ;SEMICOLON  the remaining 7 elements are unspecified .PERIOD  So ,COMMA  they will be initialized to 0 .PERIOD   Now let me just remained you that if I had just declared an array int num[10] ,COMMA  and then put a semicolon .PERIOD  So ,COMMA  I had just declare an array without saying any initialization at all ,COMMA  then you should assume that the array contains or arbitrary values ,COMMA  you should assume that array contain Junk values ,COMMA  but if you initializes an array of size 10 ,COMMA  and give only 7 initialization values ,COMMA  then the C standard gives you the guarantee that the remaining elements are initializes to 0 .PERIOD  So ,COMMA  they are not junk .PERIOD   The recommended method to initialize an array is to give the list of initial values ,COMMA  and let the compiler decide what the size of the array it should be .PERIOD  So ,COMMA  if you give 7 initial values ,COMMA  it will decide that the array is of size 7 .PERIOD  Now is the following code correct ,COMMA  if I declare an array of size 100 num and give four initial values .PERIOD  So ,COMMA  this is correct ,COMMA  it creates num as an array of size 100 ,COMMA  the first four entries will be initialized as given .PERIOD  So ,COMMA  num[0] will be 0 ,COMMA  num[1] will be - 1 ,COMMA  num[2] will be 1 ,COMMA  num[3] will be - 1 ,COMMA  and then num[4] until num[99] ,COMMA  they are all set to 0 .PERIOD  So ,COMMA  after the initializations the array will look as follows ;SEMICOLON  the first four values are what we given and the remaining value are 0’s .PERIOD  Now is the following code correct ,COMMA  num[6] = and then you give a list of 7 values to initialize ,COMMA  is this correct ?QUESTIONMARK  The answer is no ,COMMA  it will not compile .PERIOD  So ,COMMA  if you right this code ,COMMA  and compile it using gcc ,COMMA  it you will get a completion error .PERIOD  Why is that ?QUESTIONMARK  We have declared an array of size 6 ,COMMA  but we have given 7 initial values .PERIOD  So ,COMMA  there is no way to do this .PERIOD  So ,COMMA  the rule of thumb is that either give no size for the array ,COMMA  and let the compiler figure out or if you do give a size it has to be at latest 7 ,COMMA  which is the number of values that you give ,COMMA  it can be 10 ,COMMA  it can be 100 ,COMMA  but it cannot be less than 7 .PERIOD  Now just like size can be not just numbers it can also be constant expressions ,COMMA  we can also have constant expressions as initialization values ok .PERIOD   So ,COMMA  for example ,COMMA  I can give num[] = 109 ,COMMA  then the character value A ,COMMA  character value A means it will take the ASCII value of A ,COMMA  65 or whatever it is .PERIOD  So ,COMMA  the first number will be 109 ,COMMA  the second number will be 65 ,COMMA  let us say if the ASCII value A is 65 ,COMMA  and the third value will be 7 * 25 * 1023 + ‘1’ .PERIOD  So ,COMMA  whatever the ASCII value of the character one is let say 90 or something .PERIOD  So ,COMMA  it will be added two this ,COMMA  constant expression ,COMMA  and it will be initialize to that value ;SEMICOLON  num[] two will be the result of evaluating this expression .PERIOD  So ,COMMA  the type of each initialization constant should be promotable or demotable to the array element type .PERIOD  So ,COMMA  the each value in the initialization list should be compatible with let us say integer ,COMMA  because we have declared the array of size of type integer .PERIOD  So ,COMMA  what do I mean by that ,COMMA  for example I can initialize an array num[] with initialization list 1 .PERIOD 09 ,COMMA  then  ,COMMA  A  ,COMMA  25 .PERIOD 25 .PERIOD  So ,COMMA  this is ok ,COMMA  because the floating point values can be downgraded to integers .PERIOD  So ,COMMA  may be this will be initialize to one then whatever the ASCII value ,COMMA  A is let us say 65 ,COMMA  and then 25 .PERIOD  Now ,COMMA  these are about constant expression .PERIOD  What about expression involving variables when we initialize an array .PERIOD  So ,COMMA  can we do something like this .PERIOD  int curr = 5 ,COMMA  and then the num[] array is initialize with {2  ,COMMA  curr*curr+5} ,COMMA  will this work .PERIOD  The answer surprisingly is yes that it will work on most compilers .PERIOD  So ,COMMA  the ANSI C allows constants expressions ,COMMA  and simple expressions for initialization values .PERIOD  Now simple is of course dependent on which compiler we are using .PERIOD  So ,COMMA  if you write a code ,COMMA  and compile using gcc with such an initialization may be or code will compile ,COMMA  and the movement you compile your code with a different compiler it may not compile .PERIOD   So ,COMMA  earlier I had said that the size of the array cannot be initialized using variable expressions .PERIOD  In ANSI C that is forbidden ,COMMA  but the initialization value ,COMMA  so the value that goes in to the array can involve variable expressions ,COMMA  this may or may not be supported .PERIOD  So ,COMMA  it is safe to assume that both the size of the array ,COMMA  and the initialization value can be done only using constant expressions ,COMMA  even though some compilers allow simple initialization values using variable expressions .PERIOD    Now how do we initialize character arrays ?QUESTIONMARK  Character arrays can be initialize like arrays of any other type ,COMMA  suppose we want the following array .PERIOD  s[] = ‘I’  ,COMMA  ‘ ’ ,COMMA ’a’ ,COMMA  ’m’ ,COMMA ’ ‘ ,COMMA  etcetera .PERIOD  So ,COMMA  I can initialize it just like a initialize the other array ,COMMA  I will not specify their size of s and then give this characters ,COMMA  I am DON .PERIOD  So ,COMMA  this is another way to specified and the last character is a null character ,COMMA  but C ‘also allows you to define what are known as string constants .PERIOD  So ,COMMA  we can also write s[] = “I am DON” ,COMMA  but now with in double quotes .PERIOD  So ,COMMA  this is known as a string constant ,COMMA  the null character is an implicit ending character inside a string constant .PERIOD  So ,COMMA  it is automatically added to the int .PERIOD  Now the string constants in C are specified by enclosing it in double quotes .PERIOD   In this video ,COMMA  will talk about initializing character arrays which are a special kind of arrays and has more features then ,COMMA  when it comes to initialization as compared to arrays of other type .PERIOD  So ,COMMA  they may be initialized just like any other array and suppose I want to initialize an array to the following values ,COMMA  the first is I second is a space character then a then m and so on .PERIOD  And the final character is a null character which will be given as ‘\0’ now we can write s .PERIOD  So ,COMMA  character s = [ ] without specifying a size and then followed by the list of characters .PERIOD  Notice that each character is enclosed in single quotes right .PERIOD  So ,COMMA  the space character is a ‘ ‘ and so on until the last which is a null character ,COMMA  which is ‘\0’ .PERIOD  But C also allows us to define what are known as string constants .PERIOD  So ,COMMA  in order to initialize an array a character array I can also write character s[] = “I am DON” .PERIOD  So ,COMMA  I am DON is a string constant in a every string constant that is a string enclosed in double quotes the null character is automatically added to the end .PERIOD  So ,COMMA  I want you to note this difference that ,COMMA  here we explicitly gave a null character at the end here we do not have to give that .PERIOD  Now C ;SEMICOLON  C string constant are specified by enclosing some text with in double quotes for a example ,COMMA  “I am a string”  Now ,COMMA  we will talk about how do we prints strings we have used sting constants many times .PERIOD  So ,COMMA  just take a moment to think back to see whether you can figure out where we have used string constants .PERIOD  So ,COMMA  we have used for them for example ,COMMA  in printf and scanf the first argument of a printf or a scanf was always a string constant ,COMMA  because if you recall we had some text in which involved special characters like new line .PERIOD  It involves formats specifiers as like %d ,COMMA  but whatever it was ,COMMA  it was a bunch of characters .PERIOD  So ,COMMA  it was a text inside a pair of double quotes that is a string constant .PERIOD  So ,COMMA  the first argument is the string constant followed by what all arguments we want to print .PERIOD  Similarly ,COMMA  even for scanf we had some say formats specifier enclosed in double brac double quotes ,COMMA  so ,COMMA  that is a string constant and then you say and value .PERIOD  So ,COMMA  strings are printed using the %s option .PERIOD  So ,COMMA  any of the basic data types in C can be easily printed using the printf statement if you give the correct format specifier .PERIOD  So ,COMMA  if you have a string constant you can print it using the %s option .PERIOD  For example ,COMMA  if I want to print the string “I am DON” then what I can do is I can say printf(“%s” ,COMMA  ”I am DON”) .PERIOD  And this will print I am DON which is exactly what I wanted to print .PERIOD  Now ,COMMA  what if I initialize a character array character str[ ] without specifying the size .PERIOD  I initialize it using a string constant I am great DON within double quotes .PERIOD  Then I print it using printf( “%s” ,COMMA  str) ,COMMA  will this work ?QUESTIONMARK  And the answer is yes it will work ,COMMA  because C will consider this as a string constant and it will print it using %s and you will get the correct output .PERIOD  So ,COMMA  state of memory after definition of this string in example two is that ,COMMA  it has a list of all these characters ‘I’ ,COMMA   ‘ ‘ ,COMMA  ‘a’ ,COMMA  ‘m’ ,COMMA ’ ‘ and so on and note the implicit null at the end .PERIOD  So ,COMMA  even though the double quotes ended just after n when you stored it in an array there is an implicit null that is inserted at the end of the array .PERIOD  So ,COMMA  when you print it will print until the null character .PERIOD  So ,COMMA  null character itself at the end of the string is not printed when you print it using %s .PERIOD    Now ,COMMA  let us look at the following fragment to understand slightly in a deeper way what %s thus when you print it using printf .PERIOD  So ,COMMA  suppose I declare an character array using character str[ ]= “I am GR8DON” .PERIOD  So ,COMMA  this is initialized using the string constant which means that after the last end ,COMMA  there will be a null character in the array .PERIOD  Now ,COMMA  I initialize i I said str[4] = ‘\0’ note that there are 11 non-null characters in the string constant .PERIOD  So ,COMMA  this goes from str[0] to str[10] followed by str[11] which is a null character .PERIOD  So ,COMMA  now ,COMMA  I said str[4] = ‘\0’ .PERIOD  So ,COMMA  somewhere in the middle of the string I put a null character .PERIOD  What will happen if I print it using printf %s ?QUESTIONMARK  So ,COMMA  let us see what happens here I declare the array and initialize it using a string constant .PERIOD  So ,COMMA  it has all these letters followed by a null at the end .PERIOD  Then when I said str[4] = ‘\0’ what it does is it goes to the fourth location in the array and changes that to null .PERIOD  So ,COMMA  what that does is there was a space there before ,COMMA  but now you insert a null character there .PERIOD  After the null character there are other non-null characters and then there is a second one .PERIOD  What will happen when you print ?QUESTIONMARK  It will just print I am and stop that it will not print the remaining characters and why does that happen ?QUESTIONMARK  So ,COMMA  string of C as for as C is concerned is a sequence of characters terminated by a null ,COMMA  this null is not part of the string .PERIOD  So ,COMMA  they may be non-null characters after the first occurrence of null in str ,COMMA  but they are not consider part of the string str their part of the character array .PERIOD  But when you look at str as a string it is just till the first null character .PERIOD  So ,COMMA  when you print it using %s only the part until the first null is printed .PERIOD  So ,COMMA  that is considered the string the character array is bigger .PERIOD    So ,COMMA  it will just print I am and stop there .PERIOD  So ,COMMA  do I lose the characters after the first null and where do they go ?QUESTIONMARK  Well ,COMMA  of course they do not go anywhere they remain where they were .PERIOD  So ,COMMA  what is the new state of the array ?QUESTIONMARK  The new state of the array is I am and then there is a null and then there are some other characters .PERIOD  So ,COMMA  if I print it using %s it will only come up to I am and then stop there .PERIOD  So ,COMMA  is there any way to print the remaining characters ?QUESTIONMARK  Of course ,COMMA  there is a way right .PERIOD  So ,COMMA  if I print that using %s I will get I am ,COMMA  but I could easily write a loop like this .PERIOD  I will say int i and then for i = 0 ,COMMA  until 11 ,COMMA  i++ and then putchar(str[i]) .PERIOD  So ,COMMA  this will print the character str[0] str 1 and so on up to str[11] ,COMMA  regardless of whether that character is null or not if it is null it will do something ,COMMA  but it will still go on to the next character .PERIOD  If you run this what you will see is ,COMMA  it will print the first character which is I ,COMMA  then it will print the second character which is space ,COMMA  then it will print the third character which is a .PERIOD  So ,COMMA  these three are printed as they are and then m and the fifth is a null character .PERIOD  What do you mean by printing a null character ?QUESTIONMARK  It may not print anything .PERIOD  So ,COMMA  it may be just kept ,COMMA  but then it goes on to the next character GR8DON and there it stops ,COMMA  because it does not print the eleventh character .PERIOD  So ,COMMA  the null character in this example is not printed .PERIOD  Now ,COMMA  the way the null character is treated on different terminals may be different .PERIOD  So ,COMMA  on some Linux terminals if you ask to print null character it will just not print anything ,COMMA  but other character terminals may print them in different ways .PERIOD     In this video ,COMMA  we will *t with a topic that is considered one of the trickiest concepts in C .PERIOD  These are what are known as pointers .PERIOD  We will just recap what we know about arrays ,COMMA  because arrays and pointers are very closely related in C .PERIOD   The memory allocated to any array has two components .PERIOD  First is there are a bunch of consecutively allocated boxes of the same type .PERIOD  And the second component is there is a box with the same name as the array .PERIOD  And this box contains the address of the first element of the array .PERIOD  So ,COMMA  that let us be clear with the help of concrete example .PERIOD  So ,COMMA  let us consider a particular array of size 10 declared as int num[10] .PERIOD  Conceptually ,COMMA  there are 10 boxes from num[0] through num[9] .PERIOD  These are all containing integers .PERIOD  Plus there is an additional eleventh box – num .PERIOD  So ,COMMA  it has the same name as the name of the array .PERIOD  And it contains the address of the first location of the array .PERIOD  So ,COMMA  it contains the address of num[0] .PERIOD  These are num[0] through num[9] are located somewhere in memory .PERIOD  So ,COMMA  maybe this is memory location 1000 .PERIOD  So ,COMMA  num contains the number 1000 ,COMMA  which is supposed to indicate that ,COMMA  the address of the first location in the array is 1000 or num points to the memory location 1000 .PERIOD  So ,COMMA  conceptually ,COMMA  this gives 11 boxes ,COMMA  which are 10 integer boxes plus 1 box ,COMMA  which holds the address of the first box .PERIOD  Now ,COMMA  we represent the address of a box x by an arrow to the box x .PERIOD  So ,COMMA  addresses are referred to as pointers .PERIOD  And this is all there is to C pointers .PERIOD  Pointers in some sense are variables ,COMMA  which hold the addresses of other variables .PERIOD  That is an exact description of the concept of pointers .PERIOD  Now ,COMMA  we will see now what that means and what can we do with pointers .PERIOD   Let us just step back a minute and say what can we do with a particular box or particular variable in memory ,COMMA  which is an integer .PERIOD  So ,COMMA  that is very simple .PERIOD  For example ,COMMA  you can scanf into that box ;SEMICOLON  you can print the value in that box ;SEMICOLON  you can do arithmetic operations on that box like plus ,COMMA  division ,COMMA  % ,COMMA  and so on .PERIOD  And you can do this for each of the boxes from num[0] through num[9] ,COMMA  because each of them by itself is in integer .PERIOD  But ,COMMA  we will also see a new operation ,COMMA  which is that ,COMMA  you can take the address of a box .PERIOD  So ,COMMA  we have already done this when we did scanf .PERIOD  So ,COMMA  we mentioned & of a variable .PERIOD  So ,COMMA  we will see these & operator in somewhat more detail .PERIOD  So ,COMMA  suppose I want to take the address of num[1] and store it in an address variable ptr .PERIOD  So ,COMMA  what I am essentially saying is that ,COMMA  you can say ptr = &num[1] .PERIOD  So ,COMMA  num[1] is an integer box ;SEMICOLON  it is an integer variable ;SEMICOLON  & of num[1] is the address of that integer in memory .PERIOD  So ,COMMA  you assign it to the variable ptr .PERIOD  But ,COMMA  every variable in C needs to have a type .PERIOD  What is the type of ptr ?QUESTIONMARK  And how do you declare or define such a type – such a variable ?QUESTIONMARK  Now ,COMMA  ptr holds the address of an integer .PERIOD  In C ,COMMA  you denote that by saying that ,COMMA  the type of ptr is int * .PERIOD  So ,COMMA  here is a new type that we are seeing for the first time .PERIOD  We are saying ptr is of type int * .PERIOD  Just like you can say that ,COMMA  if I have int a ,COMMA  you can say that ,COMMA  a is of type int .PERIOD  In this case ,COMMA  we can say ptr = &num[1] .PERIOD   We have discussed right now we have int num[10] ,COMMA  int *ptr ,COMMA  and ptr = &num[1] .PERIOD  So ,COMMA  ptr is the pointer to an integer .PERIOD  But ,COMMA  what does ptr = &num[1] really mean ?QUESTIONMARK  So ,COMMA  let us look at the memory status once we declare this array .PERIOD  So ,COMMA  we have num ,COMMA  which is the address of the first location .PERIOD  And then we have somewhere in memory ,COMMA  we have 10 consecutive locations corresponding to the array – num[0] through num[9] .PERIOD  Now ,COMMA  I declare int *ptr .PERIOD  So ,COMMA  I create a box .PERIOD  Now ,COMMA  this box is supposed to hold the address of some integer variable .PERIOD  So ,COMMA  ptr is of type address of an integer box or more commonly referred to as pointer to integer .PERIOD  The statement ptr = &num[1] says that ,COMMA  now ,COMMA  points to num[1] or ptr contains the address of num[1] .PERIOD  And pictorially ,COMMA  we denote an arrow from ptr to num[1] just like I denoted an arrow going from num to num[0] ,COMMA  because the name of the array is a pointer to the first location of the array .PERIOD  The name of the array is a box ,COMMA  which holds the address of the first location of the array .PERIOD  Similarly ,COMMA  ptr is a box ,COMMA  which holds the address of num[1] .PERIOD  So ,COMMA  we say that ,COMMA  ptr points to num[1] .PERIOD  And we denote it pictorially by an arrow .PERIOD   The program status is like this – state is like this .PERIOD  Now ,COMMA  suppose I add one more statement after all these three statements ;SEMICOLON  I say scanf(“%d” ,COMMA ptr) .PERIOD  Now ,COMMA  earlier when we declared an array and we read into an array directly ,COMMA  I said that ,COMMA  you can do the following .PERIOD  I can write scanf(“%d” ,COMMA &num[1]) .PERIOD  So ,COMMA  this will value whatever the user input into the first array using the & operator .PERIOD  Now ,COMMA  ptr = &num[1] .PERIOD  So ,COMMA  it is a reasonable thing to ask – can I say scanf(“%d” ,COMMA ptr) ?QUESTIONMARK  There is no & operator here because ptr is &num[1] .PERIOD  This was our original statement and this is our new statement .PERIOD   And the answer is yes ,COMMA  you can do it .PERIOD  Suppose the input is 5 ,COMMA  does num[1] become 5 ?QUESTIONMARK  So ,COMMA  scanf(“%d” ,COMMA ptr) really does work like scanf(“%d” ,COMMA &num[1]) .PERIOD  So ,COMMA  it reads the value input by the user and it looks up ptr .PERIOD  So ,COMMA  it is an address .PERIOD  So ,COMMA  it goes to that address and stores it there .PERIOD  So ,COMMA  now ,COMMA  we can clarify a long standing mystery ,COMMA  which is the & operator in the case of scanf .PERIOD  So ,COMMA  we can say that ,COMMA  scanf second argument is a pointer ;SEMICOLON  which says where should I put the input by the user ?QUESTIONMARK  For example ,COMMA  if I have float variable and I scanf as %f and then sum address of a float variable ,COMMA  it is done similar to reading an integer into an integer variable .PERIOD  What scanf takes is an address of int variable or float variable as it may be .PERIOD  If you have a %d ,COMMA  then it takes a pointer to an integer variable and takes the input value by the user and puts it into that address .PERIOD  So ,COMMA  as far as scan f is concerned ,COMMA  it does not matter whether you gave it as &num[1] or whether you initialized ptr to &num[1] and then gave ptr .PERIOD  It is an address and it will put the integer input by the user into that location .PERIOD  So ,COMMA  num[1] indeed does become 5 .PERIOD   So ,COMMA  the location of the num[1] is now containing the value 5 .PERIOD  Now ,COMMA  what else can you do with a pointer ?QUESTIONMARK  Num is an array ;SEMICOLON  it is of type int [ ] – pair of square brackets .PERIOD  And in C ,COMMA  the box num contains the address of the first location of the array ,COMMA  which is num[0] .PERIOD  So ,COMMA  internally ,COMMA  as far as C is concerned ,COMMA  the address of num[0] is just like address of any other integer location .PERIOD  So ,COMMA  the type int * can be interchanged with int [ ] .PERIOD  So ,COMMA  you can think of num itself as just a pointer to an integer ;SEMICOLON  or ,COMMA  you can say that ,COMMA  it is a pointer to an array ;SEMICOLON  which gives you the additional information that ,COMMA  the next 10 values are also integers .PERIOD  If you just say pointer to an integer ,COMMA  the next location may be something else .PERIOD  But ,COMMA  internally as far as C is concerned ,COMMA  an array name num can also be treated as pointer to an integer .PERIOD  Now ,COMMA  here are some other interesting things that you can do with pointers .PERIOD  Whenever you declare a data type ,COMMA  you also define what all operations can you do with a date type .PERIOD  So ,COMMA  2 and 3 are fairly simple ;SEMICOLON  we have already seen it with integers ,COMMA  floating points and so on .PERIOD  You can do simple arithmetic + and - with pointers .PERIOD  You cannot do * and / .PERIOD  You cannot do that .PERIOD  But ,COMMA  you can do + and - .PERIOD  Similarly ,COMMA  if you have two pointers ,COMMA  you can test for = = ,COMMA  you can test for < ,COMMA  you can test for > and so on as though you are comparing ordinary integers .PERIOD  So ,COMMA  2 and 3 are what we have seen before ;SEMICOLON  except that ,COMMA  in 2 ,COMMA  you cannot do multiply and / and % .PERIOD  All these things are not done with pointers .PERIOD  But ,COMMA  addition and subtraction can be done .PERIOD  But ,COMMA  there is a new operation ,COMMA  which is dereferencing a pointer .PERIOD  We have not seen this operation before with earlier data types .PERIOD  (Refer slide Time: 11:10)  What is dereferencing ?QUESTIONMARK  Let me pictorially represent what it does .PERIOD  Suppose you have int *ptr and int a .PERIOD  So ,COMMA  a is an integer variable and ptr is a pointer to int .PERIOD  If I want to store the address of a int ptr ,COMMA  I do it as follows: ptr = &a .PERIOD  So ,COMMA  this means that ,COMMA  take the address of a and store it in ptr .PERIOD  So ,COMMA  now ,COMMA  you can say that ,COMMA  ptr points to a .PERIOD  Now ,COMMA  I can also think of a reverse operation ;SEMICOLON  which is ptr contains some address .PERIOD  Go look up that address ;SEMICOLON  so that will be an int .PERIOD  And store that value in int .PERIOD   So ,COMMA  that is what is known as the * operator – a = *ptr .PERIOD  This means that ,COMMA  ptr is an integer pointer .PERIOD  So ,COMMA  ptr will point to a location ,COMMA  which contains an integer .PERIOD  *ptr will take the contents of that location and store it in a .PERIOD  So ,COMMA  this is known as the dereferencing operator .PERIOD  So ,COMMA  the address operator takes an integer variable and stores the address in a pointer .PERIOD  The dereferencing operation takes a pointer ;SEMICOLON  looks up that address ;SEMICOLON  and stores the value in a .PERIOD  So ,COMMA  you can visualize the & operator and the * operator as sort of reverse operations of each other .PERIOD  & takes an integer and takes the address of that ;SEMICOLON  * takes a pointer and takes the value of the address pointed to that .PERIOD   Dereferencing a pointer therefore gives you the value contained in the box pointed to by the pointer .PERIOD  The dereferencing operator is * .PERIOD  So ,COMMA  if I say printf %d * pointer ,COMMA  what it will do is – look up the location pointed to by ptr .PERIOD  In this case ,COMMA  it is this integer box .PERIOD  The contents of that box is 5 and it will be printed .PERIOD  So ,COMMA  the output will be 5 .PERIOD  Not for example ,COMMA  the content of ptr .PERIOD  So ,COMMA  the content of ptr may be like 1004 ;SEMICOLON  it will not print 1004 ;SEMICOLON  but what it is supposed to do is look up the location 1004 ;SEMICOLON  it contains the value 5 ;SEMICOLON  print that value .PERIOD  So ,COMMA  *ptr is the box num[1] .PERIOD  And printing it gives you the output 5 .PERIOD  Now ,COMMA  can I consider a statement like *ptr = *ptr + 5 ?QUESTIONMARK  This is perfectly legal .PERIOD  What this will do is *ptr is an integer value .PERIOD  It is equal to 5 ,COMMA  because look up this location ptr ;SEMICOLON  that is an integer ;SEMICOLON  take that value ;SEMICOLON  which will be 5 .PERIOD  So ,COMMA  this will be 5 + 5 – 10 .PERIOD  And where do you store it ?QUESTIONMARK  You store it in the integer variable corresponding to *ptr .PERIOD  The integer variable corresponding to *ptr is num[1] .PERIOD  So ,COMMA  I would have normally said num[1] equal to *ptr + 5 ;SEMICOLON  but num[1] is the same as *ptr .PERIOD  So ,COMMA  I can say *ptr = *ptr + 5 .PERIOD  So ,COMMA  this will look up that location ;SEMICOLON  add 5 to its contents ;SEMICOLON  and store it in that location .PERIOD  So ,COMMA  num[1] will now become 10 .PERIOD   Similarly ,COMMA  you can consider other examples .PERIOD  For example ,COMMA  I can consider a statement like num of 2 equal to *num + *ptr .PERIOD  The novelty here is that .PERIOD  .PERIOD  .PERIOD   In this video let me ,COMMA  so some cool stuff which is pointer arithmetic which helps you to understand the relationship between pointers and arrays in C .PERIOD     So ,COMMA  let us consider in array declared as follows int num ,COMMA  and then it has 5 numbers in the initialization list .PERIOD  So ,COMMA  the array will be initialized as follows ;SEMICOLON  there are 5 consecutive integer locations in memory with the given elements + there is a 6th cell which points to the first location in the array .PERIOD  So ,COMMA  num points to the first location in the array .PERIOD  If num points to the first location ,COMMA  then you can do the following operator num + 1 .PERIOD  So ,COMMA  num + 1 with point to the integer box write mix to the integer box pointed 2 by num .PERIOD  And we also know that arrays are consecutively located .PERIOD  So ,COMMA  the integer box next to num is exactly num 1 .PERIOD  So ,COMMA  num + 1 points to num[1] .PERIOD  Similarly num of num+2 points to num[2] ,COMMA  and so on .PERIOD  Until num+4 = num[4] .PERIOD  So ,COMMA  this particular box ,COMMA  for example ,COMMA  num[4] can be accessed in two ways ;SEMICOLON  you can write num[4] or you can write *(num+4) .PERIOD  Can you tell me the output of the following printf statement .PERIOD  So ,COMMA  think about this for a minute ,COMMA  you have 3 integers to print using %d %d %d ,COMMA  and what are to be printed are *(num+1) *(num+2) and *(num+3) .PERIOD  So ,COMMA  think about it for a minute…  Now ,COMMA  let us look at the slightly different array .PERIOD  What happens if you have a character array .PERIOD  So ,COMMA  I have char str array which is initialize to let say given string BANTI is a nice girl ,COMMA  and then I have a character pointer .PERIOD  So ,COMMA  char *ptr and it is assigned str + 6 ,COMMA  it is initialize to str + 6 ,COMMA  what will happen here ?QUESTIONMARK  What is different about this example is that ,COMMA  earlier I said that in an integer array + 1 for example ,COMMA  would go to the next integer location in memory .PERIOD  So ,COMMA  wherever num was num+1 would go to the next integer location here ,COMMA  str is a character array .PERIOD  So ,COMMA  it has to go to the next character location ,COMMA  and that is exactly what it does .PERIOD  So ,COMMA  what is printed ?QUESTIONMARK  Lets first consider the state of the memory .PERIOD  So ,COMMA  you have an array which is a character array ,COMMA  it starts from str[0] ,COMMA  and goes on up to str[20] .PERIOD  So ,COMMA  there are 19 characters followed by the null character .PERIOD  Why is the null character there ,COMMA  because I initialize the two a string constant ;SEMICOLON  every string constant has a null character implicitly at the end .PERIOD  So ,COMMA  this is the straight of the str array .PERIOD  Now I say that I declare a pointer ,COMMA  the pointer is pointing to a char .PERIOD  So ,COMMA  it is a char * pointer and what is the location it points to it points to str + 6 .PERIOD  Str is a point out to the first location of the character array ,COMMA  and + 6 would jump 6 character locations away from str[0] .PERIOD  So ,COMMA  you would reach this character .PERIOD  The important difference between this example at the previous example is that ,COMMA  if you declared an integer array + 1 would jump 1 integer location + 6 would jump 6 integer locations .PERIOD  Here since such a character array str + 6 would jump 6 character locations .PERIOD  So ,COMMA  how the + operator is interpreted in the cases of pointer depends on what array am I pointing to right now ?QUESTIONMARK  Now what will happen with the printf statement ?QUESTIONMARK  So ,COMMA  if I say printf % as ptr what will happen ?QUESTIONMARK  So ,COMMA  ptr points to str 6 .PERIOD  So ,COMMA  printf will print whatever string is starting from that location until the first null character .PERIOD  So ,COMMA  it will start printing from this i ,COMMA  and then go on tip printing till it reaches the null characters .PERIOD  So ,COMMA  the output will be just is a nice girl .PERIOD  So ,COMMA  when you want to printf it is not important that you start from the absolute beginning of the array .PERIOD  We can start from arbitrary location in the character array ,COMMA  and if you say printf % ,COMMA  it will start from there and go on and print until the first null character .PERIOD   So ,COMMA  let us look at it once more .PERIOD  So ,COMMA  it was the code that you had ,COMMA  and let say that the onedimensional array for this seek of convenience ,COMMA  I will just… So ,COMMA  it like this .PERIOD  It is actually in a row ,COMMA  but here is the first part ,COMMA  here is the second part ,COMMA  and so on .PERIOD  So ,COMMA  when I say str ,COMMA  str is a character array ,COMMA  and ptr + 6 would goes 6 locations away from the first location .PERIOD  So ,COMMA  str is pointing to then first location in the array ,COMMA  it will go to the 6th location in the array ptr ,COMMA  and ptr is pointing to the 6 location .PERIOD   So ,COMMA  you can ask more expressions do the make sense ,COMMA  can I say str + 5 is the this location .PERIOD  Similarly can I say str + 10 is this location ,COMMA  and so on .PERIOD  So ,COMMA  these are all correct expressions .PERIOD  Now can you tell the output of printf % ptr -5 ,COMMA  we have talked about + operator on pointers .PERIOD  So ,COMMA  it will whatever the nature of array that the pointer is pointing to it will jump n locations away from it .PERIOD  So ,COMMA  if I say ptr + n ,COMMA  it will jump n locations of that type away from it .PERIOD  So ,COMMA  by the same logic can I argue that if I do -5 ptr -5 can I say that it will go 5 locations previous to what ptr is pointing to right now .PERIOD  And the answer is yes .PERIOD   So ,COMMA  it will behave exactly as you expect .PERIOD  So ,COMMA  ptr is pointing to this location ,COMMA  here is the previous location .PERIOD  So ,COMMA  it will jump to 5 locations before the location pointer 2 by ptr ,COMMA  I will happens to be A .PERIOD  So ,COMMA  the location which is str[1] ,COMMA  that is = ptr-5 .PERIOD  So ,COMMA  if you printf on that location ,COMMA  it will say BANTI is a nice girl ,COMMA  that is the output .PERIOD   Before I proceed this one thing that I want to emphasize ,COMMA  and it is often not emphasized when you see online material on pointer arithmetic .PERIOD  C pointer arithmetic is not suppose to be meant for navigating the array ,COMMA  meant for navigating arbitrary locations in the memory .PERIOD  So ,COMMA  you cannot take a pointer .PERIOD  Let say character pointer and just say pointer + 1000 .PERIOD  It will give you some location in the memory ,COMMA  but the behavior of the program will be undefined .PERIOD  So ,COMMA  the c pointers are well defined ,COMMA  pointer arithmetic using C pointers are well defined only when the pointers are pointing to locations within an array .PERIOD  So ,COMMA  within an array + n will take you n locations away from the given pointer ,COMMA  -n will give you -n away from the give behind the given pointer and so on .PERIOD  Whatever type the character of whatever type the given pointer is pointing 2 .PERIOD  So ,COMMA  the main point of lecture was that if you have let say for example ,COMMA  and integer array int num 10 ,COMMA  then num of 5 which is the array notation is exactly equivalent to *(num+i) .PERIOD  And I am not saying this that you can think of num of 5 as *(num+i) ,COMMA  it is not an analogy this is exactly what C actually does .PERIOD  So ,COMMA  num of 5 is translated to *(num+i) .PERIOD  So ,COMMA  arrays and pointers in c are very intimately related .PERIOD    So ,COMMA  here is the stuff that we have seen about pointers .PERIOD  First we have defined what is a pointer ?QUESTIONMARK  A pointer is just a variable that holds the &another variable .PERIOD  We say that pointer points to another variable .PERIOD  And depending on what variable it points to ,COMMA  the type of that target ,COMMA  we say it is an int pointer or a character pointer or a float pointer and so on .PERIOD  So ,COMMA  this is the first thing what is a pointer ?QUESTIONMARK  And then we have seen what all can you do with a pointer ;SEMICOLON  what are the operations that you can do in a pointer .PERIOD  So ,COMMA  if you have a normal variable ,COMMA  you can take the &that variable using the & operator .PERIOD  If you have a pointer ,COMMA  then you can dereference the pointer by using *(ptr) .PERIOD  That will go to the location pointer 2 by ptr and take the value of that target .PERIOD  Further we have seen pointer arithmetic involving + and - .PERIOD  And I have introduced you with the caution that they are meant to navigate within arrays ;SEMICOLON  they are not meant to navigate to arbitrary locations in the memory .PERIOD  If you do that ,COMMA  it may or may not work .PERIOD  And further we have touched up on the intimate relationship between arrays and pointers in C .PERIOD  As captured by the formula ,COMMA  array[i] is *(array+i) .PERIOD  A special case of this is to say that the name of the array is an &the first entry in the array .PERIOD  For example ,COMMA  array[0] is the same as *(array+0) .PERIOD  We have seen this and think about them once more to get comfortable with the notion .PERIOD   In this video ,COMMA  we will talk about how pointers interact with functions .PERIOD  When we introduced arrays ,COMMA  we first said here are arrays ;SEMICOLON  here is how you write programs with arrays .PERIOD  And then we introduced… Here is how you pass arrays into functions .PERIOD  Let us do that the same thing with pointers .PERIOD  So ,COMMA  here are pointers .PERIOD  And how do you pass them to pointers ?QUESTIONMARK  Before coming into how do you pass them to pointers ,COMMA  we will go into – why should you pass pointers to functions .PERIOD  So ,COMMA  let me introduce this with a very standard example .PERIOD  This is a classic example in C .PERIOD  How do you exchange two variables ?QUESTIONMARK  We have seen the three-way exchange ;SEMICOLON  where ,COMMA  I said that ,COMMA  if you have three rooms: A ,COMMA  B… I have two full rooms: A and B .PERIOD   And then I want to exchange the contents of these rooms ;SEMICOLON  then I can use a third room .PERIOD  First ,COMMA  move the contents of A to T ;SEMICOLON  that is your first move .PERIOD  Then move the contents of B to A ;SEMICOLON  that is your second move .PERIOD  And then afterwards ,COMMA  A now contains the contents of B ;SEMICOLON  and B is empty ;SEMICOLON  T is containing the contents of A .PERIOD  So ,COMMA  the third move is – move T to B .PERIOD  So ,COMMA  the net effect will be that ,COMMA  B contains the whole contents of A ;SEMICOLON  A contains the whole contents of B ;SEMICOLON  B contains the whole contents of A ;SEMICOLON  and T is empty .PERIOD  So ,COMMA  this was the threeway exchange ,COMMA  which we did within main function .PERIOD  This is long back when we discussed GCD algorithm .PERIOD   Now ,COMMA  let us try to do that using a function .PERIOD  So ,COMMA  I have a swap routine ,COMMA  which takes two integer arguments: a and b ;SEMICOLON  and it is meant to exchange the values of a and b .PERIOD  So ,COMMA  inside main ,COMMA  I have a = 1 ,COMMA  b = 2 .PERIOD  And I call swap a and b .PERIOD  And swap a and b – what it does is this three-way exchange that ,COMMA  we have discussed .PERIOD  Now ,COMMA  just to test whether things are working ,COMMA  I have a bunch of printf statements ,COMMA  which says what is the value of swap ,COMMA  what is the value of a and b after swap has executed .PERIOD  Similarly ,COMMA  when I come back ,COMMA  I will just print the values of a and b to see what has happened after swap .PERIOD  So ,COMMA  when you call swap and you output it within swap ,COMMA  it is very clear that ,COMMA  a = 2 ,COMMA  b = 1 .PERIOD  So ,COMMA  the three-way exchange would work as you expect .PERIOD  And you have whatever was passed ,COMMA  which is swap1 ,COMMA  2 .PERIOD  So ,COMMA  it will exchange those variables and it will print a = 2 and b = 1 .PERIOD  Now ,COMMA  within main ,COMMA  a was 1 and b is 2 .PERIOD  Now ,COMMA  when you print these statements inside main ,COMMA  surprisingly ,COMMA  you will find that ,COMMA  a = 1 and b = 2 .PERIOD  So ,COMMA  the effect of swap is completely absent when you come back to main .PERIOD  Within swap ,COMMA  they were exchanged .PERIOD  But ,COMMA  when you come back to main ,COMMA  they were not exchanged .PERIOD  Why does this happen ?QUESTIONMARK  This is because remember that ,COMMA  some space is allocated to a function ;SEMICOLON  and whatever space is allocated to the swap function ,COMMA  all the variables there is erased – are erased once you return from the swap function .PERIOD  So ,COMMA  within swap function ,COMMA  a and b are exchanged .PERIOD  But ,COMMA  all that is gone when you return to main .PERIOD  So ,COMMA  passing integer ,COMMA  float ,COMMA  character variables as parameters ,COMMA  does not allow passing back to the calling function ;SEMICOLON  you have only the return value to return back .PERIOD  Any changes made within the called function are lost once this function returns .PERIOD  So ,COMMA  the question is can we now make a new function such that work done within that function will be reflected back in main .PERIOD   Now ,COMMA  here is an intermediate solution .PERIOD  We know that ,COMMA  if we pass arrays ,COMMA  then work done in the called function will be reflected back in the calling function .PERIOD  So ,COMMA  you could think of the following intermediate function .PERIOD  So ,COMMA  if I have int num 2 and then I say that ,COMMA  num[0] is 1 ,COMMA  num[1] is 2 .PERIOD  This is in the main function .PERIOD  And then I call swap of num .PERIOD  Now ,COMMA  we will call it swap1(num) ;SEMICOLON  I have a new function .PERIOD  Now ,COMMA  what swap1 does is – so int swap1 int arr .PERIOD  So ,COMMA  suppose I have this function ;SEMICOLON  inside that ,COMMA  I will just say that ,COMMA  I will have an intermediate variable t ;SEMICOLON  and then have t = num or arr[0] .PERIOD  Then arr[0] = t ;SEMICOLON  arr[0] = arr[1] ;SEMICOLON  and arr[1] = t .PERIOD  Suppose I have this function .PERIOD  And now ,COMMA  you can sort of argue that ,COMMA  this will also swap the two cells in the num array .PERIOD  So ,COMMA  the dirty trick that I am doing is that ,COMMA  I want to swap two variables ;SEMICOLON  instead ,COMMA  I will say that ,COMMA  instead of these two variables ,COMMA  I will insert them into a array of size 2 ;SEMICOLON  and then call swap1 on that array .PERIOD  Now ,COMMA  what swap1 does is – it will exchange – it will do the three-way exchange on the array .PERIOD  Now ,COMMA  I know that because of the way arrays are passed in C ,COMMA  any change that happens to the array arr inside swap1 will be reflected back in main .PERIOD  So ,COMMA  when I print these num array back in main ,COMMA  I would see that ,COMMA  num[0] is now 2 and num[1] is 1 .PERIOD  So ,COMMA  this is an intermediate trick in order to write the correct swap function .PERIOD  But ,COMMA  you will agree that ,COMMA  this is a kind of a dirty trick ,COMMA  because in ordered to swap two variables ,COMMA  I created an array ;SEMICOLON  and then depended on the fact that ,COMMA  swap will change the array in such a way that ,COMMA  the change will reflected back in main .PERIOD  So ,COMMA  is there a nicer way to do it ?QUESTIONMARK  That is what we are interested in .PERIOD  And the answer is let us just think about that array trick .PERIOD  What we did was – when we passed an array ,COMMA  we were of passing the &the array .PERIOD   This is how arrays are passed to functions .PERIOD  So ,COMMA  now ,COMMA  let us just take that idea that ,COMMA  we are passing the address .PERIOD  So ,COMMA  let us try to write a swap function ,COMMA  where you are passing the &variables instead of the variables themselves .PERIOD  So ,COMMA  here is the correct swap function .PERIOD  And what I write is void swap .PERIOD  So ,COMMA  void is a new keyword that you will see ;SEMICOLON  but it is not a big deal ;SEMICOLON  it is just a function that does not return a value ;SEMICOLON  it just performs an action without returning a value .PERIOD  So ,COMMA  such functions you can write it as void – void swap int *ptra ,COMMA  int *ptrb .PERIOD  So ,COMMA  ptra and ptrb are pointers .PERIOD  Now ,COMMA  inside the code ,COMMA  you have something that looks like a three-way exchange .PERIOD  It is very carefully return ,COMMA  because the obvious way to quote the function is not right .PERIOD  So ,COMMA  you have to be slightly careful ;SEMICOLON  you have to declare an integer variable .PERIOD  Now ,COMMA  t contains *ptra ;SEMICOLON  *ptra = *ptrb ;SEMICOLON  and *ptrb = t .PERIOD  The obvious way to write it seems to be – you declare an integer *ptr t and then do this .PERIOD  It is not quite right ;SEMICOLON  we will come to that later .PERIOD  So ,COMMA  here is the swap function .PERIOD  And how do you call the function ?QUESTIONMARK  You declare two integer variables in main: a = 1 and b = 2 ;SEMICOLON  and then pass the addresses using &a and &b .PERIOD   So ,COMMA  let us just trace the function .PERIOD  You have two variables in main ;SEMICOLON  a = 1 ,COMMA  b = 2 ;SEMICOLON  and call swap(&a and &b) .PERIOD  Now ,COMMA  just to denote that ,COMMA  these are addresses ,COMMA  I will say that ,COMMA  these are… a is situated at location 1024 in hexadecimal .PERIOD  So ,COMMA  this is some location in memory – hexadecimal 1024 .PERIOD  And this is some other location in memory ;SEMICOLON  b is say at hexadecimal location 2000 .PERIOD  Now ,COMMA  do not be distracted by the hexadecimal notation if you are uncomfortable with it ;SEMICOLON  just write 1024 in an equivalent decimal notation ;SEMICOLON  and you can say that ,COMMA  it is at that location .PERIOD  So ,COMMA  it is at that location .PERIOD  And I am representing the location in hexadecimal ,COMMA  because it leads to shorter addresses .PERIOD  And this is also an address .PERIOD  So ,COMMA  when I will take &a ,COMMA  I will get 1024x in… When I take the &b ,COMMA  I will get 2000x .PERIOD  So ,COMMA  this is the &a .PERIOD  And it is located at memory location 1024 when represented in the hexadecimal notation .PERIOD   What happens when you call the swap function ?QUESTIONMARK  So ,COMMA  here is the state of main .PERIOD  And when you call the swap function ,COMMA  a new bunch of memory – a new block of memory is allocated on the stack .PERIOD  So ,COMMA  first ,COMMA  the formal parameters are copied their values from the actual parameters .PERIOD  So ,COMMA  ptra will get &a ,COMMA  which is 1024 ;SEMICOLON  ptrb will get &b ,COMMA  which is 2000 .PERIOD  Now ,COMMA  I declare a new variable t ;SEMICOLON  t = *ptra .PERIOD  So ,COMMA  what does that mean ?QUESTIONMARK  ptra is an address – dereference the address ;SEMICOLON  which means go look up that address .PERIOD  So ,COMMA  it will go to this location and get that value .PERIOD  So ,COMMA  t will now become 1 .PERIOD  And the next statement is somewhat mysteries ;SEMICOLON  please understand it very slowly .PERIOD  So ,COMMA  on the right-hand side ,COMMA  you have *ptrb .PERIOD  This means dereference ptrb .PERIOD  So ,COMMA  we are saying ptrb is address 2000 ;SEMICOLON  when you dereference it ,COMMA  you will get the value 2 .PERIOD  Now ,COMMA  where do I have to store that value 2 ?QUESTIONMARK  For that ,COMMA  dereference ptra .PERIOD  So ,COMMA  1024 – dereference it ;SEMICOLON  you will go to this box .PERIOD  That is where you have to store 2 .PERIOD   So ,COMMA  2 will go to that location .PERIOD  So ,COMMA  what has happened due to that is that ,COMMA  a in name has now changed .PERIOD  Why ?QUESTIONMARK  Because within the swap function ,COMMA  we were dealing with pointers .PERIOD  So ,COMMA  as a result of the statement *ptra = *ptrb ,COMMA  it has taken 2 from the main functions b and put it back into the main functions a .PERIOD  And that was accomplished through variables inside swap .PERIOD  So ,COMMA  think about it for a while .PERIOD  And the last statement of course is *ptrb = t .PERIOD  So ,COMMA  dereference ptrb and put the value 1 there .PERIOD  So ,COMMA  here is a three-way exchange that works through variables only in swap .PERIOD  But ,COMMA  since they were pointer variables ,COMMA  you ended up changing the locations in the main as well .PERIOD   And once you return ,COMMA  all the memory corresponding to swap will be erased .PERIOD  But then when you to main ,COMMA  a and b will have changed .PERIOD  a and b were 1 and 2 before .PERIOD  Now ,COMMA  a is 2 and b is 1 .PERIOD  So ,COMMA  it has correctly swapped .PERIOD  Now ,COMMA  as an exercise ,COMMA  I said that ,COMMA  the obvious way to write the swap function is as follows .PERIOD  Void swap a int *ptrb ;SEMICOLON  ptra and int *ptrb .PERIOD  And then I declare int *ptrt .PERIOD  And then I write these statements .PERIOD  This is a very obvious way to code swap .PERIOD  This does not work .PERIOD  So ,COMMA  try to draw these pictures as we have done with a swap function that actually worked .PERIOD  Try to draw the picture of what happens in main and what happens in the swap function .PERIOD  And understand why this particular swap function does not work .PERIOD  One final word about passing pointers to functions ;SEMICOLON  C has something called a call by value mechanism .PERIOD  What is meant by call by value is that ,COMMA  when you call a function ,COMMA  remember the original picture that ,COMMA  your friend came with his note book and copied down the numbers in your page .PERIOD  So ,COMMA  your friend created a separate copy of your arguments ;SEMICOLON  then computed what had to be computed and returned you a value .PERIOD  That picture is essentially still correct .PERIOD  Even though you are now dealing with functions ,COMMA  which can manipulate memory inside main ,COMMA  the passing mechanism is still call by value .PERIOD  It is just that ,COMMA  what is being copied are the addresses .PERIOD  So ,COMMA  when you manipulate the addresses through dereferencing ,COMMA  you end up changing the location inside main .PERIOD  So ,COMMA  even with pointers in C ,COMMA  what happens is call by value .PERIOD   Since pointer arithmetic is a tricky concept let us solve one more problem to try to get comfortable with that notion .PERIOD   So ,COMMA  the problem here is copying a sub array into another array .PERIOD  Now ,COMMA  let us explain what that means ?QUESTIONMARK   Suppose ,COMMA  I have written a function copy_array() which has three arguments an integer array a[ ] and integer array b[ ] and n which is the size ,COMMA  I want to copy n successive index elements from a and put it into b .PERIOD  So ,COMMA  a is 0 through a n - 1 have to be copied to b .PERIOD  I can easily write it in the following function has int copy_array int a ,COMMA  int b ,COMMA  int n and then I have one variable to keep track of the index and that variable goes from 0 to n ,COMMA  for i = 0 ,COMMA  i < n ,COMMA  i = i + 1 and then I simply say b[i] = a[i] within the loop .PERIOD  So ,COMMA  this would copy whatever a[i] is into the location b[i] .PERIOD  So ,COMMA  once the loop executes ,COMMA  I would have copied n elements from the array a to the array b .PERIOD  But ,COMMA  this is not general and I want to solve the following problem ,COMMA  I have two arrays let us name them from( ) and to( ) and I want to copy n numbers from the array from[ ] to to[ ] .PERIOD  But ,COMMA  I have an additional requirement ,COMMA  I want to copy n elements from index i .PERIOD  So ,COMMA  the earlier code solve the problem from index 0 in general I want to copy from index i of from[ ] in the elements into the locations starting at index j in to[ ] .PERIOD  So ,COMMA  the earlier function assume that i and j were both 0 .PERIOD  In the general function I want arbitrary i and arbitrary j .PERIOD  So ,COMMA  I need a declaration like the following ,COMMA  I have int copy_array_2 .PERIOD  So ,COMMA  this is the second function I am writing and I have from i to j and then n is the number of elements to copy .PERIOD  So ,COMMA  what I have to do is from i from i + 1 .PERIOD  So ,COMMA  on up to from i + n - 1 have to be copied to to[j] ,COMMA  to[j+1] so ,COMMA  on up to to[j + n - 1] .PERIOD  So ,COMMA  for the purposes of this lecture let us just assume that from[ ] and to[ ] are big enough .PERIOD  So ,COMMA  that you will never ever over suit the arrays by taking i + n -1 and j + n - 1 .PERIOD  Can you write this function ?QUESTIONMARK  Now ;SEMICOLON  obviously ,COMMA  you can write a separate function to solve this .PERIOD  Now ,COMMA  the trick is can you use the copy_array() function ,COMMA  the copy_array() functions copied n elements starting from index 0 of a to index n - 1 to the array b starting at index b [0] to b[n – 1] .PERIOD  So ,COMMA  that is what is it means .PERIOD  And this should be strange ,COMMA  because if you think about it in a mathematical way ,COMMA  you are saying that a general function is being solved in terms of s particular functions .PERIOD  So ,COMMA  you are reducing a general case to a special case at sounds a bit strange .PERIOD  But ,COMMA  we can do this with pointer arithmetic .PERIOD    So ,COMMA  here is a problem that I have and I want t[j] = f[i] ,COMMA  t[j + 1] = f [i + 1] so ,COMMA  on upto t[j + n – 1] = f [i + n -1] .PERIOD  So ,COMMA  let us try to see what happens in this function ?QUESTIONMARK  Suppose ,COMMA  I call copy_array_2() from name ,COMMA  using the arrays f ,COMMA  t ,COMMA  i ,COMMA  j ,COMMA  n and that function nearly calls the old copy_array() function ,COMMA  using f + i ,COMMA  t + j and n .PERIOD  So ,COMMA  this state of execution at the start of copy_array_2() ,COMMA  let say that f [ ] is an array with say 10 elements and t[ ] is an array with say 10 elements arbitrary and what I want is I also assume that i is 2 and j is 4 .PERIOD  So ,COMMA  I want to copy 5 elements starting from the second location or the third location in f f[2] onwards to the fifth location in t onwards .PERIOD  So ,COMMA  here is what I want to… So ,COMMA  I want to copy this - 1 ,COMMA  - 1 ,COMMA  - 1 ,COMMA  - 1 ,COMMA  - 1 ,COMMA  to t [4] onwards .PERIOD  So ,COMMA  I will copy them here ,COMMA  so ,COMMA  5 elements are to be copied .PERIOD   Let see ;SEMICOLON  how our ,COMMA  function is able to do this .PERIOD  So ,COMMA  t + 4 is this location f + 2 is just location .PERIOD  So ,COMMA  what I am calling is the old copy_array() function with f + i ,COMMA  .PERIOD  So ,COMMA  f is the address of the first location of the array .PERIOD  Therefore ,COMMA  f + 2 using pointer arithmetic is the second integer box after that .PERIOD  So ,COMMA  it is pointing to f[2] ,COMMA  similarly t + 4 ,COMMA  t + j in this case is pointing to the fourth location after the location pointer 2 by t ,COMMA  t is an array .PERIOD  So ,COMMA  t points to the first location in the array therefore ,COMMA  t + 4 will point to the fifth location in the array .PERIOD  So ,COMMA  when I say f + 2 f + 2 is a pointer 2 here and t + 4 is a pointer 2 here and I am calling copy_array() function with these as the arguments and n is the number of elements I want to copy .PERIOD   So ,COMMA  here is the state just before I call ,COMMA  copy_array() function .PERIOD  Now ,COMMA  for example ,COMMA  this particular box has several names ,COMMA  the most common name for it will be f[3] .PERIOD  But ,COMMA  I can also write it as *[f + 3] ,COMMA  this says jump 3 integer boxes after f and then dereference that address .PERIOD  Now ,COMMA  if you are comfortable with the notion that let us say f[i] is the same as *[f + i] .PERIOD  If you are comfortable with that notion ,COMMA  then you should be easy to see that (f + 2)[1] is just *[f + 2 + 1]  .PERIOD  It is the same formula that I am using and this happens to be f + 3 ,COMMA  which happens to be f [3] .PERIOD  So ,COMMA  *(f+3) would be f[3] and so ,COMMA  on .PERIOD  So ,COMMA  this formula that f[i] is the same as dereferencing the address f + i ,COMMA  f[i] = *(f + i) is applicable even for more strange looking expressions .PERIOD  (Refer Slide Time: 09:to6)  Now ,COMMA  here is a trivia about c ,COMMA  that because of the way it is defined .PERIOD  So ,COMMA  if you say that f[i] is the same as *(f+i) ,COMMA  then you could think that this is the same as *(i+f) .PERIOD  So ,COMMA  I can write this as i of f never do this ,COMMA  but it will actually work .PERIOD  So ,COMMA  f[i] you can also write it as i of f .PERIOD  For example ,COMMA  3 of f and it will also work ,COMMA  because internally c translates it to *(f+i) and we know that *(f+i) is a same as *(i+f) .PERIOD  So ,COMMA  never do this ,COMMA  but this helps you to understand that f[i] is being translated by c into this format .PERIOD    So ,COMMA  now ,COMMA  that we know this ,COMMA  similarly you can argue about *(t+4) and (t+4)[0] and .PERIOD  So ,COMMA  on all of them refer to the same box .PERIOD   Now ,COMMA  let us see what happens when we call copy_array() .PERIOD  So ,COMMA  we have the stack space for copy_array_2() and copy_array_2() calls copy_array() .PERIOD  The formal parameters are a and b ,COMMA  a copies the address it was passed to ,COMMA  it was passed the address f + i .PERIOD  So ,COMMA  a points to f + 2 ,COMMA  similarly b points to t + 4 ,COMMA  .PERIOD  So ,COMMA  b points to this .PERIOD  Now ,COMMA  as for as copy_arrays concerned it is not too bothered by the fact that ,COMMA  it was not passed the absolute first address of the array .PERIOD  It will think that whatever address it has been passed is the start of an array and it will work from there .PERIOD  So ,COMMA  copy_array() does not bother the fact that ,COMMA  I was given the second element of the array ,COMMA  rather than the first element of the array and so ,COMMA  on ,COMMA  it will work as though the array started from there .PERIOD  And here is where we are exploiting that fact so ,COMMA  you now copy n elements from this location to this array ,COMMA  so ,COMMA  n is 5 .PERIOD    And when you execute the loop ,COMMA  it will start from this location copied to t + j then f + i + 1 will be copied to t + j + 1 and so ,COMMA  on .PERIOD  So ,COMMA  it will copy these five locations to here in the t array .PERIOD   And after you do this copy_array() returns and every variable that was allocated to copy_array() is erased .PERIOD  But ,COMMA  then because of pointers it was actually working with the arrays in copy_array_2() .PERIOD  So ,COMMA  even when you erase all the memory allocated to copy_array() ,COMMA  once you return these arrays would have been changed .PERIOD  These five locations starting from f + 2 have been copied to these five locations starting from t + 4 .PERIOD  So ,COMMA  changes made to b[] by copy_array() ,COMMA  is still maintained after you returns to the calling function copy_array_2() .PERIOD   In this lecture will see some more pointer arithmetic operators ,COMMA  and we will introduce those by talking about them through a problem .PERIOD     So ,COMMA  the problem that I have is that of reversing an array .PERIOD  So ,COMMA  we have to write a function to reverse an array ,COMMA  and let say that the declaration of the function is void rev_array (int a[ ] ,COMMA  int n[ ]) .PERIOD  Now if you have to reverse an array ,COMMA  what is one way to do it you take the array copy to into another array ,COMMA  and then copy back in the reverse fashion .PERIOD  So ,COMMA  you have an array a[ ] copy all the values in to b[] ,COMMA  and now you copy those values back to a in the following way that the b ,COMMA  b is last value will go to a[0] ,COMMA  b is second value last value will go to a[1] and so on .PERIOD  Now ,COMMA  let us try to do it slightly more cleverly ,COMMA  we want to take an integer array and reverse the array in place .PERIOD  That means that essentially using no extra space .PERIOD  So ,COMMA  do not use and extra array in order to reverse it ,COMMA  reverse it within a itself .PERIOD  So ,COMMA  the array before calling reverse array will look like a[0] upto a[n-1] in this way .PERIOD  And after calling reverse array it should look like a[n-1] a[n-2] ,COMMA  etcetera up to a[0] ,COMMA  and we doing that we should not use an extra array .PERIOD     Let us try to code this up .PERIOD  So ,COMMA  how is the reverse array return first I need .PERIOD  .PERIOD  .PERIOD  So ,COMMA  remember how we did this by hand ,COMMA  we exchange the 0 th location with the last location ,COMMA  then we exchange the first location within second last location ,COMMA  and so on .PERIOD  So ,COMMA  it is easy to code ,COMMA  if you have two pointers ;SEMICOLON  initially one pointers starts to at the beginning of array ,COMMA  the second pointer is to the last of the array exchange those values ,COMMA  then the first pointer goes to the next location ,COMMA  and the second pointer goes to the previous location ,COMMA  that is how you did it by hand .PERIOD  So ,COMMA  let us try to code that up I will have a pointer *b ,COMMA  which points to the last element of array a + n - 1 .PERIOD  Now ,COMMA  the loop is as follows ,COMMA  I will discuss this in a minute while b < a .PERIOD  So ,COMMA  remember in the example by hand ,COMMA  we had to exchange till we reach the middle of the array .PERIOD  How do you find the middle of the array ,COMMA  I will just write it as b > a ,COMMA  and I will explain it in a minute .PERIOD  So ,COMMA  while this is true that you have not a ((Refer Time: 04:25) the middle of the array .PERIOD  You exchange swap a and b ,COMMA  here we use the swap function which we have seen in the previous lecture .PERIOD  So ,COMMA  for example ,COMMA  it will swap the 0 th element with the n - first element .PERIOD  After that is done you increment a and you decrement b .PERIOD  So ,COMMA  the design logic is that a initially points to that first element of the array - the left end of the array ,COMMA  and b points to the right end of the array .PERIOD   So ,COMMA  we are seeing a new concept which is relational comparison between two pointers .PERIOD  If a and b are pointers to variables of the same type like int *a ,COMMA  int *b .PERIOD  We can compare them ,COMMA  compare these pointers using = ,COMMA  and not = .PERIOD  This can be done for arbitrary locations a ,COMMA  and b as long as those locations are of the same type .PERIOD  So ,COMMA  a = b is true ,COMMA  if and only if a and b are pointing to the same location ;SEMICOLON  that is natural to expect .PERIOD  Otherwise if they are pointing to different locations a not equal to b is true .PERIOD  Now there is another case ,COMMA  if a is pointing to an integer let say ,COMMA  and b is pointing to a float then equal to and not equal to are undefined .PERIOD  So ,COMMA  notice that even though this behavior looks natural ,COMMA  it is natural only if there pointing to this same type .PERIOD  So ,COMMA  here are operations equal to and not equal to .PERIOD   What about less than less than or equal to greater than greater or equal to and so on .PERIOD  And this is surprising ,COMMA  because here is something that you do not expect .PERIOD  You cannot compare less than less than   equal to on arbitrary locations in the memory .PERIOD  We can compare a and b using less than for this they must be pointing to the same locations in the array .PERIOD  Earlier when we discussed + and - ,COMMA  we were saying that + and - are well behave the only when you are navigating within an array .PERIOD  Similarly ,COMMA  when we are comparing 2 pointers using greater than greater than or equal to less than less than or equal to ,COMMA  then they should all be point then a and b should be pointing to the same array ,COMMA  different locations in this same array .PERIOD  If that is true then a < b ,COMMA  if a is pointing to a location which is before b in the same array .PERIOD  Similarly a < or = b yes true if a is pointing to a location which is b or before b ,COMMA  and so on .PERIOD  So ,COMMA  for example ,COMMA  we can say that if you have an array int a[10] ,COMMA  then a + 1 < a + 2 ,COMMA  that is clearly true .PERIOD  Because a + 1 is pointing to the location one in array and a + 2 is pointing to location two in the array .PERIOD   So ,COMMA  if you have an array for an example let say a[0] through a[9] ,COMMA  and ptra is pointing to location one ,COMMA  and ptrb is pointing to location three .PERIOD  Then ptra < ptrb here the comparison is well defined and it is true .PERIOD    But on the other hand let say that ptra is pointing to a[1] ,COMMA  and ptrb is pointing to b[1] .PERIOD  In this case ptra < ptrb is undefined ,COMMA  because their pointing to two different arrays .PERIOD  So ,COMMA  may be in memory a is lead out before b and so on ,COMMA  but that is not what the < or = operation is supposed to do .PERIOD  It is suppose to compare pointers only within the same array .PERIOD    So ,COMMA  with this understanding let us understand how the reverse array works .PERIOD  So ,COMMA  in the first iteration ,COMMA  you have an array a[ ] ,COMMA  let say that array is 101 ,COMMA  21 ,COMMA  and so on ,COMMA  it has 6 locations .PERIOD  And we will run through that trace of the execution for an even length array ,COMMA  and I would encourage you to create and odd length array ,COMMA  and trace to the executions to ensure that the code works for odd length arrays as well .PERIOD  So ,COMMA  in this lecture will do it for an even length array .PERIOD  So ,COMMA  a is initially pointing to the beginning of the array ,COMMA  b is pointing to the end of the array ,COMMA  a + n - 1 will go to the end of the array .PERIOD  Now b < a that is true .PERIOD  So ,COMMA  we will enter the loop and in the first iteration we will swap a and b .PERIOD     So ,COMMA  it will go to the swap function ,COMMA  and this is the swap function that actually works from the previous video .PERIOD  So ,COMMA  you can assume that a[0] will be swapped with a[1] .PERIOD  So ,COMMA  they were initially 101 and 0 ,COMMA  and after swap they will be 0 and 101 .PERIOD  Come once that happens a advances by one integer location b goes back by one integer location .PERIOD  So ,COMMA  this the state after the first iteration .PERIOD  In the second iteration you start with a at 21 ,COMMA  and b at - 101 ,COMMA  again b < a ,COMMA  so is swap .PERIOD     So ,COMMA  21 - 101 becomes - 101 and 21 ,COMMA  so they are swapped .PERIOD  And you advance a by 1 and you take back b by 1 ,COMMA  again b < a .PERIOD    So ,COMMA  you go to the third iteration .PERIOD  In the third iteration this the state of the beginning of the iteration ,COMMA  and the swap these contents .PERIOD  So ,COMMA  you swap - 1 and 121 it becomes this becomes the state of the array ,COMMA  and once that is done b over suits .PERIOD  So ,COMMA  b b goes before a ,COMMA  and a go goes after b ,COMMA  swap denoted there with two colored arrows .PERIOD  So ,COMMA  here is the b arrow ,COMMA  it goes to location 121 ,COMMA  and a arrow goes to location - 1 .PERIOD  When this happens b is now < a .PERIOD  So ,COMMA  this means that you have cross the middle of the array .PERIOD  Therefore ,COMMA  you should stop now .PERIOD  So ,COMMA  now b < a ,COMMA  and the loop terminates ,COMMA  and we have seen that this correctly reverse the array .PERIOD  So ,COMMA  here is how the reverse array works ,COMMA  we have seen the concept of relational comparison operators using pointers .PERIOD  How do make sense when they are pointing to locations with them the same array ,COMMA  and how that can be used to write code to using arrays .PERIOD   In this video ,COMMA  we will see the sizeof operator ,COMMA  which is a slightly advanced topic ,COMMA  in relation to pointer arithmetic .PERIOD  This is explaining ,COMMA  how pointer arithmetic freely works .PERIOD  And it is also important to understand one topic that ,COMMA  we will see later on and called malloc .PERIOD   So ,COMMA  the sizeof operator and note that ,COMMA  it is an operator and that highlighted that in red ,COMMA  it looks like a function call ,COMMA  but it is not .PERIOD  The operator gives the number of bytes that any value with the given type occupies .PERIOD  So ,COMMA  sizeof is an operator which takes the name of a type of as an assigned argument ,COMMA  it can also take other kinds of arguments ,COMMA  we will see that .PERIOD  So ,COMMA  you could ask ,COMMA  what is the sizeof an int ?QUESTIONMARK  What is the sizeof a float ?QUESTIONMARK  What is the sizeof a character ?QUESTIONMARK  And the answer ,COMMA  the value that it will come out to be will depend on some particular machine .PERIOD  So ,COMMA  the reason why we use the sizeof operator is that ,COMMA  it helps you to write the code that is general enough for any machine ,COMMA  we will see ,COMMA  what that means ?QUESTIONMARK  So ,COMMA  right now you just returns you the size of any given data type .PERIOD   So ,COMMA  the sizeof operator has an effect on the way data is allocated and the way details allocated depends on the machine ,COMMA  we will see that .PERIOD  So ,COMMA  for an example if you have a character array ,COMMA  the cells are 1 byte apart .PERIOD  So ,COMMA  sizeof operator returns you the number of bytes that a data type occupies .PERIOD  So ,COMMA  in the case of a character ,COMMA  the character occupies 1 byte .PERIOD  So ,COMMA  if you have a character array declared as char s[8] ,COMMA  what you have are ,COMMA  8 cells and each of those cells occupy a width of 1 byte .PERIOD  So ,COMMA  let us say that the character arrays starts at hexadecimal address 1000 .PERIOD  So ,COMMA  the next cell will be at the next byte ,COMMA  which is byte address hexadecimal 1001 .PERIOD  And this goes on until the last cell which is hexadecimal 1007 .PERIOD  So ,COMMA  this contains a null terminator character array with the letters s u c c e s s and then followed by a null .PERIOD  What happens with an integer array ?QUESTIONMARK  So ,COMMA  in an integer array ,COMMA  sizeof an int is 4 bytes .PERIOD  So ,COMMA  the successive elements of an integer array are 4 bytes apart .PERIOD  So ,COMMA  let us say that I have declared an integer array as int a[4] .PERIOD  This means ,COMMA  that a 0 let us say ,COMMA  it starts at hexadecimal address 2000 .PERIOD  Then ,COMMA  a 1 will start 4 bytes away ,COMMA  because the size of an int is 4 bytes .PERIOD  So ,COMMA  it should start at address hexadecimal 2004 and I have sort of indicated it pictorially I want to say that a character is a narrower data type than an integer ,COMMA  an integer occupies 4 bytes .PERIOD  So ,COMMA  the next integer cell ,COMMA  the next integer element in the array will start at hexadecimal address 2004 .PERIOD  The third element will start at hexadecimal address 2008 and the last at hexadecimal address 200c .PERIOD  So ,COMMA  notice that I should have started it at 2012 .PERIOD  But ,COMMA  12 in hexadecimal addressing scheme is c .PERIOD  So ,COMMA  in base 16 ,COMMA  c is the same as decimal 12 .PERIOD  So ,COMMA  that is why I have written it as hexadecimal 200c .PERIOD   Now ,COMMA  let us look at pointer arithmetic in greater detail with our current understanding of the sizeof operator .PERIOD  So ,COMMA  suppose you have an int *pointer .PERIOD  If you have an int  *pointer and then you want to say that ptr + i is equal to ,COMMA  what it should ?QUESTIONMARK  So ,COMMA  notice that + make sense ,COMMA  when you are navigating within an array .PERIOD  So ,COMMA  ptr is let us say pointing to some cell within the array and ptr + i should go to the ith cell after ptr ,COMMA  that is what ,COMMA  it should do .PERIOD  Now ,COMMA  the i th cell after ptr means the i th integer after ptr .PERIOD  So ,COMMA  we should skip 4 i bytes in order to reach the i th integer cell after ptr .PERIOD  So ,COMMA  thus is what we have written here ptr + i is the byte number ,COMMA  ptr + i*sizeof(int) ,COMMA  the machine addressing goes in terms of bytes .PERIOD  So ,COMMA  in order to jump to the ith integer cell ,COMMA  we have to know ,COMMA  how many bytes to skip ?QUESTIONMARK  And the size of an integer is 4 bytes .PERIOD  So ,COMMA  this means we have to skip ahead 4 i bytes ,COMMA  in order to reach ptr + i .PERIOD  Now ,COMMA  if have we declared character *ptr ,COMMA  then ptr + i is supposed to jump to the i th character after ptr size of a character is 1 byte .PERIOD  So ,COMMA  ptr + i*sizeof(char) would be ptr + i*1 ,COMMA  it is the same as ptr + i .PERIOD  So ,COMMA  notice that let us say that ,COMMA  machine understands only byte addresses .PERIOD  So ,COMMA  in order to execute ptr + i correctly ,COMMA  we have to tell which byte should I go to ,COMMA  should the machine go to ?QUESTIONMARK  And in order to do that ,COMMA  you utilize the sizeof operator .PERIOD  So ,COMMA  since we have declared character *ptr ,COMMA  you know that it is sizeof character ,COMMA  i*sizeof character those many bytes I have to skip .PERIOD  In the previous case ,COMMA  I have declare int *ptr .PERIOD  So ,COMMA  in that case I have to skip i*sizeof (int) ,COMMA  in order to reach the correct cell .PERIOD  So ,COMMA  here is the actual reason why ptr + i would magically work correctly .PERIOD  Whether ,COMMA  it was an integer array or it was a character array ?QUESTIONMARK  This is because ,COMMA  at the back of it all ,COMMA  you translate everything to byte addresses using star sizeof whatever type .PERIOD  So ,COMMA  in general if you have type *ptr ,COMMA  then ptr + i is the byte number ptr + i*sizeof (type) .PERIOD  So ,COMMA  this type is the same as the declared type of pointer ,COMMA  ptr is a pointer to that type .PERIOD  Therefore ,COMMA  you multiply it with sizeof(type) and this is the general formula for pointer arithmetic .PERIOD  Now ,COMMA  one of the side effects of that or one of the consequences of this kind of addressing is that ,COMMA  array + i is *(array + i) and it will correctly jump to the i th location in that array ,COMMA  regardless of whatever type the array was .PERIOD  Why is that ?QUESTIONMARK  Because ,COMMA  array + i is then translated to array + i*sizeof whatever type the array has been declared to be .PERIOD  So ,COMMA  you will correctly jump to the byte address corresponding to the i th element in the array .PERIOD  So ,COMMA  here is how array arithmetic in c works ,COMMA  in full .PERIOD  What do we mean by this ?QUESTIONMARK  Let us see that with the help of an example .PERIOD   Suppose ,COMMA  you have an integer array declared as int a[10] and it starts at the address 2000 .PERIOD  And I want to know ,COMMA  how is it that you get this third element of the array a[2] .PERIOD  So ,COMMA  a[2] we know is *(a + 2) ,COMMA  a is a pointer to the first element of the array .PERIOD  And you have to now understand ,COMMA  how + 2 is executed ?QUESTIONMARK  So ,COMMA  + 2 should be the content located at byte address a + 2*sizeof(int) .PERIOD  Why is this ?QUESTIONMARK  A is been declared as integer array .PERIOD  And in c ,COMMA  integer array has the same type as int * .PERIOD  So ,COMMA  a is a pointer to int .PERIOD  Therefore ,COMMA  we know that ,COMMA  we have to do a + 2*sizeof (int) .PERIOD  Whatever the argument is ,COMMA  it will do 2*sizeof the type pointer 2 by that pointer .PERIOD  So ,COMMA  we will do a+2*4 ,COMMA  which is hexadecimal address 2008 ,COMMA  a was 2000 .PERIOD  So ,COMMA  if you have an array int a[4] ,COMMA  let say and it started at address 2000 ,COMMA  then you will jump to array address 2008 .PERIOD  And this is the reason ,COMMA  why c arrays start at index 0 ?QUESTIONMARK  Because ,COMMA  it is a very easy formula ,COMMA  a[0] would be *(a+0) ,COMMA  which is simply *a .PERIOD  In that case ,COMMA  you have the consistent explanation ,COMMA  that the name of the array is a pointer to the first element of the array ,COMMA  you do not need a special rule to do that .PERIOD  Think of what would have happen ,COMMA  if arrays started at 1 .PERIOD  Then ,COMMA  a[2] would be a+1*sizeof(int) .PERIOD  So ,COMMA  a[n] would be a + n - 1 times sizeof whatever and that is an uglier formula than what we have here .PERIOD  So ,COMMA  it is better for arrays to start at location 0 ,COMMA  because it makes the pointer arithmetic easier .PERIOD   So ,COMMA  in summary the sizeof() operator is used in pointer arithmetic and we will see one more common use of the sizeof() operator ,COMMA  very soon .PERIOD   So ,COMMA  the general usage is you can give size of an expression .PERIOD  What will it do is ,COMMA  it will take the type of that expression .PERIOD  So ,COMMA  if I say sizeof(10) ,COMMA  then 10 is an int ,COMMA  .PERIOD  So ,COMMA  it will execute sizeof int and let us say that ,COMMA  on a particular machine it is 4 bytes .PERIOD  Similarly ,COMMA  you could also say sizeof type name .PERIOD  So ,COMMA  for example ,COMMA  I could say sizeof(int) .PERIOD  Rather than giving an integer as an argument ,COMMA  I could also say sizeof(int) ,COMMA  where int is the name of the type and it will return 4 on some particular machine .PERIOD  A less common usage is ,COMMA  you could give sizeof array ,COMMA  if the array is some particular array and it will return you the size of the array in bytes and this is important .PERIOD  It will not return you exactly the number of elements in the array ,COMMA  it will return the total size of the array in bytes .PERIOD  What do I mean by that ?QUESTIONMARK  If I say ,COMMA  int num[10] and then I say sizeof(num) ,COMMA  it will return is 40 because ,COMMA  there are 10 integers ,COMMA  each integer occupying 4 bytes .PERIOD  So ,COMMA  in order to calculate the number of elements in the array ,COMMA  for example ,COMMA  you could do the following ,COMMA  you could say sizeof(num) / sizeof(num[0]) .PERIOD  So ,COMMA  this would evaluate to 40/4 which is 10 .PERIOD  So ,COMMA  size of the operator on the array does not exactly give you the number of elements in the array ,COMMA  it will give you the total number of bytes in the array .PERIOD  But ,COMMA  if you also know how many bytes ,COMMA  the particular element in the array occupies ,COMMA  then you can easily figure out the size of the array ,COMMA  in terms of the number of elements .PERIOD  So ,COMMA  also note that c does not say that ,COMMA  an integer is 4 bytes or float is 4 bytes and so ,COMMA  on .PERIOD  What it specifies is the relationship between the sizes of various types and we will not get in to it ,COMMA  right now .PERIOD  But ,COMMA  just keep in mind that the size of a particular type is depended on ,COMMA  which machine you are running the code on .PERIOD   In this video ,COMMA  we will discuss slightly advanced usage of pointers .PERIOD  Even though ,COMMA  the title of the first slide is ,COMMA  how to return pointers from a function ?QUESTIONMARK  That is just a motivation for introducing a slightly more advance topic in pointers .PERIOD   So ,COMMA  let us just see what is the problem with returning a pointer from a function ?QUESTIONMARK  We know that ,COMMA  any variable can be passed as argument to a function ,COMMA  can be declared as a local variable within a function ,COMMA  and can also be a return from a function .PERIOD  So ,COMMA  is there something and we have already seen that ,COMMA  in the case of the swap function how we pass pointers to a function and what new kinds of functions does this enable us to write ?QUESTIONMARK   Let us examine that in slightly greater detail .PERIOD  What happens when we call the increment function ?QUESTIONMARK  Inside the main function ,COMMA  we have an int pointer p and then it is declared ,COMMA  it is not pointing to anything and immediately ,COMMA  you will call increment(1) .PERIOD  So ,COMMA  you call increment(1) ,COMMA  n is a local variable in increment ,COMMA  it is the argument .PERIOD  So ,COMMA  n is 1 and then ,COMMA  you declare a temp and then ,COMMA  you declare a pointer to temp ,COMMA  .PERIOD  So ,COMMA  there is a ptr .PERIOD  Let us say that ,COMMA  temp is a address hexadecimal 1000 .PERIOD  So ,COMMA  ptr contains 1000 and it points to temp ,COMMA  temp is at address 1000 .PERIOD  Now ,COMMA  in the next statement you increment temp ,COMMA  you set temp to n + 1 ,COMMA  .PERIOD  So ,COMMA  n is 1 and temp is 2 .PERIOD  Now ,COMMA  ptr points to temp and now ,COMMA  I will return ptr .PERIOD  So ,COMMA  the return value is 1000 ,COMMA  which is the address of temp .PERIOD   Now ,COMMA  what happens when you return to main ?QUESTIONMARK  As soon as increment finishes and we have said this several times before ,COMMA  as soon as any function finishes ,COMMA  the memory with that is allocated to the function is erased .PERIOD  So ,COMMA  when you return to the main function ,COMMA  what happens is that ,COMMA  you have p and p will contain the address 1000 .PERIOD  So ,COMMA  it is meant to point to temp .PERIOD  But ,COMMA  the space meant for temp has already been erased .PERIOD  So ,COMMA  p is pointing to a junk value in memory ,COMMA  it is pointing to an arbitrary location in memory .PERIOD  So ,COMMA  this is known as a dangling pointer .PERIOD  Hopefully ,COMMA  the picture is a representative of a dangling pointer .PERIOD  The fact that ,COMMA  it points to a location ,COMMA  which is no longer meaningful .PERIOD  Notice that ,COMMA  what I am talking about is the ideal situation ,COMMA  when you code it in c and try to run it ,COMMA  may be p does point to the location with address two .PERIOD  This is because ,COMMA  c may not be aggressive in re cleaning the memory .PERIOD  But ,COMMA  you should always assume that ,COMMA  the safe thing is to assume every location that was allocated to increment is erased immediately after increment returns .PERIOD  In practice ,COMMA  it may not be the case ,COMMA  ,COMMA  but you should never assume that ,COMMA  you still have the temp variable .PERIOD  In general ,COMMA  what you will have is a dangling pointer .PERIOD  Because ,COMMA  p points to a location which no longer contains any relevant information .PERIOD  So ,COMMA  when you print p ,COMMA  you will have a danger .PERIOD  So ,COMMA  how do you return pointers from a function ?QUESTIONMARK  So ,COMMA  we have seen what a dangling pointer means ?QUESTIONMARK  And here is a very silly function ,COMMA  which will create a dangling pointer .PERIOD  Now ,COMMA  what is the problem with this function ,COMMA  it returns the address of a local variable temp .PERIOD  But ,COMMA  temp is erased as soon as increment n returns .PERIOD  So ,COMMA  the return value is not a meaningful address to the calling function ,COMMA  which is mean .PERIOD  Can we get around this ?QUESTIONMARK   So ,COMMA  the main problem here is that ,COMMA  anything that is allocated to the called function on the stack is erased as soon as it returns .PERIOD  Is there any way at all to meaningfully return pointers to new variables ?QUESTIONMARK  Then ,COMMA  use a new concept that is a globally accessible memory called heap ,COMMA  we have already seen a stack .PERIOD  Now ,COMMA  we will understand what a heap is .PERIOD  So ,COMMA  roughly the idea is that ,COMMA  if you allocate value on the global memory ,COMMA  it is not erased when the function returns .PERIOD   I will explain this with the help of a slightly a broad analogy .PERIOD  Hopefully ,COMMA  this is indicative of what actually happens with the heap ?QUESTIONMARK  So ,COMMA  think of executing a function as writing on a classroom blackboard ,COMMA  when a lecture is going on .PERIOD  Once the function finishes execution ,COMMA  which is like the class is over ,COMMA  everything on the blackboard is erased .PERIOD  Suppose ,COMMA  you want to retain a message after the class is over .PERIOD  Now ,COMMA  the solution could be that you can post things on a notice board ,COMMA  which is global to all class rooms .PERIOD  So ,COMMA  it is common to all class rooms .PERIOD  So ,COMMA  things on the notice board are not removed as soon as a class is over .PERIOD  If you write something on the blackboard ,COMMA  which is similar to storing something on the stack ,COMMA  as soon as the class is over ,COMMA  it will be erased .PERIOD  So ,COMMA  if you have something to communicate back to another class ,COMMA  may be you can post it on a notice board .PERIOD  Now ,COMMA  the notice board is globally accessible to all class rooms .PERIOD  The black board is like a stack and the global notice board is like a heap and contents on the heap is not erased ,COMMA  when the function finishes .PERIOD   So ,COMMA  how do you allocate things on the heap ?QUESTIONMARK  There is a standard library function called malloc ,COMMA  in the file stdlib .PERIOD h which can be used to allocate space on the heap .PERIOD  Roughly ,COMMA  this is what it does ,COMMA  if you ask for malloc(n) ,COMMA  there n is an positive integer ,COMMA  it will allocate n bytes of memory on the heap and it will return a pointer to the first location of the allocated space .PERIOD  Now ,COMMA  that pointer can be converted to pointer of any type ,COMMA  malloc just allocates n bytes .PERIOD  Now ,COMMA  you may want to interpret those bytes as n divided by 4 integers .PERIOD  In that case ,COMMA  it will return a pointer ,COMMA  .PERIOD  So ,COMMA  you convert that pointer to an int pointer .PERIOD  Let us see an example I may have an ints pointer for ptr and now ,COMMA  I want to allocate 10 integers on the heap .PERIOD  How do you I do that ?QUESTIONMARK  I will allocate 10 * sizeof(int) .PERIOD  So ,COMMA  this will allocate on some particular machine ,COMMA  let us say 40 bytes and it will return an address of the first location .PERIOD  Now ,COMMA  that address I want to treat it as an integer address .PERIOD  So ,COMMA  I will convert it to an int as int * and then malloc (10*sizeof(int)) ;SEMICOLON  .PERIOD  So ,COMMA  this style of writing code means the code portable .PERIOD  Because ,COMMA  suppose you write the code and on a machine ,COMMA  where integer was 4 bytes and you take your code and go to a bigger machine ,COMMA  which has 8 bytes as the size of an integer .PERIOD  Then ,COMMA  you compile the code on that machine and your code will still allocate 10 integers .PERIOD  Why ?QUESTIONMARK  Because ,COMMA  on the new machine sizeof(int) will be automatically 8 .PERIOD  So ,COMMA  it will allocate 80 bytes .PERIOD  So ,COMMA  in order to write portable code ,COMMA  you can use sizeof(int) ,COMMA  instead of assuming that ,COMMA  integer is 4 bytes .PERIOD  So ,COMMA  I want to allocate malloc (10*sizeof(int)) ;SEMICOLON  ,COMMA  this will allocate 10 integers no matter ,COMMA  which machine you do it all .PERIOD  So ,COMMA  and it will return you the address of the first byte in that allocated space ,COMMA  that address you convert to an integer array ,COMMA  integer pointer .PERIOD  Here is ,COMMA  how you allocate memory on the heap .PERIOD   So ,COMMA  when we think pictorially ,COMMA  think of heap has a separate space in the memory .PERIOD  In this case ,COMMA  ptr will be allocated some space on the heap .PERIOD  Let us say 10 integers on some particular machine ,COMMA  it will say 40 bytes and it will return the address of the first byte .PERIOD  Now ,COMMA  that first byte you treat it as a pointer to int ,COMMA  that is done through the conversion int * .PERIOD   Now ,COMMA  it is nice that you can allocates space on the heap .PERIOD  But ,COMMA  in order to be hygienic ,COMMA  you should also remove the allocated space ,COMMA  once you have done with it .PERIOD  There should be a reverse operation to allocate and that is free ,COMMA  it is in the same library ,COMMA  stdlib .PERIOD h .PERIOD  And if I just say free(ptr) and ptr was originally allocated using malloc .PERIOD  Then ,COMMA  it will correctly remove ,COMMA  ;SEMICOLON  however ,COMMA  many bytes were originally allocated .PERIOD  So ,COMMA  let us say that I have int *ptr and then ptr ,COMMA  I allocate 10 integers on the heap and ptr is the address of the first allocated location .PERIOD  Now ,COMMA  I may do a bunch of processing here and once I have done ,COMMA  it is just nicer me to de allocate things on the heap .PERIOD  This is like ,COMMA  saying that things on the notice board once some condition occurs ,COMMA  where you know that the notices no longer needed ,COMMA  you just remove that posting from the notice board for that ,COMMA  we use free of ptr .PERIOD  Now ,COMMA  notice the asymmetry here ,COMMA  malloc took the number of bytes to be allocated free just wanted to say ,COMMA  which pointer is to be free ?QUESTIONMARK  It does not ask for ,COMMA  how many bytes to free ?QUESTIONMARK  So ,COMMA  you can imagine that malloc does some kind of book keeping ,COMMA  where it says that I allocated 40 bytes and that was return to ptr .PERIOD  So ,COMMA  if I just say free(ptr) it automatically knows that ,COMMA  40 bytes are to be free ,COMMA  you do not have to give the extra argument saying ,COMMA  how many bytes to free ?QUESTIONMARK  Once you free the pointer ,COMMA  you just set it back to null ,COMMA  this is just a safe practice and it is not absolutely necessary ,COMMA  ,COMMA  but it is recommended .PERIOD   So ,COMMA  let us solve our earlier problem using malloc .PERIOD  Our earlier problem was that ,COMMA  ptr was pointing to some location within the stack .PERIOD  So ,COMMA  as soon as the function returned ,COMMA  the return address no longer meant any meaningful address .PERIOD  So ,COMMA  let us now solve this problem .PERIOD  I have included stdlib .PERIOD h ,COMMA  because I will allocate memory on the heap .PERIOD  So ,COMMA  the increment function is modified as follows strictly speaking ,COMMA  I do not need a temp variable any more .PERIOD  I have an int pointer and I will use the pointer to allocate one integer on the heap ,COMMA  this is a really wasteful practice but ,COMMA  it just illustrates a point .PERIOD  So ,COMMA  it will allocate one integer on the heap and then ,COMMA  return that address and treat that address as int * .PERIOD  Now ,COMMA  I will use * ptr = n + 1 to dereference that location on the heap and set the value to n + 1 .PERIOD  Once I am done ,COMMA  I will return the ptr I will return the address on the heap .PERIOD   What happens here is that ,COMMA  the increment function ptr points to some location on the heap ,COMMA  using malloc .PERIOD  So ,COMMA  one integer is allocated on the heap and when you say ,COMMA  *ptr = n + 1’s ,COMMA  then the location in the heap will contain 2 .PERIOD   And here is the catch ,COMMA  earlier p was just dangling ,COMMA  it was just pointing to an arbitrary location in the memory .PERIOD  But ,COMMA  increment allocated something on the heap and returned that address .PERIOD  As soon as increment returns ,COMMA  the stack is a waste .PERIOD  So ,COMMA  everything that was allocated on the stack for increment is erased ,COMMA  ,COMMA  but things that are allocated on the heap remain .PERIOD  So ,COMMA  p points to a meaningful address on the heap ,COMMA  then once you are done you can say free(p) and things will be erased ,COMMA  when you print it ,COMMA  the output will be 2 .PERIOD   Malloc and free are prone to a lot of errors and a lot of programming errors in c ,COMMA  can be trace back to incorrect use of malloc and free .PERIOD  So ,COMMA  there are some categories of errors for example ,COMMA  you may forget to malloc in the first place .PERIOD  So ,COMMA  you will lead to dangling references or dangling pointers ,COMMA  as we saw in the first example .PERIOD  Now ,COMMA  you could allocate some space .PERIOD  But ,COMMA  you may not allocate enough space ,COMMA  that is a very common error .PERIOD  Commonly ,COMMA  you could allocate of by one errors I wanted to allocate really len + 1 number of bytes .PERIOD  But ,COMMA  instead I allocated only len number of bytes .PERIOD  Another very common error is something known as a memory leak ,COMMA  which is that you allocate things on the heap ,COMMA  ,COMMA  but you forget to free memory after use ,COMMA  this is called a memory leak .PERIOD  Notice that ,COMMA  if you allocate space on the stack ,COMMA  it will always be cleaned up as soon as the function returns .PERIOD  So ,COMMA  memory leaks usually happen ,COMMA  when you malloc space on the heap .PERIOD  But ,COMMA  you forget to free them ,COMMA  once you have done and a lot of software ships with memory leaks and this is a major concern in the industry .PERIOD  This is also an obscure error ,COMMA  which is freeing the same memory more than once .PERIOD  This is uncommon when a single programmer is working on a code .PERIOD  But ,COMMA  when multiple programmers are working on the same piece of code ,COMMA  you may end up freeing the same memory twice ,COMMA  this will lead to some run time errors .PERIOD     In this lecture let us look at an application of malloc and free to solve some problem that we are interested in .PERIOD  So ,COMMA  the problem that I will define is to write a function to return the duplicate of a string ;SEMICOLON  a string is given us the argument and you have to return the duplicate of that string .PERIOD  So ,COMMA  we have to write a function to take a string as input and return the copy .PERIOD  Now let us assume that the input string is s ,COMMA  and it ends in a null character .PERIOD  Assume that we can find the number of null non null characters in the string .PERIOD  So ,COMMA  this is will be refer to us the length of the string .PERIOD  What we will do is allocate length + 1 characters .PERIOD  So ,COMMA  there are length non null characters ,COMMA  and then one more for storing the null characters .PERIOD  So ,COMMA  we will allocate len + 1 characters on the ,COMMA  heap using malloc ,COMMA  and we will copy the contents of s to that space on the heap .PERIOD  And finally ,COMMA  return the address of that location .PERIOD  So ,COMMA  that will be the t th the new array .PERIOD  So ,COMMA  notice that the original array may be on the stack ,COMMA  and the new array the duplicate array will be on the heap .PERIOD  Let us write this function .PERIOD        So ,COMMA  I will call it duplicate it takes one array which is the same as a pointer .PERIOD  So ,COMMA  I can declare it has char *s or char s with square brackets ,COMMA  it does not matter .PERIOD  So ,COMMA  I will just declare it has a character *s ,COMMA  and what will it return ?QUESTIONMARK  It will return another array ,COMMA  and array is the same as a pointer .PERIOD  So ,COMMA  I will return character star .PERIOD  So ,COMMA  the input argument is an array ,COMMA  and the output is also an array .PERIOD  I will declare 3 variables ;SEMICOLON  i which is for the loop ,COMMA  len which will store the number of non null characters in s .PERIOD  So ,COMMA  let us be very specific ,COMMA  I do not want to store the number of characters in s ,COMMA  because I want to say that I do not want to count null .PERIOD   Now if you want to count null as well in the length then you will modified the code ,COMMA  but typical convention is that when you mention the length of a string ,COMMA  you do not count the null character .PERIOD  I will also declare a char *t .PERIOD  Now the code proceeds and stages ;SEMICOLON  first I have to write a loop to find the length of the string ,COMMA  I can write a very simple loop to do that I can say for i = 0 as long as s of i is not null ,COMMA  do increment i .PERIOD  So ,COMMA  as soon as I see the first null in s ,COMMA  I will stop .PERIOD  When I exit out of the loop ,COMMA  I will be the number of non null characters in s .PERIOD  So ,COMMA  I can say len = i .PERIOD  So ,COMMA  in the first step of the function ,COMMA  we just find the length of the string excluding the null character at the end .PERIOD   Now comes the important thing ,COMMA  we have to copy that array to somewhere .PERIOD  If we copy that array to the stack itself that is if I copy that array to some space within the duplicate functions stack ,COMMA  it will be erased when I return .PERIOD  So ,COMMA  I should allocate the space on the heap .PERIOD  I can allocate space on the heap using the malloc function .PERIOD  So ,COMMA  let us look at the malloc function .PERIOD  I want to allocate a bunch of space on the heap ,COMMA  how much do I have to allocate ,COMMA  I have to allocate len + 1 number of characters .PERIOD  In other words ,COMMA  I have to allocate len + 1 times sizeof a single character ;SEMICOLON  these many bytes on the heap .PERIOD  Notice that it is not len times sizeof(char) ,COMMA  because if I allocate only that much then I will not have to space to copy the last null character .PERIOD  So ,COMMA  I should the input is a null terminated character ,COMMA  it is duplicate should also the null terminated .PERIOD  So ,COMMA  I should makes space for all characters including the null character on the heap .PERIOD  So ,COMMA  I will allocate (len+1) * sizeof(char) many bytes on the heap ,COMMA  it will return you the address of the first byte and that address I will convert to a char star .PERIOD  So ,COMMA  malloc returns a kind of an unsorted .PERIOD  So ,COMMA  here are these many bytes .PERIOD  Now it will return you the address of the first byte that was located ,COMMA  now I want to treat that as a character pointer .PERIOD  So ,COMMA  I will can do that using the casting operator .PERIOD  Why do I have to do that think about it for a minute ,COMMA  because you want pointer arithmetic to work .PERIOD  When I say t[i] ,COMMA  I should correctly execute star of t + i .PERIOD  So ,COMMA  go back to that lecture and understand why it is important that you know the it is not just a byte address ,COMMA  it is a character pointer .PERIOD  Once you do the allocation ,COMMA  you can copy s array into t array .PERIOD  We do not really care about the fact that t is not on the stack ,COMMA  t is on the heap ,COMMA  because copying is done exactly the same way .PERIOD  So ,COMMA  I can say i = 0 ,COMMA  i < len ,COMMA  i ++ t[i] = s[i] .PERIOD  And then finally ,COMMA  this will copy all the non null characters ,COMMA  and finally I will say t[i] = null ,COMMA  the last character will be the null character .PERIOD  Now ,COMMA  if you want to understand it in slightly greater detail understand why the character star cast was required in order for t[i] to work properly .PERIOD  Once I have done copying the array ,COMMA  I can just return t ,COMMA  and I will not leap it will not lead to a dangling pointer because t is allocated on the heap .PERIOD  So ,COMMA  let us pictorially understand what happens during the execution of this program .PERIOD  I have main function ,COMMA  and I allocate a char array .PERIOD  Now this is allocated on the stack .PERIOD  As soon as I declare a character array and initialized it with in main ,COMMA  it is allocated in the stack corresponding to main .PERIOD  So ,COMMA  s is a pointer to the first location in the array .PERIOD  And I declare another *t ,COMMA  and then I call t = duplicate(s) ,COMMA  I should return a separate copy of s .PERIOD  Let see what happens in the duplicate function ?QUESTIONMARK  We do allocation for all the local variables all that ,COMMA  but important thing is that we have s and t which are new pointers .PERIOD  Now s is the input argument to duplicate ,COMMA  and it will be pointing to the array in the main function ,COMMA  because I call duplicate(s) .PERIOD  So ,COMMA  duplicates s will point to the same array as the s of mean .PERIOD  So ,COMMA  it is pointing to the array on the stack ,COMMA  Now as soon as I allocate memory for t on the heap ,COMMA  which was step 3 of duplicate ,COMMA  I would say t = (char *)malloc( (len+1) * sizeof(char) ) .PERIOD  What is len here ?QUESTIONMARK  len is 6 ;SEMICOLON  there are 6 non null characters len + 1 is 7 .PERIOD  So ,COMMA  I allocate 7 characters on the heap ,COMMA  and its return address will be cost to a character pointer .PERIOD  So ,COMMA  t is now pointing to this space on the heap .PERIOD  Now ,COMMA  once I am done ((Refer Time: 08:33)) creating the space on the heap ,COMMA  what I can do is ,COMMA  I can copy the location the s array into the t array on the heap .PERIOD  So ,COMMA  once that loop executes it will look like this ,COMMA  here is the s array inside main ,COMMA  here is the heap the array allocated by duplicate ,COMMA  and you will just copy t[i] = s[i] for .PERIOD  So ,COMMA  you will copy ‘s’ ‘a’ ‘m’ ‘p’ ‘l’ ‘e’ ,COMMA  that is within the loop .PERIOD  And then finally ,COMMA  I will say that t[6] = ‘\0’ .PERIOD  So ,COMMA  here is an array of size 7 ,COMMA  it has a 6 non null characters and the last element is null .PERIOD    And then once I am done ,COMMA  I will return from duplicate .PERIOD  Again keep in mind what is erased is the stack .PERIOD  Everything that was allocated to duplicate on the stack is erased .PERIOD  Those s t and the local variables in duplicate no longer exist ,COMMA  but the work that was done by allocating on the heap that still remains .PERIOD  So ,COMMA  the return value t ,COMMA  that is return value which is the address of the array in heap will be assign to t .PERIOD  So ,COMMA  t now points to heap .PERIOD  Notice how it executed s was allocated on the stack ,COMMA  and the effect of the duplicate function will be that ,COMMA  the duplicate of the array will be created on the heap .PERIOD   So ,COMMA  notice what we understood about the sizeof operator .PERIOD  Sizeof operator was use to know the number of bytes need at the stored data type .PERIOD  It is used in pointer arithmetic ,COMMA  it is used in array index calculation ,COMMA  and it is also used when allocating memory on the heap ,COMMA  because malloc needed to know how many bytes to allocate .PERIOD  And suppose I have wanted to allocate 10 integers ,COMMA  instead of me saying that on this machine I know that and integer is 4 bytes .PERIOD  So ,COMMA  you go ahead in allocate 40 bytes .PERIOD  The problem with doing that is you take your code to another machine ,COMMA  and that machine integer is 8 bytes ;SEMICOLON  and your code will no longer allocate sufficient space .PERIOD  So ,COMMA  the real way to write portable code would be to say 10 times sizeof int ,COMMA  that code will work regardless of which machine you execute on .PERIOD   So ,COMMA  here is the use of sizeof operator when you call malloc ,COMMA  it helps you to write portable code which will execute on any machine .PERIOD  So ,COMMA  we have seen that allocating memory on the heap can be done using malloc ,COMMA  we have understood what it means to allocate memory on the heap the difference between stack and heap ;SEMICOLON  stack is erased as soon as a function returns ,COMMA  heap is not erased when a function returns you have to explicitly say that i ((Refer Time: 11:39)) now freeing that using free function .PERIOD  Again remember the asymmetry within malloc and free ;SEMICOLON  malloc needed to know how many bytes you allocate ,COMMA  free just needed to know which pointer to de allocate ,COMMA  which pointer to free .PERIOD  Did not want to know how many bytes to free ,COMMA  it does that automatically .PERIOD  And to repeat common errors using malloc you could forget to malloc .PERIOD  Now you could not allocate enough space in heap .PERIOD  For example ,COMMA  in the code that we have just seen ,COMMA  suppose you are allocated just len number of characters instead of len + 1 .PERIOD  Then you would not have enough space on the heap to copy the last null character .PERIOD  So ,COMMA  you will violet that t is an exact duplicate(s) .PERIOD  Now you could forget to free memory after use ,COMMA  this is called a memory leak ,COMMA  and you could have the sub square error of freeing the same memory twice ,COMMA  that leaves to run time errors .PERIOD    Now ,COMMA  recursion is usually something that is completely new .PERIOD  it is a new way of thinking about problems that might sound unfamiliar at first ,COMMA  but eventually it is a more natural way of solving problems than other techniques .PERIOD  So ,COMMA  we will carefully examine what recursion means .PERIOD  So ,COMMA  this is the video of a media player having a copy of itself inside the video and it goes on forever .PERIOD  We will see what does this have to do with recursion .PERIOD   So ,COMMA  recursion in English means roughly say again i am function defined in terms of itself are called recursive functions .PERIOD  Now ,COMMA  this is not completely accurate .PERIOD  We want to say that functions defined in terms of itself in a particular way ,COMMA  these are valid recursions .PERIOD  Recursion is a powerful tool for program construction and for thinking about and reasoning about functions in general .PERIOD  So ,COMMA  it is a general purpose technique of programming ,COMMA  and you can do any kind of program using only just recursion .PERIOD  We will not see such general types of recursion in this course ,COMMA  but we will see fairly common examples for recursions .PERIOD   So ,COMMA  for example ,COMMA  let us consider a very simple function which will search for a key within a given array and we know how to write this .PERIOD  What i will do is ,COMMA  i will take an integer ,COMMA  initialize it to 0 ,COMMA  for i = 0 to n .PERIOD  N is the size of the array .PERIOD  i will increment i and if at any i ,COMMA  i find the key ,COMMA  i will return 1 indicating that i have found the key .PERIOD  if i have not found the key and i have reached the end of theory ,COMMA  i will return-1 .PERIOD  This is a typical way to search for a key inside a given array .PERIOD  Now ,COMMA  we will approach the idea of recursion by looking at a recursive solution to this .PERIOD  Hopefully ,COMMA  while seeing this program ,COMMA  we will get an idea of what recursion means .PERIOD   So ,COMMA  what do we mean by a recursive solution to this ,COMMA  right .PERIOD  Rather than defining it and describing abstract properties of recursion ,COMMA  why not let write an actual program which is defined in the recursive manner and through these kinds of examples will eventually get the hang of recursion .PERIOD  So ,COMMA  we have to write a function search it will return whether a key is found or not .PERIOD  if the key is found ,COMMA  it returns 1 .PERIOD  if the key is the not found ,COMMA  it returns a-1 and you have to search an array a of size n for the key .PERIOD  Now ,COMMA  we have written this function just now using loops .PERIOD  Now ,COMMA  let us write this using recursion .PERIOD    So ,COMMA  let us say that i will in some unspecified syntax ,COMMA  this is not going to be valid c ,COMMA  but this is just so that we see the idea in a very clear manner .PERIOD  i have to search for an array of size a of size n for key .PERIOD  Now ,COMMA  if the array is empty that is n is equal to 0 ,COMMA  you can have more conditions here .PERIOD  N can be < 0 as well ,COMMA  but let say that empty array is n is equal to 0 ,COMMA  then you say that i have not found the key because it is an empty array .PERIOD  So ,COMMA  you give back the value-1 .PERIOD  So ,COMMA  n = 0 implies the value to be returned this-1 .PERIOD  That is what this notation is supposed to stand for .PERIOD  Suppose n is not 0 ,COMMA  so ,COMMA  this means that an array is non-empty .PERIOD  Now ,COMMA  how do we solve this ,COMMA  recursively right .PERIOD  So ,COMMA  this look for the first element whether it is the key or not .PERIOD  if the first element is the key ,COMMA  we do not have to do anything further .PERIOD  We know that the key is present in the arrays ,COMMA  so you return 1 .PERIOD  So ,COMMA  the key has been found and you return 1 ,COMMA  and now is the big step for recursion .PERIOD  How can we search for the key in an array of size smaller than n ?QUESTIONMARK  So ,COMMA  if a[0] is not equal to key ,COMMA  then this means that key can be somewhere in a 1 through a n-1 or it is absent in the array .PERIOD  in any case what we now have to do is search for the arrays starting at a 1 ,COMMA  so by a 1 this is not strictly c notation .PERIOD  What i mean is the sub arrays starting at a + 1 .PERIOD  So ,COMMA  search in the sub array starting at a + 1 .PERIOD  Now ,COMMA  the sub array has one element less because we already know if you are here that a 0 is not equal to key ,COMMA  so there are only n-1 element in the smaller sub problem .PERIOD  What do we have to search for ,COMMA  we have to search for the key .PERIOD  So ,COMMA  this says that either the key is present as the first element of the array or you have to solve the sub problem of searching in the sub array of size n-1 for the same key .PERIOD  So ,COMMA  here is the key to thinking about a problem in recursive terms .PERIOD  What you first do is ,COMMA  consider the case when you have the trivial array which is the empty array in this case .PERIOD  So ,COMMA  we have the base case and then ,COMMA  these are the recursive case .PERIOD  So ,COMMA  the recursive case consists of doing something at size n .PERIOD  So ,COMMA  in this case ,COMMA  it is search whether the first element is the key or not .PERIOD  if it is true ,COMMA  then we do not have to do anything further ,COMMA  we have found the key ,COMMA  otherwise solve the sub problem .PERIOD  Now ,COMMA  the sub problem is a smaller copy of the old problem .PERIOD  So ,COMMA  this is what is known as the inductive case or the recursive case .PERIOD  The reason i am calling it inductive case is that recursion has very tight connections to the idea of mathematical induction .PERIOD  if you know how to write a proof by mathematical induction ,COMMA  what you normally do is you consider a base case .PERIOD  So ,COMMA  you have a theorem and you want to prove this by mathematical induction .PERIOD  You consider the base case probably n = 1 or n = 0 .PERIOD  These will be the base cases for an association about natural numbers and then ,COMMA  if the base case is true ,COMMA  then you say that i assume that the problem is true for size n and now ,COMMA  i want to prove that the theorem is true for size n + 1 .PERIOD  This is how a mathematical induction proof looks like and in the case of a recursive program ,COMMA  there is a very tight analogy .PERIOD  Recursion in fact is just a mathematical induction in the context of writing programs .PERIOD  We have to solve a problem .PERIOD  First we will see what is a problem in the base case and the base case is a very trivial case usually ,COMMA  but it is important that you think about base case .PERIOD  You say that if the array is empty and then ,COMMA  i will return-1 because the key cannot be in the array .PERIOD  Then ,COMMA  you say that i will now define the problem of size n in terms of a sub problem of size n-1 for example .PERIOD  So ,COMMA  we will solve the same .PERIOD  We will solve the bigger problem in terms of a smaller copy of itself and this is the key to thinking about recursive programs .PERIOD   Let us code this in c .PERIOD  So ,COMMA  we code this in a very straight forward manner .PERIOD  i will write a int search ,COMMA  int a[] ,COMMA  int n which is the size of the array a ,COMMA  int key which is the key we are searching for .PERIOD  if n = 0 ,COMMA  then return-1 because the key is not found .PERIOD  This is the base case and otherwise n > 0 ,COMMA  so you can search for a 0 is equal to key or not .PERIOD  So ,COMMA  you can search for whether the first element is the key .PERIOD  if it is ,COMMA  then you have found the key ,COMMA  otherwise what you do is you call search a + 1 which is the sub arrays starting at size 1 .PERIOD  The sub array has size n-1 and key .PERIOD  So ,COMMA  when you search or write a recursive program ,COMMA  there are a few things that you want to check .PERIOD  The first is that the base case is properly handled .PERIOD  The second is that when you define the sub problem ,COMMA  you want to ensure that it really is a sub problem because if you solve the problem in terms of an equal size problem or even a bigger size problem ,COMMA  your program may not terminate .PERIOD  We will see this in a moment .PERIOD  So ,COMMA  this part which is highlighted in green which is calling search itself ,COMMA  but on a smaller sub problem is a + 1 n-1 .PERIOD  This is what is known as a recursive call to the same function .PERIOD  So ,COMMA  we have seen functions that can call other functions .PERIOD  Now ,COMMA  we have seen functions which can call themselves and this is what is known as recursion .PERIOD   Let’s see how this function behaves .PERIOD  Now ,COMMA  before we go into the execution trace of this function ,COMMA  i want to add a word of caution .PERIOD  The actual way to understand recursion is not to think about the stack and how functions are calling other functions .PERIOD  The real way to understand recursion is to think about this program as a problem defined in terms of sub instance .PERIOD  But in any case we will just see the execution of this function through the stack trace just to get comfortable with what happens at the back of all of this .PERIOD  So ,COMMA  let us do a quick trace .PERIOD  Suppose we have an array 31 4 10 35 59 .PERIOD  it is an array of size 5 named a ,COMMA  and we are searching for the key 3 .PERIOD  Now ,COMMA  we know that this key is not present in the array ,COMMA  but let see how the function executes .PERIOD  So ,COMMA  first we call search(a ,COMMA 5 ,COMMA 3) .PERIOD  A 0 is 31 which is not the key .PERIOD  So ,COMMA  it calls search a + 1 4 because now we are searching in the sub array of size 4 for the same key .PERIOD  So ,COMMA  that is in effect ,COMMA  the same as calling the same search function on this sub array highlighted in grey .PERIOD  This is because the answer to search in the whole array is now the same as answer to the search in the sub array .PERIOD  That is what the recursive statement is .PERIOD  Now ,COMMA  (a+1)[0] is 4 this is the first element of the sub array .PERIOD  A 4 is not 3 and a ,COMMA  and at this point you call the sub sub problem which is search a + 2 ,COMMA  the sub array of size 3 for the key 3 .PERIOD  Here is the sub array of size 3 and you are searching for 3 in this sub array .PERIOD  Again the first element of the array is 10 ,COMMA  which is not 3 .PERIOD  So ,COMMA  you call the sub problem of this which is a + 3 .PERIOD  Now ,COMMA  the array is of size 2 and you will search for 3 and this goes on until you find that you have exhausted the array .PERIOD  Finally ,COMMA  the array is of size 0 and you will finally say that since the array is of size 0 ,COMMA  i have not found the key .PERIOD  So ,COMMA  you return-1 .PERIOD   Let us just look at this stack of function cause and see how it looks like .PERIOD  Search(a ,COMMA 5 ,COMMA 3) is called by mean and let say that it has some return address .PERIOD  We do not care about it right now ,COMMA  but search(a ,COMMA 5 ,COMMA 3) calls search(a+1 ,COMMA 4 ,COMMA 3) and the place to return is some line in search function .PERIOD  This calls the sub sub problem a + 2 3 that calls a + 3 2 that calls a + 4 1 ,COMMA  and that calls a + 5 0 at which point you realize that the sub problem now is empty and then ,COMMA  you return a-1 .PERIOD  So ,COMMA  at this point you have reached the base case .PERIOD  if n = 0 ,COMMA  return-1 .PERIOD  So ,COMMA  that will return a-1 .PERIOD  Where will it return to ?QUESTIONMARK  it will return to the function which immediately called it which is search(a+4 ,COMMA 1 ,COMMA 3) .PERIOD  So ,COMMA  this guy gets a-1 .PERIOD  Therefore ,COMMA  it just returns that-1 ,COMMA  return the value of whatever is returned by the sub problem ,COMMA  ok .PERIOD  So ,COMMA  it is-1 and that-1 gets returned .PERIOD  So ,COMMA  it gets bubbled up all the way back to main ,COMMA  and main you can realize that the element is not present in the array because the return value of search(a ,COMMA 5 ,COMMA 3) was-1 .PERIOD  At this point ,COMMA  the call stack terminates .PERIOD   So ,COMMA  what was special about the recursion call stack ?QUESTIONMARK  it was just that most of the stack was involved by a function calling itself over and over ,COMMA  but each time the function called itself ,COMMA  it was calling on a smaller version of the problem .PERIOD  Here is how ,COMMA  you think about a very simple program in terms of recursion .PERIOD  Earlier ,COMMA  we saw how to solve this using iteration which was using a loop and we have seen the problem how to be solved using recursion .PERIOD  Now ,COMMA  a word of caution ,COMMA  we will see this in further examples .PERIOD  it is very important that you handle the base case properly .PERIOD  Now ,COMMA  this is something that we are not used to in normal way of thinking .PERIOD  When we think about solving a problem ,COMMA  we are thinking about solving substantial sizes of the problems .PERIOD  We are not concerned too much with what happens with an empty array ,COMMA  what happens when n is-1 and things like that ,COMMA  but even in this problem ,COMMA  we know that when we call search(a + 5 ,COMMA 0 ,COMMA 3) we know that the function terminated because we had a base case which said that if n equals to 0 ,COMMA  then return-1 .PERIOD  if we did not have this case ,COMMA  you could see that probably it will go on calling itself infinite number of times .PERIOD  So ,COMMA  just like when you are writing for loop or a while ,COMMA  loop you have the case of infinite loops .PERIOD  in the case of recursion ,COMMA  you can have an infinite recursion and you have to guard against that .PERIOD  The only way to guard against that is to get the base case correct .PERIOD  So ,COMMA  here is something in counter intuitive about programming recursive functions .PERIOD  You know almost half of your intellectual effort is in handling the base case properly ,COMMA  and only the remaining is involved in solving the recursive case .PERIOD    In this video will look at linear recursion in a bit more depth ,COMMA  while I describe what I mean by linear recursion .PERIOD  We have mentioned earlier that when designing recursive programs ,COMMA  think about the problem in recursive terms ,COMMA  do not think in terms after stack that is used in execution .PERIOD  When it is actually executed that will be a stack created and use for the execution ,COMMA  and that depth of recursion is a term which means the maximum size of the stack ,COMMA  while you execute the program on given input .PERIOD  The memory used by the programs includes the local memory of the function ,COMMA  + the depth of the stack .PERIOD    .PERIOD   Let see with an example .PERIOD  We will consider actually two examples ;SEMICOLON  one for even length array ,COMMA  and another for an odd length array .PERIOD  Let say that a is an even length array with six elements and we want to reverse it ,COMMA  using the function reverse a[6] ,COMMA  and we have to do it in a recursive way .PERIOD  So ,COMMA  what you do is first swap a[0] with a[5] .PERIOD  And now what is the sub problem left be solved .PERIOD  We have to solve reverse of this intermediate array ,COMMA  which starts from a[1] and contains four elements .PERIOD  So ,COMMA  we have to reverse the array with starts from a + 1 ,COMMA  and there are four elements to be reversed .PERIOD  So ,COMMA  in one step even though we have only a single call to a sub problem ,COMMA  we have actually reduced the size by 2 .PERIOD  Now use a reverse or rather swap a and a[1] and a[4] ,COMMA  and now the sub problem that remains is ,COMMA  to reverse this sub routine which is a + 3 ,COMMA  and you have two elements to reverse .PERIOD  So ,COMMA  you do this ,COMMA  and in this point you have a sub array which starts at a + 3 and has zero elements to reverse .PERIOD  At this point that is nothing but .PERIOD  Now ,COMMA  for in odd length array let us take a very small array which contains three elements ,COMMA  and we have to reverse it .PERIOD  What you do is ,COMMA  you reverse you swap b[0] with b[2] .PERIOD  At this point you have a sub problem which has exactly 1 element ,COMMA  and you do need to reverse that array ,COMMA  that arrays it is soon reverse .PERIOD  So ,COMMA  the problem just stops there .PERIOD  So ,COMMA  notice that difference between the even length array the odd length array .PERIOD  In the case of even length array ,COMMA  the step ,COMMA  just before the last step involved an array of size 2 ,COMMA  and you still had to reverse that is array .PERIOD  In the case of an odd length array this ,COMMA  the last of involves has a single length array ,COMMA  which is soon reversed .PERIOD  So ,COMMA  you do not have to do anything .PERIOD  So ,COMMA  there are two base cases to worry about ;SEMICOLON  one is where the sub array is of size zero ,COMMA  and another is where the sub array is of size 1 ,COMMA  0 corresponds to even length arrays ,COMMA  and one corresponds odd length arrays .PERIOD   Let us write this code now .PERIOD  So ,COMMA  we have reverse a containing n elements ,COMMA  and we have return type void ,COMMA  which means that this function is not going to return you value ,COMMA  but it is going to do something .PERIOD  So ,COMMA  if n=0 or n = 1 return ,COMMA  because in that case a is ,COMMA  it is on reverse ;SEMICOLON  otherwise you swap the first element with a last element ,COMMA  that is this operation a and a + n - 1 .PERIOD  So ,COMMA  notice that swap is a function that takes two pointers to int and exchanges them .PERIOD  Once you do that you call the sub problem ,COMMA  which is reverse(a + 1 ,COMMA  n – 2) .PERIOD  Notice that unlike the previous examples we have discussed ,COMMA  the sub problem reduces by 2 insides .PERIOD  Even though you have a only single call ,COMMA  the sub problem is not of size n - 1 ,COMMA  it is of size n - 2 .PERIOD  So ,COMMA  look at the case of the odd length array and the even length array that we have seen before .PERIOD  And you can notice that the sub problem reduces by 2 in size for every step .PERIOD  Now what is the depth of the stack .PERIOD  you know that ruffle n upon to calls will be done ,COMMA  because you start at a size n ,COMMA  the next call will be of size n - 2 and so on until you hit either one or zero .PERIOD  So ,COMMA  you can work out that there will be about n/2 steps ,COMMA  before you reach one or zero .PERIOD  The accurate expression is ,COMMA  ceiling of the expression n / 2 + 1 .PERIOD  So ,COMMA  many calls will be there ,COMMA  before you hit 1 or 0 .PERIOD  So ,COMMA  each function call will take ,COMMA  let us a constant among space and there are about n/2 function calls .PERIOD  So ,COMMA  the stack depth is n/2 ,COMMA  and therefore ,COMMA  the wholes space which is stack depth times the number of variables at each function that will be about n/2 .PERIOD   So ,COMMA  now let us consider a third example which is ,COMMA  computing the size ,COMMA  the maximum of a particular array .PERIOD  For concreteness let us consider in integer array ,COMMA  and we have to compute the following function int max array .PERIOD  It takes two arguments ;SEMICOLON  one is the array itself ,COMMA  and the second is m ,COMMA  which is the number of elements in the array .PERIOD  Again let us think about the problem recursively ,COMMA  we have return loops to solve the problem earlier ,COMMA  but now let us think about it in a recursive manner .PERIOD  If the array contains 0 elements ,COMMA  then what is the maximum .PERIOD  So ,COMMA  here it may be slightly counter intuitive if you are saying for the first time .PERIOD  The maximum of an empty array is some large a negative value .PERIOD  Think of it has minus infinity .PERIOD  Why do we do this this is ,COMMA  because let us take a concrete example 1 2 3 .PERIOD  We know that the maximum of this array is three .PERIOD  Now ,COMMA  what happens when you take a larger array or list of numbers .PERIOD  So ,COMMA  what happens if you take ,COMMA  let us keep this unspecified a is an int .PERIOD  You know that if a is less than 3 then the maximum of this array is going to be three .PERIOD  If a > 3 then the maximum of this the second one is going to be greater than that .PERIOD  So ,COMMA  in any case ,COMMA  whatever be the nature of a you can always say that maximum {1 2 3} a is going to be >= the maximum {1 2 3} .PERIOD  Now what ;SEMICOLON  that means is that ,COMMA  if you take a larger set ,COMMA  its maximum is always going to be >= the maximum of a sub set .PERIOD   Note that this is independent of a ,COMMA  because you can analysis my cases ,COMMA  if a <= 3 then this maximum will 3 itself and 3 >= 3 .PERIOD  If a > 3 ,COMMA  then this maximum is strictly greater than the previous maximum .PERIOD  So ,COMMA  maximum is always monotone according to the sub set relation .PERIOD  Now this means that what will be the maximum of the empty set .PERIOD  The empty set is a sub set of every set .PERIOD  So ,COMMA  no matter which s I pick ,COMMA  maximum s has to be >= maximum of the empty set .PERIOD  This means that a reasonable value for maximum of empty set is minus infinity .PERIOD  So ,COMMA  the set .PERIOD  .PERIOD  .PERIOD  So ,COMMA  this is a reasonable convention ;SEMICOLON  that is why when n is of size zero ,COMMA  we returns some really large negative value .PERIOD  By which I mean the absolute value of the number is really big ,COMMA  because we are trying to say that it essentially minus infinity .PERIOD  If n is of size 1 ,COMMA  then you just return a[0] ,COMMA  because the array contains only 1 element ,COMMA  it is maximum will be a zero .PERIOD  If n has size at least 2 .PERIOD  Now we are in business ,COMMA  we have to solve the problem in terms of a sub problem .PERIOD  So ,COMMA  here was an example where the base cases had to be really thought of ,COMMA  but now we are at the case where we are thinking about the recursion .PERIOD  So ,COMMA  what is the recursive step here .PERIOD   So ,COMMA  let us take a concrete array .PERIOD  We have array a ,COMMA  which contains the numbers 2 4 3 7 5 23 ,COMMA  - 3 and 9 ,COMMA  some concrete array .PERIOD  And I want to calculate the maximum of the array a in terms of some sub problem .PERIOD  The natural sub problem that we can think of ,COMMA  is the sub problem of finding the maximum of this sub array ,COMMA  which start from a[1] and goes on until the last element .PERIOD  So ,COMMA  recursive call should be something like max array a + 1 ,COMMA  and there are n - 1 elements in it ,COMMA  because we omit the first element .PERIOD  Now ,COMMA  maximum value ,COMMA  how can we solve the whole problem in terms of the sub problem .PERIOD  Suppose we note what is the maximum value in the tail ;SEMICOLON  a + 1 ,COMMA  2 containing n - 1 elements .PERIOD  The maximum of the whole array will be the greater of the two numbers ,COMMA  which two numbers ,COMMA  the maximum of this sub array and a[0] .PERIOD  So ,COMMA  maximum value is the large of a zero and the maximum of the tail sub array ,COMMA  which is a + 1 to a + n - 1 .PERIOD  Now in order to compute the sub problem we called a recursive call to the same function ,COMMA  looks for the max array from a + 1 containing n - 1 elements .PERIOD   So ,COMMA  in this example ,COMMA  the maximum of the tail sub array will be 23 .PERIOD  And let say that a zero is 25 .PERIOD  So ,COMMA  the maximum of the whole array will be the greater of the two numbers 25 and 23 .PERIOD  So ,COMMA  in this case ,COMMA  the maximum value will be 25 which is a[0] .PERIOD   So ,COMMA  now let us write this code .PERIOD  So ,COMMA  the recursive function is very simple ,COMMA  and this is one of the reasons why people like to write recursive functions ,COMMA  because from a recursive function it is very clear what the function is going to do .PERIOD  Usually recursive functions are shorter than their loop versions ,COMMA  and they are easier to understand when you read someone else code .PERIOD  So ,COMMA  let us solve max array using the recursive function in c .PERIOD  We have int max array ,COMMA  because it is finally ,COMMA  going to return in int value which is the greatest value in the array .PERIOD  Now you have an int array a ,COMMA  and n is the size of the array .PERIOD  Let say that we set some max val if n is 0 ,COMMA  then the maximum is simply something like minus infinity .PERIOD  Let us keep it a very large number - 9 9 9 9 9 .PERIOD  So ,COMMA  - 5 9 ,COMMA  some large value does not matter ,COMMA  and then if n = 1 then the array contains only one element and therefore ,COMMA  it is the maximum .PERIOD  So ,COMMA  you just return a[0] ;SEMICOLON  otherwise n is at least 2 .PERIOD  So ,COMMA  in this case ,COMMA  you say that the maximum value of the sub problem is max array a + 1 ,COMMA  n - 1 .PERIOD  So ,COMMA  this is the maximum of the tail array .PERIOD   Now once you have the maximum of the tail array ,COMMA  the maximum of the whole array is the grater of the two numbers which is a[0] and max val .PERIOD  So ,COMMA  we return max{a[0] ,COMMA   max val} .PERIOD  Now max is a function that is already there in the standard math library in c ,COMMA  but if you want to write it ,COMMA  it is not a difficult function to write it ,COMMA  you can take two integers and return the greater of the true integers .PERIOD  Now we can think about is a better then the loop version of the program .PERIOD  The advantage of the recursive program is that ,COMMA  it is easier and in some sense it contains fewer number of lines then the loop program .PERIOD  The disadvantage is that it takes subs more space while executing .PERIOD  So ,COMMA  the questions are how much time does the function take ,COMMA  how much space does the function take .PERIOD  So ,COMMA  these are things which are concrete and can be measured ,COMMA  there is also software question which is ,COMMA  how you see is set for programmer to look at this function and understand what it does .PERIOD  In the second criteria and it is the recursive function that is course .PERIOD  In the first criteria it is often the iterative function ,COMMA  the loop function that is course .PERIOD   So ,COMMA  please think about the questions ,COMMA  and you can work through it and say that in order to solve max_array of an array of size n .PERIOD  Let us take an array size 8 ,COMMA  you will see that these other recursive calls it will make (a + 2 ,COMMA 6) so on up to (a + 7 ,COMMA 1) ,COMMA  and when you hit an array of size 1 you get to one of the base cases ,COMMA  which is that when you have an array which contains a single element ,COMMA  the maximum is the only element in the array .PERIOD  So ,COMMA  once you hit here ,COMMA  you will start returning .PERIOD  So ,COMMA  the maximum depth of function calls in this will be the size of the array .PERIOD  So ,COMMA  you can say that stack depth is n .PERIOD   Now ,COMMA  recursive programs are general programs ,COMMA  just like look loop programs are general programs .PERIOD  You have return loops even before you saw what are arrays in C ?QUESTIONMARK  Similarly you can write recursive programs which deal with general data ,COMMA  not just array data .PERIOD  And in all of these questions ,COMMA  you can ask the following question how much time does the function take ,COMMA  and how much space does the function take .PERIOD   We will see an example for a recursive function ,COMMA  that will read n numbers and returns the maximum .PERIOD  Before we came to know of C arrays ,COMMA  this is the kind of loop functions that we used to write ,COMMA  we would take n numbers .PERIOD  So ,COMMA  first you will read how many numbers to read ,COMMA  then you will read exactly those many numbers and find their maximum using a loop .PERIOD  Now Let us try to do that using recursion .PERIOD  We are not going to use any arrays .PERIOD  So ,COMMA  what we have to do is ,COMMA  write a function to read_max ,COMMA  it takes n elements .PERIOD  And the logic is the same as finding the maximum of an array ,COMMA  but we will do it without using arrays .PERIOD  How do you do this .PERIOD  If you have zero numbers to read then you return minus infinity ,COMMA  or some approximation ,COMMA  some large negative value ;SEMICOLON  otherwise you read the first number .PERIOD  If n = 1 ;SEMICOLON  that is we have to read only one number ,COMMA  then you just say that x the maximum ;SEMICOLON  otherwise n >= 2 ,COMMA  and we have read one number .PERIOD   So ,COMMA  you say that return the maximum of the two values ,COMMA  which is x and what goes inside ,COMMA  inside you have to solve a sub problem ,COMMA  which is the sub problem of reading n - 1 numbers and returning the maximum .PERIOD  Go back and compare the program with finding the array maximum ,COMMA  and the recursion works exactly in the same way .PERIOD  So ,COMMA  we will read n - 1 numbers ,COMMA  and return the maximum of those ,COMMA  and then you compare maximum of the first number and the maximum of the sub problem .PERIOD  This is exactly as before except that we did not use any arrays .PERIOD  And how do you call this function ,COMMA  you just declare a main function with n ,COMMA  you scan it how many numbers to read ,COMMA  and call the function read max n .PERIOD  Finally ,COMMA  it will return the maximum of the n numbers read and you just print the value .PERIOD    Now ,COMMA  there are other functions which are typically return in a recursive manner .PERIOD  We just saw that you can use recursion with arrays .PERIOD  We saw problems where ,COMMA  you do not need to use arrays ,COMMA  but you can still write a recursive routine .PERIOD  We now will come to arithmetic functions ,COMMA  and many arithmetic functions are of an recursively defined .PERIOD  For example ,COMMA  let us take to function Euclid’s algorithm ,COMMA  and you can write the GCD function as follows .PERIOD  You first ensure that a >= b using the swap function ,COMMA  and then you just call gcd(a ,COMMA b) .PERIOD  And gcd(a ,COMMA b) is defined a recursively as follows .PERIOD  If b = 0 then gcd(a ,COMMA b) = a .PERIOD  If b is non zero then you just return gcd(b ,COMMA  a%b) .PERIOD  So ,COMMA  this is how you write recursive GCD routine .PERIOD  And I will make the clean that this routine is cleaner ,COMMA  then the iterative routine .PERIOD  In the iterative routine ,COMMA  remember we had to use an intermediate variable ,COMMA  which will store the value of ,COMMA  let say a and then did a careful three way exchange in order to accomplish b ,COMMA  a  .PERIOD  a % b .PERIOD   Here the code is very simple ,COMMA  if b is zero then we know the gcd(a ,COMMA b) = a .PERIOD  If b is non zero then we know the gcd(a ,COMMA b) is gcd(b ,COMMA  a%b) .PERIOD  So ,COMMA  it is a very concise way of writing the function .PERIOD  Now you can ask the question which is better ,COMMA  is the recursive formulation or the iterative formulation .PERIOD  Logic is the same ,COMMA  so it will take the same number of steps .PERIOD  So ,COMMA  the time taken will roughly be the same .PERIOD  And we have also made the clean that there recursive version is easier to understand .PERIOD  The disadvantage may be the following that ,COMMA  the recursive function may use very deep stack .PERIOD  So you can ask the question like how deep will be the stack in the case of the recursive program .PERIOD  So ,COMMA  in the following video ,COMMA  we will talk about more general kinds of recursion .PERIOD  In this video and the previous video ,COMMA  we have seen recursive problem .PERIOD  So ,COMMA  it can be solve by one call to a sub problem ,COMMA  and we will see more general kinds of recursion .PERIOD  Thanks .PERIOD   In this video we will look at slightly more general way of defining problems through recursion .PERIOD    We will ,COMMA  for the lack of a better name ,COMMA  I will call it just two-way recursion .PERIOD  These are problems which are solved by calling two-sub instances .PERIOD  This is the picture of a family tree ,COMMA  and we will see that the call stack for a two-way recursive functions looks somewhat similar to a family tree .PERIOD   Let us revisit a problem that we have seen which is to find the maximum value in an integer array .PERIOD  We saw that the stack depth in our earlier solution was order n ,COMMA  because each problem of size n called once at problem of size n - 1 .PERIOD  Now ,COMMA  can we reduce the depth of the stack from something close to n to something smaller than n .PERIOD   So ,COMMA  here is an alternate way to look at the problem which can be described in a very simple way .PERIOD  Instead of looking at the maximum of the first element and then the tail ,COMMA  what I can do is ,COMMA  take an array of size n and split it roughly in 2 halves .PERIOD  So ,COMMA  there is left half and a right half ,COMMA  each of size n over 2 .PERIOD   Now ,COMMA  imagine that you have the solution for the greatest element in the first half ,COMMA  let us call that x .PERIOD  And imagine that you have the greatest element of the right half ,COMMA  let us call that y .PERIOD  Now ,COMMA  whichever is greater among x and y ,COMMA  is going to be the greatest in the whole array .PERIOD  And this is the idea that we are going to implement right now .PERIOD   So ,COMMA  divide the array into about 2 equal halves .PERIOD  The first half is 0 to a n/2  -1 ;SEMICOLON  this contains n/2 elements .PERIOD  And the second half is ,COMMA  a n/2 ,COMMA  so on ,COMMA  upto n - 1 ;SEMICOLON  this is the right half .PERIOD  Now ,COMMA  recursively find the maximum element of each half .PERIOD  And let us say that you have x which is the maximum in the left half and y which is the maximum in the right half ,COMMA  then you just return the larger of x and y ,COMMA  that should be the largest element of the array .PERIOD   While doing this we have to take care of the base cases .PERIOD  This is as before for the linear case ;SEMICOLON  when n = 1 then the only element in the array is the maximum element ,COMMA  so ,COMMA  return a[0] .PERIOD  If n = 0 that is the array is empty ,COMMA  you return minus infinity .PERIOD  So ,COMMA  let us consider a concrete array ;SEMICOLON  a ,COMMA  is an integer array with these elements .PERIOD    Just to remind you ,COMMA  the linear version was done as follows: if n = 0 ,COMMA  you return something like - infinity ,COMMA  a very large negative value .PERIOD  Now ,COMMA  if n = 1 ,COMMA  you return a[0] which is the only element in the array .PERIOD  Otherwise ,COMMA  you have atleast 2 elements .PERIOD  And earlier what we did was ,COMMA  you call the sub problem ,COMMA  a + 1 ,COMMA  so ,COMMA  the array which starts with the second element in the array .PERIOD  And now the sub problem has n - 1 elements because you are considering a 0 ,COMMA  the first element as a separate thing .PERIOD   Now ,COMMA  what you want it to return was maximum of whatever was returned in the sub problem .PERIOD  So ,COMMA  let that be some maxval .PERIOD  And whichever is greater ,COMMA  a[0] and maxval ,COMMA  that is going to be the greatest element in the array .PERIOD  Now ,COMMA  we saw that the stack depth for this problem was n because size n problem is being reduced to a size n - 1 problem .PERIOD  So ,COMMA  in each step we are reducing the size of the problem by 1 ,COMMA  and increasing the stack depth by 1 .PERIOD  So ,COMMA  in total that stack depth would be n because there will be about n calls or n - 1 calls ;SEMICOLON  however ,COMMA  you want to count .PERIOD    Now ,COMMA  let us look at the two-way recursive version .PERIOD  So ,COMMA  here is the algorithm that we discussed ;SEMICOLON  and let us just code this up .PERIOD  So ,COMMA  we will have int max_array ;SEMICOLON  and then int a ,COMMA  which is the array containing n elements .PERIOD  And let us say that we have some constant - infinity ,COMMA  we have defined elsewhere in the program .PERIOD  Later we will see how to do this .PERIOD  Let us say that if n = 0 ,COMMA  you return - infinity ,COMMA  some large number ,COMMA  some large negative value .PERIOD  And if n = 1 ,COMMA  you return the only value in the array .PERIOD  So ,COMMA  these are the base cases as before .PERIOD  The changes here ;SEMICOLON  if you have at least 2 elements then you return maximum of the values returned by the 2 sub problems .PERIOD  What are the 2 sub problems ?QUESTIONMARK  The first is the left half of the array which starts from ,COMMA  a ,COMMA  that is the ,COMMA  at the first location in the array ,COMMA  and contains n / 2 elements .PERIOD   Then we need to compute the maximum of the right half ;SEMICOLON  how do we find the right half ?QUESTIONMARK  So ,COMMA  we need to skip ,COMMA  n / 2 elements ,COMMA  which went to the left half ,COMMA  to get to the first index in the right half .PERIOD  So ,COMMA  we do that by saying ,COMMA  a + n / 2 .PERIOD  If ,COMMA  a ,COMMA  is the address of the first location of the whole array then a + 1 / 2 ,COMMA  is going to be the first address of the first location of the right half .PERIOD   And how many elements does the right half contain ?QUESTIONMARK  n / 2 elements went to the left .PERIOD  Therefore ,COMMA  what we are left with is n – n/2 .PERIOD  So ,COMMA  notice ,COMMA  how we call the left half starting from ,COMMA  a ,COMMA  and containing n / 2 elements ;SEMICOLON  and right half which is starting from ,COMMA  a + n / 2 ,COMMA  and containing n - n / 2 elements .PERIOD   Now ,COMMA  let us examine whether this is better than the previous recursive call ,COMMA  where we reduce the problem of size n to a problem of size n / 2 .PERIOD  It was called linear recursion because we called one sub problem in order to solve the whole problem .PERIOD  Here ,COMMA  we have ,COMMA  we are roughly dividing it into halves and then calling 2 version ,COMMA  2 sub problems ,COMMA  each of size about n / 2 .PERIOD  Now ,COMMA  surprisingly ,COMMA  we will see that there is a huge improvement if you do this .PERIOD  And this is one of the most elementary tricks in computer science which is called divide and concrete ;SEMICOLON  and here is a very simple example of that .PERIOD  So ,COMMA  if you look at the concrete array that we had ,COMMA  and we call ,COMMA  max_array(a ,COMMA  8) ,COMMA  because this contains 8 elements .PERIOD  Now ,COMMA  we say that it will recursively call 2 sub problems which is maximum ,COMMA  max_array(a ,COMMA  4) .PERIOD  So ,COMMA  that will be the first 4 elements starting from ,COMMA  a 0 .PERIOD  And then max_array(a + 4 ,COMMA  4) ,COMMA  which are the 4 elements starting from ,COMMA  a 4 which is the fifth element in the array .PERIOD  Now ,COMMA  let us just look at the stack .PERIOD  Now ,COMMA  notice what types I repeatedly mentioned which is that in order to think about a recursive problem you just think about the formulation of the problem ,COMMA  and then what you have to convince yourself is if I solve the sub problems correctly then I will get the correct solution to the main problem .PERIOD  So ,COMMA  I will have ,COMMA  I will divide my work into 2 sub problems .PERIOD   So ,COMMA  both of them will report their results back to me .PERIOD  Now ,COMMA  what I have to do is to figure out how do I put these 2 solutions together in order to solve the whole sub problem .PERIOD  So ,COMMA  think about it in terms of the design of the algorithm ,COMMA  and not about the execution stack .PERIOD  But ,COMMA  we will show why this is a major improvement over the linear recursion version of the same solution by looking at the stack .PERIOD   So ,COMMA  let us just look at the stack ;SEMICOLON  max_array(a ,COMMA  8) ,COMMA  calls ,COMMA  max_array(a ,COMMA  4) .PERIOD  Now ,COMMA  the way function calls in c works ,COMMA  you will go to the second half of this problem which is ,COMMA  (a + 4 ,COMMA  4) ,COMMA  only after max_array(a ,COMMA  4) ,COMMA  is completely done ,COMMA  right .PERIOD  So ,COMMA  let us now see how ,COMMA  max (a ,COMMA  4) ,COMMA  will execute ?QUESTIONMARK  It has 2 sub problems again .PERIOD  And let us look at the first sub problem which is ,COMMA  max_array(a ,COMMA  2) ,COMMA  that itself has a sub problem ,COMMA  max_array(a ,COMMA  1) .PERIOD  In order to abbreviate I will just put at dot there ,COMMA  but that dot is supposed to signify max_arr .PERIOD  Now ,COMMA  once you have solved this ,COMMA  suppose this is the base case ,COMMA  now it contains only 1 element ,COMMA  so ,COMMA  the only element is the maximum ;SEMICOLON  so ,COMMA  it returns that value to ,COMMA  max_array(a ,COMMA  2) ;SEMICOLON  that is one of the sub problems for ,COMMA  max_array(a ,COMMA  2) .PERIOD  So ,COMMA  now ,COMMA  this ,COMMA  max_array(a ,COMMA  2) ,COMMA  calls the second sub problem that it has ,COMMA  which is ,COMMA  max_array(a +1 ,COMMA  1) .PERIOD  Again ,COMMA  it is a base case ;SEMICOLON  it contains only 1 element ;SEMICOLON  that single element is the greatest element in that .PERIOD   So ,COMMA  you have 2 values now - one coming from the left and one coming from the right .PERIOD  And you just compare these 2 values ,COMMA  and that will be the greatest value in the first two elements of the array .PERIOD  So ,COMMA  once you do this ,COMMA  you return ;SEMICOLON  and one you return ,COMMA  you get the value ,COMMA  max_array(a ,COMMA  2) .PERIOD  So ,COMMA  suppose ,COMMA  all of that happens ,COMMA  and then you return to ,COMMA  max_array(a ,COMMA  4) .PERIOD  At this point ,COMMA  this function will call its second component which is ,COMMA  max_array(a +2 ,COMMA  2) ,COMMA  and the recursion continues .PERIOD   So ,COMMA  as soon as a function returns its stack will be erased ;SEMICOLON  I am showing that by dimming out that particular function call ,COMMA  ok .PERIOD  And this proceeds .PERIOD  So ,COMMA  once this value is obtained you can return to ,COMMA  max_array(a + 2 ,COMMA  2) .PERIOD  Now ,COMMA  this function is finished because it has called both its sub problems .PERIOD  So ,COMMA  this will return .PERIOD  And this problem has returned ,COMMA  has finish with both its sub problems .PERIOD  So ,COMMA  you will ,COMMA  after this function is done you will eventually unwind all the way back up to the top .PERIOD   And now ,COMMA  we are ready to call the second sub problem of ,COMMA  max_array(a ,COMMA  8) ,COMMA  which is max_array(a + 4 ,COMMA  4) .PERIOD  And .PERIOD  you do it similarly .PERIOD  Now ,COMMA  one thing you can notice here ,COMMA  is that ,COMMA  at any point the active path ,COMMA  what are active on the stack ,COMMA  the functions which are not yet returned are the highlighted entries in the call tree ,COMMA  ok .PERIOD  So ,COMMA  for example ,COMMA  at the very end the call stack contains 4 functions .PERIOD  Before you eventually return and compute the loss ,COMMA  compute the maximum of the whole array ,COMMA  the worst case depth of the stack is 4 .PERIOD  And we had 8 elements ,COMMA  so ,COMMA  you would thing that based on this experience that the depth of a stack is about n over 2 .PERIOD  But ,COMMA  if you think more carefully about it what happens is that ,COMMA  at every sub problem ,COMMA  at every level ,COMMA  I am dividing the problem by 2 .PERIOD   So ,COMMA  the depth of the stack is the maximum length part in this tree .PERIOD  And at every step of the tree I am dividing the problem by 2 .PERIOD  How many times do I have to divide in by 2 in order to reach 1 ,COMMA  that will be the depth of the tree .PERIOD  Equivalently ,COMMA  you can think about ,COMMA  how many times do I have to double in order to reach n if I start from 1 ,COMMA  that is the bottom of way .PERIOD  So ,COMMA  if I start from 1 and I double every level ,COMMA  how many times do I have to double in order to reach n ,COMMA  that is the solution to the equation 2x = n .PERIOD  So ,COMMA  what I have to find is ,COMMA  how many times do I have to double ?QUESTIONMARK  So ,COMMA  how many times do I have to multiply 2 with itself in order to reach n ?QUESTIONMARK  And you will see that the solution is log2 n .PERIOD  So ,COMMA  this is going to be the height of the call graph or the call tree .PERIOD  (Refer Slide Ti me: 13:29) So ,COMMA  the stack depth here is about ,COMMA  1 + log n ,COMMA  that is approximately correct ,COMMA  which is a huge improvement over n .PERIOD  If you think of n as something like 1024 which is 210 ,COMMA  we are saying that the stack depth is about 10 .PERIOD  Notice that ,COMMA  in the linear case we would have a stack depth of about 1024 ,COMMA  instead we are doing about 10 .PERIOD  So ,COMMA  this is the huge improvement in the case of stack depth .PERIOD   So ,COMMA  with a very simple idea which is instead of solving one sub problem of size n - 1 ,COMMA  what if you split it into 2 halves ,COMMA  roughly about size n/2 .PERIOD  You will see that you get a huge improvement in the stack depth .PERIOD  This is one of the simple ideas that we repeatedly use in computer science .PERIOD   Now ,COMMA  there are standard arithmetic functions also which can be defined in terms of the two-way recursion .PERIOD  A very classic example is Fibonnaci numbers .PERIOD  So ,COMMA  for example ,COMMA  they are defined as ,COMMA  F0 = 1 ,COMMA  F1 = 1 .PERIOD  And for n >= 2 ,COMMA  they are defined as Fn = Fn - 1 + Fn - 2 .PERIOD  So ,COMMA  if you code this out ,COMMA  so ,COMMA  a very simple function ,COMMA  int fib(int n) ,COMMA  if n = 0 or n = 1 ,COMMA  you return 1 .PERIOD  Otherwise ,COMMA  you return Fibonnaci ,COMMA  so ,COMMA  fib(n - 2) + fib(n – 1) .PERIOD   So ,COMMA  it is a very simple arithmetic sequence which is defined in terms of a two-way recursion .PERIOD  So ,COMMA  this is the very simple way to write it ,COMMA  but it is a very inefficient way to do it .PERIOD  So ,COMMA  we will see why it is inefficient in a moment .PERIOD    If you just think of how you trace the function ,COMMA  in the case of a later ,COMMA  of a concrete Fibonnaci number ;SEMICOLON  let us say ,COMMA  we want to calculate the fifth Fibonnaci number .PERIOD  Now ,COMMA  that depends on fib(4) and fib(3) ;SEMICOLON  fib(4) depends on fib(3) and fib(2) ;SEMICOLON  fib(3) depends on fib(2) and fib(1) ,COMMA  and so on .PERIOD  So ,COMMA  this is the call graph that you will have ,COMMA  the call tree that you will have if you consider the calculation of Fibonnaci 5 .PERIOD   Now ,COMMA  what is the problem here ?QUESTIONMARK  You will see that many computations are unnecessarily done multiple times .PERIOD  So ,COMMA  if you look at Fibonnaci 2 in the call graph ,COMMA  it is evaluated multiple times .PERIOD  So ,COMMA  Fibonnaci 2 is evaluated when fib(3) is called .PERIOD  It is also called when fib 4 is called .PERIOD  And fib(3) is called in a different context .PERIOD  When you want to calculate fib(5) ,COMMA  even there fib(2) is called .PERIOD  So ,COMMA  you will see that fib(3) is called 2 times ,COMMA  fib(2) is called 3 times ,COMMA  and fib(1) is called 5 times ,COMMA  and so on .PERIOD   So ,COMMA  we are unnecessarily repeating the work .PERIOD  And there is tricks in computer science to alleviate ,COMMA  to remove this kind of unnecessary work .PERIOD  But ,COMMA  that is strictly ,COMMA  it is not an idea that strictly falls into the concept of recursion ,COMMA  and is slightly outside the scope of this course .PERIOD  So ,COMMA  we will not cover this in this course ,COMMA  but I just want to point out that even though it is natural to consider this arithmetic sequence in terms of two-way recursion it may not be the most efficient way to do it .PERIOD  In this video will look at multi-dimensional arrays .PERIOD   In particular ,COMMA  let us look at two dimensional arrays .PERIOD  Because ,COMMA  that will give you an idea how multi-dimensional arrays work .PERIOD  Initially ,COMMA  let us look at them as arrays and in a subsequent video will look at the connection between multi-dimensional arrays and pointers .PERIOD   So ,COMMA  multidimensional arrays can be defined in the similar to the following ,COMMA  you can say double mat[5][6] or int mat[5][6] or float mat[5][6] ,COMMA  this is similar to the mathematical notation of multidimensional arrays are matrixes .PERIOD  So ,COMMA  let us look at the first example ,COMMA  we have that the definition states that mat is a 5×6 array of double entries .PERIOD  So ,COMMA  this means that mat has 5 rows ,COMMA  each row contains 6 entries and all the entries are of type double .PERIOD  Double is what is known as double precision floating point numbers .PERIOD  And if you are doing a lot of floating point computations ,COMMA  then instead of float you could use double because ,COMMA  you might need a lot of precision in your computation .PERIOD  So ,COMMA  the matrix 2D array might look like this ,COMMA  this looks like a mathematical matrix of size 5×6 .PERIOD  So ,COMMA  it has 5 rows ,COMMA  rows 0 through row 4 and each row has 6 columns ,COMMA  column 0 through column 5 .PERIOD   Now ,COMMA  the i j th member of matrix is accessed as mat[i][j] this is slightly different from the mathematical notation .PERIOD  In mathematical notation you will write matrix and then a square bracket and then you will write i comma j followed by close bracket .PERIOD  So ,COMMA  this is different in c ,COMMA  you would write the indices separately in their own square brackets .PERIOD  Now ,COMMA  the row and the column numbering begin at 0 ,COMMA  this is similar to one dimensional arrays we saw that one dimensional arrays start with index 0 .PERIOD  Let us look at a function which prints the input matrix .PERIOD  So ,COMMA  I have a function it returns void .PERIOD  So ,COMMA  it does not return anything it just performs an action ,COMMA  which is to print a matrix .PERIOD  Now ,COMMA  the function is called print matrix ,COMMA  it takes a double matrix mat of size 5×6 ,COMMA  5 rows 6 columns each .PERIOD  I first declare i and j ,COMMA  i is suppose to iterate over the rows and j is suppose to iterate over the columns .PERIOD  Now ,COMMA  how do you iterate over the whole matrix .PERIOD  Well ,COMMA  first you would take each row i .PERIOD  So ,COMMA  you need an i outer loop for that based on the variable i .PERIOD  I will go from 0 to 4 ,COMMA  so the for loop goes from 0 until you hit 5 .PERIOD  Now ,COMMA  for each row what do we have to do ,COMMA  we have to take the elements in the column .PERIOD  Now ,COMMA  the columns are numbered 0 through 5 .PERIOD  So ,COMMA  for each i th through we have to take column 0 ,COMMA  column 1 ,COMMA  column 2 ,COMMA  column 3 ,COMMA  column 4 and column 5 .PERIOD  So ,COMMA  all these entries and then you have to print that entry .PERIOD  We have just mention that the i j th element in the matrix is accessed as math i j ,COMMA  i in square bracket and j in square bracket .PERIOD  Therefore ,COMMA  you will say printf(“%f” ,COMMA  mat[i][j]) .PERIOD  So ,COMMA  this will take the entry in the i th row ,COMMA  j th column .PERIOD  One more thing that is worth noting is that ,COMMA  even though you had a double matrix ,COMMA  you still print it as %f as though you were printing a float and the language will take care of printing the double precision .PERIOD  So ,COMMA  here is the loop to print the columns of a row .PERIOD  Once you are finished with the row ,COMMA  you would a print a new line .PERIOD  Because ,COMMA  then you can start at the beginning of the next line for the next row ,COMMA  so here is the loop .PERIOD  So ,COMMA  what the loop does is prints the i th row ,COMMA  row starting from 0 and ending in 4 and for each row print each of the 6 columns 0 through 5 .PERIOD  Now ,COMMA  at the end of the each row you would print a new line .PERIOD  So ,COMMA  here is the code to print a matrix ,COMMA  the lesson here is how to access the i j th element .PERIOD  You would access it as mat[i][j] .PERIOD  Now ,COMMA  the dual operation of printing is of course ,COMMA  reading in the input from the user ,COMMA  we have done it using scanf .PERIOD  So ,COMMA  let us try to use scanf to read in elements which are input by the user .PERIOD   Now ,COMMA  one of the things with the scanf is that the argument to which variable we have to read it in ,COMMA  we usually give and x ,COMMA  if you have to read it into a particular variable x when we will say scanf whatever format it is and then say and x ,COMMA  which says the address of x .PERIOD  Similarly ,COMMA  I could guess that in order to read to the i j th element of a matrix ,COMMA  I would need &mat[i][j] and that is actually correct ,COMMA  you do not need a parentheses here to right .PERIOD   So ,COMMA  let us look at the code and the code looks exactly as the print routine ,COMMA  except that we are now scanning a number .PERIOD  So ,COMMA  you have an outer loop which will go through all the rows and then in inner loop which will go through the columns of the i th row and how do you scan .PERIOD  You says scanf(“%f” ,COMMA  &mat[i][j]) .PERIOD  So ,COMMA  remember if it was just a double variable instead of an array ,COMMA  you would have just said & of the variable name .PERIOD  Similarly ,COMMA  we have &mat[i][j] .PERIOD  Again ,COMMA  note that even though we have a double array ,COMMA  you read it in exactly as though it were a float array ,COMMA  using %f format .PERIOD  So ,COMMA  read in the i th row and i th row goes from 0 through 4 and for each row read the j th column ,COMMA  column goes from 0 to 5 .PERIOD  Now ,COMMA  the way this scanf works ,COMMA  the scanf with %f option will skip over the white space and it will skip over any white space .PERIOD  So ,COMMA  in effect what it means is that ,COMMA  if I had to enter a matrix of size 5×6 ,COMMA  I can enter it in multiple ways ,COMMA  I can enter it in the most natural way which is 0 ,COMMA  1 ,COMMA  2 ,COMMA  3 ,COMMA  4 ,COMMA  5 ,COMMA  6 ,COMMA  7 ,COMMA  8 ,COMMA  9 and so on .PERIOD  So ,COMMA  5 rows each row has is entered in a line and each line has 6 entries ,COMMA  so let us call this may be 10 and 11 .PERIOD  So ,COMMA  each row has 6 entries and there are 5 rows ,COMMA  this is a most natural way to enter it .PERIOD  But ,COMMA  as for as scanf is concerned any white space will be skip .PERIOD  So ,COMMA  instead I could just enter one number in one line .PERIOD  So ,COMMA  I could enter it one number per line and it put be read exactly in the same manner ,COMMA  that is a property of scanf .PERIOD   So ,COMMA  it really does not matter whether the entire input is given in 5 rows of 6 doubles or just 30 doubles each number in a single row by itself .PERIOD  So ,COMMA  that is you both of them are fine .PERIOD  We have seen how to print an array .PERIOD  We have seen how to read elements into an array .PERIOD  Now ,COMMA  let see how to initialize a multi-dimensional array .PERIOD   So ,COMMA  we want to initialize let us a 4 by 3 array in the following way ,COMMA  it should be 1 ,COMMA  2 ,COMMA  3 ,COMMA  4 ,COMMA  5 ,COMMA  6 ,COMMA  7 ,COMMA  8 ,COMMA  9 and 0 ,COMMA  1 ,COMMA  2 ,COMMA  let say this is the array that I want to enter .PERIOD  Now ,COMMA  we have seen initialization of one dimensional arrays ,COMMA  if I let say int b 3 how did we initialized ,COMMA  we could initialized it us 0 ,COMMA  1 ,COMMA  2 .PERIOD  So ,COMMA  we summary of this is that ,COMMA  it is a list of numbers separated by commas and the list is enclosed in curly braces ,COMMA  this is the case for a one dimensional array .PERIOD  So ,COMMA  it is natural to generalized the notation in the following way ,COMMA  if I have to initialize a 4 by 3 array ,COMMA  I can just say curly brace .PERIOD  And so here is a list of elements and each element is basically a row .PERIOD  So ,COMMA  what is a number here will be a row ?QUESTIONMARK  So ,COMMA  it will be a list of rows and each row being an somewhat like an array ,COMMA  each row will be given by a list .PERIOD  So ,COMMA  the array initialization on the right hand side is exactly the array that is shown here .PERIOD  So ,COMMA  it will come out to 1 ,COMMA  2 ,COMMA  3 ,COMMA  4 ,COMMA  5 ,COMMA  6 ,COMMA  7 ,COMMA  8 ,COMMA  9 ,COMMA  0 ,COMMA  1 ,COMMA  2 .PERIOD  So ,COMMA  the notation is consistent and it is a generalization of the one dimensional array notation .PERIOD   So ,COMMA  there are some initialization rules ,COMMA  similar to what we are seen for one dimensional arrays ,COMMA  values are given row wise .PERIOD  The row number 0 is the first entry ,COMMA  number of columns needs to be specified ,COMMA  we need to know how many columns there are ?QUESTIONMARK  Now ,COMMA  value of each row is enclosed in {} and the number of values in a row ,COMMA  may be less than the total number of columns ,COMMA  this is allowed .PERIOD  This was similar to how we saw that ,COMMA  even though you had declared the size of an array ,COMMA  you could give one dimensional array ,COMMA  you could be less than that number of values as the initial values .PERIOD  The remaining values will just be 0 ,COMMA  same case occurs in the multidimensional array .PERIOD  So ,COMMA  let us watch an example ,COMMA  if I have an array a number of rows unspecified ,COMMA  number of columns 3 .PERIOD  But ,COMMA  each row let say I have 3 rows ,COMMA  each row does not have exactly 3 elements ,COMMA  one the row 0 has just 1 element ,COMMA  row 1 has only 2 elements and so on ,COMMA  it will be initialized as 1 0 0 because in row 0 I have given only 1 element .PERIOD  So ,COMMA  that will be the first and the remaining will be 0 ,COMMA  2 3 .PERIOD  So ,COMMA  I am short of 1 element that would be 0 ,COMMA  3 4 5 I have 3 columns and I have given 3 values .PERIOD  So ,COMMA  it will be initialized as 3 4 5 .PERIOD  So ,COMMA  the initialization on the left hand side results in the matrix on the right hand side ,COMMA  here is all initialization words .PERIOD   Now ,COMMA  let us look it access mechanism in somewhat greater detail .PERIOD  So ,COMMA  let us ask the following question ,COMMA  instead of matrix 5×6 I have return and function to read a matrix of size 5×6 ,COMMA  can I give a 6 by 5 matrix ?QUESTIONMARK  So ,COMMA  this is a matrix of 5 rows ,COMMA  6 columns each instead can I give a matrix of 6 rows 5 columns each ,COMMA  the total number of elements is till 30 would it be the same or would it be even a matrix of [10][3] ,COMMA  10 rows 3 columns each all of these have 30 elements .PERIOD  Now ,COMMA  as for as c is concern are all these the same ,COMMA  the answer is that no ,COMMA  it is not correct neither it should be .PERIOD  But ,COMMA  we will say that the answer depends on the way the array elements are accessed .PERIOD  So ,COMMA  will see this in greater detail .PERIOD   So ,COMMA  in order to motivate there let us introduce the problem of passing an array to a function and let us look at the issue in greater detail .PERIOD  Suppose ,COMMA  I want to take two dimensional array of type double [5][6] and print the sum of entries in each row .PERIOD  So ,COMMA  this is similar to a matrix program ,COMMA  that we have seen much ,COMMA  much before given a 2D matrix ,COMMA  for each row you have to find the sum of elements in each row and just print it out .PERIOD  So ,COMMA  in mathematics this is often called marginal's .PERIOD  So ,COMMA  let us just compute the marginal's ,COMMA  we have a function void marginal's ,COMMA  it takes matrix [5][6] ,COMMA  it has int i j ,COMMA  i is over the rows ,COMMA  j is over the columns and I also have a row sum variable to keep track of the sum of a row .PERIOD  So ,COMMA  what do I do ,COMMA  I have an outer loop which goes through all the rows ,COMMA  for each row I initialize the sum to 0 .PERIOD  Now ,COMMA  for each row I have to some all the elements in the i th row .PERIOD  So ,COMMA  I have to sum all the elements in the columns j 0 through 5 of matrix i j .PERIOD  So ,COMMA  I will go through the elements and add them into the row sum .PERIOD  Once I am done with the last column of row i ,COMMA  I have the row sum for row i and I will print that .PERIOD  So ,COMMA  this printf is happening in the loop for row height .PERIOD  Now ,COMMA  let us look at a slight modification ,COMMA  we say that instead of printing 5 rows I currently have only 3 rows of entries available .PERIOD  So ,COMMA  can you print me the row sum of the first 3 rows ,COMMA  instead of all the 5 rows .PERIOD  Now ,COMMA  this is very simple let us just modify the function a little bit ,COMMA  it takes an additional parameter saying ,COMMA  how many of the initial rows do you want me to sum ?QUESTIONMARK  So ,COMMA  that is an additional parameter ,COMMA  let us call it n rows .PERIOD   So ,COMMA  here are the number of rows for which I have to take this sum .PERIOD  And that function is a very small modification of the function that we have already seen .PERIOD  The difference is that ,COMMA  we now take n rows which is like ,COMMA  how many rows do we have to add and then for i = 0 ,COMMA  earlier I would go from i = 0 to 5 .PERIOD  Because ,COMMA  the matrix had 5 rows ,COMMA  but in now I will just say I will go up to n rows and the logic is the same as before ,COMMA  nothing else changes .PERIOD  So ,COMMA  his strange things he completely ignores the number of columns ,COMMA  for as for as the c languages concern ,COMMA  if you have a 2D array ,COMMA  the number of columns is crucially it has to be specified .PERIOD  But ,COMMA  the number of rows is not really important .PERIOD  So ,COMMA  c completely ignores the 5 part ,COMMA  the number of rows .PERIOD  Now ,COMMA  this means that we could pause less than 5 rows into the same function .PERIOD  Since ,COMMA  we are not checking for example ,COMMA  that encloses <= 5 .PERIOD   So ,COMMA  let see an example here is the completely surprising example ,COMMA  that this code is the same as before ,COMMA  though only difference is highlighted in read ,COMMA  that I have now omitted what is the number of rows ?QUESTIONMARK  Please relate this back to codes ,COMMA  that we used to right for arrays .PERIOD  Earlier ,COMMA  I said that for an array ,COMMA  you do not need to specify the number of elements in the array ,COMMA  when you write a function taking an array as parameter I could just say int arr and then empty pair of [ ] with no size in between .PERIOD  So ,COMMA  we have a similar phenomenon for 2D arrays ,COMMA  except you are not allowed to omit both rows and columns ,COMMA  you have to specify the number of columns .PERIOD  But ,COMMA  you have the flexibility that you are allow to omit the number of rows .PERIOD  So ,COMMA  the number of rows is not important ,COMMA  you could omit it and just given empty pair of brackets and the code will work as before .PERIOD  So ,COMMA  this means that the above program actually works for any k × 6 matrix ,COMMA  where k could be the number of rows .PERIOD  And this is because c does not care about the number of rows ,COMMA  only about the number of columns and y is this asymmetry ,COMMA  why is said that it case about the number of rows ,COMMA  but not the number of columns ,COMMA  will see this using the two dimensional array addressing .PERIOD   Let say that I have return code for computing marginal's and it takes these parameters double mats empty pair .PERIOD  So ,COMMA  the number of rows is un specify ,COMMA  the number of columns is 6 and then it takes an additional parameter n rows ,COMMA  which says how many rows do should I add .PERIOD  And then I am calling this function ,COMMA  suppose I have define the function elsewhere and I am calling this function from name .PERIOD  So ,COMMA  I declare a matrix 9 by 6 and then I will call marginal's on just the first 8 rows not the 9th row .PERIOD  So ,COMMA  I passes subset of the rows ,COMMA  this is 5 .PERIOD  Because ,COMMA  I have declared as matrix of size 9 by 8 ,COMMA  but I am passing only 8 rows to marginal's and that is fine ,COMMA  I can passes subset of the rows .PERIOD  What is definitely not fine is ,COMMA  suppose you declare a matrix of size 9 by 6 and say that I want you to find the marginal's of the first 10 rows ,COMMA  then this is unsafe .PERIOD  Because ,COMMA  it is true that the marginal's function does not really care about the number of rows .PERIOD  So ,COMMA  it will work for any k × 6 matrix .PERIOD  But ,COMMA  you cannot hope to pass arbitrary junk values to that matrix .PERIOD  For example ,COMMA  you have just declared a [9][6] matrix .PERIOD  Now ,COMMA  the 10th row of the matrix is basically invalid .PERIOD  So ,COMMA  if you pass it you could expect your code to receive a segmentation evaluation ,COMMA  when your run the code .PERIOD  So ,COMMA  when it processes the 10th row what it ,COMMA  it was basically cross the limits of the array .PERIOD  So ,COMMA  the code may have a segmentation evaluation .PERIOD  So ,COMMA  note the difference between saying that it could marginal's could work with arbitrary k × 6 matrices ,COMMA  it is till true that if you pass junk values to the matrix ,COMMA  your code will crash .PERIOD  If your code is a valid matrix ,COMMA  then you can pass an arbitrary number of rows inside the matrix .PERIOD  So ,COMMA  the summary is that as with one dimensional arrays ,COMMA  you should allocate your array and stay within the limits allocated ,COMMA  within those limits the number of rows does not matter .PERIOD  But ,COMMA  it does not mean that you can over suit the limit and hope that your code will work ,COMMA  it may not and it can crush .PERIOD  In this video ,COMMA  we will look at the relation between Multi-dimensional Arrays and Pointers .PERIOD   And this is by for one of the trickiest topics in the entire course .PERIOD   And you can code multidimensional arrays without actually understanding the exact relation between multidimensional arrays and pointers .PERIOD  But ,COMMA  understanding this gives you a better grasp of how C treats multidimensional arrays .PERIOD  So ,COMMA  we will now discuss how pointer arithmetic works with two dimensional matrixes .PERIOD  Because ,COMMA  as soon as we had discussed one dimensional matrix ,COMMA  the next thing we did was we discussed the relation between pointers and 1D arrays .PERIOD  So ,COMMA  let us try to see what is the relation between pointers and 2D arrays .PERIOD  Now ,COMMA  this is more complicated than it looks at first sight .PERIOD  And you can do a lot of matrix computations by not understanding this .PERIOD  Except that ,COMMA  understanding this gives you a better grasp for what is happening .PERIOD  We have seen that ,COMMA  when you declare a 2D array as a parameter to a function ,COMMA  then you should specify the number of columns ,COMMA  but not the number of rows .PERIOD  So ,COMMA  let us look at a function which makes an identity matrix ,COMMA  an identity matrix is a matrix that has one along it is diagonal and zero every where else .PERIOD  So ,COMMA  we have void make_identity10(double m[ ][10]) .PERIOD  Since ,COMMA  identity matrixes are square matrixes ,COMMA  this essentially says that the code will work for a 10 × 10 matrixes .PERIOD  Then ,COMMA  I have a for loop going from i  =  0 to 10 and a for loop going from ,COMMA  for the columns going from j  =  0 to 10 .PERIOD  And the code just says that ,COMMA  if I am at a diagonal element that is i  =  j ,COMMA  then m i j is 1 for all other elements ,COMMA  m i j is 0 .PERIOD  So ,COMMA  this creates a matrix of size 10×10 .PERIOD   Now ,COMMA  this is a very strange code .PERIOD  Because ,COMMA  it is a function that essentially makes exactly one matrix .PERIOD  It would have been nice ,COMMA  if I would have a function that can create arbitrary size identity matrixes .PERIOD  For example ,COMMA  if I wanted a 20×20 matrix ,COMMA  it looks like ,COMMA  I have to write another function make_identity20(double m[ ][20]) ,COMMA  the rows are unspecified ,COMMA  the number of columns is 20 .PERIOD   So ,COMMA  let us go back to ,COMMA  how do I address the i j th element in a 2D array ?QUESTIONMARK  Now ,COMMA  we can view it as a 3 × 5 matrix of integers ,COMMA  something like this .PERIOD  So ,COMMA  it may be an array 0 1 2 3 4 ,COMMA  that is row 0 and 5 6 7 8 9 ,COMMA  that is row 1 ,COMMA  10 11 12 13 14 ,COMMA  that is row 2 .PERIOD  So ,COMMA  this is the matrix view which is 3 rows ,COMMA  each with 5 columns ,COMMA  this is the standard view .PERIOD  But ,COMMA  internally C views this as a long linear array of size 15 ,COMMA  in what is known as the row major form .PERIOD  So ,COMMA  let us just look at what it is ?QUESTIONMARK  Internally ,COMMA  C looks as loops at the array in the following form .PERIOD  It is basically C 0 through 14 ,COMMA  lead out in a single row .PERIOD  So ,COMMA  this is the row major view ,COMMA  it is called row major ,COMMA  because first all elements of row 0 will be lead out ,COMMA  then all elements of row 1 will be lead out .PERIOD  And finally ,COMMA  all invents of the lost row will be lead out .PERIOD  But ,COMMA  it is lead out as a linear way .PERIOD  Now ,COMMA  the natural question to ask is ,COMMA  in that case is a 2D array really at the heart of just a 1D array .PERIOD  So ,COMMA  the difference between a 2D array seen in the row major view point and an actual one dimensional array will come in the pointer arithmetic .PERIOD   So ,COMMA  as I just mentioned there are two views ,COMMA  the matrix view and the row major view and both views are correct .PERIOD  So ,COMMA  if I have the matrix view ,COMMA  mat is a pointer to the first row .PERIOD  So ,COMMA  mat + 1 will be a pointer to the second row and mat + 2 will be a pointer to the third row .PERIOD  So ,COMMA  row number 3 or row indexed with 2 ,COMMA  in the row major view point ,COMMA  here is the difference mat points to the first row and mat + 1 should point to the second row .PERIOD  So ,COMMA  we cannot say that mat is pointing to the first element here and mat + 1 should point to therefore 1 .PERIOD  Now ,COMMA  that is not what happens ?QUESTIONMARK  It has to be consistent with the matrix view .PERIOD  So ,COMMA  the pointer arithmetic mat + 1 should point to the same element ,COMMA  regardless of whether you are looking at it using the matrix view point or whether you are looking at it using the row major view point .PERIOD  So ,COMMA  mat + 1 will still point to 5 and mat + 2 will still point to 10 .PERIOD  So ,COMMA  these two view points are consistent .PERIOD   Now ,COMMA  here is the difference with one dimensional arrays .PERIOD  So ,COMMA  we have just repeated the viewpoints here ,COMMA  the matrix view point and the row major view point .PERIOD  Now ,COMMA  had mat actually being a one dimensional array ,COMMA  mat would point to the first element in the array .PERIOD  Therefore ,COMMA  mat + 1 which should point to the second element in the array .PERIOD  So ,COMMA  that is not what happens ,COMMA  it is actually the row major representation of a 2D array and mat + 1 should skip exactly 5 elements ,COMMA  because that is the size of the column .PERIOD  So ,COMMA  mat + 1 should skip 5 elements and go to the element mat 1 0 .PERIOD  So ,COMMA  here is we just of why you need to know the number of columns ?QUESTIONMARK  Because ,COMMA  in the row major view point I have to implement mat + 1 .PERIOD  So ,COMMA  I have to say how many elements should I skip ,COMMA  in order to get to the first element of the second row ?QUESTIONMARK  And that number is exactly the number of columns in the array .PERIOD  So ,COMMA  the number of columns in the array is 5 .PERIOD  So ,COMMA  to get to mat plus from ,COMMA  from mat ,COMMA  I would to skip 5 elements .PERIOD  Similarly ,COMMA  to get to mat + 2 from mat + 1 ,COMMA  I would to skip exactly 5 elements .PERIOD  So ,COMMA  this is the reason why the number of columns is an important information .PERIOD  Because ,COMMA  that tells me in the row major representation ,COMMA  how many elements do I have to skip in order to get to the correct entry in this second row or third row ?QUESTIONMARK  So ,COMMA  here is the pointer arithmetic for the row major representation .PERIOD  And notice that ,COMMA  this is considerably difference from the pointer arithmetic for a 1D array ,COMMA  in a 1D array ,COMMA  array + 1 will go here ,COMMA  the first element of the array .PERIOD   Now ,COMMA  can you try to guess what will be the type of mat ?QUESTIONMARK  So ,COMMA  here are four candidates and let us go through them to see ,COMMA  what is the most likely candidate ?QUESTIONMARK  And we will see this in a greater detail ,COMMA  int *mat ,COMMA  mat is a pointer to int .PERIOD  Now ,COMMA  we have seen that ,COMMA  that is approximately an array of integers and that is definitely incorrect .PERIOD  Because ,COMMA  this is supposed to be a 2D array ,COMMA  not an array of integers .PERIOD  Pointer to pointer to mat ,COMMA  we have an seen that so far and that looks like a likely candidate .PERIOD  So ,COMMA  what about the third and the fourth ?QUESTIONMARK  The third and the fourth looks confusingly similar .PERIOD  What do they mean ?QUESTIONMARK  So ,COMMA  here is a hint ,COMMA  the array indexing operator [ ] has higher precedence than * ,COMMA  the dereferencing operator .PERIOD  So ,COMMA  in this case the first says that ,COMMA  so what is this mean ?QUESTIONMARK  The first declaration is actually int *mat[5] and the second declaration is int (*mat)[5] .PERIOD  So ,COMMA  what does this say ?QUESTIONMARK  So ,COMMA  let us compare with the standard declaration like float arr[5] .PERIOD  This means ,COMMA  that array is arr is an array of size 5 ,COMMA  each entry of type float .PERIOD  Similarly ,COMMA  this means the matrix mat is an array of size 5 ,COMMA  each entry being a pointer to integer .PERIOD  So ,COMMA  it will be some matrix like this ,COMMA  it has five elements and each of them is a pointer .PERIOD  So ,COMMA  here is the view point for declaration 3 .PERIOD  Now ,COMMA  what about declaration 4 ?QUESTIONMARK   So ,COMMA  there let us see this ,COMMA  so let us compare it with a standard declaration like ,COMMA  let us take a standard declaration like int arr[5] .PERIOD  Again ,COMMA  this says that arr is an integer array of size 5 .PERIOD  So ,COMMA  it contains 5 elements ,COMMA  each of type int correspondingly ,COMMA  what this means is that *mat is an integer array .PERIOD  So ,COMMA  here is an integer array containing 5 elements ,COMMA  these are integers .PERIOD  Now ,COMMA  this means that if we deference mat .PERIOD  So ,COMMA  mat is a pointer to an array of size 5 and this is exactly the actual representation of a two dimensional array .PERIOD  So ,COMMA  notice the difference between these two representations ,COMMA  the first says that mat 5 ,COMMA  mat is an array of 5 entries and each entries is a pointer to an int ,COMMA  so it look like this .PERIOD  So ,COMMA  it is an array of 5 pointers to int .PERIOD  The lost declaration says that ,COMMA  *mat is an array of int of size 5 .PERIOD  So ,COMMA  mat is a pointer to an array of integers of size 5 .PERIOD  So ,COMMA  here is the difference and we will argue that the fourth definition is essentially what we want and we will see this in a greater detail .PERIOD    So ,COMMA  let us understand these type expressions in greater detail and we will see this in the further video also .PERIOD  We particularly pick on one representation here .PERIOD  So ,COMMA  we have argued that the 2D array is similar to the last declaration here ,COMMA  I eliminated the most obviously wrong declaration ,COMMA  which is in *mat ,COMMA  that is basically a one dimensional array .PERIOD  So ,COMMA  I have just eliminated that ,COMMA  we will examine all the others .PERIOD  What I have just said is that a 2D array is similar to the last declaration .PERIOD  But ,COMMA  even the previous two declarations do make sense .PERIOD  And there may be situations ,COMMA  where you need to use such variables .PERIOD  Let us examine them in greater detail .PERIOD   So ,COMMA  let us look at the first one which is int **mat and it means all of the following equivalent ways .PERIOD  So ,COMMA  all of these are an equivalent ways of looking at the same thing .PERIOD  You could say that a matrix of type int ** or you could say that matrix is a pointer to a pointer to an int .PERIOD  Since ,COMMA  arrays are pointers approximately ,COMMA  you could also say that mat is an array of pointers to int and this is also commonly called array of arrays .PERIOD  So ,COMMA  you have mat int ** .PERIOD  Now ,COMMA  this is a pointer to an array of integers .PERIOD  Now ,COMMA  every pointer to an int is essentially a pointer to an array ,COMMA  you can look at it like that .PERIOD  So ,COMMA  you can say that mat will point to an array of pointers and this array of pointers ,COMMA  each of them may point to a different array .PERIOD  So ,COMMA  you dereference mat once ,COMMA  you will get a pointer to an integer and again you deference once more ,COMMA  you will get the actual array .PERIOD  So ,COMMA  what happens when I do mat + 1 ?QUESTIONMARK  It will go to the second entry in the array of integers .PERIOD  Now ,COMMA  that may be a different array all together .PERIOD  So ,COMMA  mat[0][0] is similar to **mat ,COMMA  this is just a way ,COMMA  address arithmetic works .PERIOD  And both of them are addresses ,COMMA  both of them are pointing to this location ,COMMA  both of them mean the content of this location .PERIOD  Similarly ,COMMA  *(*mat + 1) = mat[0][1] .PERIOD  So ,COMMA  in the case of one dimensional arrays we have just mentioned the equation that arr[i] is the same as *(arr + i) .PERIOD  And what we are saying here essentially is that ,COMMA  mat[i][j] is the same rule applied twice .PERIOD  So ,COMMA  I could say mat[i] = *(mat + i) .PERIOD  So ,COMMA  that will give me an array and then ,COMMA  I need the jth element of that .PERIOD  So ,COMMA  you can again do *(*(mat + i) + j) .PERIOD  So ,COMMA  these are two ways of looking at this array .PERIOD   So ,COMMA  mat + 1 will be the next element in the pointer to integers and it is the same as and when you deference it ,COMMA  you will get another array .PERIOD  So ,COMMA  in order to get the first element of this array ,COMMA  I could say mat[1][0] or using the pointer notation ,COMMA  I have *(* mat + 1) ,COMMA  these are the same and similarly for other elements of the array .PERIOD  So ,COMMA  one of the advantages of this kind of int **mat is that ,COMMA  I have freedom in both dimensions .PERIOD  You can see these as the rows of a matrix and these as the columns of a matrix .PERIOD  If you see that ,COMMA  then you can see that I have a lot of freedom here ,COMMA  first of all the number of rows is not limited .PERIOD  Because ,COMMA  it is just int **mat ,COMMA  I could have any number of rows here .PERIOD  Now ,COMMA  another main advantage and the reason why this is somewhat popular is that ,COMMA  the length of row 0 need not be the same as the length of row 1 ,COMMA  these are just pointers to integers .PERIOD  So ,COMMA  the first pointer to integer may be pointing to a row of size 2 ,COMMA  the second pointer may be pointing to a row size 3 and so on .PERIOD  So ,COMMA  the row lengths need not be the same .PERIOD  So ,COMMA  think of an array where row 0 is two elements long and row 1 has three elements in the row and so on .PERIOD  So ,COMMA  if you have extremely ragged arrays ,COMMA  then int **mat is a nice representation to take .PERIOD   In this video ,COMMA  we will look at one of the other expressions .PERIOD   In particular ,COMMA  we will look at the third one ,COMMA  which is int *mat[5] .PERIOD  So ,COMMA  if I had written int arr[5] ,COMMA  this means that array is an integer array of size 5 .PERIOD  So ,COMMA  similarly I can read int (*mat)[5] as star mat is an integer array of size 5 .PERIOD  So ,COMMA  in other words mat is a pointer to an array of size 5 ,COMMA  array of int of size 5 .PERIOD  We can look at in this way and let us see ,COMMA  what this really means .PERIOD   So ,COMMA  we can picturize in this way ,COMMA  if you dereference mat that is ,COMMA  if you take *mat ,COMMA  you will get some array of size 5 of integers .PERIOD  Now ,COMMA  let us look at the pictures .PERIOD  So ,COMMA  mat may be pointing to some array of size 5 ,COMMA  which means that the next subsequent location will be another array of size 5 ,COMMA  if it is a valid address .PERIOD  Now ,COMMA  for the first location we can refer to it as mat[0][0] or it is the same as (*mat)[0] or it is the same as *(*mat) .PERIOD  So ,COMMA  remember the general formula that we had was ,COMMA  if I have the notation mat [i][j] ,COMMA  I can look it up as *mat .PERIOD  So ,COMMA  first let me translate mat [i] .PERIOD  So ,COMMA  that we have seen that this is simply dereferencing mat + i ,COMMA  that address .PERIOD  So ,COMMA  now we have one more subscript .PERIOD  So ,COMMA  in order to decode that ,COMMA  I will do the formula for a second time ,COMMA  so ,COMMA  this + j .PERIOD  So ,COMMA  remember that this is the general form .PERIOD  So ,COMMA  similarly if you have mat[0][0] ,COMMA  I can write it as *mat[0] or I can write it as  *mat ,COMMA  because i and j are both 0s .PERIOD  So ,COMMA  this is just a special case of the general form ,COMMA  mat + 1 points to the second row of 5 integers .PERIOD  So ,COMMA  remember that the type of mat is ,COMMA  it is a pointer to an array of size 5 of integers .PERIOD  So ,COMMA  the next pointer location when you do mat + 1 goes to the next array of size 5 .PERIOD  So ,COMMA  mat + 1 is another array of size 5 .PERIOD  In particular ,COMMA  it may be the second row of a two dimensional array ,COMMA  where you have 5 columns ,COMMA  mat + 2 will be similarly the third row and so ,COMMA  on .PERIOD   So ,COMMA  mat[2][3] for example ,COMMA  if you apply the formula ,COMMA  it will come out to be *(*(mat + 2 + 3) .PERIOD  Notice that ,COMMA  all boxes are allocated in this example .PERIOD   Now ,COMMA  mat + i points to the i th row of 5 integers and *mat is an array of size 5 ,COMMA  this is what we have seen .PERIOD  Now ,COMMA  you can in order to get comfortable with a notation ,COMMA  you can look at these formulas and try to decode .PERIOD  Like for example ,COMMA  you could try ,COMMA  what is the arithmetic way of representing the location mat[1][1] .PERIOD  So ,COMMA  you can see that it is definitely the first case ,COMMA  where it is *(*mat + 1) .PERIOD  So ,COMMA  that is definitely true ,COMMA  because this is just the formula that we just now discussed .PERIOD  But ,COMMA  if I do not decode both the subscripts ,COMMA  I decode only one subscript using pointer arithmetic and leave the other subscript as it is ,COMMA  then I know that it is also equivalent to 3 .PERIOD  So ,COMMA  3 is also another way of representing it and tried to convince yourself ,COMMA  why the second is not correct ?QUESTIONMARK   Now ,COMMA  let us understand this in somewhat more detail by considering a tricky question ,COMMA  we have a function int search .PERIOD  So ,COMMA  here is a function int search ,COMMA  int a ,COMMA  int n ,COMMA  int key .PERIOD  So ,COMMA  what does this function do ?QUESTIONMARK  It will search for key inside array a of size n ,COMMA  a is an array with n elements and you have to search for it ,COMMA  search inside for it for the element key .PERIOD  If it is found ,COMMA  then you return the index where it is found ,COMMA  if it is not found ,COMMA  you return -1 .PERIOD  Because ,COMMA  -1 can never be a valid index in an array .PERIOD  So ,COMMA  when you return -1 ,COMMA  you know that it is not present in the array .PERIOD  Now ,COMMA  can we use this ,COMMA  a function to search inside a 2D array .PERIOD  So ,COMMA  we are using a one dimensional function ,COMMA  in order to search inside a 2D array .PERIOD  Now ,COMMA  the basic idea is that we can search row by row ,COMMA  each row of a two dimensional array is somewhat like a one dimensional array .PERIOD  So ,COMMA  we will call search multiple times ,COMMA  once for each row in the array ,COMMA  until we either find it or we are done with all rows .PERIOD  The algorithm is ,COMMA  search it row by row .PERIOD  Now ,COMMA  the question is which of the following is actually doing that ?QUESTIONMARK  So ,COMMA  we have three expressions ,COMMA  search(mat + 1 ,COMMA  5 ,COMMA  key) ,COMMA  search *(mat + 1 ,COMMA  5 ,COMMA  key) and which of these will do it .PERIOD  Now ,COMMA  let us look at second ,COMMA  mat is pointing to an array of size 5 .PERIOD  Therefore ,COMMA  mat + 1 is also a pointer to an array of size 5 ,COMMA  when we dereference that ,COMMA  we get an array of size 5 ,COMMA  .PERIOD  So ,COMMA  that is the right type .PERIOD  So ,COMMA  the first argument to search the second statement will be an array of size 5 .PERIOD  So ,COMMA  therefore ,COMMA  the second call is valid .PERIOD  What about the third call ?QUESTIONMARK  Again ,COMMA  mat of 1 is simply *(mat + 1) ,COMMA  if you translated into pointer arithmetic .PERIOD  So ,COMMA  the third line is just the second line in discussed ,COMMA  instead of using pointer arithmetic notation ,COMMA  we are using subscript notation so ,COMMA  2 and 3 .PERIOD  In fact ,COMMA  are equivalent ,COMMA  so ,COMMA  2 is correct .PERIOD  Therefore ,COMMA  3 is also correct .PERIOD  Now ,COMMA  think about why statement 1 does not make sense .PERIOD  So ,COMMA  mat + 1 is actually a pointer to an array of size 5 .PERIOD  Therefore ,COMMA  it is not the right type ,COMMA  it is not an array of size 5 ,COMMA  it is a pointer to an array of size 5 .PERIOD  So ,COMMA  it is not the correct type and therefore ,COMMA  the first call is not valid ,COMMA  the first option is a big delicate .PERIOD  So ,COMMA  I would encourage you to stop here and think about ,COMMA  why it is not correct ?QUESTIONMARK   Now ,COMMA  let us utilize the function in order to write our routine to search inside a 2D array .PERIOD  So ,COMMA  once again we are utilizing a one dimensional search routine in order to search inside a two dimensional array .PERIOD  So ,COMMA  let us say that ,COMMA  we are given this int search function which can search inside a one dimensional array for a key .PERIOD  Now ,COMMA  I will write a 2D function ,COMMA  a function which can search inside a 2D array .PERIOD  Now ,COMMA  the correct declaration of the function would be int *mat[5] ,COMMA  int n rows int key ,COMMA  n rows is going to be the number of rows in the array .PERIOD  Key is the key ,COMMA  we are searching for and int *row and int *col .PERIOD  So ,COMMA  I want to focus on the first argument and the last two arguments .PERIOD  The first argument says that ,COMMA  I will pass you a pointer to an array of size 5 ,COMMA  this is exactly what we should do because ,COMMA  then a two dimensional array can be just traverse by using mat + 1 ,COMMA  mat + 2 and so ,COMMA  on .PERIOD  So ,COMMA  here is the correct type declaration that should accompany the 2D search routine ,COMMA  n rows is just the number of rows ,COMMA  key is the key .PERIOD  Why are we saying ,COMMA  int *row and int * column ?QUESTIONMARK  We want to return two things ,COMMA  if a key is found ,COMMA  we want to return it is row index and it is column index .PERIOD  Now ,COMMA  unfortunately a function can return only one value .PERIOD  So ,COMMA  how will you return two values ?QUESTIONMARK  So ,COMMA  we will say that we will not return two values .PERIOD  What we will do is ,COMMA  give me a pointer and I will write in that address ,COMMA  the correct row and the correct column ,COMMA  if it is found .PERIOD  Here is a standard way in C ,COMMA  where you might encounter a situation where you need to return two values and instead ,COMMA  what you pass are the pointers .PERIOD  The algorithm is what we have discussed before .PERIOD  You check each row of mat using the function search .PERIOD  If search returns success ,COMMA  then that will be the column index in that row ,COMMA  because search is searching inside a 1D array .PERIOD  So ,COMMA  wherever it returns that will be the column index in the i th row .PERIOD  So ,COMMA  now you say that the column index is that and the row index is the i that I had .PERIOD  If it is not found in any of the rows ,COMMA  you return -1 .PERIOD   So ,COMMA  let us write the function ,COMMA  we have an i to go traverse for the rows ,COMMA  we have found = 0 ,COMMA  this will be the flag indicating whether the key is found or not .PERIOD  And initially ,COMMA  you just set *row = -1 and *col = -1 to indicate that I am not yet found it ,COMMA  found the key .PERIOD  Now ,COMMA  you write the main loop which is going through the rows one by one .PERIOD  You start with row 0 and you go on ,COMMA  until both these conditions are true .PERIOD  That is ,COMMA  you have not seen all the rows ,COMMA  i is less than n rows and you have not found the key ,COMMA  so ,COMMA  not found .PERIOD  What should you do to the i th row ?QUESTIONMARK  I should say that search the i th row .PERIOD  So ,COMMA  the way I say it is ,COMMA  search *(mat + i) .PERIOD  This is the same as saying search mat[i ,COMMA  5] ,COMMA  which is the number of columns and key ,COMMA  which is the key that I want to search for ,COMMA  the return value is stored in *call .PERIOD  So ,COMMA  you dereference call and store the return value there .PERIOD  Now ,COMMA  search can return either you if the key is found ,COMMA  it will return the correct column index or it will return -1 .PERIOD  So ,COMMA  you just check for that ,COMMA  if *col is a non-negative number ,COMMA  then you say that it has been found .PERIOD  So ,COMMA  you say that the row = i ,COMMA  So ,COMMA  *row is i and found is now 1 .PERIOD  So ,COMMA  at the next iteration you will exit out of the loop ,COMMA  because you have found the key .PERIOD  And then ,COMMA  the last statement in the loop will be just to increment the i variable .PERIOD  Finally ,COMMA  if you have done with all the rows and if you have exited out of the while loop ,COMMA  you check whether you exited out of the while loop ,COMMA  because you exhausted all the rows .PERIOD  So ,COMMA  there are two conditions to exit the while loop ,COMMA  one is i >= n rows ,COMMA  that is one condition .PERIOD  The second is that found = 1 ,COMMA  if you exited because ,COMMA  found =1 ,COMMA  then you can return the correct value without any problem .PERIOD  If you exited before ,COMMA  if all the rows were exhausted and you still did not find the key ,COMMA  then you have to say that column is -1 .PERIOD  So ,COMMA  here is a brief code which will do this .PERIOD  So ,COMMA  this code utilizes our understanding of two dimensional arrays as basically an pointer to an array of size 5 and here is why the number of columns is important .PERIOD  Because ,COMMA  in order to do mat + 1 correctly ,COMMA  we need to know how many bytes to skip and this is crucially depended on the number of columns .PERIOD  The number of rows actually does not matter .PERIOD  Because ,COMMA  you can keep on incrementing the rows as long as the array is valid .PERIOD  The number of columns is important ,COMMA  because that is how you get to the next row .PERIOD   In this video will look at the last possibility with respective multi-dimensional arrays in pointers ,COMMA  this is known as an array of arrays .PERIOD   In order to understand this ,COMMA  let us just look at something we are comfortable with ,COMMA  if I had just a float arr[10] elements ,COMMA  then how would I read this ,COMMA  I will say that array is arr is an array of 10 floats .PERIOD  So ,COMMA  this is how I would read it ,COMMA  if I have more complicated declaration like char* as strings .PERIOD  So ,COMMA  notice that the precedence for this [ ] ,COMMA  is higher than that of the precedence for * .PERIOD  So ,COMMA  this would actually be read as strings is an array of 7 character stars .PERIOD  So ,COMMA  that is how it could be read ,COMMA  because 7 would bind closer to strings .PERIOD  So ,COMMA  strings will become in array of size 7 and what type is it ,COMMA  it is char * .PERIOD  So ,COMMA  you replace float with char * and it is roughly the same phenomenal .PERIOD  So ,COMMA  the pictorially you can think of it like this .PERIOD  So ,COMMA  you have 7 cells in strings and each entry is a char * .PERIOD  So ,COMMA  each entry is a character pointer ,COMMA  you can think of it as a string ,COMMA  you can think of it is a character array whatever .PERIOD  So ,COMMA  here is the pictorial representation .PERIOD  Let us look at why we would need such as structure and what is the advantage of it ?QUESTIONMARK  This is very popular structure almost as popular as two dimensional arrays themselves .PERIOD   So ,COMMA  let us look at what it means for when we allocate character* an array of arrays .PERIOD  So ,COMMA  we may want to let say store the names of several movies .PERIOD  And one of the things is the there is no maximum limit to the name of a movie and it can be as long as we want it can be as short as you want and suppose you want to store all of these is in a data .PERIOD  So ,COMMA  let say that we have char *movies and I declare it as an array of arrays and it contains the first array is Don 2 ,COMMA  the second is Ra .PERIOD one and .PERIOD  So ,COMMA  on .PERIOD  Now ,COMMA  how will we do this ,COMMA  So ,COMMA  one way to do this is you say that movies is pointing to an array of arrays .PERIOD  So ,COMMA  movies + 1 is pointing to another character array ,COMMA  movies + 2 is pointing to another character array and .PERIOD  So ,COMMA  on .PERIOD  So ,COMMA  this is how we pictorially represent it ,COMMA  there are three entries and each entry is a character pointer .PERIOD  So ,COMMA  it can point to any character array what .PERIOD  So ,COMMA  ever .PERIOD  And here you see the distinct advantage of this kind of representation over 2D matrices .PERIOD  Why ?QUESTIONMARK  Because ,COMMA  in 2D matrices the whole point was the number of columns was fixed ,COMMA  that is how the pointer arithmetic worked .PERIOD  Here ,COMMA  the number of columns in one row can be different from the number of columns in another row .PERIOD  So ,COMMA  this representation is actually more useful when you have what are known as ragged arrays ,COMMA  that is one row and the next row may have very different lengths .PERIOD  And here is natural situation of storing strings when you need such a facility .PERIOD   So ,COMMA  let us see what this means type of the variable movies is a pointer to a pointer to character or char** .PERIOD  Now ,COMMA  type of *movies is char* ,COMMA  because you dereference one level and type of **movies is char .PERIOD  So ,COMMA  let us look at it once more .PERIOD  So ,COMMA  *movies has type char * .PERIOD  So ,COMMA  in particular *movies will be this array ,COMMA  it is pointing to this array .PERIOD  So ,COMMA  **movies will be what is it according to the general formula ,COMMA  this will be *(*(movies plus 0) + 0) .PERIOD  So ,COMMA  this will be the pointer arithmetic version of accessing this cell which contains D .PERIOD    But ,COMMA  instead you could also write movies[0][0] .PERIOD  Similarly ,COMMA  in order to get to the last cell here ,COMMA  you could say *(*(movies + 5)) ,COMMA  it is the particular application of the general formula .PERIOD   The second row will be *(movies + 1) again try to think in which ever notion your comfortable with .PERIOD  Because ,COMMA  you can also right this as movies 1 ,COMMA  you will get the same result .PERIOD  So ,COMMA  *(movies + 1) will come to the second row and you have *(*(movies + 1) that would come to the first element in the second row and .PERIOD  So ,COMMA  on .PERIOD  So ,COMMA  *(movies + 2) would be the third array in the structure and here is how you access different elements in the third array .PERIOD  So ,COMMA  notice the picture is slightly different here ,COMMA  even the representation suggest that ,COMMA  these rows need not be contiguous in memory .PERIOD  So ,COMMA  then location after this row n's need not be this row .PERIOD  So ,COMMA  the second row can be located arbitrarily far away in memory ,COMMA  the advantage due to that is that these rows can be of different length ,COMMA  they are not packed as in the 2D array .PERIOD   Let us look at this particular thing in detail .PERIOD  So ,COMMA  that you get comfortable with in .PERIOD  So ,COMMA  suppose you have that array and I considered what is printf(“%s” ,COMMA   movies [2]) ,COMMA  movies 2 will be the third character array ,COMMA  that is present in the structure .PERIOD  So ,COMMA  it will print Krrish 3 .PERIOD  Similarly ,COMMA  movies 0 will print the first string and if you say printf(“%s” ,COMMA  *(movies + 1) by pointer notation ,COMMA  this is the same as the subscript notation movies[1] .PERIOD  So ,COMMA  that would print Ra .PERIOD One .PERIOD  Now ,COMMA  what happens if you have put char *(movies + 1 + 1) .PERIOD  So ,COMMA  again if you are more comfortable with a subscript notation ,COMMA  you can translate back in to the subscript notation ,COMMA  this will become movies[1][1] .PERIOD  So ,COMMA  what it will print is ,COMMA  this letter which is small a ,COMMA  similarly for the last one .PERIOD  So ,COMMA  it will print whatever it will print the i .PERIOD  So ,COMMA  here is a whereas .PERIOD  .PERIOD  .PERIOD   Array of array is now allows us to have a two dimensional structure with different number of elements per row and this is the advantage that it has .PERIOD  Now ,COMMA  let say that we want to right a very natural program ,COMMA  which is it takes a number between 1 and 12 and it prints out what is that month name corresponding to that number .PERIOD  So ,COMMA  I want to store in months and here is the problem different months have different lengths .PERIOD  We right now saw is solution to this problem ,COMMA  which is to store arbitrary length a strings in one structure ,COMMA  we would make an array of arrays .PERIOD  So ,COMMA  you can say that char *month_names[ ] .PERIOD  So ,COMMA  this is an array of arrays of character and then you can just initialize it to the month names ,COMMA  you do this and then I will write the code .PERIOD  So ,COMMA  you can write the code in anyway .PERIOD  So ,COMMA  you can say that 0 is January and .PERIOD  So ,COMMA  on up to 11 is December .PERIOD  But ,COMMA  maybe it is more natural to say that 1 is January and .PERIOD  So ,COMMA  on up to 12 is December .PERIOD  So ,COMMA  I will check if the given month index is between 1 and 12 ,COMMA  then I will print the month name month minus 1 .PERIOD  So ,COMMA  if you give the month as 1 you will print month names 0 which is January ,COMMA  if you give the month as 2 you will print month names 1 which is February and so ,COMMA  on .PERIOD  Now ,COMMA  if the month is not in this range it is in invalid month .PERIOD  So ,COMMA  you just print that an exist ,COMMA  So ,COMMA  here is a very simple program with illustrates what advantage you get out of this kind of array of array structure .PERIOD  You can store with in the same data structure different strings of completely different lengths ,COMMA  this is not possible in a 2D array because ,COMMA  all you have to calculus something like the maximum column length .PERIOD  So ,COMMA  the maximum width month name for example ,COMMA  it could be September and then all the other names have to have exactly that width .PERIOD   So ,COMMA  let us look at this the array of arrays picture is like this ,COMMA  you have an array of characters stars .PERIOD  Now ,COMMA  each of those characters stars may be pointing to different months .PERIOD  In this every month is exactly three characters long ,COMMA  ,COMMA  but you get the picture basically in this these rows can be of different lengths .PERIOD  So ,COMMA  contrast this with two dimensional arrays ,COMMA  where the chief feature of the two dimensional array is the following ,COMMA  you have to specify the number of columns .PERIOD  So ,COMMA  the number of columns have be to specified and no matter what the exact string is ,COMMA  it will occupies 7 characters now .PERIOD  So ,COMMA  the remaining will be null fill or something .PERIOD  So ,COMMA  also notice that pictorially I have tried to represent it ,COMMA  the very next memory cell after the first row will be the beginning of the second row .PERIOD  So ,COMMA  after row 0 it will immediately start with row 1 .PERIOD  Whereas ,COMMA  in the case of array of arrays row 0 and row 1 may be located arbitrarily for apart in memory .PERIOD  The only connection is that the pointers to these rows are consecutively located in the pointer array ,COMMA  that is not the case here ,COMMA  it is actually located together in memory and it is represented in row major fashion ,COMMA  where each row will take exactly 7 letters .PERIOD  So ,COMMA  I hope the limitation of the two dimensional arrays in this case is clear .PERIOD   So ,COMMA  you can try a few exercises in order to understand this notation a little bit ,COMMA  this concept of array of arrays a little bit better .PERIOD  So ,COMMA  let us look at the types of various concepts .PERIOD  So ,COMMA  if I have month ,COMMA  month is actually a char ** ,COMMA  it is an address .PERIOD  So ,COMMA  if you want to print out month ,COMMA  I mean it is very rare that you need to print out month ,COMMA  you would use something like %l u ,COMMA  which is long unsigned for printing the unsigned long int .PERIOD  What happens if you access *month ?QUESTIONMARK  Now ,COMMA  you dereferencing one level below .PERIOD  So ,COMMA  it will be a char * .PERIOD  So ,COMMA  now ,COMMA  if you print percentages *month ,COMMA  it will print January .PERIOD  If you print a **month ,COMMA  you have dereference two levels and you will get the first letter of the first array ,COMMA  which is j and you can try out a few other thinks ,COMMA  you can say the *(month + 1) .PERIOD  So ,COMMA  one way you can do it is you translated to subscript notation and try to see what it will print and there are .PERIOD  .PERIOD  .PERIOD  So ,COMMA  I would encourage you to try out these examples ,COMMA  in order to get that translation between arrays and pointers correct .PERIOD    So ,COMMA  here is wrong picture ,COMMA  but it short of gives you an idea of how to look at these structures .PERIOD  So ,COMMA  if I have int array[2][3] you can think of it as the number of rows is fixed and the number of columns is fixed ,COMMA  this is not actually what happens in C ,COMMA  in C actually the number rows does not matter ,COMMA  the number columns matters .PERIOD  But ,COMMA  you can for a moment to make it easier to think about ,COMMA  think that if you declare it in this way ,COMMA  this is when the number of rows is fixed in the number of columns are fixed .PERIOD  So ,COMMA  in particular if you know beforehand that you data structure has a fixed number of rows and fixed number of columns ,COMMA  then it is probably better to you said 2D array .PERIOD  Now ,COMMA  if you have int *arr[3] ,COMMA  now this means that arr is a pointer to an array of size 3 .PERIOD  So ,COMMA  here the number of columns is fixed .PERIOD  But ,COMMA  the number of rows is variable ,COMMA  it you can have any number of rows ,COMMA  on the other hand the third case int *arr[3] .PERIOD  So ,COMMA  it is an array of 3 elements each of type int * .PERIOD  So ,COMMA  you can see that this is one situation ,COMMA  where you have 3 pointers ,COMMA  ,COMMA  but each of them can point to arrays of arbitrary length .PERIOD  So ,COMMA  this is a situation where the number of rows can be seen as fixed and the number of columns is variable .PERIOD  And the general case can be int ** ,COMMA  which is where the number of rows and the number of columns are both waiting .PERIOD  So ,COMMA  you can think of it and this way ,COMMA  this is not a correct picture .PERIOD  But ,COMMA  when you want to modal data ,COMMA  this is probably and you know that you are in a situation ,COMMA  where the number of columns is variable .PERIOD  But ,COMMA  the number of rows you know beforehand probably you should go for array of arrays .PERIOD  If you are in a situation ,COMMA  where you know that the number of columns is fixed ,COMMA  but you do not know how many data there are ,COMMA  then you can go for int* array of size 3 .PERIOD  So ,COMMA  you can go for the second alternative and so ,COMMA  on .PERIOD  So ,COMMA  this picture is not quite accurate ,COMMA  ,COMMA  but it is indicative of the usage .PERIOD   In this video ,COMMA  we will look at a few basic things about file handling in C .PERIOD  This is a vast topic in itself and we will see just the basics of this .PERIOD  So ,COMMA  let us begin by describing what are files .PERIOD   Now ,COMMA  you would think that the most natural way to define what a file is ,COMMA  it is a set of bytes or a collection of bytes sitting in secondary storage ,COMMA  like may be your hard drive ,COMMA  may be your CD ROM drive or DVD drive or something ,COMMA  it is known as a secondary storage device .PERIOD  But ,COMMA  the actual description is that ,COMMA  any addressable part of the file system in an operating system is a file .PERIOD  Now ,COMMA  this includes extremely bizarre strange things .PERIOD  For example ,COMMA  /dev/null in Linux ,COMMA  this stands for nothing .PERIOD  So ,COMMA  if you write to /dev/null ,COMMA  it is like discarding the data .PERIOD  Similarly ,COMMA  /dev/urand ,COMMA  this is the random data device .PERIOD  If you read from here ,COMMA  you will get random data ,COMMA  /dev/audio is speakers .PERIOD  So ,COMMA  if you write some data into that ,COMMA  it will be heard on the speakers .PERIOD  And of course ,COMMA  plain old data files ,COMMA  for example ,COMMA  in a home directory you may have /home/don 2/input .PERIOD text .PERIOD  So ,COMMA  input .PERIOD text is just a collection of bytes .PERIOD  So ,COMMA  we will not bother with defining what a files is ,COMMA  but it is something that can be manipulated using the file system interface .PERIOD  So ,COMMA  you can open a file system interface to that file ,COMMA  you can read from that file ,COMMA  you can write into that file ,COMMA  you can close that file and so on .PERIOD   Now ,COMMA  recall that in one of our earlier lectures ,COMMA  I said that there are three files works which are available by default to all c programs .PERIOD  So ,COMMA  these are standard input stdin .PERIOD  This is associated usually with a key board and this is where scanf ,COMMA  getchar ,COMMA  gets this kinds of functions get their input from ,COMMA  it has file descriptor 0 .PERIOD  Similarly ,COMMA  standard output stdout is where printf ,COMMA  putchar ,COMMA  puts all these functions output the data to .PERIOD  This is usually visible on the terminal under screen ,COMMA  this has file descriptor 1 .PERIOD  We also have a third file ,COMMA  which is known as standard error .PERIOD  This is the standard error console and which has file descriptor 2 .PERIOD  Usually ,COMMA  you can print error messages to stderr .PERIOD  We have not seen how to print error messages to stderr ,COMMA  so far we will see that in this video .PERIOD   Now ,COMMA  how do you read input using standard file descriptors ,COMMA  but from sources other than key board and so on .PERIOD  So ,COMMA  for example if you are running a .PERIOD out and you want to take the input not from the key board ,COMMA  but ,COMMA  from an input file .PERIOD  You can say /a .PERIOD out < input file ,COMMA  this says that the input is coming from the file ,COMMA  input file .PERIOD  So ,COMMA  this is the input file as the source ,COMMA  instead of the key board .PERIOD  Similarly ,COMMA  if you want to redirect ,COMMA  so if you want to redirect the output to a particular output file ,COMMA  instead of the screen ,COMMA  you can says /a .PERIOD out > out file .PERIOD  So ,COMMA  this will use the out file as the output instead of the terminal .PERIOD  And if you want to output something the error messages to error file ,COMMA  you can say /a .PERIOD out 2 > error file ,COMMA  2 stands for the standard error console .PERIOD  So ,COMMA  if you say redirect this to this file ,COMMA  you will say ok .PERIOD  The standard output should get the standard output messages and the standard error messages should go to err file .PERIOD   So ,COMMA  Linux gives you some facilities to take input from other files using the standard input and the output .PERIOD  So ,COMMA  what you say is that ,COMMA  instead of the standard input ,COMMA  you can use this < ,COMMA  > arrows ,COMMA  in order to redirect input from some file or output to another file or error to another file .PERIOD  So ,COMMA  this is the facility that Linux gives you .PERIOD  But ,COMMA  consider the general situation ,COMMA  when you have a program ,COMMA  you want to read the input from multiple files and may be output to multiple files .PERIOD  So ,COMMA  this is the general situation ,COMMA  we just saw how to take input from one particular input file ,COMMA  how to output to another output file using the redirection operator ,COMMA  the < and > operation on Linux ?QUESTIONMARK  So ,COMMA  the redirection mechanism is provided by the Linux shell and is not a part of the C program in language .PERIOD  So ,COMMA  is there a way to do it in C itself ,COMMA  rather than using the facilities of Linux .PERIOD  So ,COMMA  can we read from other files ,COMMA  other than the standard key board ?QUESTIONMARK  Can we write into other files ,COMMA  other than writing on to the screen ,COMMA  standard output and so on .PERIOD   So ,COMMA  we will look at the general scheme of file handling in C ,COMMA  all these functions that I am going to talk about are in stdio .PERIOD h ,COMMA  itself .PERIOD  So ,COMMA  you do not need to include any more files .PERIOD  So ,COMMA  if you want to open the file for reading or writing etcetera ,COMMA  we need to first open the file .PERIOD  The three standard files stdout ,COMMA  stdin and stderr are available to the program .PERIOD  Any other file ,COMMA  you have to open the file .PERIOD  And the function to do that is fopen takes two arguments name and mode ,COMMA  we will see what these are soon and it returns something called a file pointer .PERIOD  A file pointer is a pointer to a structure and that structure contains a lot of information about the file .PERIOD  For example ,COMMA  where is it situated ,COMMA  the current position being read in the file .PERIOD  So ,COMMA  may be you are read 1000 bytes and you are about to read the 1000 and first byte .PERIOD  So ,COMMA  it has that information and various maintenance information ,COMMA  about the file .PERIOD  Now ,COMMA  in order to read or write into the file ,COMMA  you can use fscanf or fprintf .PERIOD  These are the analogs of scanf and printf ,COMMA  which allow you to right to an arbitrary files .PERIOD  It takes three arguments ,COMMA  at least two arguments ,COMMA  the first is the file pointer ,COMMA  where you want to write the file ,COMMA  where you want to read from the file and so on .PERIOD  And then ,COMMA  there is a format specified ,COMMA  just as a normal scanf or normal printf and then further arguments .PERIOD  So ,COMMA  the difference here is that ,COMMA  whereas scanf and printf started with a format specifies ,COMMA  we have an additional file pointer in the beginning .PERIOD  So ,COMMA  compare with a scanf and the printf ,COMMA  the first argument fp is missing .PERIOD  This is because ,COMMA  scanf just assumes that the file it has to read from is this standard input .PERIOD  And printf assumes that it has to print to the standard output and to close the file ,COMMA  you say fclosefp .PERIOD  And notice the way ,COMMA  the fscanf ,COMMA  fprintf and fclose work ,COMMA  they do not take the file name as input ,COMMA  only fopen takes the name of the file as input .PERIOD  Whatever fopen returns the file pointer ,COMMA  those are the arguments to fscanf ,COMMA  fprintf and fclose .PERIOD  This is because ,COMMA  once a file has been opened ,COMMA  all the information that fscanf ,COMMA  fprintf and fclose need are already in the structure pointer 2 by fp .PERIOD   Now ,COMMA  let us write a very simple program ,COMMA  it takes the names of two files and what it does is ,COMMA  it first prints the contents of the first file and then prints the contents of the second file and these will be output to the standard output .PERIOD  What is the algorithm ?QUESTIONMARK  It is very simple ,COMMA  you have to first read the file names ,COMMA  then open file 1 ,COMMA  if open fails ,COMMA  we exit .PERIOD  Now ,COMMA  you print the contents of file 1 to stdout ,COMMA  after you have done ,COMMA  you close file 1 .PERIOD  Then ,COMMA  you open file 2 ,COMMA  check whether open has succeeded ,COMMA  if it has failed ,COMMA  we exit .PERIOD  Then ,COMMA  print the contents of file 2 to stdout close file 2 and that is it .PERIOD   So ,COMMA  let us see what each of these steps in slightly more detail .PERIOD  How do you open the file ?QUESTIONMARK  We open it using a standard call called fopen ,COMMA  fopen takes two arguments ,COMMA  the name and the mode as character pointers and returns a file point .PERIOD  The first argument name is the name of the file and the name of the file can be given in short form .PERIOD  Suppose ,COMMA  you are already in a directory ,COMMA  where that file is situated .PERIOD  Then ,COMMA  you can just give the name of the file .PERIOD  For example ,COMMA  input file or you can give the full path name of that file in the operating systems .PERIOD  So ,COMMA  for example input file may be in the directory /home/don .PERIOD  So ,COMMA  in that case you can give the name as /home/don/input file .PERIOD  So ,COMMA  this will be the full path file ,COMMA  either of this is accepted .PERIOD  Now ,COMMA  the second argument is the mode ,COMMA  this is the way in which you want to open the file .PERIOD  So ,COMMA  what are the common modes ?QUESTIONMARK  For example ,COMMA  if you give r ,COMMA  this will open the file in read only mode .PERIOD  This is ,COMMA  if you want to just read a file and not write to that file .PERIOD  There are also other situations ,COMMA  where the medium itself may not support writing .PERIOD  For example ,COMMA  if you have a CD ROM disk then you cannot write to that .PERIOD  So ,COMMA  it can only be opened in a read only mode ,COMMA  if you give w ,COMMA  this is the write mode .PERIOD  Now ,COMMA  the first write happens at the beginning of the file .PERIOD  So ,COMMA  if the file already exists ,COMMA  it will be over written .PERIOD  If a file does not exist ,COMMA  so this is the name of a new file that we support commonly is known as the append mode ,COMMA  we specify that by saying the mode is a .PERIOD  So ,COMMA  if you open the file for append mode ,COMMA  then instead of writing at the first location of the file ,COMMA  it will write at the end of the current file .PERIOD  So ,COMMA  if the file does not exist ,COMMA  then it will start from the first location .PERIOD  If the file exists ,COMMA  it will go to the end of the file and start writing from there .PERIOD  So ,COMMA  append does not overwrite the file .PERIOD   We have seen the arguments of fopen .PERIOD  Now ,COMMA  let us look at what it returns ?QUESTIONMARK  If successful fopen returns what is known as a file pointer .PERIOD  This is later used for fprintf ,COMMA  fscanf ,COMMA  fclose as I just mentioned .PERIOD  If unsuccessful ,COMMA  the file may be you try to open a nonexistence file for reading or you try to write to a file which cannot be return to .PERIOD  For example ,COMMA  it is a file sitting inside a CD ROM drive and you are not allowed to write to it .PERIOD  So ,COMMA  if you try to open the file in write mode ,COMMA  then you have a problem .PERIOD  So ,COMMA  for whatever reason if the file open does not succeed ,COMMA  then the fopen returns in null and it is always a good idea to check for these errors .PERIOD  So ,COMMA  just try opening a file and always check whether it has return the null .PERIOD   So ,COMMA  let us write the program that we were discussing ,COMMA  which will take two input files and print one file and then print the other file .PERIOD  So ,COMMA  the program is fairly simple ,COMMA  we have a main function ,COMMA  we have two file pointers *fp1 and *fp2 .PERIOD  And then ,COMMA  two file names filename1 and filename2 ,COMMA  you get the filename1 from the input ,COMMA  you get filename2 from input using gets functions .PERIOD  Now ,COMMA  what we have to first do is ,COMMA  write the contents of the first file .PERIOD  So ,COMMA  try opening the file ,COMMA  so if (fp1 = fopen(filename1 ,COMMA  “r”)) .PERIOD  Because ,COMMA  we just need to read from the file ,COMMA  we do not need to write into it .PERIOD  So ,COMMA  open it in r mode ,COMMA  if it is successful that is ,COMMA  if it is or rather if it has failed .PERIOD  So ,COMMA  if it has returned a null ,COMMA  then you just say printf that it has failed .PERIOD  And here is for the first time ,COMMA  we have seeing how to print to this standard error .PERIOD  So ,COMMA  stderr is any other file is similar to any other file ,COMMA  you can just say fprintf stderr .PERIOD  And then ,COMMA  opening file failed filename1 .PERIOD  So ,COMMA  we try to open filename with filename1 as the name ,COMMA  but there was some error .PERIOD  So ,COMMA  you print that to the error terminal ,COMMA  which is stderr .PERIOD  Now ,COMMA  once you do that will call the function copy_file(fp1 ,COMMA  stdout) .PERIOD  So ,COMMA  here is a function that we will write ,COMMA  which will copy from a source file to a destination file and what it takes are pointers to those files .PERIOD  Once you have done ,COMMA  you close the file 1 and then ,COMMA  you repeat the whole process ,COMMA  the exactly the same process for file 2 .PERIOD  So ,COMMA  try to open it ,COMMA  if there is an error ,COMMA  you print the error message to stderr ,COMMA  then copy_file(fp2 ,COMMA  stdout) and finally ,COMMA  close the file .PERIOD  Once you have done ,COMMA  you can return from main .PERIOD  So ,COMMA  now what is left is ,COMMA  what is this copy file function ?QUESTIONMARK   So ,COMMA  let us look at the copy file function .PERIOD  Now ,COMMA  there are two ways to start writing any function which takes files as arguments .PERIOD  One is you can take the file name as the argument itself and within the function ,COMMA  try to open the file .PERIOD  So ,COMMA  you will get a file pointer and you can start reading from the file using fscanf I am writing to the file using fprintf ,COMMA  this is possible .PERIOD  It is somewhat more convenient to say that I am assume that the files are already open and I am getting the file names as the point using file pointers .PERIOD  So ,COMMA  this avoids duplication of work ,COMMA  the main does not have to open the file .PERIOD  And then ,COMMA  every function has to open the file again and again .PERIOD  Instead ,COMMA  what you can just say that ,COMMA  I assume that the caller function has already is a file open and I will just take a file pointer as the argument .PERIOD  So ,COMMA  let us look at this function ,COMMA  it is a void function .PERIOD  So ,COMMA  it does not return anything ,COMMA  it just performs an action ,COMMA  it is name is copy file takes two arguments ,COMMA  fromfp which is a file pointer to after to the source file and tofp ,COMMA  which is file pointer to the designation file .PERIOD  And what is a function do ?QUESTIONMARK  We have a character c and here is a function ,COMMA  we will see in a later video .PERIOD  But ,COMMA  right now it just checks whether fromfp has encountered enter file .PERIOD  So ,COMMA  feof just tells you whether you have done with the from file .PERIOD  So ,COMMA  if you are not done with a from file what you do is ,COMMA  you scan one character from the from file ,COMMA  so fscanf(fromfp ,COMMA  “%c” ,COMMA  &c) .PERIOD  So ,COMMA  this will read one character from the source file fromfp and read it into the variable c .PERIOD  What we have to do is ,COMMA  to print that to tofp .PERIOD  So ,COMMA  you say fprintf (tofp ,COMMA  “%c” ,COMMA  c) .PERIOD  So ,COMMA  this is exactly like scanf and printf ,COMMA  but taking one extra argument .PERIOD  So ,COMMA  in the case of scanf you just says ,COMMA  what is the source file that is the file pointer argument .PERIOD  In the case of fprintf ,COMMA  you have to take the designation file which is tofp ,COMMA  that is the extra argument in that expression .PERIOD       In this video we will see some more common file operations ;SEMICOLON  these are by no means the only file facilities that C provides you ,COMMA  but in common programming practice these are the functions that people of in use .PERIOD  So ,COMMA  we have seen this in the code that we wrote .PERIOD  The first function is feof ,COMMA  and then it takes a file pointer .PERIOD  What it does is ,COMMA  it is checks whether you have encountered end of file while operating on fp .PERIOD  So ,COMMA  maybe you are trying to read the file ,COMMA  and you have already reach the end of file .PERIOD  So ,COMMA  if you have already reach end of file ,COMMA  that is if EOF is set ,COMMA  then feof returns a non zero value .PERIOD  If feof is not set ,COMMA  that is you have not completed the file yet by seeing end of file ,COMMA  then feof returns 0 .PERIOD  So ,COMMA  in order to check whether a file has still has some data ,COMMA  you can just say not of feof fp .PERIOD  So ,COMMA  that will check for the fact that the files still has some data .PERIOD   Now here is some couple more interesting functions whose who they are very useful ,COMMA  and a call by commonly use whenever we deal with files .PERIOD  For example ,COMMA  we can have something called fseek .PERIOD  fseek is a function which allows you to start reading from ,COMMA  our start writing to arbitrary locations in the file .PERIOD  So ,COMMA  often we may want to read into the 10000 byte directly ,COMMA  and we do not want to be bother with reading the first 9999 characters discarding them ,COMMA  and then coming to the 10000 th character .PERIOD  This may be lot of wasted time .PERIOD  It will be more convenient ,COMMA  if I can directly jump to the 10000 th location in the file .PERIOD  So ,COMMA  is there a function that allows to you do to that yes ,COMMA  there is just thing call fseek .PERIOD  Now what it takes is the file pointer ,COMMA  and it takes two arguments ;SEMICOLON  one is known as an offset ,COMMA  and the other is known as the origin .PERIOD   So ,COMMA  let us look at the offset and the origin in greater detail .PERIOD  So ,COMMA  suppose I want to read from the 10 th byte of the file .PERIOD  So ,COMMA  I could say fseek ,COMMA  and suppose by file pointer is fp ,COMMA  I will just say let say I want to read from the 10 th point from the beginning of the file .PERIOD  What I can say is SEEK_SET .PERIOD  So ,COMMA  if I do this what will happen is that ?QUESTIONMARK  It will start from the beginning ,COMMA  SEEK_SET is the beginning of the file .PERIOD  So ,COMMA  it will add 10 bytes to from the beginning of the file ,COMMA  and it will start from there .PERIOD  So ,COMMA  if I know that I want read from the 10 th byte ,COMMA  then I can say that start from the beginning of the files SEEK_SET says origin of the beginning of the file plus 10 bytes .PERIOD  So ,COMMA  this is 10 bytes from beginning .PERIOD  Now ,COMMA  there are other situations ,COMMA  for example you might want to say that I want to start from the 10 th byte from the current location .PERIOD  I have already read many bytes .PERIOD  Now I want to skip the next 10 bytes .PERIOD   So ,COMMA  is there way to do that again what you can do is ,COMMA  if you say fseek f p and let us say 10 itself ,COMMA  but SEEK_CURRENT .PERIOD  So ,COMMA  there is a typo over here ,COMMA  this is just CUR .PERIOD  So ,COMMA  if I say this ,COMMA  then what I need to do is what it will perform is ,COMMA  it will say 10 bytes from the current position .PERIOD  So ,COMMA  I have already rate 100 bytes from the file ,COMMA  and then I say fseek 10 bytes from the current location .PERIOD  What it will do is jump to 110 th location .PERIOD    Now I could also say something like .PERIOD  .PERIOD  .PERIOD  So ,COMMA  here is a very common situation ,COMMA  I want to start reading from the 10 th byte from the end .PERIOD  So ,COMMA  I want to regardless of the size of the file I want to jump to the end ,COMMA  and then rewind 10 bytes and start from there .PERIOD  So ,COMMA  in that case I can say the origins SEEK_END .PERIOD  So ,COMMA  that is the end of the file and where do I start from SEEK_END plus something does not make any sense ,COMMA  because it is it will refer to something that does not exist in the file .PERIOD  So ,COMMA  you could say SEEK_END -10 .PERIOD  So ,COMMA  this is 10 bytes before the end of the file .PERIOD  So you can use fseek in several ways and is a very convenient function ,COMMA  because it allows you to jump to arbitrary location in the file .PERIOD  And it will work as long as the target location origin plus offset is a valid location in the file .PERIOD  Now there is also something called ftell ,COMMA  which will tell you the current position in file .PERIOD  So ,COMMA  if it will take a file pointer as the argument *fp ,COMMA  and it will return you where in the file your currently at .PERIOD    So ,COMMA  with this let us take a look at a few more modes in the file operations .PERIOD  So ,COMMA  when you open the file we saw that you could open it in mode r w a .PERIOD  Now there are also some other special modes that see give see ,COMMA  for example there is something called r+ .PERIOD  This says you can a open file for reading and writing .PERIOD  So ,COMMA  this is essentially an update mode .PERIOD  w+ will be write an update .PERIOD  So ,COMMA  create an empty file and update that file .PERIOD  And there is something call a + which is appended update ,COMMA  this is somewhat strange .PERIOD  If you do any fseek after you open the file in a + mode ,COMMA  then the read will be effected .PERIOD  So ,COMMA  suppose I am at 100 th location ,COMMA  I have write 99 bytes ,COMMA  I am at the 100 th byte .PERIOD  If I read ,COMMA  if I now do an fseek to 10 bytes ahead .PERIOD  So ,COMMA  now I will be at the 110 th byte .PERIOD   Now there are two possibilities now ,COMMA  I can read from here or I can do and fprintf ,COMMA  fscanf will start from the 110 th byte ,COMMA  it will be obey the fseek .PERIOD  fprintf will always print at the end of the file .PERIOD  So ,COMMA  that is the append part of it .PERIOD  So ,COMMA  fprintf is always output is always at the end of the file ,COMMA  and reading will be depended on any fseek that you do .PERIOD  So ,COMMA  fseek will never affect the where you print ,COMMA  it will always be the end of the file .PERIOD  So ,COMMA  a + is a very special for it .PERIOD  These are some additional file operations that you might find useful while coding in C .PERIOD    So ,COMMA  in this lecture will talk about structures and C ,COMMA  which is syntactic feature that C  provides in order to define new data types .PERIOD    So ,COMMA  let us look at the motivation .PERIOD  Till now we have used the data types that C language has already provided like int ,COMMA  float ,COMMA  character ,COMMA  and also we have seen data types like arrays and we could define arrays of end arrays of character and so on ,COMMA  we have also seen pointers which can hold the address locations of other variables .PERIOD  Now ,COMMA  what if we want to define our own data types using the data types that are already available .PERIOD  So ,COMMA  if you want to define custom data types does the language provide any feature to do it .PERIOD  Before we reach there we will just take a look at why you would want to define such a data type .PERIOD  So ,COMMA  let say that we have designing a geometry package ,COMMA  and we want to define a point on the plane as having a x coordinate and a y coordinate .PERIOD  Now thus a easy way to do it if you have arrays ,COMMA  you could hold a point inside an array of size 2 .PERIOD   Now you would keep the first coordinate in the the x coordinate as the zeroth element in the array ,COMMA  and the y coordinate as the first element in the array ,COMMA  this is one way to do it .PERIOD  Another way is to keep two variables point underscore x and point underscore y ,COMMA  and these are the x coordinates and the y coordinate of a single point ,COMMA  this is another way to do it .PERIOD  But in both these solutions this no way to indicate that these two are in intended to be the x coordinate and the y coordinate of the same point .PERIOD  That programmer has to impose considerable discipline in coding in order to maintain this meaning .PERIOD  So ,COMMA  is there a more natural way to do it in C .PERIOD  So ,COMMA  we want to define a point data type ,COMMA  and a point data type internally has two integers ;SEMICOLON  one- two floating point ,COMMA  one in x coordinate and another a y coordinate .PERIOD   So ,COMMA  now we will define a structure as a collection of variables with a common name .PERIOD  Now the variables can be of different types ,COMMA  this is unlike arrays .PERIOD  We know that in an array you can hold multiple values in a contiguous sequence ,COMMA  but all the values have to be on the same time .PERIOD  So ,COMMA  what is different here with structure is that you can hold multiple values in the same data type ,COMMA  also the same data type can hold multiple sub types within itself .PERIOD  So ,COMMA  structural variables are called fields .PERIOD  So ,COMMA  let us look at a example structure ,COMMA  we define something called a struct point ,COMMA  and it has an int x and a int y coordinate .PERIOD   And how do you… This is the data type notice that the data type declaration has a semicolon at the end .PERIOD  Now how do you define a variable with this data type ,COMMA  you can say struct point pt .PERIOD  So ,COMMA  pt is one variable that is of data type struct point ,COMMA  you cannot say point pt you have to say that it is a struct point .PERIOD  Now how do I assign values to this data type .PERIOD  So ,COMMA  structure is a composite data type that is two internal components ;SEMICOLON  one is x ,COMMA  and the other is y .PERIOD  So ,COMMA  in order to say that the internal components will have certain values I need to say how to you get to these internal components ,COMMA  and this is done by the dot operator .PERIOD  So ,COMMA  you can say pt .PERIOD x=1 ,COMMA  that would assign the x field inside the pt structure to 1 .PERIOD  Similarly pt .PERIOD y=0 ,COMMA  what it will do is it will take the y field of pt structure and assign it to 0 .PERIOD  So ,COMMA  the internal memory representation after executing the statements will be that pt is a structure ;SEMICOLON  it has two sub fields - x and y ,COMMA  and x will be assign to 1 and y will be assign to  Now as far as C is concerned this structure data type that you define is just like and data type that it provides .PERIOD  So ,COMMA  user defined data types especially structures at ((Refer Time: 04:57)) more or less in the same way as an ordinary data type .PERIOD  And we will see that with an ordinary data type there are multiple things that you can do with it ,COMMA  you can initialize you can declare a variable to be of that data type ,COMMA  we have seen already how to do it ?QUESTIONMARK  You can initialize a variable of a particular data type ,COMMA  we will see how to do it ?QUESTIONMARK  Similarly you can pass a data of a particular type to a function ,COMMA  and return a variable of that type from a function ,COMMA  you will see that all these are possible with structures as well .PERIOD  So ,COMMA  we will see these with examples .PERIOD  Now struct point is just a type and it can be use like any other standard C data type ;SEMICOLON  even though you as a programmer have defined it .PERIOD  For now how do you define a structure ,COMMA  usually you define all the structures that you need at the very top of the file ,COMMA  just of the #include .PERIOD  Now ,COMMA  you know that with the standard data type you can define and array of the data type ,COMMA  if you have you can declare array of int ,COMMA  array of characters and so on .PERIOD   So ,COMMA  you would write a loop ,COMMA  for example of the following form .PERIOD  So ,COMMA  you would say for i = 0 ,COMMA  i < 6 ,COMMA  i = i plus 1 and pts[i] .PERIOD x = i .PERIOD  So ,COMMA  pts[i] is the ith element in the array .PERIOD  In the elements in the array are of type struct point .PERIOD  So ,COMMA  pts[i] will be a struct point variable ,COMMA  and that variable has 2 fields - x and y .PERIOD  So ,COMMA  I can say pts[i] .PERIOD x = something i ,COMMA  and pts[i] .PERIOD y = i .PERIOD  So ,COMMA  at the end of execution of this loop the result will be of the following form pts 0 is a structure ,COMMA  and its x and y coordinate are 0 ;SEMICOLON  pts 1 is another structure ,COMMA  its x and y coordinates are 1 ,COMMA  and so on .PERIOD  So ,COMMA  what are the characteristics features of an array ,COMMA  that it contains cells which are contiguously allocated ,COMMA  so they will be allocated one of to the other in memory ,COMMA  and each cell is of the same type as the others in the same array .PERIOD  So ,COMMA  both those are maintained .PERIOD  These structures will be stored one after the other in memory also everything in the array is a struct point .PERIOD  So ,COMMA  an array of structs is similar to an array as ints except for the fact that within a cell you will have values that can have subfields .PERIOD   (Refer slide Time: 08:34)  Now we will see what else can you do with structures .PERIOD  Just like a variable of a int data type ,COMMA  you can return it from the function .PERIOD  If you declare an int x ,COMMA  you can say return x .PERIOD  Now let say it can be a right functions which can return struct point .PERIOD  So ,COMMA  the theme of this lecture is that user defined structures at treated by c pretty much the same way as the standard data types .PERIOD  So ,COMMA  the behavior should be consistent ,COMMA  you should be able to return a value of a struct of type struct from the function ,COMMA  let see an example .PERIOD  So ,COMMA  here the user defines a struct point ,COMMA  and then when you run the program ,COMMA  you say can give two integer values - x and y ,COMMA  and I want to create a point struct with subfields x and y which the user has input .PERIOD  So ,COMMA  I have return a function called make_point ;SEMICOLON  make_point takes two arguments int x and int y ,COMMA  and what it returns is a variable of type struct point .PERIOD  So ,COMMA  this is the return type of the this whole name is basically the return type of the function ,COMMA  the name of the function is make_point .PERIOD  Now how do you define it ?QUESTIONMARK  So ,COMMA  for example ,COMMA  you can define a variable temp of type struct point ,COMMA  and then say temp .PERIOD x = x ,COMMA  temp .PERIOD y = y ,COMMA  and return temp .PERIOD  Now ,COMMA  if you forget about this code ,COMMA  particular code ,COMMA  if temp had been an int variable ,COMMA  you would say return temp .PERIOD  If the function was if return type int .PERIOD  Here it is the function is returning struct point ,COMMA  and you would do it exactly in the same way as a function returning int .PERIOD  So ,COMMA  what else can we do with a normal data type ,COMMA  you could for example pass it as a parameter two or function .PERIOD  So ,COMMA  if you have int variables ,COMMA  you can pass functions taking int arguments .PERIOD  Similarly can you right functions taking struct parameters ,COMMA  and we will see that is can be done ,COMMA  yeah .PERIOD    So ,COMMA  we will take an example that is fairly easy to understand .PERIOD  So ,COMMA  you take a point p and calculate the norm of the point p .PERIOD  So ,COMMA  what is the norm of the point p ?QUESTIONMARK  The norm of the point(x ,COMMA  y) in the Euclidean plane is simply  .PERIOD  So ,COMMA  you will just have to calculate a function which does this .PERIOD  For this we will use the math library in C .PERIOD  So ,COMMA  I will say include<math .PERIOD h> ,COMMA  and then I will defined a function norm of struct point p .PERIOD  So ,COMMA  let us call this norm 2 and less ignore why it is call norm 2 .PERIOD  So ,COMMA  it is just a function that takes a point p and calculates the norm(p) .PERIOD  So ,COMMA  for this what do I do ?QUESTIONMARK  I will say that returns square root .PERIOD  So ,COMMA  sqrt is the square root function provided by math .PERIOD h .PERIOD  So ,COMMA  return sqrt(p .PERIOD x * p .PERIOD x + p .PERIOD y * p .PERIOD y) .PERIOD   So ,COMMA  the in the main what you would do is user defines user gives an input x and input y .PERIOD  You make a point using the earlier function that we wrote make_point x y .PERIOD  So ,COMMA  pt will be a point with x coordinate x ,COMMA  and y coordinate y .PERIOD  Now for that point pt you define norm2(pt) .PERIOD  So ,COMMA  norm2(pt) here you would pass a point a struct point as a parameter ,COMMA  and the function with calculate the norm of the func of the point and return the norm .PERIOD  So ,COMMA  the way you would passes structure is the same as the way you would pass an int or a character or something .PERIOD    (Refer slide Time: 12:54)  Now let us takes the game a bit further .PERIOD  You know that I can you know that you can defines structures whose subfields are standard C data types .PERIOD  Now ,COMMA  if user defined data types ,COMMA  user defined structures are of the same category as standard data types then I should be able to defines structures whose internal fields or themselves structures .PERIOD  So ,COMMA  we have seen structures whose internal fields can be basic data types ,COMMA  now will see structures whose internal fields are structures themselves .PERIOD  So ,COMMA  let us look at a very reasonable use case in which this can be occurring .PERIOD  So ,COMMA  suppose you want to extend your geometry package ,COMMA  and you want to define a rectangle .PERIOD  Now a rectangle is define by two points ;SEMICOLON  two diagonally opposite points ,COMMA  let say the left bottom and the right top ;SEMICOLON  these two points define a rectangle So ,COMMA  the left bottom and the right top are themselves points .PERIOD  So ,COMMA  they have some fields which are x coordinate and y coordinate .PERIOD   So ,COMMA  again you would use the dot notation ,COMMA  so ,COMMA  is a very consistent representation .PERIOD  So ,COMMA  I would say that in the inside the code of name ,COMMA  I would say struct rect r and then I would say r .PERIOD leftbot  .PERIOD  x = 0 ,COMMA  this says that the take the left bottom subfield of r .PERIOD  Now ,COMMA  since that is a structure r .PERIOD leftbot itself has subfields which is x and y ,COMMA  it is x coordinate is assign to 0 .PERIOD  Similarly r .PERIOD leftbot  .PERIOD  y = 0 and so on .PERIOD  So ,COMMA  I will say that this rectangles left bottom is 0 ,COMMA  and is 0 0 - and its righttop is 1 1 .PERIOD  So ,COMMA  after running this code ,COMMA  this is the state of the memory .PERIOD  So ,COMMA  I will have a rectangle r ,COMMA  and its leftbot .PERIOD x = 0 ,COMMA  its leftbot .PERIOD y = 0 ,COMMA  its righttop .PERIOD x = 1 ,COMMA  and its righttop .PERIOD y = 1 .PERIOD  (Refer slide Time: 15:47)  And now we will also see how to initialize structures .PERIOD  So ,COMMA  we know that normal basic data types like int ,COMMA  char ,COMMA  and all that when you declare a variable ,COMMA  you can also initialize ,COMMA  can you initialize a user defined structure in this way .PERIOD  So ,COMMA  the wave define it is similar to the way you define you initialize arrays .PERIOD  So ,COMMA  initializing structures is very similar to initializing arrays ,COMMA  enclose all the values of the fields in braces ,COMMA  and the values are given in the same order that you they are defined in the structure .PERIOD  Suppose you have struct point int x and int y ,COMMA  how would I initialize it I would say struct point p = {0 ,COMMA  0} .PERIOD  So ,COMMA  this means that the first field int point ,COMMA  that is x is assigned 0 .PERIOD  The second field that is y is assigned 0 as well .PERIOD  Similarly if I say struct point q = {1 ,COMMA  1} ,COMMA  it is says q .PERIOD x = 1 and q .PERIOD y = 1 Now ,COMMA  you can do the same thing with nested structures .PERIOD  So ,COMMA  this is very nice .PERIOD  So ,COMMA  if I want to define a rectangle .PERIOD  Remember that a rectangle has two 2 fields ,COMMA  which are themselves structures their points .PERIOD  So ,COMMA  if I say r = {{0 ,COMMA 0} ,COMMA {1 ,COMMA 1}} .PERIOD  What happens is that r first field which is the left bottom ,COMMA  it is will get the value (0 ,COMMA  0) ;SEMICOLON  that means ,COMMA  that it is the left bottom subfield x will get 0 ,COMMA  and the left bottoms y will get 0 .PERIOD  Similarly the r is second field is the right top ,COMMA  it will get (1 ,COMMA  1) .PERIOD  So ,COMMA  righttop .PERIOD x will be 1 ,COMMA  righttop .PERIOD y will be 1 as well .PERIOD  So ,COMMA  this is how you would initialize an a initialize a structure as very similar to initializing an array .PERIOD  The only thing to remember is that the values must be given in the same order then they are declared in the type declaration (Refer slide Time: 18:10)   Now we know that variables can be assign to other variables .PERIOD  So ,COMMA  natural question is can struct variables ,COMMA  we assign to struct variables ,COMMA  and the answer is s ,COMMA  suppose you have a rectangle r whose left bottom is 0 ,COMMA  0 ,COMMA  either initialize it you are assign the values ,COMMA  and it is righttop is 1 1 .PERIOD  So ,COMMA  I define another variable s which is also a rectangle ,COMMA  and if I say s = r .PERIOD  Let see what happens ?QUESTIONMARK  So ,COMMA  at before the assignment r is as follows .PERIOD  So ,COMMA  you have x 0 0 x xy 0 0 and x y 1 1 left bottom on the right top ,COMMA  and s is uninitialized it has just been declared ,COMMA  but the no value has been assign it .PERIOD    So ,COMMA  this is the state before the assignment .PERIOD  When you do s = r it is very nice ,COMMA  what it does is s is leftbot .PERIOD x will be assign 0 ,COMMA  s is leftbot .PERIOD y will be assign 0 ,COMMA  s is righttop .PERIOD x will be assign 1 ,COMMA  and  .PERIOD y will be assign 1 .PERIOD  So ,COMMA  what happens is goes into the ,COMMA  it goes into the structure r and copies it entirely in its full depth into s .PERIOD  So ,COMMA  it is not just that a left bottom and right top are copied its internal fields are also copied into s .PERIOD  This lecture will continue our discussion of structures .PERIOD  So ,COMMA  if you remember are earlier lecture we were saying that user defined structures or user defined types which will be treated by C ,COMMA  in pretty much the same way as the basic data types .PERIOD   So ,COMMA  will continue on that theme and look at topic on pointers to structures ,COMMA  we know that for a basic data type you can define a pointer to that type ,COMMA  I can declare int * or char * and so on .PERIOD  Similarly does it make sense to talk about struct points * for instance .PERIOD   Let us look at an example were it makes sense .PERIOD  So ,COMMA  let us go back to the example of struct point and struct rectangle from the earlier lecture .PERIOD  So ,COMMA  let us say that struct rect has two points ,COMMA  which are leftbot and righttop and both of them are struct point .PERIOD  Now ,COMMA  we want to calculate the area of a rectangle .PERIOD  So ,COMMA  you have a rectangle r which is initialized to {0 ,COMMA  0} ,COMMA  {1 ,COMMA  1} .PERIOD  So ,COMMA  leftbottom will be {0 ,COMMA  0} and righttop will be {1 ,COMMA  1} and I want to compute its area .PERIOD  Now ,COMMA  the area function is defined as follows ,COMMA  it is a function that returns in integer ,COMMA  it takes as parameter a struct rectangle and it does the following ,COMMA  it does (r .PERIOD righttop .PERIOD x – r .PERIOD leftbot .PERIOD x) * (r .PERIOD righttop .PERIOD y – r .PERIOD leftbot .PERIOD y) .PERIOD  So ,COMMA  it does that particular function and it returns it .PERIOD  So ,COMMA  we know that we can pass structures as parameters and also return structures from functions ,COMMA  but is it efficient to pass structures or to return structures ?QUESTIONMARK  And the answer is usually no ,COMMA  because copying a structure involves copying all it some feels .PERIOD  So ,COMMA  generally when you caller function the value has to be copied onto the functions scope and we have seen this when discussing functions .PERIOD  So ,COMMA  when you pass a structure the entire structure has to be copied .PERIOD  Similarly ,COMMA  when you return a structure the entire structure that was created inside the function has to be copied back ,COMMA  this is usually and expensive operation .PERIOD  So ,COMMA  one way to get around it is to pass a pointer to the structure .PERIOD  So ,COMMA  what should be done to past structure has function in an efficient manner .PERIOD   Now ,COMMA  one way to do it would be to define ,COMMA  what is known as a pointer to a structure ,COMMA  how do you define a pointer to a structure ,COMMA  you define it pretty much the same way as pointer to any other data type had this been an integer ,COMMA  you would declare int *pr .PERIOD  So ,COMMA  if you want to declare a variable which is a pointer to a structure ,COMMA  you would define struct rect *pr .PERIOD  So ,COMMA  pr is a pointer to struct rectangle .PERIOD  So now ,COMMA  how would you pass the argument ,COMMA  you would say address of the rectangle r .PERIOD  So ,COMMA  you would say area and the parameter is address of r .PERIOD  Now ,COMMA  inside the function earlier you remember it was *pr .PERIOD righttop .PERIOD x ,COMMA  now pr in this case is just a pointer to a rectangle .PERIOD  So ,COMMA  we have to access the variable in that address ,COMMA  how do you do it using the * operator ,COMMA  this is the same as addressing any basic data type ,COMMA  you would say that *pr would be the variable in that location .PERIOD  So ,COMMA  in this case it would be *pr ,COMMA  *pr would be a struct rect and that struct rect  .PERIOD righttop .PERIOD x – (*pr) .PERIOD leftbot .PERIOD x and so on .PERIOD  So ,COMMA  the lesson here is that instead of passing structures ,COMMA  you pass pointers to structures and now whatever be the size of the structure .PERIOD  So ,COMMA  you have a struct rectangle which inside has two points and so on .PERIOD  So ,COMMA  you may want to pass a very large structure and copying that will take a long time .PERIOD  But ,COMMA  instead what you do is ,COMMA  you pass just a pointer ,COMMA  now regardless of the size of the structure only one pointer is copied .PERIOD  So ,COMMA  this same principle goes for returning structures as well ,COMMA  when on a structure from the function what you would do is to return a pointer to that structure .PERIOD  Of course ,COMMA  now the structure has to be allocated on the heap rather than the stack .PERIOD   Now ,COMMA  let see how the memory depiction of this looks like .PERIOD  So ,COMMA  pr when you define struct rect *pr ,COMMA  pr is a pointer to a structure of type rectangle and then what is happening here is there ,COMMA  if you want to access the y coordinate of the left bottom ,COMMA  you would say ((*pr) .PERIOD leftbot) .PERIOD y .PERIOD  So ,COMMA  it will come to the leftbot field of rectangle and pick its some field y .PERIOD  So ,COMMA  ((*pr) .PERIOD leftbot) .PERIOD y would refer to this location in the memory .PERIOD  Similarly ,COMMA  ((*pr) .PERIOD righttop) .PERIOD y would be this location in the memory and so on .PERIOD  So ,COMMA  you can address the sub fields of address the fields of a structure using pointer .PERIOD   There is one syntactic convenience that C provides you ,COMMA  because addressing structures is a fairly common occurrence .PERIOD  And because in this case by associativity ,COMMA  you cannot omit the parenthesis ,COMMA  you cannot say *pr without parenthesis ,COMMA  because it means pr .PERIOD leftbot and * of that .PERIOD  So ,COMMA  that is not what you want ,COMMA  you want to say that take the structure in the location *pr and take it is leftbot .PERIOD  So ,COMMA  in this case by it is associativity and precedence rules ,COMMA  you have to include these parenthesis ,COMMA  you cannot omit them and this is inconvenient .PERIOD  Therefore ,COMMA  C provides a syntactic convenience ,COMMA  which is pr arrow ,COMMA  arrow is actually two characters it is a - and a > .PERIOD  So ,COMMA  pr - > leftbot is the same as within bracket (*pr) .PERIOD left bot .PERIOD  So ,COMMA  there are two ways to address the fields of the location pointed to by pr .PERIOD  So ,COMMA  pr is a pointer to a struct rect you can access its leftbot by saying (*pr) .PERIOD leftbot or pr - > leftbot .PERIOD  Notice that ,COMMA  these two characters - and > is just a single operator and they have .PERIOD  .PERIOD  .PERIOD  So ,COMMA  - > ,COMMA  that is the - > operator and  .PERIOD  have the same precedence and both are left associated .PERIOD   Once we know structures and pointers to structures ,COMMA  we can introduce some very important data structure called link list .PERIOD  So ,COMMA  we will first see what link list are ,COMMA  how to operate on them ,COMMA  and then argue why link list are useful .PERIOD   So ,COMMA  let us just introduce this notion called self referential structures .PERIOD  So ,COMMA  we are defining a struct node that has two fields - one is an int data ,COMMA  and the next field is the surprising one ,COMMA  it is a pointer two type struct node .PERIOD  So ,COMMA  this data structure ,COMMA  this c structure is called a self referential structure because internally there is a pointer to an object of the same type .PERIOD  So ,COMMA  in that sense it refers to some other object of the same type .PERIOD  So ,COMMA  it is called self referential .PERIOD   So ,COMMA  an example would be like this where the data field has 10 ,COMMA  and the next field points to something else which should be a struct node So ,COMMA  then field next is of type struct node ;SEMICOLON  now ,COMMA  there is a subtle point to be emphasized ;SEMICOLON  instead of struct node * had I return struct node next then this is not allowed ,COMMA  because the definition of struct node has an internal struct node inside it ,COMMA  so which essentially has infinite size .PERIOD  So ,COMMA  we are cleverly avoiding that by including just a pointer to the next node .PERIOD  So ,COMMA  using this structure we can define what is known as a singly link list .PERIOD  So ,COMMA  an example of a singly link list structure would be where we have pointer which we will call the head of the list ,COMMA  head points to the first struct which is 4 ,COMMA  which as data 4 ;SEMICOLON  and it is linked to another struct which has data 2 ,COMMA  that is linked to another struct which as data 1 ,COMMA  and so on .PERIOD  The last struct in the list will be linked to null .PERIOD  So ,COMMA  there is only one link from each node ,COMMA  hence the name singly link list .PERIOD   So ,COMMA  the fact that the next field is null indicates that that is the last node in a link list .PERIOD  And a link list is always identified by its head which is the pointer to the first node in the link list .PERIOD  Once we reach the first node we can travel the list by using just the next links .PERIOD  So ,COMMA  once we have a link to 4 ,COMMA  we can always say ,COMMA  4 ,COMMA  2 ,COMMA  1 ,COMMA  -2 ,COMMA  and so on .PERIOD  So ,COMMA  the list is made modeled by the variable called the head that points to the first node in the list .PERIOD  And if the head is null then that means the list is empty .PERIOD  And then you have a bunch nodes ;SEMICOLON  and when once we reach a node with the next field null then that is the last node in the link list .PERIOD  Now ,COMMA  let us look at certain simple operations on singly link list .PERIOD  Suppose you want to insert a node at the front of the list ,COMMA  so we have a list ,COMMA  4 ,COMMA  2 ,COMMA  1 ,COMMA  -2 ,COMMA  and we want to insert something else in the beginning .PERIOD  So ,COMMA  what you do is you create a new node of type struct node and set its data field to whatever number that you want to store .PERIOD  Now ,COMMA  add it to the front of the list ;SEMICOLON  we will see how this can be done .PERIOD   So ,COMMA  suppose that the head is now pointing to 4 ,COMMA  and the list is 4 ,COMMA  2 ,COMMA  1 ,COMMA  -2 ,COMMA  and you want to add a new node ,COMMA  so 2 is the node ,COMMA  the data field is 2 ,COMMA  how do you add ?QUESTIONMARK  You do two operations – first you say that 2 is next is the first node in the old list .PERIOD  So ,COMMA  that would insert 2 here .PERIOD  And then now the list has changed because the first element is now 2 ,COMMA  so head moves to 2 ;SEMICOLON  head was previously 4 and head now moves to 2 .PERIOD  So ,COMMA  this is abstractly how you would insert a node at the beginning of a list .PERIOD    So ,COMMA  now ,COMMA  let us try to code it and see .PERIOD  So ,COMMA  first we need a code small function to make a node with the given data .PERIOD  So ,COMMA  we will say ,COMMA  struct node * make_node in 12 .PERIOD  Now ,COMMA  we will create a pointer struct node * temp ,COMMA  then use one of the malloc function called calloc ;SEMICOLON  so 1 ,COMMA  size of struct node .PERIOD  So ,COMMA  this will allocate memory enough to create one node .PERIOD  Now ,COMMA  this ,COMMA  that memory its data field will be set to val which is what we are given as argument to the function and then you return the node .PERIOD  So ,COMMA  we have created a node ;SEMICOLON  and how do you insert in the front ?QUESTIONMARK  Once you have ,COMMA  once you receive an value to be inserted at the beginning of a list .PERIOD  So ,COMMA  the list is identified by the head .PERIOD  So ,COMMA  we have to create a node which contains the value and insert it at the beginning of this list .PERIOD  So ,COMMA  what we do is we first create a node with the value using make_node function ;SEMICOLON  now temp next is set to head ;SEMICOLON  so this link is activated .PERIOD  So ,COMMA  2s next will be 4 .PERIOD  So ,COMMA  that is the first step .PERIOD  The second step is that the head now has to move to 2 because the first element in the new list is 2 ,COMMA  not 4 .PERIOD  So ,COMMA  I will just say ,COMMA  head = temp ,COMMA  and return head which is the head of the new list .PERIOD    And now ,COMMA  you can call this function multiple time .PERIOD  Suppose you want to start with an empty list and insert -2 ,COMMA  then insert -1 ,COMMA  then insert 2 ,COMMA  then insert 4 ,COMMA  then insert 2 ,COMMA  you can call these functions one after the other .PERIOD  So ,COMMA  I can just say struct node *head = insert_front (2 ,COMMA  insert_front( 4 ,COMMA  insert_front(2 ,COMMA  insert_front(1 ,COMMA insert_front(-2 ,COMMA NULL))))) .PERIOD  So ,COMMA  this is the function ;SEMICOLON  this is the sequence of functions and this is the list that you will end up with .PERIOD  So ,COMMA  once you have the function to insert at the beginning of a list ,COMMA  you can use that function multiple times to build up the list .PERIOD   Now ,COMMA  let us look at some useful functions to be done on link list .PERIOD  So ,COMMA  once you have a link list it will be good if you can search the link list to see whether an element is present or not .PERIOD  So ,COMMA  we will look at a very simple algorithm .PERIOD  So ,COMMA  we want to search for a particular key that is an element in a singly link list .PERIOD  So ,COMMA  how do you do it ?QUESTIONMARK  Abstractly ,COMMA  what you do is you start with the head ,COMMA  see whether the data field in the head node is the key that you want .PERIOD   If it is ,COMMA  then you are done and say ,COMMA  that I have found it ;SEMICOLON  if it is not what you do is ,COMMA  you go to the next node through the next link and then search ;SEMICOLON  ok ,COMMA  you said the data field of the next node if it is you are done ;SEMICOLON  if it is not ,COMMA  you search and follow the next node .PERIOD  You follow this procedure until you reach the last node .PERIOD  Suppose ,COMMA  you have not found the key even in the last node ,COMMA  and you follow the next link and it is null ;SEMICOLON  so once you reach null then you know that you have reached the end of the list .PERIOD  So ,COMMA  you cannot take null next that will cause your code to crash .PERIOD  So ,COMMA  once you know that your node is null ,COMMA  you can end the search and then say that the key is not present in the list .PERIOD  Here is a flowchart corresponding to that ;SEMICOLON  you start with *curr = head ;SEMICOLON  now ,COMMA  is curr null ,COMMA  if the curr is null then that means you have reached the end of the list and you have not found the key .PERIOD  So ,COMMA  if the curr != NULL then there is data still to be searched .PERIOD  So ,COMMA  you see whether curr data is equal to key ;SEMICOLON  if it is yes then you have found the key ,COMMA  otherwise you follow the next node link to go to the next node in the link list ;SEMICOLON  and again ,COMMA  repeat the procedure ,COMMA  and you can code this in a straight forward manner .PERIOD   So ,COMMA  I will write struct node *search ;SEMICOLON  I need the head of the list and I need the key .PERIOD  You start with *curr = head .PERIOD  If curr !=NULL && curr ->data != key ,COMMA  you follow the next link ,COMMA  curr = curr->next ,COMMA  and you repeat the procedure .PERIOD  So ,COMMA  when you exit the list either curr will be null or curr data will be key .PERIOD  So ,COMMA  what is the condition when you reach the return ?QUESTIONMARK  So ,COMMA  if the key is absent then you are returning null ,COMMA  if the key is present you are returning the pointer to the node ,COMMA  pointer to the first node that contains the key .PERIOD  So ,COMMA  convince yourself that the code works .PERIOD   Now ,COMMA  let us look at slightly more involved operations .PERIOD  We have seen insert at the head of the list and that was fairly simple ,COMMA  now suppose you want to insert into the middle of the list ;SEMICOLON  you do not want to insert right at the front ,COMMA  you want to insert somewhere in the middle .PERIOD  Now ,COMMA  there are two cases here .PERIOD  If the list is null ,COMMA  that is the easy case ;SEMICOLON  if the list is null then insert in the middle is essentially insert at the front .PERIOD  So ,COMMA  we already have seen the code for that .PERIOD   Now ,COMMA  if the list is not null ,COMMA  now it is a new algorithm .PERIOD  So ,COMMA  let us look at an example .PERIOD  So ,COMMA  suppose the list is 4 ,COMMA  2 ,COMMA  1 ,COMMA  -2 ,COMMA  and I want to insert a node 5 after node 2 .PERIOD  So ,COMMA  how do I do it ?QUESTIONMARK  2s next link was 1 .PERIOD  And what we need to do in this case is I want to say that I have to insert this node 5 ;SEMICOLON  5s next node will be 1 ;SEMICOLON  that is ,COMMA  so think about this as it link in a chain .PERIOD  So ,COMMA  you need to disconnect this link say that 2 is now connected to 5 ,COMMA  and 5 is then connected to 1 .PERIOD  Now ,COMMA  the only thing to be noted is that the links have to be detached in a particular sequence .PERIOD  So ,COMMA  first I need to say that 5s next is 1 ,COMMA  and then I need to say that 2s next is 5 .PERIOD  So ,COMMA  convince yourself that the opposite sequence where I say that 2s next is 5 ,COMMA  now your code will has no way to proceed because you have lost the how to traverse from 2 to 1 .PERIOD  If you say that 2s next is 5 ,COMMA  then 5 has no way to know what was the original next node of 2 .PERIOD  So ,COMMA  you have to do it in a particular sequence - 5s next is 1 ,COMMA  and then 2s next is 5 .PERIOD  We will see this code in a minute .PERIOD    So ,COMMA  what we do is we want to insert after a node ,COMMA  so pcurr is the node after which we have to insert ;SEMICOLON  and pnew is pointing to the new node that we have to insert .PERIOD  If pcurr is null ,COMMA  then essentially the list is basically pnew ;SEMICOLON  this is a case that we have seen before .PERIOD  If pcurr is not null ,COMMA  that means the list is not empty ,COMMA  then what you do is ,COMMA  the new node’s next node is ,COMMA  pcurr’s next node .PERIOD  So ,COMMA  5s next node is the old 2s next node which is 1 .PERIOD  So ,COMMA  5 next will be set to 1 .PERIOD   And after that I will say ,COMMA  pcurr->next = pnew ;SEMICOLON  then I will say that pcurr which is 2s next will be set to 5 .PERIOD  So ,COMMA  convince yourself that if I swap these 2 lines ,COMMA  if I swap the lines order then the code will not work .PERIOD  So ,COMMA  see this for 5 minutes and you convince yourself that that will not work .PERIOD   So ,COMMA  let us just see how this works .PERIOD  So ,COMMA  initially ,COMMA  let us say that I want to insert after 2 ,COMMA  and new is the new node .PERIOD  So ,COMMA  initial state is something like this ;SEMICOLON  the 5s next node is pointing to something ,COMMA  maybe some arbitrary location .PERIOD  Now ,COMMA  after line two that is pnew -> next = pcurr -> next ,COMMA  this is the state of pointers .PERIOD  Please look very carefully .PERIOD  So ,COMMA  5s next will point to 1 ,COMMA  and then this point 2s next is also pointing to 1 .PERIOD  So ,COMMA  there are 2 nodes whose next is 1 which is fine because we have not completely inserted 5 into the list now .PERIOD  Now ,COMMA  at this point ,COMMA  I will just detach 2s next and make it point to 5 .PERIOD  So ,COMMA  there we go .PERIOD  So ,COMMA  after step 3 you have essentially inserted 5 into the list .PERIOD    Now ,COMMA  let us look at some syntactic conveniences that c provides you .PERIOD  So ,COMMA  repetitively you are typing the struct node ,COMMA  and things like that is it is just too much to type ,COMMA  and c allows you to define short names for types .PERIOD  So ,COMMA  if I want to say ,COMMA  like struct node * I want to use the name list node .PERIOD  So ,COMMA  I will just say struct ;SEMICOLON  instead of struct node *head ,COMMA  I will just say list node head .PERIOD  So ,COMMA  it is a shorter way to do it .PERIOD   So ,COMMA  how do I write this ?QUESTIONMARK  This is using what is known as a typedef keyword in c .PERIOD  So ,COMMA  if I say ,COMMA  typedef struct node * list node ,COMMA  what it means is that list node is another name for the long type struct node * .PERIOD  So ,COMMA  this is something that you may use if you want to .PERIOD  It is not something that is that you should use ,COMMA  but it is just convenient .PERIOD  So ,COMMA  if I say ,COMMA  list node head ,COMMA  this is the same as saying struct node *head ,COMMA  curr .PERIOD    Now ,COMMA  let us see why link lists are important .PERIOD  So ,COMMA  first of all it is one of the first non trivial data structures that you learn .PERIOD  In earlier days when c had only fixed size arrays ,COMMA  link list was important when you needed variable size storage .PERIOD  Nowadays ,COMMA  c has variable size storage ,COMMA  so you can ,COMMA  in arrays ,COMMA  so that is not so important any more .PERIOD  But ,COMMA  here is one important thing ,COMMA  one difference between link list and arrays which are very important .PERIOD   Like ,COMMA  insertion and deletion in link list are fairly cheap .PERIOD  In the case of an array ,COMMA  so if you want to insert an element at position k in an array ,COMMA  you have to copy all elements from k to n -1 ,COMMA  to the last element in the array ;SEMICOLON  move each of them backwards ,COMMA  makes space for it ,COMMA  and then insert the k th array .PERIOD  So ,COMMA  this involves ,COMMA  in the worst case ,COMMA  it involves moving all the elements of the array by one element ,COMMA  one position each .PERIOD   Similarly ,COMMA  for delete ;SEMICOLON  suppose ,COMMA  you want to delete an element from array ,COMMA  then what you have to do is ,COMMA  you have to take the remaining elements of the array and move them one position to the left .PERIOD  So ,COMMA  this will involve moving n elements in the array if array has n elements in the worst case .PERIOD  Whereas ,COMMA  note that in the link list case ,COMMA  to insert or delete any element ,COMMA  a new node ,COMMA  whether at the beginning or in between ,COMMA  it just takes one operation ;SEMICOLON  the other elements need not be manipulated .PERIOD   So ,COMMA  let us just quickly see how to delete a particular node in a link list .PERIOD  So ,COMMA  we will just say that 4 ,COMMA  2 ,COMMA  1 ,COMMA  -2 ,COMMA  is the link list ,COMMA  and I want to delete this particular node ,COMMA  is that possible ?QUESTIONMARK  So ,COMMA  I cannot straight forward delete this node because the previous nodes next element should point to this guys next element .PERIOD  So ,COMMA  if I want to delete 1 ,COMMA  what do I have to do ?QUESTIONMARK  I have to say that 2s next node should be -2 .PERIOD   But ,COMMA  in a singly link list there is no way to go back ;SEMICOLON  from 1 you cannot easily get to 2 .PERIOD  So ,COMMA  this is slightly ;SEMICOLON  so deletion requires slightly some more information .PERIOD  So ,COMMA  if I can delete a node ,COMMA  if I also have a handle a pointer to its previous node ,COMMA  then it is very easy to say that 2s next node will be -2 .PERIOD    And that is what we will do .PERIOD  So ,COMMA  we will say that let us have a delete function ,COMMA  t node is the node that I want to delete ,COMMA  and ppnode is its previous node .PERIOD  And what I will do is ,COMMA  if there is a previous node I will say ,COMMA  previous node’s next is the current node’s next .PERIOD  So ,COMMA  2s next link will go to -2 .PERIOD  If there is no previous node then I will say that ,COMMA  t equal to at the current node’s next ;SEMICOLON  and then once that is done ,COMMA  you delete the current node ,COMMA  pnode .PERIOD  So ,COMMA  this is how you would delete an element from the link list .PERIOD   So ,COMMA  just recap searching in a link list will take order n time ,COMMA  in the case of a link list ,COMMA  that is you have to search all the elements in the worst case which is the same in an array .PERIOD  Now ,COMMA  suppose you sort an array ,COMMA  you have faster search techniques available ;SEMICOLON  you can do binary search in an array .PERIOD  Unfortunately ,COMMA  in a link list ,COMMA  even if you sort the link list ,COMMA  there is no way to do a binary search in the link list ;SEMICOLON  why is this ?QUESTIONMARK  Because you cannot reach the middle element of the link list in one shot .PERIOD   In an array ,COMMA  you can just say a mid ,COMMA  and it will go to the… So suppose you say thatmid = 0+ n-1/2 ,COMMA  you can go to the middle element of the array .PERIOD  But ,COMMA  there is no way to do that in a link list ,COMMA  you have to go one after the other .PERIOD  So ,COMMA  sorting does not help in searching when you are looking at singly link list .PERIOD  But on the other hand ,COMMA  insertion and deletion are very quick in a link list ,COMMA  whereas they are very slow in an array .PERIOD     In this lecture ,COMMA  we will see slightly more advanced data type ,COMMA  then a singly link  list .PERIOD  We will briefly go over one or two functions to manipulate the data structure .PERIOD  The principle of manipulating the data structure for the other operations is similar .PERIOD    So ,COMMA  in the case of a singly link list ,COMMA  we have seen that every node has one link to its next  neighbour ,COMMA  and we have seen this problem in a singly link list that if you are at a current node in a link list ,COMMA  you can always go forward ,COMMA  but there is no way to go back .PERIOD  There is one the only way took get to its previous node is to start all over again from the beginning of the list and traverse until you reach a list traverse ,COMMA  but traverse until you reach the previous node .PERIOD  So ,COMMA  we can easily remedy this by thinking of a data structure ,COMMA  a slightly more involve data structure where every node has two links ;SEMICOLON  one .PERIOD  .PERIOD  .PERIOD  So ,COMMA  look at this node 2 .PERIOD  So ,COMMA  it has two links ;SEMICOLON  one is two it is neighbour successive neighbour .PERIOD  So ,COMMA  it is it is next node ,COMMA  there is another link which goes back to it is previous neighbour .PERIOD  So ,COMMA  in this data structure there are 2 links per node ,COMMA  therefore it is known as a doubly link list .PERIOD  And this list ,COMMA  obviously you can go from a current node ,COMMA  you can go forward or backward ,COMMA  so easily… So ,COMMA  now the variation is this in each node has three fields ;SEMICOLON  one is a pointer to the previous node ,COMMA  the second is the data in the node ,COMMA  and third is the pointer to the next node .PERIOD  So ,COMMA  how will the definition look like ,COMMA  it will say something like struct dllnode ,COMMA  doubly linked list node ,COMMA  it will have one filed which is data in data let us say ,COMMA  and then two nodes - struct dllnode next ,COMMA  and struct dllnode previous .PERIOD  So ,COMMA  one to the go to next node and another to go to the previous node .PERIOD  Now we will need two pointers typically for a doubly link list .PERIOD  One is the pointer to the beginning of list which is usually called the head ,COMMA  and then another to the end of list which is usually called tail .PERIOD  So ,COMMA  I will use a type def in order to the short term the name ,COMMA  I will just say typedef struct dllnode * Ndptr .PERIOD  And then I will say that the list has two node pointers ;SEMICOLON  Ndptr heads ,COMMA  and node pointers last .PERIOD  So ,COMMA  doubly link list .PERIOD  Each node in the doubly link list has two list ;SEMICOLON  one to its previous node ,COMMA  and another to is next node .PERIOD  And the list itself has two pointers ;SEMICOLON  one to the beginning of the list - call the head ,COMMA  and another to the end of the list - call the tail .PERIOD   So ,COMMA  now a doubly link list is another data structure notice that we have seen two or three data structure so far arrays are one ,COMMA  which see already provides .PERIOD  We have already seen singly link list ,COMMA  now we have seen a third link list - third data structure which is a doubly link list .PERIOD  Now data structure has data and a bunch of operation defined on it .PERIOD  So ,COMMA  let us look at a typical operations that can be defined on a doubly link list ,COMMA  and we will go over the implementation of two or three them .PERIOD  So ,COMMA  Ndptr head .PERIOD  So ,COMMA  this is a function that should return the head of the list .PERIOD  Similarly node point of tail ,COMMA  they should return the tail of the list .PERIOD  Insert before ,COMMA  so this is like a insert before node in the case of a singly link list .PERIOD  So ,COMMA  here we are given a current node and we have to insert before a current node in the doubly link list .PERIOD   Notice thus this was difficult in singly link list ,COMMA  because there was no way to go from a current node to a previous node .PERIOD  We could always go to the next node .PERIOD  So ,COMMA  if I say that here is node and insert before that node in a singly link list is a difficult .PERIOD  You need some extra information ,COMMA  but in a doubly link list you have the current node and you can use the previous link in order to go before that .PERIOD  Insert_after_node also can be done this could also be done in a singly link list .PERIOD   And then you can think of several other common like ,COMMA  you can think of a make node ,COMMA  you can think of a make_list with us single with a single node pointer two by pnew .PERIOD  You can make an empty list ,COMMA  you can check whether I given list is empty ,COMMA  you can a write functions to copy a doubly link list to an new doubly link list ,COMMA  you can concatenate to doubly link list .PERIOD  You can do a deep concat ,COMMA  we will see this in a features slide ,COMMA  you can append to link list ,COMMA  and so on .PERIOD  Similarly we can have insert ,COMMA  since we have insert functions we can also have delete functions ,COMMA  you can delete a particular node ,COMMA  you can extract a node in the sense that .PERIOD  So ,COMMA  delete would take out a node and free the memory allocated to the node ,COMMA  extract would just take out the node from the link list ,COMMA  but you retain the node ,COMMA  you can deleted entire list ,COMMA  and so on .PERIOD    So ,COMMA  let us look at a couple of these functions ;SEMICOLON  other functions can be return in similar manner .PERIOD  So ,COMMA  suppose let us take insert before load .PERIOD  This was a function that was not easy with the singly link list .PERIOD  So ,COMMA  I am given a link list L ,COMMA  and given a current node pcurr ,COMMA  and a new node to insert before the current node .PERIOD  So ,COMMA  what are the things to check ?QUESTIONMARK  If the list is empty then insert before the current node just means that you create a new node ,COMMA  and return the new list .PERIOD  Now ,COMMA  if the head of the list is null ,COMMA  then you just say that now the new list contains only one load ,COMMA  L head will point new ,COMMA  L tail will point a new .PERIOD  So ,COMMA  if the list itself was null ,COMMA  then what you do is you create a new node ,COMMA  now the new list contains only one elements .PERIOD  So ,COMMA  the head will point to that and the tail will also point you that ,COMMA  and you return that .PERIOD  Now you come to the non trivial case ,COMMA  suppose there is a list ;SEMICOLON  and the list has some elements .PERIOD  So ,COMMA  if pcurr is not equal to null then what to you do is ,COMMA  sorry if pcurr equal to null then you return L ,COMMA  this is an error .PERIOD  If pcurr is not equal to null then what you do is the following .PERIOD   So ,COMMA  now you have to insert pnew in to the list .PERIOD  So ,COMMA  how do you do this ?QUESTIONMARK  So ,COMMA  we say that the new nodes next will be .PERIOD  .PERIOD  .PERIOD  So ,COMMA  we are trying to insert pnew before pcurr .PERIOD  So ,COMMA  the new nodes next will .PERIOD  So ,COMMA  the new nodes next will be pcurr ;SEMICOLON  pcurr previous will go to pnew .PERIOD  And so the pnew next will go to pcurr ,COMMA  and pcurr previous will go to pnew .PERIOD  Similarly we have to say that the previous node ,COMMA  the node before pcurr it has to point to pnew .PERIOD  So ,COMMA  pcurr previous that nodes next will good point to pnew ,COMMA  and then you return the new list ,COMMA  so this can be done by looking at pointers and handling pointers carefully .PERIOD   So ,COMMA  now let us see how to delete a particular node in a list .PERIOD  So ,COMMA  if you have to delete header of the list ,COMMA  then if there is a list you just delete the header ,COMMA  and you just free the entire list .PERIOD  Now if you have to delete a particular node in the middle of a list ,COMMA  what do you do ?QUESTIONMARK  So ,COMMA  let us look at the various cases .PERIOD  So ,COMMA  in case one the node that you want to delete is the head of the list .PERIOD  So ,COMMA  in this case suppose you want to delete p ,COMMA  what would you do ?QUESTIONMARK  You would make head point to the next element and free(p) .PERIOD    So ,COMMA  this guys previous will be set to null .PERIOD  So ,COMMA  now it does not point anything and then you win free(p) .PERIOD  So ,COMMA  this is the first case ,COMMA  where p the node to be deleted was the head of the list .PERIOD  Similarly ,COMMA  if you want to delete the tail of the list .PERIOD  So ,COMMA  now what should you do here ,COMMA  the tail should go to p previous .PERIOD  So ,COMMA  in case two when p is the end of the list that we want to delete .PERIOD  Then tail should go into previous .PERIOD  Now this guys next to will now point to null ,COMMA  because we are going to delete this node .PERIOD   And finally we will free(p) .PERIOD  So ,COMMA  L tail will go to p previous ,COMMA  L tail next will be null ,COMMA  and then finally you will free(p) .PERIOD  So ,COMMA  we have seen two easy cases ;SEMICOLON  one is delete a head ,COMMA  and other is delete a tail ,COMMA  and now we will see the difficult case where p is an intermediate node .PERIOD  So ,COMMA  in this case what we will do ?QUESTIONMARK  So ,COMMA  we will we have to remove this node .PERIOD  So ,COMMA  p previous next node should be the next node of p previous .PERIOD  So ,COMMA  this link should point to the node after p .PERIOD  So ,COMMA  that is the first thing .PERIOD   So ,COMMA  we will make this point to the node after p ,COMMA  and this node previous should point to the node before p .PERIOD   So will reset the links .PERIOD  Now ,COMMA  if you look at the link this guys next is the one after p ,COMMA  this guys previous is the one before p .PERIOD  So ,COMMA  now p can be safely removed .PERIOD   .PERIOD   So ,COMMA  this is how you would delete a node in the intermediate list .PERIOD  So ,COMMA  if there is the next node ,COMMA  then p next previous will be p previous ,COMMA  that is this backward link .PERIOD  And if there is a the previous node then p previous next will be p next ,COMMA  that is this forward loop .PERIOD  And finally ,COMMA  after that you will free(p) .PERIOD  So ,COMMA  this is how you would be delete a node from a link list from a doubly link list ,COMMA  and other operations can be done in a similar manner and some of these operation will be asked in their excise problem that you will be assigned .PERIOD  Similarly ,COMMA  you can think of an extract node ,COMMA  the code will be exactly identical to before except at the end ,COMMA  you will instead of freeing p ,COMMA  you will return p .PERIOD  You do not free the p node ,COMMA  we will just the return the p node .PERIOD   .PERIOD  Now ,COMMA  let us look at one more example ,COMMA  how do you attend append one node to the end of the list .PERIOD  So ,COMMA  first we will check that the node is pointing to a normal node ,COMMA  if it is pointing to a null node that is nothing to be the done .PERIOD  So ,COMMA  there is nothing to be appended .PERIOD  So ,COMMA  you have return .PERIOD  Now ,COMMA  if there is a list ,COMMA  then what to you do is if there is no need list what you do is you make an list with only one node which is p .PERIOD  Now if there is a list ,COMMA  you can in order to append the node at the end ,COMMA  what you could do is call insert_after_node(L ,COMMA  L>last ,COMMA p) So ,COMMA  append will be the same as insert the node p at the end of the list .PERIOD  So ,COMMA  you will say insert after L last ,COMMA  what is the node to be inserted p ?QUESTIONMARK  So ,COMMA  if you have in insert_after_node or an insert before node ,COMMA  you can do this to implement other functions .PERIOD  So ,COMMA  this is the brief introduction to doubly link list which are similar to singly link list ,COMMA  but facilitate forward as well as backward traveling from a current node ,COMMA  using that you can implement more functions easier than a singly link list .PERIOD  At the same time ,COMMA  it has all the advantages of a singly link list in the sense that if you want to insert a node ,COMMA  it can be done using a constant of number operation ,COMMA  if you want to delete a node it can be done in the constant number of operations .PERIOD  So ,COMMA  those advantages are similar to a singly link list .PERIOD  At the same time the disadvantages are also similar to a singly link list .PERIOD  In the sense that if you want to search through even a shorted doubly link list ,COMMA  you have to search through all the elements .PERIOD     So ,COMMA  one of the basic principles is to separate the function prototype declarations from the function definitions .PERIOD  We have seen that when we have a function we have two things to do - one is to declare a function which is just the types involved in the function ,COMMA  and then the definition of the function which is actually the code of the function .PERIOD  So ,COMMA  one way to structure it ,COMMA  one principle in structuring is that we will separate out the function prototype from the function definition .PERIOD   Now ,COMMA  place all prototype definitions ,COMMA  structure definitions ,COMMA  typedefs ,COMMA  so just the declarations ,COMMA  you will place it in a file with suffix  .PERIOD h .PERIOD  So ,COMMA  right now we have been coding in a file call  .PERIOD c .PERIOD  So ,COMMA  right now what we are proposing is that the declarations alone we will place it in a separate file with suffix  .PERIOD h .PERIOD  You have already seen such an example which is stdir .PERIOD h ,COMMA  we never bothered about what is inside a stdir .PERIOD h .PERIOD  Now ,COMMA  we are talking about how to write these header files .PERIOD    Now ,COMMA  we will see why separate  .PERIOD h and  .PERIOD c ?QUESTIONMARK  Programs that use the doubly link list need to know only the declarations actually .PERIOD  These are ,COMMA  think of these programs as the consumers of this code .PERIOD  Now ,COMMA  it does not need to know how the code is implemented ,COMMA  just what to call and what is the declaration of the function .PERIOD  Now ,COMMA  if we do this ,COMMA  then list .PERIOD c can be compiled separately into object code .PERIOD  So ,COMMA  we can say gcc -c list .PERIOD c ,COMMA  this will produce just file call list .PERIOD o .PERIOD  List .PERIOD o is not executable ,COMMA  but it can be used in other programs to create executables .PERIOD   So ,COMMA  how can we do this ?QUESTIONMARK  This is the procedure known as linking .PERIOD  So ,COMMA  we can link the list .PERIOD o .PERIOD  So ,COMMA  notice the difference here .PERIOD  When we see gcc -c list .PERIOD c ,COMMA  what it could produce is a  .PERIOD o function ,COMMA   .PERIOD o file ;SEMICOLON  and this  .PERIOD o file can be included to produce output .PERIOD  So ,COMMA  this says that we are compiling prog .PERIOD c file ,COMMA  with list .PERIOD o object file ,COMMA  and the output we will produce is called prog .PERIOD  So ,COMMA  gcc -o prog means ,COMMA  the output file we will produce will be called prog .PERIOD  So ,COMMA  if we omit -o prog ,COMMA  and the simply say gcc prog .PERIOD c list .PERIOD o ,COMMA  then the file that we will get is ,COMMA  a .PERIOD out .PERIOD  If you specify an output file we will get that output file .PERIOD  Now ,COMMA  inside prog .PERIOD c ,COMMA  let say that we need to use list functions .PERIOD  So ,COMMA  prog .PERIOD c will include “list .PERIOD h” ;SEMICOLON  this is the important thing .PERIOD  It will not say include “list .PERIOD c” ,COMMA  it will just say include “list .PERIOD h” .PERIOD  This is similar to what we have seen with stdio ;SEMICOLON  we did not bother about whether there was an stdio .PERIOD c file .PERIOD  We said we will include <stdio .PERIOD h> .PERIOD  Also ,COMMA  notice the difference that we are using double quotes instead of angular brackets .PERIOD  So ,COMMA  when we wrote <stdio .PERIOD h> ,COMMA  what we had was angular brackets ,COMMA  open angular bracket and close angular bracket ,COMMA  here we have quotes ;SEMICOLON  why use that ?QUESTIONMARK  We will see this .PERIOD    So ,COMMA  what is the advantage of separating list .PERIOD c from prog .PERIOD c ,COMMA  why break it up into multiple files ?QUESTIONMARK  One advantage is that it saves a repeated compilation of list .PERIOD c functions while compiling prog .PERIOD c .PERIOD  So ,COMMA  the “list .PERIOD h” specifies to the c pre-processor ;SEMICOLON  we will see this is in a subsequent lecture ,COMMA  that the current working directly will be searched for list .PERIOD h file .PERIOD   So ,COMMA  since we are saying that include “list .PERIOD h” within double quotes ,COMMA  what it means is that ,COMMA  where is list .PERIOD h found ?QUESTIONMARK  It will be found in the current directory .PERIOD  If it is not found in the current directory it will search for some standard library parts ,COMMA  some standard header file parts .PERIOD  So ,COMMA  in the case of <stdio .PERIOD h> we put <stdio .PERIOD h> ;SEMICOLON  that means ,COMMA  that <stdio .PERIOD h> will be found not in the current directory ,COMMA  but in some standard header directories .PERIOD    So ,COMMA  what is the division of work ?QUESTIONMARK  What is the separation between the  .PERIOD c and the  .PERIOD h files ?QUESTIONMARK   .PERIOD h file is the public interface ;SEMICOLON  that ,COMMA  if anybody else ,COMMA  any other program wants to use the list functions what you would do is ,COMMA  include the list .PERIOD h functions ,COMMA  include the list .PERIOD h file .PERIOD  Now ,COMMA  list .PERIOD c implements ,COMMA  defines all the functions that list .PERIOD h has declared .PERIOD  In addition ,COMMA  it can also define other functions ,COMMA  but these functions will not be available to other programs that are using the list .PERIOD h file .PERIOD   So ,COMMA  files using list .PERIOD h will not be able to use these extra functions or even know about these functions .PERIOD  These are thought of as private functions .PERIOD  So ,COMMA  this can be used to implement certain details of your code that other uses of this program need not know about .PERIOD   So ,COMMA  the general principle is what is known as information hiding or localization .PERIOD  So ,COMMA  break your programs into modules .PERIOD  We have already seen one way to break a program into modules ,COMMA  which is by writing functions .PERIOD  Now ,COMMA  this is another way to ,COMMA  this is another level of module array station where you say that take a collection of functions and put them in a file and have multiple files .PERIOD   Now ,COMMA  each module implementing some aspect ;SEMICOLON  for example ,COMMA  data structures like a link list .PERIOD  Now ,COMMA  if a module B does not need to know the details of how another module A works ,COMMA  then we do not need to tell B about how it is done .PERIOD  But ,COMMA  module B should use module A’s  .PERIOD h file ,COMMA  not the  .PERIOD c file .PERIOD    Why do we separate definitions into  .PERIOD h and  .PERIOD c ?QUESTIONMARK  There are some reasons .PERIOD  Programs that use the list functions ,COMMA  for example ,COMMA  are typically consumers ,COMMA  and they do not need to know the exact details behind how these functions work .PERIOD  And we have already done this in other ,COMMA  we do not know about how scanf or printf worked .PERIOD  We just know that scanf needs these two arguments ,COMMA  for example ,COMMA  it needs a format string and it needs the variable to be printed ;SEMICOLON  the printf needs the format string and the variable to be printed .PERIOD  Similarly ,COMMA  scanf needs the format string and the variables to be assigned .PERIOD   So ,COMMA  we just knew that ,COMMA  we do not know anything about how scanf or printf is actually defined or implemented ;SEMICOLON  we just know that it needs these arguments ,COMMA  and therefore we can call them .PERIOD  So ,COMMA  this is the kind of separation of detail that we are hoping to achieve .PERIOD  Now ,COMMA  so if some program wants to use the list functions ,COMMA  such programs can use the prototypes using the include command ,COMMA  #include “list .PERIOD h” .PERIOD  So ,COMMA  again to remind the double quotes specify that it is the current working directory that list .PERIOD h is present in ;SEMICOLON  you can also give full paths .PERIOD   List .PERIOD c program will contain all the actual function definitions .PERIOD  Now ,COMMA  usually header files are much smaller than the c files .PERIOD  If list .PERIOD h and list .PERIOD c are separated ,COMMA  then list .PERIOD c can be compiled ahead of time ,COMMA  and you can generate the object file .PERIOD  Now ,COMMA  notice that list .PERIOD o in this case will be not executable ;SEMICOLON  it is just an object file that can be used to build executables .PERIOD   Now ,COMMA  list .PERIOD c programs is complete ,COMMA  except for a main function .PERIOD  So ,COMMA  it has a lot of functions ;SEMICOLON  it defines all the functions there list .PERIOD h has declared ,COMMA  plus optionally some more functions .PERIOD  And it can be compiled to produce an object code ,COMMA  but it cannot be done ,COMMA  it cannot be compiled into an executable code because it does not have a main function .PERIOD  Now ,COMMA  suppose we have written function called prog .PERIOD c that uses many of the list functions ,COMMA  that uses list .PERIOD h .PERIOD  We can compile prog .PERIOD c to generate an object code: gcc -c prog .PERIOD o prog .PERIOD c .PERIOD  So ,COMMA  now ,COMMA  we have 2 object files ,COMMA  list .PERIOD o and prog .PERIOD o ;SEMICOLON  and then we can use these two object files to create the executable file .PERIOD    Let us look at a diagram which will hopefully be helpful .PERIOD  So ,COMMA  list .PERIOD h includes a prototype declarations ,COMMA  but not the function definitions ;SEMICOLON  list .PERIOD c defines these functions .PERIOD  So ,COMMA  in order to define these functions ,COMMA  first it says ,COMMA  include “list .PERIOD h” ,COMMA  therefore ,COMMA  it will get all the declarations ,COMMA  and then it has this code which implements the list function definitions .PERIOD  prog .PERIOD c is a consumer which needs these functions .PERIOD  So ,COMMA  how does it do it ?QUESTIONMARK  It does not say list .PERIOD c ,COMMA  it says include “list .PERIOD h” .PERIOD  So ,COMMA  the declarations of all the functions are available to prog .PERIOD c .PERIOD  Now ,COMMA  I separately compile list .PERIOD c into list .PERIOD o using gcc -c ,COMMA  and prog .PERIOD c into prog .PERIOD o using gcc -c .PERIOD  So ,COMMA  now ,COMMA  I have 2 object files ,COMMA  list .PERIOD o and prog .PERIOD o .PERIOD  And these will be combined using gcc -o .PERIOD  So ,COMMA  this says that the output file will be called ,COMMA  a .PERIOD out ;SEMICOLON  the compilation units that I need are prog .PERIOD o and list .PERIOD o .PERIOD  So ,COMMA  use these two files ,COMMA  in order to create the output file ,COMMA  a .PERIOD out .PERIOD   And what is the big advantage here ?QUESTIONMARK  Let us consider a scene where the prog .PERIOD c file changes .PERIOD  I need some changes to be made into prog .PERIOD c ;SEMICOLON  maybe I add some more functions ,COMMA  modify some functions and all .PERIOD  So ,COMMA  now I need to recompile and produce the output file .PERIOD  I have changed prog .PERIOD c ,COMMA  but not list .PERIOD c .PERIOD    So ,COMMA  let us say prog .PERIOD c has changed .PERIOD  What should I do now ?QUESTIONMARK  I should compile only the prog .PERIOD c .PERIOD  I can say gcc -c prog .PERIOD c ;SEMICOLON  now ,COMMA  I will produce a new prog .PERIOD o file .PERIOD  Notice ,COMMA  list .PERIOD c has not changed .PERIOD  So ,COMMA  we do not need to recompile list .PERIOD c .PERIOD  So ,COMMA  we can just say ,COMMA  gcc -c prog .PERIOD c ;SEMICOLON  list .PERIOD o is same as before .PERIOD  And then I can use the new prog .PERIOD o ,COMMA  the old list .PERIOD o ,COMMA  in order to produce the new a  .PERIOD o .PERIOD  So ,COMMA  notice the ,COMMA  a .PERIOD out depends on prog .PERIOD o and prog .PERIOD c has changed .PERIOD   So ,COMMA  only this path gets recompiled which is saving a lot of effort .PERIOD  And in large programs ,COMMA  when one particular file changes and you recompile the project ,COMMA  only the necessary files get recompiled .PERIOD  It does not recompile the whole project which will take a lot of time ,COMMA  instead it will compile only those files which are necessary .PERIOD  So ,COMMA  this is the huge advantage .PERIOD   So ,COMMA  this just repeats what was said in the last slide .PERIOD   Now ,COMMA  couple of thoughts about a writing data structure libraries .PERIOD  There is no one design which is best for a data structure library .PERIOD  Choose your structure functions to be as complete as possible for your programs .PERIOD  Now ,COMMA  programs can be based only on the function prototypes .PERIOD  Suppose I write a program which needs a list function ,COMMA  I can just look at the function prototypes in the  .PERIOD h file and then write by program .PERIOD  Consumers do not need to know how the program is implemented ;SEMICOLON  just what the functions are ,COMMA  what are its arguments ,COMMA  not the details about how it is implemented .PERIOD   Now ,COMMA  implementation of libraries should be very sound .PERIOD  All boundary cases should be completely defined and the implementation should thoroughly match the specifications .PERIOD   Also one more thing ,COMMA  allocation and release of storage .PERIOD  If the library is allocating storage ,COMMA  it is only sensible to provide routines in the library itself which can free those storage .PERIOD  So ,COMMA  it cannot be that libraries allocating a storage and the freeing of storage has to be done outside the library ,COMMA  that is not a sensible design .PERIOD  So ,COMMA  if the library itself is allocating storage ,COMMA  you give library functions to free the storing as well .PERIOD  For example ,COMMA  in list .PERIOD h ,COMMA  memory allocation is done only in two places ,COMMA  make empty list and make node .PERIOD  So ,COMMA  to deallocate that you should provide a free functions for these functions ,COMMA  corresponding to these functions .PERIOD   Thanks .PERIOD       In this lecture ,COMMA  let us look at one particular part of the C compiler which is very important ,COMMA  namely the preprocessor .PERIOD  Technically speaking ,COMMA  the preprocessor is the step before compilation .PERIOD  So ,COMMA  let us understand this in detail .PERIOD  (Refer Slide Time: 00:18)    So ,COMMA  let us look at header files .PERIOD  A header file is a file containing C declarations ,COMMA  macro definitions etcetera to be shared between several source files .PERIOD  Header files are included in your program using C preprocessor directives “hash include” .PERIOD  For example ,COMMA  we have seen <stdio .PERIOD h> and within quotes list .PERIOD h .PERIOD  So ,COMMA  header files serves two purposes that we have seen .PERIOD  First is that it could be a system header files .PERIOD  This declares interfaces to part of the operating system including system calls ,COMMA  C libraries and so on .PERIOD  Or you could have your own header files ,COMMA  which you have written to contain declarations of your code of the functions in your code .PERIOD   Now ,COMMA  what happens exactly when you include a header file in a C file ?QUESTIONMARK  Including a header file produces the same results as copying the header file into each source files .PERIOD  So ,COMMA  when you say include<stdio .PERIOD h> ,COMMA  it is essentially taking the contents of the <stdio .PERIOD h> file and copy ,COMMA  pasting in to your source code .PERIOD  So ,COMMA  this happens at exactly the place where the corresponding hash include command was written .PERIOD  The advantages of having these header file and hash include is that related declarations appear only in one place .PERIOD  And if you want to change a particular function or declaration of a function ,COMMA  you just have to change it in a single file .PERIOD  And all files which include that header file will automatically see the change .PERIOD   So ,COMMA  here is something that we have mentioned in the previous video .PERIOD  If the difference between angular bracket in the double quotes ;SEMICOLON  so the angular bracket is usually used in system header files and it searches for the file named let say <stdio .PERIOD h> in a standard list of system directories .PERIOD  If you say within double quotes ,COMMA  on the other hand like list .PERIOD h ,COMMA  it searches for this list .PERIOD h first in the current directory .PERIOD  If it is not found in the current directory ,COMMA  then it goes again in to the standard list of that .PERIOD  Now ,COMMA  the argument for hash include ;SEMICOLON  whether you include it in a angular bracket or in a double quotes ,COMMA  it behaves like a string constant and it is literally put there .PERIOD  So ,COMMA  if you have like comments ,COMMA  the comments are not recognized as just comments .PERIOD  If you have a * symbol ,COMMA  for example ,COMMA  it will be just put exactly like a * symbol .PERIOD  So ,COMMA  it is just treated as a string constant and no interpretation is done .PERIOD   Now ,COMMA  let us look at a very special case that could happen in the header file .PERIOD  Typically ,COMMA  you would not do this .PERIOD  So ,COMMA  suppose you have ;SEMICOLON  within the “header .PERIOD h” you have a text char *error=“Overflow” .PERIOD  Typically ,COMMA  you do not initialize variables in a header file .PERIOD  But ,COMMA  let us say that in a particular “header .PERIOD h” ,COMMA  we have this char *error=“Overflow” .PERIOD   Now ,COMMA  in p .PERIOD c I write this very peculiar thing .PERIOD  I write int x and then in the middle of the code I say #include “header .PERIOD h” .PERIOD  Till now we have always used hash include headers in the beginning of the file .PERIOD  But ,COMMA  suppose what happens if I do it in the middle ?QUESTIONMARK  Now ,COMMA  after the C preprocessor processes the file ,COMMA  what happens is that whatever text is there in “header .PERIOD h” is copy ,COMMA  pasted at that position .PERIOD  So ,COMMA  for example ,COMMA  this code will be transformed by the C preprocessor to look like this .PERIOD  It will say int x and the “header .PERIOD h” contain the single line ;SEMICOLON  char *error=“Overflow” .PERIOD  So ,COMMA  that text will come here .PERIOD  Now ,COMMA  this transformed text is what the C compiler sees and it will compiled in and produce the object code or the executive .PERIOD   So ,COMMA  included files are not limited to declarations and macro definitions ,COMMA  these are merely the typical uses .PERIOD  You can put any text there .PERIOD  And when you include that header file ,COMMA  the text will be copy ,COMMA  pasted into the position .PERIOD  Typically though you would want to avoid this ,COMMA  you would want only declarations in a header file .PERIOD    Now ,COMMA  let as look at some other features that the C preprocessor gives .PERIOD  We have seen in some code ,COMMA  this use of #define .PERIOD  So ,COMMA  #define is used for what are known as object-like macros .PERIOD  An object-like macro is basically an identifier and it will be a replaced by some code text .PERIOD  It is called object-like because it looks like an object .PERIOD  So ,COMMA  its most common use is to give symbolic names to numeric constants .PERIOD  Suppose ,COMMA  you want to write a program in which the maximum array size is let us say 1024 ,COMMA  instead of putting 1024 in several places ,COMMA  the typical usage in a program would be to say #define BUF_SZ ;SEMICOLON  so buffer size to be 1024 .PERIOD  So ,COMMA  you have used #define to define this identifier BUF_SZ and BUF_SZ will be assigned the text 1024 .PERIOD  So ,COMMA  this says that I am defining a macro named BUF_SZ .PERIOD  And it is an abbreviation ,COMMA  the short form for the token 1024 .PERIOD    Now ,COMMA  if somewhere in your code if you say #define BUF_SZ 1024 ,COMMA  in all places after that ,COMMA  suppose you say like char *str= malloc or calloc(BUF_SZ ,COMMA  sizeof(char)) ,COMMA  what the preprocessor will do is that it will look at this string constant .PERIOD  It is the name of a macro .PERIOD  And it will replace it with 1024 which is value of the macro .PERIOD  So ,COMMA  the transformed text will look like this ;SEMICOLON  char *str= malloc or calloc (1024 ,COMMA  sizeof(char)) .PERIOD   Now ,COMMA  by convention macro names are return in upper case ,COMMA  so that somebody who reach the code will be aware that code this could be a macro ;SEMICOLON  because if I write it in lower case ,COMMA  there are chances that somebody would think ,COMMA  that it is a variable name and look for the variable .PERIOD  So ,COMMA  writing it in capital letters is a way of indicating to the user that this is actually a macro .PERIOD  So ,COMMA  please look at in a header file for example .PERIOD   So ,COMMA  the C preprocessor scans through a program sequentially .PERIOD  This is an important thing to understand .PERIOD  And macro definitions take effect at the place you write them .PERIOD  So ,COMMA  let us look at a very specific example to illustrate this point .PERIOD  So ,COMMA  suppose you write foo = X ,COMMA  after that you have a line say #define X 4 and then bar = X .PERIOD  What will the C preprocessor do ?QUESTIONMARK  It will look through the file and say foo = X .PERIOD  fine .PERIOD  It does not know what X is .PERIOD  It will not transform that line .PERIOD  Then it sees the #define X 4 .PERIOD  Now ,COMMA  it knows that X is a macro and it has the value four .PERIOD  And then it sees bar = X ,COMMA  but now X is a macro .PERIOD  The preprocessor knows about this .PERIOD  So ,COMMA  it will replace X with four .PERIOD  So ,COMMA  that transformed text will be foo = X ;SEMICOLON  bar = 4 .PERIOD  It is natural to imagine that I would have four = four .PERIOD  But ,COMMA  that is not what happens ;SEMICOLON  because the way the source code was written ,COMMA  the #define happened after four = X .PERIOD  So ,COMMA  anything that happens before the macros was defined is not changed .PERIOD        Now ,COMMA  let us conclude this discussion of preprocessor with a very typical project management problem .PERIOD  And we will see a third macro ,COMMA  that is ,COMMA  third operation that is done by the C preprocessor .PERIOD  This is something called # ifndef .PERIOD  This is used typically when you have multiple files in your project and you need to include multiple header files into a single a source file .PERIOD   So ,COMMA  let us discuss what is the problem with the particular example ?QUESTIONMARK  Suppose ,COMMA  we have a list .PERIOD h and the list .PERIOD c So ,COMMA  I have this header file list .PERIOD h .PERIOD  Now ,COMMA  I have a program p1 .PERIOD c ;SEMICOLON  that needs the list functions and also creates a bunch of new functions .PERIOD  So ,COMMA  its declarations will be included in p1 .PERIOD h .PERIOD  Now in p1 .PERIOD h ,COMMA  I would say include list .PERIOD h .PERIOD  So ,COMMA  this is okay .PERIOD  I will have a corresponding p1 .PERIOD c ,COMMA  which will we just say include p1 .PERIOD h .PERIOD  Now ,COMMA  suppose that I have another file p2 .PERIOD c ;SEMICOLON  the p2 .PERIOD c needs some functions in list .PERIOD h and some functions n should p1 .PERIOD h .PERIOD  So now ,COMMA  there ,COMMA  when I write p2 .PERIOD h ,COMMA  I will say include p1 .PERIOD h and include list .PERIOD h .PERIOD  Now ,COMMA  what happens is that when we compile p2 .PERIOD c ,COMMA  list .PERIOD h gets included twice .PERIOD  First ,COMMA  because it indirectly includes list .PERIOD h ,COMMA  and second because it includes p1 .PERIOD h which itself includes list .PERIOD h .PERIOD  So ,COMMA  list .PERIOD h code will be a copy ,COMMA  pasted twice in p2 .PERIOD h .PERIOD   So ,COMMA  for example ,COMMA  this is the problem ,COMMA  because if list .PERIOD h contains a structure definition ,COMMA  it will be included twice and the compiler will produce an error .PERIOD  So ,COMMA  this is the standard problem in large projects ;SEMICOLON  where you want to include a file ,COMMA  but you do not want to include it multiple times .PERIOD  So ,COMMA  in this particular example I want to improve list .PERIOD h ,COMMA  but I want to avoid the possibility that list .PERIOD h is included multiple times leading to compiler errors .PERIOD   So ,COMMA  how do we solve this ?QUESTIONMARK  So ,COMMA  this is a facility provided by the C preprocessor .PERIOD  You can say you can use this #ifndef .PERIOD  So ,COMMA  it is saying that if this macro is not defined ,COMMA  then do something .PERIOD  So in list .PERIOD h ,COMMA  I will write the following: #ifndef .PERIOD  This is a macro that I will define .PERIOD  So ,COMMA  usually if a file is list .PERIOD h the macro will be named in capital letters ;SEMICOLON  LIST_H .PERIOD  If this macro is not defined ,COMMA  then #define list .PERIOD h .PERIOD  So ,COMMA  this says define list .PERIOD h from me and then all the remaining statements in list .PERIOD h .PERIOD  And then it will be enclosed in an end if .PERIOD    So ,COMMA  now ,COMMA  what happens is that suppose list .PERIOD h is included for the first time in p1 .PERIOD h ,COMMA  then list .PERIOD h is not defined .PERIOD  So ,COMMA  it will define list .PERIOD h and then include list .PERIOD h in p1 .PERIOD h .PERIOD  Now ,COMMA  p2 .PERIOD h includes p1 .PERIOD h and list .PERIOD h .PERIOD  So ,COMMA  now when list .PERIOD h is included for the second time ,COMMA  the C preprocessor will look at this statement ;SEMICOLON  ifndef LIST_H .PERIOD  That has been defined because p 2 p1 .PERIOD h has already defined .PERIOD  It calls it to be defined .PERIOD  So ,COMMA  it says that LIST_H is defined ,COMMA  so I will skip the entire thing until ifndef .PERIOD  So ,COMMA  this is one way to say that .PERIOD  So ,COMMA  if LIST_H macro is not defined as yet ,COMMA  then define it and process all statements until the matching ifndef .PERIOD  If it is already defined ,COMMA  this happens when you are trying to include it for the second time ,COMMA  then all statements until the ifndef are skipped .PERIOD  So ,COMMA  you do not copy ,COMMA  paste it for the second time .PERIOD  So ,COMMA  this is the standard way to avoid including one file multiple types .PERIOD   So ,COMMA  the high level picture of the stages in compilation .PERIOD  You have ;SEMICOLON  we take up .PERIOD  So ,COMMA  the high level picture of the stages in compilation .PERIOD  You have source files and then it run through this preprocessor ,COMMA  it produces the transformed files .PERIOD  And then after compilation using gcc -c ,COMMA  it produces object files .PERIOD  And after the object files are done ,COMMA  they are linked to produce the executable files .PERIOD  So when you press gcc ,COMMA  some source file ,COMMA  internally it first runs the C preprocessor ,COMMA  then it runs the compiler and then it is runs the linker .PERIOD  And gcc provides facilities to stop the compilation at any stage .PERIOD  And so for example ,COMMA  we have seen in the previous video that you can stop the compilation just after the compilation itself by using gcc -c .PERIOD  So ,COMMA  it will produce  .PERIOD o files .PERIOD  And several  .PERIOD o files can be later linked to produce the a .PERIOD out file .PERIOD  In this video will talk about how pre increment ,COMMA  post increment and operators like that work in c .PERIOD  So ,COMMA  will first introduce the notion of side effects .PERIOD  Now ,COMMA  we have earlier seen that any expression in c yields a certain values .PERIOD  So ,COMMA  let us look at a particular example ,COMMA  if you have integer variables i and j ,COMMA  i is assigned to 1 and then ,COMMA  you say that j is assigned to i plus 1 .PERIOD  What happens is that ,COMMA  you take the value of i add 1 to it and then result of the expression i plus 1 .PERIOD  So ,COMMA  the result of the expression will be 2 ,COMMA  which is assigned to j .PERIOD  The value of i itself is un change due to an expression like i plus 1 is just that you read the value of a use it and then ,COMMA  return the value of i plus 1 .PERIOD  Now ,COMMA  some expressions in c also change the variables involved in them .PERIOD  For example ,COMMA  if you have a code like int i .PERIOD  Let us say i is initialized to 1 int j and then ,COMMA  you say j equal to plus plus i .PERIOD  In this case what happens is that ,COMMA  you take the value of i increment it .PERIOD  So ,COMMA  you will get i equal to 2 and then ,COMMA  that incremented value is then assign to j .PERIOD  So ,COMMA  evaluating the expression plus plus i has the side effect ,COMMA  that i becomes 2 .PERIOD  So ,COMMA  it not only takes the value of i increments it by 1 and gives it to j ,COMMA  it also has the additional effect that i's value is incremented .PERIOD  So ,COMMA  contrast the first example and the second example ,COMMA  in the first example when you said i plus 1 ,COMMA  the value of i was unchanged and in the second when you said plus plus i ,COMMA  the value of i is changed .PERIOD  So ,COMMA  this is known as a side effect ,COMMA  because in addition to returning the value it also changes the variable involved in plus plus i .PERIOD   So ,COMMA  now ,COMMA  let us look at the operation in slightly more detail .PERIOD  So ,COMMA  when you say int i equal to 1 in j and then j equal to plus plus i .PERIOD  The effect of this plus plus i can be understood in terms of an equivalent code .PERIOD  So ,COMMA  what you do is ,COMMA  consider a code where you have i equal to i plus 1 and then assign j equal to i .PERIOD  So ,COMMA  in this case i will become 2 after i equal to i plus 1 and then j will be assigned the value 2 .PERIOD  So ,COMMA  this is the effect of the pre increment operations .PERIOD   Now ,COMMA  there is also the post increment operator .PERIOD  So ,COMMA  plus plus i is an example of an expression with the pre increment operation .PERIOD  And you can also use i plus plus ,COMMA  which is known as the post increment operation and confusing thing is how do we interrupt fairly complicated expressions like the following .PERIOD  So ,COMMA  suppose you have int i equal to 1 in j and then j equal to i plus plus plus plus plus i .PERIOD  So ,COMMA  what should we expect in this case is this allowed behavior what does it mean ?QUESTIONMARK  What will be the result ?QUESTIONMARK  Which is stored in j ?QUESTIONMARK  So ,COMMA  let us look at these things in slightly greater detail .PERIOD   So ,COMMA  first let us look at some simple examples and try to understand the behavior .PERIOD  So ,COMMA  suppose you have i equal to 1 and then two variables j and k and first you say int j equal to i plus plus .PERIOD  So ,COMMA  this is the post increment operator .PERIOD  So ,COMMA  what happens here is that ,COMMA  you take the value of i assign into j .PERIOD  So ,COMMA  that is i equal to 1 ,COMMA  the current value of i will be assign to j and after the expression is over i will be incremented .PERIOD  So ,COMMA  then i will become 2 .PERIOD  The old value of i is assigned to j and then the value of i will be incremented .PERIOD  So ,COMMA  it is the post increment operator .PERIOD  So ,COMMA  when you printf i and j here ,COMMA  i will be 2 and j will be 1 .PERIOD  Because ,COMMA  old value of i was what was stored in j .PERIOD  Now ,COMMA  let us look at plus plus i .PERIOD  So ,COMMA  if you say k equal to plus plus i ,COMMA  i is now 2 when it is starts and you pre increment i .PERIOD  So ,COMMA  you increment i ,COMMA  i becomes 3 and that value is stored in k .PERIOD  So ,COMMA  it is the pre increment operator ,COMMA  .PERIOD  So ,COMMA  the value will be incremented before the assignment will take place .PERIOD  So ,COMMA  when you print i and k ,COMMA  i will be 3 and k will also be 3 .PERIOD  So ,COMMA  notice the difference between the first case and the second case ,COMMA  the pre increment versus the post increment .PERIOD  Now ,COMMA  let us look at slightly more complicated examples .PERIOD  So ,COMMA  at this point what do we have ?QUESTIONMARK  We have i equal to 3 and j equal to 1 at this point and then you say k equal to plus plus i plus j plus plus .PERIOD  So ,COMMA  take a minute and think about what will happen here ,COMMA  you pre increment i .PERIOD  So ,COMMA  the value of this expression ,COMMA  that is used to add will be 4 .PERIOD  Because ,COMMA  the value of i will be incremented before it is used in the plus expression ,COMMA  where as this is the post increment expression .PERIOD  So ,COMMA  the old value of j will be used and then j will be incremented .PERIOD  So ,COMMA  here the value that will be used will be 4 and here the value that will be used will be the old value of j which is 1 .PERIOD  So ,COMMA  k will be 4 plus 1 which is 5 ,COMMA  i will be incremented .PERIOD  So ,COMMA  i becomes 4 and after this expression is over j will be incremented ,COMMA  .PERIOD  So ,COMMA  j becomes 2 .PERIOD  So ,COMMA  when you print this you will say that i is 4 ,COMMA  j is 2 and k is 5 .PERIOD  So ,COMMA  understand why k is 5 ?QUESTIONMARK  Because ,COMMA  it is 4 plus 1 rather than 4 plus 2 .PERIOD  So ,COMMA  this is fairly simple can be understood in terms of the pre increment and the post increment operator .PERIOD   So ,COMMA  let us look at some code that is equivalent to the post increment operation .PERIOD  So ,COMMA  suppose you have j equal to i plus plus ,COMMA  you can think of it like the following ,COMMA  you can say that j is assign to i .PERIOD  So ,COMMA  the old value of i is assign to j and then ,COMMA  the value of i is increment i equal to i plus 1 .PERIOD  If you want to use the compound assignment operation ,COMMA  then what you can do is j equal to i and i equal to i plus 1 .PERIOD  So ,COMMA  this is equivalent to i plus equal to 1 is equivalent to i equal to i plus 1 .PERIOD  So ,COMMA  contrast with the pre increment operation ,COMMA  there i equal to i plus 1 will be done before j equal to i ,COMMA  here j equal to i will be done before i equal to i plus 1 .PERIOD  So ,COMMA  can we see that this is exactly how post increment works ?QUESTIONMARK  And the answer is yes ,COMMA  in this particular case this is exactly how it works .PERIOD  But ,COMMA  if you want to understand the general case ,COMMA  we have to understand a slightly more advanced concept in c .PERIOD  And note that ,COMMA  this is not something that strictly false in to an introductory course .PERIOD  But ,COMMA  in case you want to understand exactly how it works ,COMMA  then we will look at the general case .PERIOD   So ,COMMA  to understand the general case instead of writing a few examples and compiling it and saying ,COMMA  one way to do it would be to go to the c standard and say what is the standard say and here it is slightly surprising .PERIOD  So ,COMMA  the result of the postfixes operator is the value of the operands .PERIOD  So ,COMMA  this is the old value of the operand will be return ,COMMA  after the result is obtain ,COMMA  the value of the operand is incremented ,COMMA  this is what we saw in the last let .PERIOD  Now ,COMMA  when is the operand increment ,COMMA  we loosely said last time that after the expression is over then the value of i will be incremented .PERIOD  But ,COMMA  what is the precise point at which the value of i will be incremented ,COMMA  this is slightly surprising .PERIOD  So ,COMMA  the side effect of updating the stored value of the operand shall occur between the previous and the next sequence point .PERIOD  So ,COMMA  when you have an i plus plus operation ,COMMA  it will not be immediately updated ,COMMA  it will be updated only after a place known as the sequence point .PERIOD  So ,COMMA  let us just understand briefly what is mean by a sequence point .PERIOD  So ,COMMA  before we get into it let me emphasis ,COMMA  we are trying to understand .PERIOD  So ,COMMA  the post increment operation will say that ,COMMA  the old value of i will be used and the value of i will be incremented after the expression ,COMMA  we are time to precisely understand after what point can we say that i's value would have been incremented .PERIOD   So ,COMMA  a sequence point has defined in the standard is a point in the code by which all pending side effects are ensured to be over .PERIOD  So ,COMMA  this is very technical definition and it is to be understood by compiler writers .PERIOD  But ,COMMA  we will briefly understand what does it mean ?QUESTIONMARK  So ,COMMA  some prominent sequence points include end of full decelerators .PERIOD  So ,COMMA  for example ,COMMA  if I have a declaration int i equal to 0 comma j equal to 0 ,COMMA  then a full decelerated gets over after i equal to 0 .PERIOD  So ,COMMA  after i equal to 0 there is sequence point here .PERIOD  So ,COMMA  if there are any pending side effects ,COMMA  then it will be incremented at this point ,COMMA  this is another full decelerator .PERIOD  So ,COMMA  it will after that again any pending side effects will be ensured to be done .PERIOD  Then ,COMMA  the surprising think is suppose you have full expressions .PERIOD  So ,COMMA  suppose you have like i plus plus plus 3 .PERIOD  So ,COMMA  the major think to understand will be when is this i plus plus suppose to happen ,COMMA  will it happen immediately after i plus plus and the think is then the c standard does not say that ,COMMA  that has to happen .PERIOD  The c standard says that ,COMMA  the next sequence point is the semicolon .PERIOD  So ,COMMA  when you see the semicolon operation ,COMMA  you will know that ,COMMA  this hole think is what is known as a full expression j equal to i plus plus plus 3 .PERIOD  So ,COMMA  that is known as a full expression .PERIOD  So ,COMMA  after you encounter a full expression any pending side effects .PERIOD  So ,COMMA  this is the pending side effect ,COMMA  that will be updated .PERIOD  So ,COMMA  only at that point c standard says that ,COMMA  by now you should have updated the i plus plus operation .PERIOD  Before that the compiler is free to do what it works ,COMMA  it may or may not updated .PERIOD  So ,COMMA  this is actually slightly confusing and contrary to the popular understanding of when should i plus plus have to again the general cases slightly confusing ,COMMA  it is not what would expect ,COMMA  it just says that by the next sequence point in the code ,COMMA  all pending side effects should be take in place .PERIOD  Now ,COMMA  it does in say that exactly at the end of the sequence point ,COMMA  you will update all side effects ,COMMA  compilers of free to do what it wants ,COMMA  all it says is that by the time you need the next sequence point pending side effect should take place in whatever all .PERIOD  So ,COMMA  this is slightly technical .PERIOD  Now ,COMMA  for a full stand list of course ,COMMA  ,COMMA  you have to refer to the c set standard ,COMMA  which is not really recommended I mean ,COMMA  ,COMMA  but it is just that if you want to understand that ,COMMA  then you can look at the standard .PERIOD   So ,COMMA  let us try to understand the post increment operation .PERIOD  So ,COMMA  int's again slightly greater detail .PERIOD  So ,COMMA  if you say that k equal to i plus plus plus j plus plus .PERIOD  Now ,COMMA  there are to ways to do it .PERIOD  Of course ,COMMA  k equal to i plus j ,COMMA  the old values of i and j are used and then ,COMMA  you calculate k assign in to k .PERIOD  And then ,COMMA  you can do i equal to i plus 1 ,COMMA  j equal to j plus 1 ,COMMA  because the standard says that by the time you see the full expression pending updates must be happen it .PERIOD  So ,COMMA  you can say that by the time you see the semicolon operation I will do i equal to i plus 1 and j equal to j plus 1 .PERIOD  Now ,COMMA  if you think a minute you could also do update j first and then i .PERIOD  So ,COMMA  I know that by the time is see the semicolon pending update should happen ,COMMA  ,COMMA  but in what order should it happen is it i equal to i plus 1 first and j equal to j plus 1 next or is it the other way round .PERIOD  And the answer is that ,COMMA  the c standard does in say .PERIOD   So ,COMMA  here is the second certlity in this whole business .PERIOD  So ,COMMA  if you say ,COMMA  what is the order of the side effects ?QUESTIONMARK  There are certain operations ,COMMA  where the sequence is specified .PERIOD  For example ,COMMA  the function call the logical AND operator ,COMMA  the logical OR operator ,COMMA  the conditional operator and the comma operator .PERIOD  So ,COMMA  for very specific operators the sequence is specified .PERIOD  But ,COMMA  in all other operations the order of evaluation of sub expressions is unspecified .PERIOD  And similarly ,COMMA  the order of side effects is also unspecified .PERIOD  So ,COMMA  in the previous slide doing i equal to i plus 1 before j equal to j plus 1 is valid ,COMMA  as also j equal to j plus 1 and i equal to i plus 1 .PERIOD  So ,COMMA  both these orders are valid and the c standard does not say that ,COMMA  what should really happen ?QUESTIONMARK  So ,COMMA  what in practice you will notice is that ,COMMA  in one compiler a certain order may happen ,COMMA  in another compilers certain other order may happen .PERIOD  So ,COMMA  it is left to the compiler and you cannot assume anything about ,COMMA  what really happens ?QUESTIONMARK  Which order it happens ?QUESTIONMARK   Further and here is the most important think as for as the sequence points are conserved .PERIOD  The c standard says that ,COMMA  an object or a variable can have it is stored value modified at most once by the evaluation of an expression between two sequence points ,COMMA  this is very important .PERIOD  So ,COMMA  between two sequence points ,COMMA  if a variable is to be updated by a side effect ,COMMA  then it should be updated at most once .PERIOD  Beyond that ,COMMA  if it is updated multiple times ,COMMA  the c standard says that the result is actually unspecified .PERIOD  So ,COMMA  let us look at a few specific examples to see ,COMMA  what is actually happening here ?QUESTIONMARK  So ,COMMA  let us take the first expression j equal to i plus plus plus i plus plus .PERIOD  So ,COMMA  we know that ,COMMA  here is a sequence point and we know that ,COMMA  here is a sequence point .PERIOD  These are full expressions between these two sequence points ,COMMA  the value of i is updated more than once .PERIOD  Here is i plus plus plus i plus plus and the c standard says that ,COMMA  the behavior is unspecified ,COMMA  this is somewhat surprising .PERIOD  Because ,COMMA  you may try it out multiple times and you will see that consistently some behavior is happening .PERIOD  But ,COMMA  what the c standard says is that ,COMMA  if you take the code and compile it with a different compiler ,COMMA  the result may be different .PERIOD  So ,COMMA  the result of this expression is actually unspecified .PERIOD  Similarly ,COMMA  let us look at the next example .PERIOD  So ,COMMA  here the sequence point is a full expression ,COMMA  let us look at the next expression .PERIOD  So ,COMMA  i plus plus plus plus plus i .PERIOD  So ,COMMA  post increment and then pre increment .PERIOD  Again even in this case ,COMMA  the result is unspecified ,COMMA  because these two are the sequence points here between this full expression and between these full expressions .PERIOD  So ,COMMA  you have two sequence points and between these two sequence points ,COMMA  the value of i is updated more than once .PERIOD  So ,COMMA  the result is unspecified according to the c standard .PERIOD  Let us look at this interesting example ,COMMA  j equal to j plus plus .PERIOD  Again result is unspecified ,COMMA  because you can have these two sequence points and between these ,COMMA  the value of j is updated twice .PERIOD  First ,COMMA  by the post increment operator and then by the assignment operator .PERIOD  So ,COMMA  the value of j is updated more than once ,COMMA  the result is unspecified .PERIOD  The last expression ,COMMA  it is interesting .PERIOD  So ,COMMA  if you look at the two sequence points here ,COMMA  you have one full expression here ,COMMA  another full expression here .PERIOD  Between these ,COMMA  the value of i is updated only once ,COMMA  here and the value of j is updated only once ,COMMA  here .PERIOD  So ,COMMA  it is not that the value of i is updated more than once ,COMMA  .PERIOD  So ,COMMA  the value of j is updated more than once .PERIOD  But here ,COMMA  it say which of these sub expressions happened first ?QUESTIONMARK  Is it i plus plus that happens first or i plus 1 that happens first .PERIOD  So ,COMMA  according to the c standard that is actually unspecified .PERIOD  So ,COMMA  the order of evaluation of the sub expressions is unspecified ,COMMA  according to the c standard .PERIOD  So ,COMMA  let us just go back to that and this is ,COMMA  what it says ,COMMA  the order of evaluation of sub expressions is also unspecified .PERIOD  So ,COMMA  if you look at this expression j equal to i plus plus plus i plus 1 ,COMMA  it is not clear which happens first ,COMMA  i plus plus or it is i plus 1 ,COMMA  that is also unspecified .PERIOD  So ,COMMA  here are the sequence points which end at full expression and the specific case of the last example ,COMMA  it is not that values of variables are updated more than once .PERIOD  It is just that the sub expressions may be evaluated in whatever order ,COMMA  it may occur .PERIOD   So ,COMMA  all this is slightly confusing .PERIOD  So ,COMMA  let us just summarize something that you can take away for ,COMMA  as per as programming is concerned .PERIOD  So ,COMMA  let us list out a few operators with side effects .PERIOD  So ,COMMA  let us say pre increment ,COMMA  post increment ,COMMA  pre decrement ,COMMA  post decrement all of these have side effects .PERIOD  In addition to returning the value ,COMMA  it also updates the variable .PERIOD  The assignment operator clearly has side effects .PERIOD  So ,COMMA  if you say j equal to i ;SEMICOLON  ;SEMICOLON  obviously ,COMMA  the value of i will be assigned to j and we have earlier seen that ,COMMA  as an operation it returns the value that was assigned .PERIOD  So ,COMMA  that has the side effect ,COMMA  because it updates j and also return the value ,COMMA  which is the value of j .PERIOD  We have also seen this compound assignments .PERIOD  So ,COMMA  you can say i plus equal to 1 ,COMMA  which is the same as i equal to i plus 1 and j minus equal to 2 ,COMMA  which is as same as j equal to j minus 2 .PERIOD  So ,COMMA  all these operators have side effects .PERIOD  And the general advice is that ,COMMA  use operators with side effects with extreme caution .PERIOD  In general ,COMMA  if you use them make sure that a single full expression does not contain more than one sub expression with side effects .PERIOD  So ,COMMA  make sure that even if you want to use these expressions with side effects ,COMMA  make sure that one full expression contains at most one side effect .PERIOD  So ,COMMA  avoid expressions like i equal to i plus plus ,COMMA  as we have seen before ,COMMA  this has two updates on i .PERIOD  So ,COMMA  the result is unspecified i equal to j equal to 1 .PERIOD  Well ,COMMA  here is a full expression that has two side effects ,COMMA  technically the result is you can predict what the result is ,COMMA  ,COMMA  but as a programming practice ,COMMA  please avoid these kind of expressions .PERIOD  Because ,COMMA  this is an expression that involves multiple updates and it is not really that the result is unspecified .PERIOD  Because ,COMMA  the updates are on different variables .PERIOD  But still ,COMMA  as a good coding practice avoid such expressions .PERIOD  So ,COMMA  let us look at the third example ,COMMA  you have x equal to y equal to 12 divided by y equal to 4 .PERIOD  Again ,COMMA  it is not clear ,COMMA  which of the sub expressions y equal to 12 or y equal to 4 ,COMMA  which will happen first ?QUESTIONMARK  So ,COMMA  the result of this expression is very difficult to interpret .PERIOD  So ,COMMA  in general do not use full expressions that have more than one side effects ,COMMA  even if they are on the single variable .PERIOD  If it is multiple updates on a single variable ,COMMA  then the c standard clearly says that ,COMMA  the result is unspecified .PERIOD  But ,COMMA  even if they are on multiple variables ,COMMA  try to avoid writing such expressions .PERIOD  You can always write slightly longer code ,COMMA  where the meaning of the code will be perfectly clear and the result will be completely specified .PERIOD  Thank you .PERIOD 


Good morning ,COMMA  welcome to the course of Problem solving through programming in C .PERIOD 

This is a course of programming no doubt about it the first course on programming for
many of you ,COMMA  but also the focus of the course is to show you how we can carry out
problem solving ;SEMICOLON  that means ,COMMA  solving different problems using programming .PERIOD  We
encounter a different types of problems all the times in our life and some of them can be
solved using programming ,COMMA  why I am saying that some of them can be solved not all can
be solved there is a reason for that we will come to that later ,COMMA  also there is another thing
in the bracket you can see that we will be discussing programming in C .PERIOD 
Now ,COMMA  C why I have put it in the bracket the reason is the C is just one of the means one
of the languages using which we can do programming ,COMMA  there are different other
languages like as many of you know Java ,COMMA  C plus plus and others using which we can
also do programming .PERIOD  Now our objective is to not to just think about the c programming
language ,COMMA  but also some programming principles ,COMMA  some programming logic ,COMMA  some
programming methods that are adopted while solving problems all right .PERIOD 

Now ,COMMA  let us think of some of the problems that we often encountered in our regular life ,COMMA 
let us start with a very simple problem of there is there is a large volume of data large
volume of data maybe integer or may be numbers different types of numbers .PERIOD 

And we have to find the mean of that and mean of that many of you know mean is
nothing ,COMMA  but the same as average .PERIOD  Now how do you find out the average of a large
volume of numbers now all of you know how that is done ,COMMA  that is a relatively simpler
problem .PERIOD  We can also have ,COMMA  this is this has got some standard formula if you have got 4
numbers say x y z p you add them and divide them by 4 that is how we find out the
average right .PERIOD 
Now ,COMMA  also for n numbers if thereby n numbers then we can write it as sigma x i by n what
does this mean ,COMMA  this means I am taking what is xi ,COMMA  xi is each numbers ,COMMA  x1 is one number ,COMMA 
x2 is another number ,COMMA  x3 is another number in that we are up to xn .PERIOD  Now each of these
numbers any of these numbers I can represent with xi and by replacing different values
of i ,COMMA  I can get any of these numbers .PERIOD  So ,COMMA  sum of all these numbers sum of all these
numbers can be designated as x sigma of xi this sigma means summation and ,COMMA  I do the
summation of this and divide by n when it was 4 number I divide it with 4 here since
there are n numbers I divide it with n .PERIOD 
This is a very well known mathematical formula mathematical approach that all of us the
school children will ,COMMA  Now ,COMMA  therefore ,COMMA  we can very easily translate this problem and solve

this problem into programming ,COMMA  we will see how we can translate it to programming also
we will also discuss why we should translate it to programming all right .PERIOD  Let us take a let
it I mean a little different problem suppose there is a text all right there is a text of 20
sentences all right .PERIOD 

We will have a text of 20 sentences all sentences are here and I say that find out how
many times the word human occurs in this text ,COMMA  this is my text and I want to see how
many times the word human occurs in this text also the problem can be much more
complicated .PERIOD 
This is another type of problem where I have to look every word and see is it a human no
is it a human yes .PERIOD  So ,COMMA  accordingly I will have to go on counting all right now I can also
say that how many times does ,COMMA  the word pair human being appear in this text ,COMMA  so that is
can also be ,COMMA  I get human ,COMMA  but I do not get being after that ,COMMA  I do not count it all right .PERIOD  If it
be human followed by being then I count it once in that way I can formulate different
steps by which I can solve this problem .PERIOD  If you just spread your imagination you can
think of making the problem even complicated for example ,COMMA  human being and man ,COMMA 
woman ,COMMA  child ,COMMA  boy ,COMMA  girl ,COMMA  parent ,COMMA  teacher etcetera all of them are human beings .PERIOD 
Now ,COMMA  if the problem is posed in a way that find out how many times earlier what the
problem was earlier the problem was how many times the word pair human being
appeared as it is .PERIOD  Now if I modify the problem statement and say that find out how many

times human being has been referred to in this text ;SEMICOLON  that means ,COMMA  if it be a man then also it
is a human being ,COMMA  if it be a woman then also it is a human being ,COMMA  if it be a child then also
it is a human being ,COMMA  if it be a grand grandparent it is also human being ,COMMA  In that case the
problem becomes a little more difficult little more difficult than the previous version of it
where we wanted to just find out the word pair human being this is an example of a
second problem and third problem .PERIOD 
The third problem is a little more complicated as you can see ,COMMA  we can go on adding
examples of problems let us take another one suppose you have got a fixed amount of
money .PERIOD 

All right whatever that amount is suppose you have got 1000 rupees and you have got
you have been asked to buy some items may be rice ,COMMA  wheat ,COMMA  sugar ,COMMA  vegetables etcetera
and each of them have got a price rice may be rupees 50 ,COMMA  wheat may be rupees 30 ,COMMA  sugar
may be rupees 70 and vegetables depending on the variety there are different prices all
right .PERIOD 
Now ,COMMA  suppose you have been told that you have been given this amount of money and
you have to buy the maximum amount of rice possible the maximum amount of rice
possible .PERIOD  So ,COMMA  with 50 rupees you can have 20 kgs of rice ,COMMA  but there is a constraint ,COMMA  there is
a maximum amount of rice you have to buy ,COMMA  but you have to buy at least 5 kg of wheat ,COMMA 
at least 2 kg of sugar ,COMMA  at least some amount of vegetables .PERIOD  Now given this you can buy 5

kg of wheat ,COMMA  you can buy 6 kg of wheat ,COMMA  7 kg of wheat ,COMMA  you can buy 2 kg of sugar or 3 kg
of sugar etcetera you can do many things ,COMMA  but you have to see that how you will
distribute this so ,COMMA  that even after satisfying these requirements you can find you can buy
the maximum amount of rice .PERIOD 
There is another problem when you go to the market I mean in such a thing is always
told or we have got in mind that we have to cover these items and there is a fixed there is
a cost for that and we have to satisfy the cost .PERIOD  This is another type of problem we can see
this is an maximization problem or in problem solving terminology we also sometimes
call similar problems as optimization problems ;SEMICOLON  that means ,COMMA  I want to maximize the
amount of rice that I want to buy ,COMMA  but these are the constraints that I have to satisfy right .PERIOD 
So ,COMMA  I have to satisfy these constraints after satisfying these constraints ,COMMA  how can I
maximize this ,COMMA  this is another type of problem relatively much simpler maximization or
optimization problem .PERIOD 
Let us now move to another type of problem say I have got a number of places let us
name the places A B C D E .PERIOD 

Now ,COMMA  suppose these are ,COMMA  suppose some cities and we have got direct paths among some
cities and there is no direct path among some cities all right suppose this is the scenario .PERIOD 
So ,COMMA  I can directly reach from A to C ,COMMA  but I cannot directly reach from A to D I can
directly reach from B to E ,COMMA  but I cannot directly reach from B to C like that moreover

along with each of these paths we have got some cost associated the amount of money
the amount of expense that we will have to bear in order to make this travel possible ,COMMA 
suppose this traveling B to E I have got a different options say for taxi first I put the taxi
thing first ,COMMA  then I put the cost by bus and then I put the cost by train now suppose from B
to E I can go by bus taxi and train both .PERIOD 
So ,COMMA  suppose by bus it is 10 rupees and train it is 20 rupees and also of course ,COMMA  there can
be I mean according to the mode of transport that I take the time taken will also be
different ,COMMA  say from D to E I can go by taxi and that will cost me 30 rupees and by bus it
will cost me 5 rupees and there is no train between these 2 all right ,COMMA  there is no train no I
put it null here .PERIOD  So ,COMMA  A to B suppose I have got taxi of course ,COMMA  30 rupees bus may be here
in this route it is a little expensive 7 and there is no train here ,COMMA  A to C I have got 20
rupees by train ,COMMA  4 rupees by bus and there is no train ,COMMA  here C to D there is 50 rupees ,COMMA 
again 8 and by train it is say 10 rupees .PERIOD 
This is the picture now I am here and I have to reach this point from A to E now I can go
via A to C ,COMMA  C to D ,COMMA  D to E or I can travel A to B ,COMMA  B to E right ,COMMA  if I come by from A to E
by taxi then it will be 30 plus 50 ,COMMA  80 rupees required ,COMMA  if I come via this path it will be 20
plus 50 ,COMMA  70 plus 30 ,COMMA  100 rupees required ,COMMA  but if I come here by train there is no train .PERIOD  So ,COMMA 
so I cannot come between these 2 by train if I come by bus 4 rupees and now by train 10
rupees 14 and here there is no train I cannot do that right ,COMMA  I cannot take train from here .PERIOD 
I will have to take again bus from here ,COMMA  in that way I have to solve the problem of how to
reach from one city to another with some constraints now these constraints are coming
every time and this constraints actually generate the fun in this what are the constraints
that we can have in this problem the constraints it will be satisfying the time how fast I
can move I have not shown the time information here that time information should also
be kept here for example ,COMMA  from B to E by a taxi it takes 50 rupees and say takes 20
minutes and by bus 10 rupees ,COMMA  but it takes 40 minutes and by train is 20 rupees ,COMMA  but it
takes 10 minutes like that .PERIOD 
So ,COMMA  if the time information is also there I may be asked to minimize the time and also
what is shown here this is cost ,COMMA  I have got the cost and the time ,COMMA  I may like to minimize
the cost also .PERIOD  I may be asked that I am not much bothered about time I am relaxed it is a
weekend I can devote time ,COMMA  let me try to minimize the cost then the problem will have

one color right one form .PERIOD  If I just say that well now I am little pressed with time ,COMMA  I will be
selecting a vehicle or selecting a mode of transport I do not mind the cost ,COMMA  but I have to
minimize the time then the problem is something different also it may be that I am with
the total time spent between a less than one hour less than one hour even this constraint
minimize the cost ,COMMA  in that way different forms of this same problem can be put forward
and often we have to solve such problems in our real life .PERIOD 
Let me ,COMMA  that is the best way to reach a place right this is how we can find a best way to
reach a place .PERIOD 
Now ,COMMA  I come to another interesting problem ,COMMA  this problem that was there it is a again an
optimization problem again you could see now say let us take another example .PERIOD 

Although I am showing it as a game it can act as a model for many real life scenarios .PERIOD 
This is a maze and I am here and I have to reach say here ,COMMA  this is my source ,COMMA  this is my
destination and from here I can either from any place each of them are places from any
of these places I have got 3 moves ,COMMA  either I can have an up move ,COMMA  I can have a down
move ,COMMA  I can have a diagonal move all right .PERIOD 
So ,COMMA  for example ,COMMA  from here I can with a diagonal move I can come here with an up move
I can come here I cannot apply a down move now this up and down moves are allowed
only if there is no bar or there are other moves also I can move left or I can move right .PERIOD  I

cannot move diagonally down suppose these are the moves that I have and any of these
moves can be applied only if the corresponding destination place is not bared or if the
destination place is free for example ,COMMA  if this place is bared and say this place is bared then
from this point source I cannot apply the diagonal move why because this place is not
free .PERIOD 
Suppose I apply the up move ,COMMA  I can I will go from here to here now I am here at this
point I have what are the moves that are applicable left move cannot be applied this
cannot be applied this is out of question ,COMMA  up move cannot be done down move I can do
you see down move I can do I can come back alright and diagonal move is possible
suppose I come to I find if I apply the down move I come here then ;SEMICOLON  obviously ,COMMA  if I again
apply this move then I will be just doing these 2 repeatedly and I will not progress any
further may be once I come back here because of some thought I can apply this move all
right .PERIOD 
Let us see once again let us start suppose I was here now apply a up move ,COMMA  then I can
apply a diagonal move and then I can move a horizontal move ,COMMA  another horizontal move
1 2 3 4 assuming that all these moves are having the same cost ,COMMA  same effort all right then
with 1 2 3 4 moves I can reach my destination .PERIOD  Let us see if I had instead of going up if I
had taken this move 1 because I could not go diagonally then I move diagonally 2 then
with 3 moves I can reach the destination assuming that the costs are same then this is a
better move .PERIOD 
If the costs that is scenario becomes a little more complex when each of these moves I
have got different costs it is I have to pay more or I have to put in more effort for moving
from this point to this point ,COMMA  from this point to this point in a diagonal manner is much
more easier to move in a horizontal manner all right .PERIOD  This is another type then the
problem would have been little more complex right in that case suppose the diagonal
move will costs you 5 and all other moves cost you 2 ,COMMA  then what would be the cost in this
2 5 7 8 9 10 11 .PERIOD 
In this path let us do it again 2 because up is 2 ,COMMA  5 because diagonal is 5 ,COMMA  7 8 9 10 11 units
if I have done in this way 2 5 7 and 5 12 .PERIOD  So ,COMMA  in that case this is becoming costlier ,COMMA  but ;SEMICOLON 
obviously ,COMMA  if the diagonal move was 4 and not 5 then what would have happen let us see

2 4 6 7 8 9 10 and if I do it in this way what it would be 2 4 and 2 6 and 4 10 in that case
both of them would be equal .PERIOD 
This is another problem where again you can see that we are trying to look at the cost
and solve a problem ,COMMA  this you can think of a path finding problem or a search problem
what are we searching here I am calling it we are search problem .PERIOD  So ,COMMA  what are we
searching here ,COMMA  we are searching for the path through which we can move we can reach
the objective ,COMMA  now this is a very simple example of the type of problems that we solve in
artificial intelligence ,COMMA  say a robot has been asked to move from this point to this point
how the robot will find it is way given some obstacles .PERIOD 
So ,COMMA  this is another type of problem that we can solve using programming now having
said that is it that all the problems that are there in the world can we solve them by
programming when you say problem solving we are not actually meaning to address all
possible problem solve the problems that are in the world we are not saying that all of
them can be solved by programming for example ,COMMA  the problem of hunger cannot be
directly solved by programming some person is feeling depressed he is feeling sad that is
a problem we are not addressing that sort of problem here .PERIOD 
So ,COMMA  when we say problem solving through programming then we are talking of not all
kinds of problems ,COMMA  but certain categories of problems ,COMMA  that is that will be discussing in
the next module what are the problems that can be solved by programming and we will
progress further .PERIOD 
Thank you for this module .PERIOD 

So we move to the next module of this course .PERIOD 

In the earlier module we have seen some example problems ,COMMA  and the problems which can
be some example problems which can be solved through programming using computers .PERIOD 
And also we said that all problems cannot be solved by computers .PERIOD  So ,COMMA  what are the
problems that can be solved using computers ?QUESTIONMARK  That is a natural question that can be
asked .PERIOD  The answer to that is that ,COMMA  if it is known what are the steps that we must execute or
perform in order to arrive at the desired result then we can solve it by programming .PERIOD 
Now ,COMMA  those steps may be directly known for example ,COMMA  in the case of finding the average
marks in the class for n students ,COMMA  we know the steps right .PERIOD  So ,COMMA  let us see if we write down
the steps following which we can solve this problem ,COMMA  how would it look like ?QUESTIONMARK 

I want to read one number ,COMMA  suppose I am reading phone numbers ,COMMA  I want to find out the
average of phone numbers ,COMMA  I want to find out the average of phone numbers read .PERIOD  Read
means I just know get I can also say get first number ,COMMA  2 get second number suppose you
want to find for 3 numbers ;SEMICOLON  get third number add the numbers ;SEMICOLON  that means ,COMMA  first number
plus second number plus third number and let that be the sum and then I say divide sum
is this sum by the number of numbers and what is the number of numbers ?QUESTIONMARK  Number of
numbers here is 3 ,COMMA  because there are 3 numbers and then say announce result .PERIOD 
So ,COMMA  this one divide the sum by numbers .PERIOD  So ,COMMA  that is something like say something like
this that result is equal to sum divided by 3 in this case right and announce result .PERIOD  So ,COMMA 
these 3 these steps are very well known ,COMMA  very clear and since these are very clear .PERIOD  So ,COMMA  I
can solve them by programming .PERIOD  Why because programming what is programming ?QUESTIONMARK 
Programming is informing a computer as how to solve a particular problem .PERIOD  So ,COMMA  I can say
let me just do it a fresh .PERIOD 

Programming is nothing but ,COMMA  letting the computer know how to solve a problem .PERIOD 
Now ,COMMA  there are some important aspects to this sentence this phrase .PERIOD  Letting the computer
know is one important thing ,COMMA  but what do you let the computer know ?QUESTIONMARK  How to solve a
problem ?QUESTIONMARK  So ,COMMA  how to means I have to tell the computer ,COMMA  that what are the steps to be
followed to solve a problem .PERIOD  I have to be very clear about it and I have to let the
computer know .PERIOD  So ,COMMA  there is a big problem here how I let the computer know I will come
to that later .PERIOD 
The steps to be followed are what we have to tell the computer .PERIOD  So ,COMMA  in the earlier
example we just saw that the steps for finding the mean of 3 numbers are very clearly
stated ,COMMA  and I can inform the computer often this is informing the computer is also known
as instructing the machine .PERIOD  The machine is nothing but the computer itself and these are
the computer instructions .PERIOD  A programme therefore ,COMMA  consists of a number of instructions
to be executed .PERIOD  Now the example that we saw was for adding there numbers now we will
soon see that the thing becomes a little more complex if I wrote get first number ,COMMA  get
second number ,COMMA  get third number suppose there are 20 numbers ,COMMA  then I will have to write
them 20 times get first number ,COMMA  get second number ,COMMA  get third number like that upto get
twentieth number that is boring is not it .PERIOD 

So ,COMMA  instead I can possibly write that for 20 numbers let me do it in a let me do a number
here for 20 numbers repeatedly get number ,COMMA  aright that is possible .PERIOD 
So ,COMMA  for 20 numbers I will be getting the numbers .PERIOD  So ,COMMA  I do not need to write down one get
first number 2 get second number 3 get third number not like that ,COMMA  I can straight away
with one instruction I can express myself ,COMMA  but whether this will be understood by the
computer or not is a different question .PERIOD  So ,COMMA  I am keeping that question open .PERIOD  Understood
by machine and whenever I talk about machine ,COMMA  I mean a computer .PERIOD  So ,COMMA  for 20 numbers
get number ,COMMA  in that way I can say that or say I could have written that in a little more
smatter form let us let me try to do that .PERIOD 
Now ,COMMA  if I do that then what would be the next one ?QUESTIONMARK  I have not I have to add those 20
numbers .PERIOD  So ,COMMA  one thing is that again I can write here add number 1 number 2 number 3
upto number 20 ,COMMA  then divide sum by 20 this is one way of saying that ,COMMA  but this is again
boring right this is very boring ,COMMA  I mean it is not interesting to look at this why should I
write this in this dot dot dot dot form instead say I can write it in a smatter form say I
write it in this way and you .PERIOD 
Just see whether you can understand what I am writing for 20 numbers ,COMMA  I am using my
own language ,COMMA  it is not a computers language ,COMMA  it is an English and it is a version my
version of English .PERIOD  I just need to express it to you and then whether that will be
understood by the computer or not is a different question and we will address it
separately ok .PERIOD 
For 20 numbers get number sorry I say repeat get number or let me add the number with
the current sum ;SEMICOLON  that means ,COMMA  presently whatever is the value of sum ,COMMA  I add that number
that I read with that .PERIOD  Now initially therefore ,COMMA  what should be the current sum ?QUESTIONMARK  Initially
when I am starting the current the sum is 0 .PERIOD  So ,COMMA  I can say let us sum be 0 initially .PERIOD  Now I
get a number at the number to the current sum and this repeat I am just using my .PERIOD 
So ,COMMA  just showing as if it is a bracket ,COMMA  that this part I am repeating I am repeating this part
how many times I am repeating this part ?QUESTIONMARK  This part I am repeating ,COMMA  how many times I am
repeating ?QUESTIONMARK  20 times because for 20 numbers I am getting the number adding the number
getting the number ,COMMA  adding the number and I am going on doing this and adding the
number and I am keeping that number in sum .PERIOD  So ,COMMA  ultimately I do it 20 times and then
this part is finished then what I have to do .PERIOD  So ,COMMA  this was step 1 ,COMMA  this was step 2 this was
step 3 .PERIOD  So ,COMMA  this step 3 was repeated 20 times I am sorry let us make it sorry actually this
is the second step ,COMMA  which I did 20 times and after that I have got the all those numbers
added .PERIOD 

So ,COMMA  next I come and I say result is sum divided by 20 .PERIOD  So ,COMMA  that will be my result and then
I can announce the result frame the result whatever .PERIOD  So ,COMMA  here you see in the earlier
example what I did is ,COMMA  read first number ,COMMA  read second number ,COMMA  read third number read
forth number like that here I just expect do it in a smatter way that for 20 numbers do this
activity repeatedly 20 times .PERIOD  So ,COMMA  that is another way I can express it .PERIOD  And that shows that
I can specify very clear steps by which the problem can be solved and since I can specify
the steps clear steps through which the problem can be solved ,COMMA  this problem can be
solved by programming .PERIOD  I can programme a machine to solve this problem .PERIOD 
So ,COMMA  similarly say how many times the second problem that we had looked at ,COMMA  how many
times a particular word human occurs in a particular text .PERIOD  So ,COMMA  I have to do something like
this ,COMMA  I have to open the texts I have to see look at the text and read a word and see is it
human ?QUESTIONMARK  No ,COMMA  is it human ;SEMICOLON  no is it human yes .PERIOD  So ,COMMA  I will have to have some sort of counter
or a count ,COMMA  which I will increase every time I am sorry every time ,COMMA  I encounter the word
human .PERIOD 

And this will go on as many times for every word in the text .PERIOD  So ,COMMA  I can write that down as
for every word in the text if the word is human increment count .PERIOD  So ,COMMA  this will go on only
if the word is human I will increment the count otherwise I will go on reading the words .PERIOD 
So ,COMMA  this is the very clear step which I can express to the computer in its own way .PERIOD  So ,COMMA 
that it can find out how many times the word human has occurred .PERIOD 

Now ,COMMA  there are other different variants of this that I have told you that ,COMMA  whether its a
human being or whether it is an equivalent man ,COMMA  a woman boy girl whether it refers to a
human being or not then ;SEMICOLON  obviously ,COMMA  the instruction will be a little more complicated than
this in these way .PERIOD  So ,COMMA  I once again come back to my state when that ,COMMA  what are the
problems that I can solve using a computer ?QUESTIONMARK  I can solve the problems where I can
enunciate ,COMMA  I can express the clear steps set of steps one after another by which I can solve
the problem correctly .PERIOD 
So ,COMMA  that is now for example ,COMMA  now if we take the example of that searching in a maze ,COMMA 
where I was trying to use the diagonal up down whichever ,COMMA  there also I can express some
intelligent ways by which I can instruct the computer to approach the problem .PERIOD  But
everything as I said do not render themselves ,COMMA  to such enunciation of very clear steps I do
not really know .PERIOD  I really do not know exactly that may be either the problem is not well
understood ,COMMA  I mean a student of friend of yours is feeling depressed is not feeling well
now there may be you really do not know exactly what is the reason for that .PERIOD  If you know
the reason then you can try to solve it help him out .PERIOD 
Now ,COMMA  when the problem is not well understood then of course ,COMMA  we cannot solve it in such
clear through such clear steps .PERIOD  If the information that you have you are getting all are not
very reliable then also there are ways and means by which we can think of how we can
get a good enough solution .PERIOD  Another thing is that there are some things which we do not
know .PERIOD  So ,COMMA  we cannot solve that using programming or may be some cases where .PERIOD  So ,COMMA  the
problem is so complicated for example ,COMMA  solving the problem of hunger all .PERIOD  Right now
obviously ,COMMA  if you say buy food give food by that hunger will be solved ,COMMA  now that is too
simplistic solution and that is not a realistic solution there are many angles many
interacting variables ,COMMA  which are working towards that .PERIOD  So ,COMMA  that is not directly amenable to
solving using programming .PERIOD 
So ;SEMICOLON  however ,COMMA  we are been able to give an idea of the category of problems ,COMMA  which can be
attempted to be solved by programming .PERIOD  And I have also said what is programming once
again programming is the set of instructions .PERIOD 

I am rewriting it in different way ,COMMA  set of instructions to be provided to a computer to
solve a problem .PERIOD  Now a computer is an electronic machine ,COMMA  till now what I was doing I
was writing the set of the statements in the form of somehow like English .PERIOD  So ,COMMA  you could
understand that ,COMMA  but the computer being an electronic machine will not be able to
understand that .PERIOD  An electronic machine is made of switches .PERIOD  So ,COMMA  since it is made of
switches it will understand only it understands only zeros and ones .PERIOD 
So ,COMMA  whatever I say get number ,COMMA  now each of these get a number is one simple instruction
or you can always understand this you can all of you can understand this ,COMMA  but for a
computer I will have to somehow write it in the form of some zeros and ones .PERIOD  So ,COMMA  may be
something like this 000 111 00 suppose this is representing get .PERIOD  A number can be this
anyway be are that number can be say 111 000 101 something of that .PERIOD  So ,COMMA  that is the
completely different type of expressions alphabets .PERIOD  So ,COMMA  the way we are writing it here
cannot be directly understood by the computer .PERIOD  I think in the last lecture I had mentioned
that how to let the computer know the steps .PERIOD 
Now ,COMMA  if I want to let somebody know of I want to express myself to somebody ,COMMA  I must do
it in the form of a language that he or she understands for example ,COMMA  whenever I am
talking to French person ,COMMA  I will have to talk in French otherwise he will not understand if
he does not know other languages right .PERIOD  Similarly if I encounter an alien for example ,COMMA  I
will have to talk in his language or I will not understand his language .PERIOD  Therefore ,COMMA  but

how do you do that if I meet a person who does not understand my language ,COMMA  some the
natural solution is that will have somebody who will be acting as an interpreter ,COMMA  who
understands both my language and the other parties language .PERIOD  So ,COMMA  we can understand my
language and convert it to the other language .PERIOD 
So ,COMMA  what is the other parties language .PERIOD  So ,COMMA  what are the parties here let us see .PERIOD 

On one side it is we who want to do something ,COMMA  on the other side we have got this
machine called computer ,COMMA  alright this machine which is lying in front of you .PERIOD 
Student: 
Now ,COMMA  I have to communicate with this machine and this machine will have to
communicate to me .PERIOD  And this communication ,COMMA  but this understands its word consists of
zeros and ones and my word consists of a b c d’s ,COMMA  and with that I can say apple ,COMMA  but this
apple to this machine is 0 1 0 1 0 0 0 1 something like that .PERIOD  So ,COMMA  I will not understand this
to be apple and he will not understand this to be apple .PERIOD  So ,COMMA  there we need some sort of
mechanism that is this is that translator some sort of translation is required to .PERIOD  So ,COMMA  we
will be talking about this translation process in the next class ,COMMA  but before that let us
summarize what we you have learnt till now .PERIOD  We have seen that there are problems
which can be solved by computers and there are problems which cannot be solved by
computers .PERIOD 

The problems which can be solved by computers have we have to in order to solve them ;SEMICOLON 
we have to express the specific steps to be followed for solving that particular problem .PERIOD 
We have to express that to the machine we have to express that to the machine in its own
language somehow we have to express it in its own language and this specific steps .PERIOD 

The steps that to be followed to solve a problem ,COMMA  this is also known as algorithm:
algorithm consists of the specific steps or the methods that have to be followed in order
to solve a problem .PERIOD  In the next lecture will see how we can express these algorithms .PERIOD 
Student: 
How can we express the algorithms ,COMMA  that is what will do in the next mo next module next
lecture ;SEMICOLON  how can we express algorithms there are different ways ,COMMA  even I mean when I say
how can we express algorithms not to the computer ,COMMA  but maybe I want to communicate
an algorithm to you or you want to communicate an algorithm to me ,COMMA  I was showing
some examples in which I was writing in English .PERIOD  So ,COMMA  there are different ways of doing
that we will discuss that in the next class .PERIOD 
Thank you .PERIOD 
In the last lecture we had concluded with a term called Algorithm .PERIOD 

And we said that an algorithm means a sequence of steps that are followed to solve a
problem ;SEMICOLON  to be followed to solve a problem .PERIOD  Now the question is that how do we express
an algorithm ,COMMA  how do we express the sequence of steps how do we express ,COMMA  that there can
be different ways of expressing it right .PERIOD  So ,COMMA  usually ultimately we will have to write a
program for this .PERIOD 
So obviously ,COMMA  program is the final form of expression of the sequence of steps ,COMMA  that we
want to reach to ,COMMA  but even before that I mean a program is for communicating the
sequence of steps to a computer ,COMMA  but even for our human exchange ,COMMA  we may like to
express ;SEMICOLON  what are the steps to be followed .PERIOD  There are 2 distinct ways by which an
algorithm can be expressed one is flowchart another is pseudocode .PERIOD 
Now ,COMMA  a flowchart as the name implies is a diagrammatic representation of the sequence
of steps it is a diagram .PERIOD  And pseudocode on the other hand is an English like English or

whatever in human language English like not exactly English ,COMMA  we can take a lot of liberty
we will see how to when I express the sequence of steps ,COMMA  English like language to
express the sequence of steps .PERIOD  Now we will show both the flowchart and pseudocode
with respect to some of the problems that we had discussed earlier .PERIOD 

So ,COMMA  let us start with this finding the average of 3 numbers .PERIOD  This is the simplest possible
way simple simplest possible problem that we can solve .PERIOD  So ,COMMA  we will start with the first
we will start with the start node ,COMMA  we are trying to draw flowchart .PERIOD  So ,COMMA  once we draw this
start .PERIOD  Then next will be sum assign 0 .PERIOD  Now what all of us know that in order to find the
average of any number set of numbers ,COMMA  we have to first add those numbers .PERIOD  So ,COMMA  the
addition result is stated as sum .PERIOD  So ,COMMA  here we are when there is no number that has been
we have already taken into account ,COMMA  we initialize the sum to be 0 .PERIOD  So ,COMMA  right now sum is 0
right next what we do is we read the first number read number one .PERIOD 
Now ,COMMA  what does this read mean ?QUESTIONMARK  Read means who is reading whom do you want to read ;SEMICOLON 
who ever who ever will be finding the average he or she will have to read the number .PERIOD  If
I ask a human being to do that the human being will have to know the number .PERIOD  So ,COMMA  if I
show that number on a piece of paper writing 5 ,COMMA  he will read that number 5 and will say .PERIOD 
So ,COMMA  5 is the first number then I show the second number 7 ,COMMA  7 is a second number in that
way that is the significance that is the meaning of this read .PERIOD 

Now ,COMMA  in our case ultimately the computer will read it ,COMMA  and earlier we had talked about um
the input often we had discussed about this ,COMMA  this is also known as an input mechanism .PERIOD 
So ,COMMA  it is reading the number ,COMMA  now here I would like to state a few things that is .PERIOD 

Say a flowchart has got some basic fundamental elements ,COMMA  this one you have already
seen that is a start symbol .PERIOD 
Student:
Now this figure is known as oblong .PERIOD 
Student:
This figure is a rectangle .PERIOD  Now this oblong is actually used for input and output power I
mean specification wherever I need to do some input or the system provides me some
output let me explain .PERIOD  So ,COMMA  input I have already explained that when I am writing some
number for you to read or for the ;SEMICOLON  anybody will do the computation to read that is the
input .PERIOD  And you know all of you that we have got some input devices the most standard
input device is the keyboard using which we can put in the data .PERIOD  the output is after the
computation is done the system will or system will give me the output or if it be a human
being who is doing the computation ,COMMA  he or she will be telling me the output that is the
result .PERIOD  So ,COMMA  that is known as output .PERIOD 

So ,COMMA  while drawing a flowchart sometimes we will write read for this input ,COMMA  and maybe
print or write for output .PERIOD  Now this diagram is essentially the computation box .PERIOD  So ,COMMA 
whenever we do some computation ,COMMA  that we show in this sort of a box for example ,COMMA  we
can say x is p multiplied by q something like this .PERIOD  Or the other very important block is
the decision blocks block which looks like this a diamond now here what we do we just
take decisions depending on some conditions .PERIOD  Depending on some conditions I will
either take the left path or the right path .PERIOD  So ,COMMA  for example ,COMMA  I can say whether the age of a
boy is greater than 14 .PERIOD 
Student:
If the age of the boy is not greater than 14 he is not allowed to go to a film .PERIOD  So ,COMMA  if it be
no ,COMMA  then he cannot go to see a particular film ,COMMA  and if it be 14 or greater ;SEMICOLON  that means ,COMMA  it is
greater than 14 ,COMMA  if it is yes then he can go to a film .PERIOD  So ,COMMA  we come to this particular point
and make a decision looking at this out of scenario .PERIOD  So ,COMMA  this is known as the decision
box .PERIOD 
Student:
Now ,COMMA  these are the basic 4 elements of any flowchart .PERIOD  Now ,COMMA  we will again come back to
our flow chart .PERIOD  So ,COMMA  you can see here that sum is 0 and the number that has been read is
the first number right .PERIOD  Now suppose that number that was read is 5 ;SEMICOLON  so some number .PERIOD  So ,COMMA 
next what I do is ,COMMA  I add that particular number with the sum .PERIOD  So ,COMMA  now ,COMMA  if the sum was
initially 0 ;SEMICOLON  so I add 5 with sum .PERIOD  So ,COMMA  if becomes the total sum becomes 5 .PERIOD  So ,COMMA  next what
should I do after I computed the sum ,COMMA  then I read the second number because I have to
read 3 numbers and find the average .PERIOD  I read the second number and then I add the second
number with the sum the first number was 5 .PERIOD 
So ,COMMA  the value of sum is now 5 I have read the second number suppose that was 8 ,COMMA  then the
sum becomes 8 plus 5 that is 13 .PERIOD  Now I come and read the third number suppose it is 3 .PERIOD 
So ,COMMA  I read the third number and then I compute the sum .PERIOD  So ,COMMA  I have computed 3 the sum
to be 13 plus 3 16 ,COMMA  next what do I do ?QUESTIONMARK  I have to compute the average .PERIOD  So ,COMMA  what I do I find
the AVG is by AVG ?QUESTIONMARK  I am depicting the average ,COMMA  average is sum divided by 3 .PERIOD  So ,COMMA  it was
what was it 13 plus 3 16 divided by 3 .PERIOD  So ,COMMA  it will be 5 point something .PERIOD  So ,COMMA  that result
whatever I get that I will be printing .PERIOD  So ,COMMA  that is a flowchart these are the steps that I have
to do .PERIOD 

Now the same thing I can express in the form of a pseudocode or English like language
let us see how it looks like .PERIOD  Here you just see what I have done ,COMMA  I have initialize I what I
wrote in the first step is this one is equivalent to this initialize the sum to 0 and then I
read the first number ,COMMA  sum is added sum equals sum plus number one exactly what I did
here read the second number then I sum equals sum plus number 2 ,COMMA  and then I read the
third number and then sum is sum plus number 3 .PERIOD 
So ,COMMA  these are the steps you see exactly if you just do not look at the left part of the whole
thing ,COMMA  if you just look at this right part you can also understand what are the steps
through which I must go and .PERIOD  So ,COMMA  ultimately I compute the average which is I just write .PERIOD 
So ,COMMA  it is English like compute AVG equal .PERIOD  So ,COMMA  it is not exactly English ,COMMA  it is English like
anybody who knows English will be able to understand this .PERIOD  So ,COMMA  this is known as the
pseudocode .PERIOD 
So ,COMMA  this is for the very simple problem that we are doing .PERIOD  Now suppose let us think off
for a second that suppose instead of 3 numbers I ask you to find the average of 10
numbers how would the flow chart look like ?QUESTIONMARK  Obviously ,COMMA  this same thing that I have
done here read number 3 read number 4 read number 5 read number 6 in that way it will
go on and on and on ,COMMA  had it been 100 numbers there will be even larger .PERIOD 
Now ,COMMA  can we do something better in order to I do not have so much paper to waste .PERIOD  So ,COMMA 
can I write it can I express it in a much better way ?QUESTIONMARK 

So ,COMMA  let us go to the next problem where we want to find the average of N numbers
average of N numbers I want to find out .PERIOD  So ,COMMA  the first thing will be again start that is from
where I am starting next is read the value of N .PERIOD  So ,COMMA  what is this value of N ?QUESTIONMARK  Now if I say
this value of N when I read what is this N ?QUESTIONMARK  This N is telling me how many numbers I
will be considering for finding the average is it 100 is it 1000 is it 10 whatever .PERIOD  So ,COMMA  I am
that is n .PERIOD 
So ,COMMA  I am reading the value of n ,COMMA  now I am initializing the sum to 0 again just as before I
initialize the sum to 0 and then I read now you see here I have written read number I
have not written read number one earlier since I had to only do number one 2 and 3 here ,COMMA 
there I wrote down number 1 ,COMMA  number 2 ,COMMA  number 3 ,COMMA  here I am just writing read number ,COMMA 
because I do not know how many numbers I will be reading the reason will be very clear
soon .PERIOD 
So ,COMMA  next what do ?QUESTIONMARK  I do I read the number the sum is sum plus number .PERIOD  So ,COMMA  I take the sum
was 0 ,COMMA  I take the sum and at that number which number ?QUESTIONMARK  The number that I just now read
say- I have just now read number 5 .PERIOD  I have read just now I am sorry I just read number 5 .PERIOD 
So ,COMMA  I read number 5 and I have added that number with sum .PERIOD  So ,COMMA  sum is now 5 ,COMMA  next I
decrement this is a new thing that is coming up here .PERIOD  Since I know here at this point the
user or the whoever supplied the data told me that you have to look for 100 numbers say
N is 100 I have learnt that .PERIOD  Now ,COMMA  here I have read one number and I have taken care of
that number because I have added that with sum and .PERIOD  So ,COMMA  therefore ,COMMA  I now decrement that
value of N what does this signify ?QUESTIONMARK  This signifies that I now since initially it was 100 ,COMMA  I
have to read 99 more numbers 99 are yet to go .PERIOD 
Now ,COMMA  I have to check have I read all the numbers ,COMMA  what is the value of n ?QUESTIONMARK  The value of a
N is 99 ;SEMICOLON  that means ,COMMA  N is not 0 ;SEMICOLON  that means ,COMMA  I have not been able to read all the numbers .PERIOD 
If I have since in a decision box as I have told you just a couple of minutes earlier that I
can have 2 options ,COMMA  I can either have yes or no answer if N is equal to 0 what does that
signify ?QUESTIONMARK  If N is equal to 0 that signifies that I have read all the numbers I have already
read all the numbers ,COMMA  then I can compute the average as sum whatever sum I got divided
by N .PERIOD 
Otherwise if N is not equal to 0 then let us look at here if N is not equal to 0 no then I
will go back here again look at this part I will go back here again and read number .PERIOD  I read

that second number read and add it to sum I will go over here decrement .PERIOD  So ,COMMA  I have read
to number .PERIOD  Now ,COMMA  how many are yet go 98 N is 0 no ,COMMA  N is not 0 N is not 0 .PERIOD  So ,COMMA  I go up
again I read another number add that particular number to the sum decrement N how
many to go 97 is it 0 ?QUESTIONMARK  No not yet 0 .PERIOD 
So ,COMMA  I go on in this way I will go on in this way ultimately after I have read the hundredth
number this N will become 0 .PERIOD  So ,COMMA  at that point I will come to this average and compute
the average as sum divided by [noise] ,COMMA  and then I will print the average and stop .PERIOD  So ,COMMA  see
is just by this thing I am sorry just by this thing which is nothing but this is called the
loop this is called a loop and using this looping repetition I could reduce the length of the
flowchart the repetition of the flowchart in a very elegant way ,COMMA  I hope it is clear .PERIOD  So ,COMMA  the
same thing can be also reflected in the flowchart .PERIOD 
Now compared to the with the earlier flowchart ,COMMA  earlier statement here when I read it
only for 3 numbers ,COMMA  I read initialize sum to 0 read number one read number 2 and at
every point I was adding it to sum ,COMMA  here what I do is I write it in a little bit flexible way ,COMMA 
because when I write in a pseudocode I am not very constrained I can take the flexibility
as long as I can express myself its good enough I just wrote get the value of N earlier
probably I wrote read the value of N means the same thing .PERIOD 
So ,COMMA  get the value of N initialize sum to 0 ,COMMA  and till now here I am talking of this looping
till N is as long as till means as long as N is greater than 0 ,COMMA  it will better to say as long as
N is greater than 0 ,COMMA  read a number at the number read the number that you have read to
sum you read a number add the number read to sum .PERIOD  And one thing I missed out here and
you decrement N you decrement N here you have to make N equal to N minus 1 in your
note you please take it down that here it will be N n minus 1 .PERIOD  And so this till N as long as
N is greater than 0 ,COMMA  I will be going on doing this after that I will compute average as
average divided by sum average is sum divided by N I am sorry and then I will print the
average .PERIOD  So ,COMMA  I can express it either in the form of a flowchart or in the form of a
pseudocode .PERIOD 
Now ,COMMA  let us take a ;SEMICOLON  I mean it is not very visible here ,COMMA  finding the maximum of 3 numbers
that was another problem that we had discussed last time .PERIOD  What I am trying to do is I am
trying to find the maximum of 3 numbers .PERIOD  So ,COMMA  how can I go about doing the flow chart ?QUESTIONMARK 

So ,COMMA  I start just 3 numbers not a large set of numbers ,COMMA  I first read the number one .PERIOD  Now tell
me one thing when you are first read one number ;SEMICOLON  what is the maximum number .PERIOD 
Obviously ,COMMA  since you have read only one number that itself is a maximum only one .PERIOD  So ,COMMA 
it is a single ton .PERIOD  So ,COMMA  it is the maximum .PERIOD  Therefore ,COMMA  I say that max is nothing but the first
number ,COMMA  the number that I have read max is number 1 .PERIOD 
Now ,COMMA  I read the second number I read the second number ;SEMICOLON  now which one is the
maximum if the second number is greater than the first number ,COMMA  then the second number
will be the max .PERIOD  Now when I read the first number when I read the first number here ,COMMA  I
said that to be the max .PERIOD  Now ,COMMA  after reading the second number I can compare the second
number with respect to the max .PERIOD  If the second number is greater than the max ,COMMA  then what
will happen then number 2 will be the max .PERIOD  If it is yes the number to become the max
and if no ;SEMICOLON  that means ,COMMA  what number 2 is not greater than the max then I skip this part .PERIOD  I
skip this part and go out by this way skipping this part ;SEMICOLON  that means ,COMMA  at this point who is
the max ;SEMICOLON  obviously ,COMMA  at this point I had number one ,COMMA  and number 1 is still the max I hope
its clear .PERIOD 
Next I read the third number ,COMMA  again I do the same thing after reading the third number is
the third number greater than what number 2 should I compare no .PERIOD  I should compare
with the max because till now between number 1 and number 2 whatever is the
maximum I have already remember that in max .PERIOD  So ,COMMA  I read the number 3 and then again

compare is number 3 greater than max ,COMMA  I can have yes or no .PERIOD  So ,COMMA  if it be yes then number
3 becomes the max because number 3 is greater than the maximum number till now .PERIOD 
And then I will proceed and if not if number 3 is not greater than max then I will .PERIOD  Then
obviously ,COMMA  whatever was the max till now ,COMMA  that is the number one that will remain the
max think of number 1 to be 5 ,COMMA  number 2 to be 3 and number 3 to be 1 what will happen ?QUESTIONMARK 
3 .PERIOD  So ,COMMA  max is 3 sorry this was 5 .PERIOD  So ,COMMA  I read 5 next I read 3 is 5 greater than 3 no .PERIOD  So ,COMMA  I
kept 5 as the maximum alright ,COMMA  I read number 3 that was 1 ,COMMA  I compared is it greater than
the maximum which was 5 no then I print that 5 which is the maximum ,COMMA  but if suppose
number 3 was 7 .PERIOD  So ,COMMA  it is greater than 5 .PERIOD 
So ,COMMA  then I can go here and update this max to be number 3 or the 7 ,COMMA  and then I come to
the print max part .PERIOD  So ,COMMA  this is a flowchart of finding the maximum of 3 numbers and
consequently you can see the pseudocode of this .PERIOD 

Start read first number ,COMMA  then I assign max to be the first number ,COMMA  then I read the second
number assigned .PERIOD  Now if number read is greater than max ,COMMA  then I will make the max to
be number 2 .PERIOD  If the number read if the if its badly written read number it is wrong it if
number 2 is greater than max then make max number 2 .PERIOD  Then read number 3 if number 3
is greater than max ,COMMA  then min make max number 3 otherwise you are continuing .PERIOD 

So ,COMMA  if number 2 is not greater than max then I am reading number 3 I am not doing this
part .PERIOD  This is another way of explaining the pseudocode .PERIOD  So ,COMMA  the same thing now we come
to another variety of this finding the maximum for N positive int N positive integers ,COMMA 
here I have taken a little liberty the finding the maximum of N positive integers ,COMMA  earlier I
was doing it for all numbers ,COMMA  but just as a change .PERIOD  So ,COMMA  let us see .PERIOD 

I read N again ,COMMA  N means the number of numbers that I want to read .PERIOD  Now I set max to 0
why do I set max to 0 ?QUESTIONMARK  Because I am trying to find the max of N positive integers ,COMMA  any
positive integers will be greater than or equal to greater than 0 .PERIOD  So ,COMMA  I am putting that max
to the minimum value possible and then I am reading a number I read a number and if
that number is greater than max ,COMMA  which is by default 0 I have kept it as the bottom was
possibility .PERIOD  In all unless that number is 0 it will always be greater .PERIOD 
So ,COMMA  I will set that number to be the max ,COMMA  next again you remember what I did for finding
the average ?QUESTIONMARK  I reduce the value of N .PERIOD  Suppose I had to do find the max of ten numbers .PERIOD 
So ,COMMA  N becomes now 9 and then I check .PERIOD  I have the max sorry this is a mistake here .PERIOD  This
arrow ,COMMA  this arrow should come from this point this arrow should come from this point .PERIOD 
So ,COMMA  I am just drawing it here I am drawing it here .PERIOD 

It should come like this .PERIOD  So ,COMMA  I have read a particular number and then if that particular
number is greater than max ,COMMA  I am sorry I read a number and if that number is greater than
max then I will if it is true ,COMMA  then I will make that number to be the max right max will be
that particular number ,COMMA  and then I check N I have already read N .PERIOD  So ,COMMA  is N 0 then I have
read one number and then I reduce N ,COMMA  just as I did in the earlier case and then I check any
N greater than 0 .PERIOD  If yes then I have to go back and again read a number right read
number and this will go on as long as N is greater than 0 .PERIOD  If N is greater than is not
greater than 0 no then I will come and print the max .PERIOD 
So ,COMMA  there was a little error in that diagram which you will be able .PERIOD  So ,COMMA  you can see that
this line should have come from here is N 0 yes then print max ,COMMA  otherwise this should
have come from this point this is wrong .PERIOD  So ,COMMA  in this way we can again find the max for N
numbers it is a flowchart .PERIOD  So ,COMMA  again I can have the pseudocode for this .PERIOD  So ,COMMA  a pseudocode
for this is shown here ,COMMA  read the value of N here initialize max to 0 ,COMMA  till and till N is 0 read
the number if number is greater than max ,COMMA  max is equal to number decrement N ,COMMA  N is N
minus one and then it will be not one here it will be again print the max .PERIOD 
So ,COMMA  in that way you have seen examples of some intermediate representation of the
sequence of steps or the algorithms .PERIOD  We will encounter a number of algorithms in the
course of these lectures .PERIOD  And the Next step we will see what is to be done in order that
this sequence of steps can be transferred to a computer language so that ;SEMICOLON  and can be

transferred to a computer so that computer can solve the problem ,COMMA  that we will see in the
next part .PERIOD 

So ,COMMA  in the last lecture we had seen how we can represent algorithms ,COMMA  and we had
mentioned particularly two different ways .PERIOD  One is flowchart which is a diagrammatic
way of representing the different steps ,COMMA  and also we saw English like form ,COMMA  which is
known as a pseudocode .PERIOD  It is not exactly why is it called a pseudocode ,COMMA  it is called a
pseudocode because it is not exactly the code that can run on the computer ,COMMA  but it is a
way close to that and by which you can express ourselves ,COMMA  and from which we can also
convert to the computer language .PERIOD 
Now ,COMMA  we had given a few examples of such flowcharts for a few problems .PERIOD  And I
strongly encourage you to take up more problems from text books or some mathematical
problems that you may encounter ,COMMA  and try to solve them ;SEMICOLON  try to draw the flowchart of
those .PERIOD 

Now coming to the context of the books here are some of the suggested books ,COMMA  but I will
start from the end that is any book on C will serve your purpose .PERIOD  You can take any good
book on C language and try on that .PERIOD  And the number 1 that is C programming by

Kernighan and Ritchie is the most authentic book for C programming C language for that
matter and ,COMMA  but I suspect that for some of you may find it to be a little difficult therefore ,COMMA 
a middle path be a this second book programming with C by B .PERIOD S Gottfried which is
Schaum’s outline series .PERIOD  So ,COMMA  and this second book has got a number of examples solved
examples and examples given as exercises .PERIOD  So ,COMMA  I think that would a good very good
starting point .PERIOD 
Now ,COMMA  having said that ,COMMA  what we have right now is we have some algorithm .PERIOD 

And from that algorithm ,COMMA  we want to come to a program .PERIOD  Now algorithm is a sequence
of steps that might be in our mind also .PERIOD  So ,COMMA  I know how exactly I want to do that ,COMMA  I and I
express it in some way and that is understandable .PERIOD  Now you know about 2 ways one is
the flowchart another is a pseudo code which expresses how what are the steps that a to
be taken .PERIOD  Now from this algorithm to a programmer program is a task of a programmer .PERIOD 
Programmer is a person who knows how to write programs .PERIOD 
So ,COMMA  from the algorithm to the program whatever language the program might be that has
to be translated .PERIOD  Now the key point to understand is that this algorithm I can express in
any particular way ;SEMICOLON  however ,COMMA  that program must be written in a language that is
understood by a computer ;SEMICOLON  alright language understood by a computer .PERIOD  So ,COMMA  a programmer
is essentially a person sitting here who is translating the algorithm or the steps as
expressed in some informal way in to a form ,COMMA  that is understood by the computer and this

language just like any other language we will have it is own vocabulary ,COMMA  we will have it
is own grammar .PERIOD 
Now ,COMMA  here comes the question what is the language that is understood by a computer .PERIOD 

Now in order to understand that ,COMMA  we have to look at what is there inside a computer ;SEMICOLON  now
all of you many of you may be knowing it from your school days ,COMMA  but just it is a quick
revision of it is machine computer is nothing but a machine which can accept data
process them and output the results .PERIOD  Now there is an input device which can be a
keyboard .PERIOD  Nowadays it can be speech ,COMMA  microphone ,COMMA  it can be a joystick it can be many
things right mouse is also another one .PERIOD  And ultimately we have got the computer here
which consists of the CPU and the main memory and storage peripherals .PERIOD 
So ,COMMA  this is the actual part of the computer .PERIOD  Now the data comes over here ,COMMA  it is processed
here and the output is sent to the user .PERIOD  So ,COMMA  the user is on this side the user is also on this
side .PERIOD  So ,COMMA  this side is also the user and this side is also the user .PERIOD  Now there are couple of
important things to understand here ,COMMA  typically we tell the computer how a problem is to
be solved and that is the sequence of steps that we do ,COMMA  and whatever in sequence of steps
that is specify .PERIOD  Now whatever sequence we specify that is remembered by the computer
in it is memory .PERIOD  Now the memory can be actually it is stored in the secondary memory I
will come to that later .PERIOD  But the key point to think about is that this entire box is nothing
but an electronic machine and consequently it only understands 1’s and 0’s .PERIOD 

So ,COMMA  whatever we have to express ;SEMICOLON  we have to express that using 1’s and 0’s .PERIOD 

So ,COMMA  this is the first thing a computer being an electrical machine understands only 1’s and
0’s ,COMMA  because it is an electric machine ,COMMA  it only understands whether a particular switch is
on or off right that is what it can at this understand .PERIOD  Therefore ,COMMA  whatever we have to
express we have to express it in the form of 1’s and 0’s .PERIOD  So ,COMMA  consequently say A B all
these alphabets small a everything will have to be represented in the form of 1’s and 0’s .PERIOD 
So ,COMMA  maybe A just hypothetically it is not to be taken to be accurate ,COMMA  I am just saying that
suppose 0 0 0 1 ,COMMA  0 0 1 0 is a pattern that represents A .PERIOD  So ,COMMA  similarly maybe 0 0 1 0 ,COMMA  0 0 1
0 this pattern represents b and may be 1 0 0 1 0 0 1 0 represents small a .PERIOD  In that way
everything will be represented into a pattern of 1’s and 0’s and might be knowing some
of you that each of these one and 0’s these are known as bits ,COMMA  bit stands for binary digit
binary digit .PERIOD 
So ,COMMA  bi for binary and bit that last t for this ,COMMA  binary digit from spades .PERIOD  So ,COMMA  it is a sequence
of bits .PERIOD  So ,COMMA  anything ,COMMA  anything is represented in a computer as a sequence of bits or we
often say bit pattern .PERIOD  Now just 1’s and 0’s gives rise to a new number system that is
known as the binary number system .PERIOD 

So ,COMMA  that leads to the binary number system might be some of you might be aware of this .PERIOD 
Binary number system where I have got only 2 elements ,COMMA  0 and 1 I have to do .PERIOD  Now in
decimal visa we if I just consider that regularly we use decimal number system where we
have got from 0 to like that up to 9 ,COMMA  and I whatever I express as a combination of this .PERIOD 
Now in binary number system everything is represented just by 0 and 1 .PERIOD 
So ,COMMA  quickly let us look at ;SEMICOLON  what are binary number system is ,COMMA  that suppose I have got a 4
bit number .PERIOD  So ,COMMA  there are four positions 1 ,COMMA  2 ,COMMA  3 ,COMMA  4 and suppose .PERIOD  So ,COMMA  con parallely let us
think of a four digit number .PERIOD  Remember that in decimal we call it digit and in binary we
call it bit right .PERIOD  So ,COMMA  if I have 7 ,COMMA  8 ,COMMA  3 ,COMMA  2 ;SEMICOLON  now all of you know what is the value of this
number each of this place have got a weight ,COMMA  which are known as play I mean weights of
the different places .PERIOD  So ,COMMA  this is 10 to the power 0 ,COMMA  this is 10 to the power 1 ,COMMA  this is 10 to
the power 2 ,COMMA  this is 10 to the power 3 .PERIOD  0 weight ,COMMA  1 weight ,COMMA  2 weights ,COMMA  3 weight .PERIOD  So ,COMMA  this
number is actually meaning 7 times 10 to the power 3 that is 7000 ,COMMA  8 times 10 to the
power 2 that is 800 .PERIOD  3 times 10 to the power 1 that means ,COMMA  30 ,COMMA  and 2 times 10 to the
power 0 that is 2 so that is giving us 7 8 ,COMMA  3 ,COMMA  2 .PERIOD  It will be easier to understand this with this
analogy for example ,COMMA  here I have got something like 1 0 1 1 .PERIOD 
Now unlike ;SEMICOLON  so here also the weights are 0 ,COMMA  1 ,COMMA  2 ,COMMA  3 but the base here was 10 .PERIOD  So ,COMMA  here it is
2 to the power 0 is binary here .PERIOD  So ,COMMA  is 2 to the power one 2 to the power 2 ,COMMA  2 to the power
3 ,COMMA  here the base is 2 here the base was 10 ,COMMA  that is why this is a binary system this is a

decimal system .PERIOD  So ,COMMA  if I have this pattern 1 0 1 1 then I can straightway convert it to an
equivalent decimal like what does this mean .PERIOD  So ,COMMA  I can take it there is a 1 here ,COMMA  1 times 2
to the power 3 that is what 8 ,COMMA  then 0 times 2 to the power 2 that is 0 ,COMMA  1 times 2 to the
power 1 that means ,COMMA  2 ,COMMA  1 times 2 to the power 0 that is 1 .PERIOD  So ,COMMA  the value of this will be 11 .PERIOD 
So ,COMMA  this is the binary number system .PERIOD 
So ,COMMA  there are ways and means by which I can convert from a binary number system to a
decimal system ,COMMA  from a decimal system to a binary system that is possible right .PERIOD  So ,COMMA  if
you want to see that I do not want to go into that because many of you have done it in
school .PERIOD  So ,COMMA  let us leave it for the time being .PERIOD  But what is more important is to know that a
computer in a computer everything is represented in the binary system as a bit pattern of
1’s and 0’s .PERIOD  Since everything is expressed as binary number system .PERIOD  So ,COMMA  if I remember
the say we had something like this .PERIOD 

Let us not take max ,COMMA  let us take a sum equals sum number one .PERIOD 
Student:
This is something we saw in our earlier lecture something like that .PERIOD  Now this is a
statement how do I represent it to a computer .PERIOD  In order to represent this to a computer say
I want to say this is and you have to do some addition and some assign ;SEMICOLON  some you have
to copy it somewhere and write it somewhere .PERIOD  Since or I just take this simple part add

sum with number ,COMMA  sum plus number how do I express that ?QUESTIONMARK  Everything has to be
expressed say this number have will be some patterns say 0’s 1 0 1 ,COMMA  1 0 0 something of
that sort sum will be something 0 1 1 0 0 1 1 0 0 whatever and class will also have some
code 0 1 1 0 1 1 0 1 1 might be .PERIOD  Suppose this is add and suppose 0 1 1 1 0 0 1 1 1 is
subtract similarly there will be a similarly there will be some code of for multiplication
etcetera .PERIOD 
Now ,COMMA  since I am here ,COMMA  I am the user and I am also the programmer and here is my
computer and I have to translate my thoughts my algorithm in a way so that a computer
understands .PERIOD  I have to translate that algorithm or the flowchart into this pattern of 0’s and
1’s ,COMMA  because that is the only thing that it understands .PERIOD  The language that the computer
understands is known as the machine language .PERIOD  So ,COMMA  let me once again draw another
picture here .PERIOD 

So ,COMMA  here I have got my machine I have got a machine here nice looking machine and here
is the programmer .PERIOD  The programmer understands flowchart or the programmer
understands English like pseudocode ,COMMA  but this one only understands patterns of 0’s and
1’s .PERIOD  A pattern of 0’s and 1’s ,COMMA  and this is a language it understands and this programmer
understands the language of flowchart for example .PERIOD  Now ,COMMA  this patterns of 0’s and 1’s that
the machine understands ,COMMA  this is my machine M C is the machine .PERIOD  Now this machine

understands that language is known as the machine language ,COMMA  and that machine language
is not understood .PERIOD 
If some genius can understand remember all those patterns of 0’s and 1’s for every
possible combination ,COMMA  that is a different thing ,COMMA  but for normal people it is not it is very
tedious ,COMMA  it is not possible it is not advisable also .PERIOD  Therefore ,COMMA  earlier people had to for
small computers it was possible at the very beginning ,COMMA  people used to program the
computer by setting up different switches .PERIOD  And thereby ,COMMA  it was being programmed .PERIOD  But at
that time the operations and the capability of the computers say much more limited ,COMMA  but
once it became larger we are doing much more flexible programming and everything ,COMMA  it
is not no longer possible to remember the machine language .PERIOD 
So ,COMMA  what is the other alternative ?QUESTIONMARK  The other alternative is the best alternative would be
that on this side I have got my normal language English and if I could directly translate
into machine language ,COMMA  but there are some problems with that because in English or any
natural language that we use ,COMMA  many things are often ambiguous .PERIOD  It is not very clear it can
have multiple meanings just I am giving an example go to the bank it is in English
statement .PERIOD 
Now ,COMMA  what does this word bank mean ?QUESTIONMARK  It can be many things right it can be in the bank
where you deposit the money ,COMMA  it can mean the river bank etcetera .PERIOD  Therefore ,COMMA  English
language or any natural language is not the yet suitable to be translated to the machine
language .PERIOD  So ,COMMA  instead people thought if we could have some intermediate language .PERIOD  So ,COMMA 
once again I come here ,COMMA  I again draw the machine here ,COMMA  the machine is here and the
person is here .PERIOD 

So ,COMMA  on this side is my natural language like English ,COMMA  but which I am not being able to use .PERIOD 
So ,COMMA  people developed some intermediate language which is close to English ,COMMA  but the
grammar is much more stricter and we cannot allow any ambiguity no ambiguity .PERIOD  But it
is high level language because it is easier for us to remember ,COMMA  it is easier for us to
explain .PERIOD  For example ,COMMA  if I write this say X equal to P plus Q or I write read P now this is
meaningful ,COMMA  this is looks like English and I can understand this .PERIOD 
Now ,COMMA  given a high level language and on this side this machine can only understands
machine language .PERIOD  So ,COMMA  we need to have some translator which will convert this high
level language to the machine language ,COMMA  and this translator is known as the compiler .PERIOD 
Now think of the situation that here is a person say just forget about the computer high
level language ,COMMA  think of a person who knows French ,COMMA  and here is a person who knows
maybe English .PERIOD 
So ,COMMA  a compiler or an interpreter is something which is somebody ,COMMA  who will translate from
French to English right .PERIOD  So ,COMMA  here also depending on what language I am using as the high
level language ,COMMA  there will be different compilers .PERIOD  Examples of high level languages are C
which we will be discussing or taking as an example in our course ;SEMICOLON  it can be Java ,COMMA  it can
be FORTRAN ,COMMA  it can be Python ,COMMA  alright .PERIOD  We can have many other languages that are
coming up nowadays other languages also coming up .PERIOD 

So ,COMMA  depending on the language high level language ,COMMA  in which we want to express our
algorithm we will have to select a suitable compiler .PERIOD  So ,COMMA  for C we will need a C
compiler ,COMMA  for Java will have to need a Java interpreter .PERIOD  The same thing the more or less
same thing that it will translate the basic function of this is translation .PERIOD  So ,COMMA  it will
translate from a high level language to the machine language .PERIOD  And as you had seen that
here all those things I will be binary ,COMMA  I mean in binary system in the pattern of 0’s and
1’s ,COMMA  I have to convert if this machine has to operate with my program this have to process
this my program I have to convert it into 0’s and 1’s .PERIOD 
So ,COMMA  now here is something more that we have to say .PERIOD  Now whenever we write a program
what we do here is we write some high level program .PERIOD 

And that high level program is taken up by a compiler ,COMMA  and is converted into a machine
language .PERIOD 
Now ,COMMA  here you have to be a little careful that depending on the different machines ,COMMA  you
can have pentium machine ,COMMA  you can have apple machine and other things .PERIOD  So ,COMMA  depending
on what machine you are using ,COMMA  you will you may need different compilers for that
particular machine .PERIOD  So ,COMMA  for the time being let us ignored that thing ,COMMA  let us assume that one
high level program can be translated by a compiler to a machine language .PERIOD  So ,COMMA  there is a
program right .PERIOD  So ,COMMA  remember what we did in our earlier cases ,COMMA  we had we said find the

maximum of 10 numbers ,COMMA  and the numbers were 3 10 7 12 5 6 so and so forth right 1 2 3
47 2 1 5 .PERIOD  So ,COMMA  out of these I have to find out the maximum .PERIOD 
Now ,COMMA  through the flowchart or through the pseudocode what did we specify ?QUESTIONMARK  We
specified the sequence of steps .PERIOD  So ,COMMA  those sequence of steps that have to be adopted in
order to find out the maximum of this is our program .PERIOD  And this program will be
converted to the machine language .PERIOD  Now this program will run on some data this
program is a program that can run on this set of data or another set of data say 5 ,COMMA  15 ,COMMA  16 ,COMMA 
7 say for 4 data if I just run it for n number of things and here the N was 10 .PERIOD  Remember
what we did earlier and here N is 4 .PERIOD  The same programme should work on both of these
therefore ,COMMA  the program remains the same ,COMMA  but here is some data set and here is another
data set .PERIOD  So ,COMMA  we have got 2 different data sets .PERIOD 
So ,COMMA  in order to execute we need both the program and the data .PERIOD  Now when we start say
our program and the program when we start with the high level program .PERIOD 

I am writing H L L is the high level language ,COMMA  now this by the in the context of passing I
am saying this is also known as the source language .PERIOD  So ,COMMA  in my lecture often I will be
using this term source language .PERIOD  Source language means or I will say the I will not I will
not say source language ,COMMA  I will say source program .PERIOD  By source program I mean the
program that is written in the high level language that will be translated by a compiler to
a machine level language .PERIOD  Now when we now this is one side .PERIOD  So ,COMMA  the machine language

has been generated by the compiler .PERIOD  If my source language is C then I need a C compiler
here ,COMMA  and I will get the machine language .PERIOD  And this machine language is independent of
what the source language is ,COMMA  it is only dependent on the particular machine on which it is
running .PERIOD  So ,COMMA  the compiler we translate into that machines machine language .PERIOD 
Now ,COMMA  in my computer diagram we had the CPU here and we had memory .PERIOD  Now the
memory can be divided into 2 parts ,COMMA  one is the RAM and ROM some let me put it 3 parts
RAM and ROM are 2 types of memories ,COMMA  which all of relatively smaller capacity I think
this is not very clearly coming .PERIOD  So ,COMMA  let me write it clearly ,COMMA  RAM stands for random access
memory and ROM stands for read only memory .PERIOD 
Besides that we have got the secondary memory ,COMMA  which is the disc .PERIOD  Now the machine
language after compilation ,COMMA  when it is saved I save it and it is saved and stored in the
secondary memory in the disc .PERIOD  Now when that program will be RAM ,COMMA  I have done the
compilation and after compilation my program is ready to be executed is ready to run .PERIOD 
Now when I run it ,COMMA  can I select some plain color ;SEMICOLON  sorry .PERIOD  So ,COMMA  when I run it from the
secondary memory it will go to the RAM and the CPU the program will move to the
RAM only when I execute it ,COMMA  and the CPU you will read that program from the RAM
and will execute it .PERIOD  So ,COMMA  this is a sequence you should remember I repeat once again .PERIOD  I
write the program and type in the program in the machine ,COMMA  after that I do the compilation
after compilation it is converted to the machine language and I save it .PERIOD  When I save it ,COMMA  it
is saved in the secondary memory .PERIOD 
Secondary memory is typically the disc ;SEMICOLON  I save it in the secondary memory .PERIOD  But on
execution when I execute it ,COMMA  when I run the program then only it goes from the secondary
memory to the RAM and the CPU reads from the RAM and executes it .PERIOD  So ,COMMA  we will be
bothering about mostly this RAM and secondary memory ,COMMA  and how that is stored many
variables and all those things are stored well in the next lecture we will see how we can
gradually move towards encoding our pseudocode to the machine language to the high
level language .PERIOD  So ,COMMA  summarizing what we discussed in this lecture ,COMMA  it is that we have got
the pseudocode ,COMMA  but on the other side we have got a machine which does not understand
this pseudocode ,COMMA  the machine only understands the patterns of 0’s and 1’s .PERIOD 
So ,COMMA  we have to have something which will convert the pseudocode cannot be directly
converted because of lot of ambiguity .PERIOD  So ,COMMA  will have a high level language designed

which can be which is unambiguous ,COMMA  and which can be converted to the machine code by
another system that is a compiler .PERIOD  And that compiler is nothing but another more
sophisticated program ,COMMA  using which you can convert this and keep it over there take it in
the machine language .PERIOD  And the machine can then read that machine language program
and can execute it .PERIOD 
Now we have also seen that a program I mean if we have to run a program we need the
program as well as the data both this are stored in this memory part and from which the
CPU will be taking that .PERIOD  Sometimes the data can be fed directly from the input device at
runtime .PERIOD  So ,COMMA  whenever we say read n then from the input device somebody will type in
the value and that will come from to the CPU into the RAM .PERIOD  So ,COMMA  this part will see later
gradually .PERIOD 
Thank you very much .PERIOD 

In the earlier lecture we had seen that we start with an algorithm and convert that
algorithm into some sort of high level program .PERIOD 

We convert it to some high level program and that high level program is fed to a
compiler and the compiler prepares the machine level program .PERIOD  This machine level
program is fed is stored in the memory of the computer and from this memory stored in
the memory of the computer .PERIOD 
Now ,COMMA  from the memory the CPU execute set and we get the desired result that is the
overall flow of the whole thing .PERIOD  Now we will now come back to some of the statements
that we used in the earlier example programs will come back to that .PERIOD 

Say we had statements like SUM is equal to SUM plus number 1 right yesterday we
accounted we encountered such statements SUM equal to SUM plus number 1 now also
say for example ,COMMA  MAX assigned number 2 then the question is what are these things max
number all right or for example ,COMMA  if I write AREA is assigned 5 .PERIOD 2 ,COMMA  what is this area and
what is this 5 .PERIOD 2 now this is some very fundamental concept that will be discussing today
these are known as the variables and these are known as the values .PERIOD 
Now ,COMMA  we must be very clear before we start translating or writing a program in any high
level language it is imperative to know very clearly what is a variable and what is a
value .PERIOD  So ,COMMA  today’s lecture will be devoted to explaining the difference between variables
and values and what is the significance of these variables .PERIOD 

Now ,COMMA  let us look at this diagram the memory can be considered to be a cvr number of
racks in a book rack sort of thing or you can think of a number of a drawers in the chest
of a drawers essentially is these are specific places as is being shown here ,COMMA  now each of
this place is known as a memory location all right .PERIOD 
Student: (Refer Time: 05:40) .PERIOD 
Now ,COMMA  here you can see that each of these locations have been marked with a particular
address ,COMMA  these are the addresses and each address of every memory location .PERIOD  So ,COMMA  think of
a scenario that in a locality there are a number of houses each of this house is a location ,COMMA 
this is a location right ,COMMA  now I want to reach a particular house ;SEMICOLON  that means ,COMMA  a particular
location ,COMMA  how can I identify where I should go for that we need some address .PERIOD  So ,COMMA 
similarly in the case of memory for every location there is an address ,COMMA  here we can we
are showing 1 ,COMMA  2 ,COMMA  3 ,COMMA  4 ,COMMA  5 ,COMMA  6 ,COMMA  7 ,COMMA  8 ,COMMA  9 ,COMMA  actually there are more locations which have not been
shown .PERIOD 
We are showing N locations ,COMMA  N number of locations are being shown and each of these
have got some address there is a peculiarity here the reason of that will be clear later let
us for the time being accept that we are starting our journey with the number 0 .PERIOD  The first
address is address 0 and ,COMMA  the Nth address will be address N minus 1 because the second
address will be address 1 ,COMMA  the Nth address will be N minus 1 .PERIOD 

Now recall that we had the scenario that we had the high level program .PERIOD 

High level program or if you remember we call it also the source code and from the
source code ,COMMA  the compiler converts them into a machine code machine language .PERIOD  Now in
my high level source code I have a statement like SUM equals 25 say now when I say
that SUM is equal to 25 the compiler will look at this and will assign these variable now
this SUM is a variable means what it is a variable because it can be loaded with different
values .PERIOD 
A variable can have different values for example ,COMMA  here I am making SUM equal to 25
after a while I can make SUM equal to 37 therefore ,COMMA  SUM is a variable and it can have
different values right .PERIOD 
So ,COMMA  say in a program in a program I have got here SUM equals to 25 .PERIOD 

X equal to 56 and SUM equals to SUM plus X something of that sort ,COMMA  here how many
variables do you see and how many values do you see we find that sum is a variable and
X is a variable and these variables have been repeated here and what are the how many
values do you see 25 is a value ,COMMA  56 is another value .PERIOD  Now when the compiler takes the
high level program and it looks at the compiler looks at all the variables and assigns or
allocates distinct locations to each variable for the sake of simplicity let us say that it
assigns distinct locations to each variables all right .PERIOD 
Sometimes advanced compilers also share variable share location ,COMMA  but that is not our
concern right ,COMMA  therefore ,COMMA  let us come back to the slide once again you can see .PERIOD 

If I have a number of variables when every variable is mapped to a particular memory
address for example ,COMMA  here if I write SUM equals 56 ,COMMA  X equal to 27 and Y is equal to 3 .PERIOD 5
the compiler will look at this piece of program and you will allocate and we will allocate
some location to each of these variables maybe SUM can be located allocated here ,COMMA  X is
allocated here ,COMMA  Y is allocated here say therefore ,COMMA  SUM can be identified now by the
computer or the CPU when it will run the program it can look at whenever a sum appears
in the program the compiler will convert it to the corresponding address of SUM .PERIOD  SUM
has got the address 3 ,COMMA  X has got the address 6 and Y has got the address 7 ,COMMA  therefore ,COMMA  this
thing is converted to a scenario where I am actually writing 56 into address 3 .PERIOD 
So ,COMMA  as if 56 is being written here I will explain it later ,COMMA  X is being written here ,COMMA  27 is
being written here and 3 .PERIOD 5 is being written here all right because while the computer
executes the program it will take the data from the memory location only and the
memory locations it no longer understands whatever name you gave to this particular
variable ,COMMA  whether it is sum or any other name ,COMMA  but it is identified uniquely by the address
that the compiler has given it .PERIOD 
The compiler can depending on the availability of the memory locations allocated
different addresses to different variables once that is done there is a table for example ,COMMA 
there is a table like this a record that is kept that you can think of that we have got the

variables here the variable and the address .PERIOD  So ,COMMA  some table of that sort is prepared SUM
is address 3 ,COMMA  X is address 5 and Y is address 7 .PERIOD 
Now ,COMMA  the CPU whenever it ,COMMA  the program in the machine language is converted in terms
of these addresses this variables will no longer appear in the machine language ,COMMA  let us
look at this in a little more detail .PERIOD 

Now ,COMMA  suppose look at this instruction this is a program now one thing to mention here is
typically a program consists of a sequence of instructions that we know that one
instruction after another will be executed .PERIOD  So ,COMMA  this is usually done in a sequence where is
an exception from that sequence ?QUESTIONMARK  We had seen in the flowcharts that whenever there is a
loop I am repeating an instruction time and again ,COMMA  we have seen when we are trying to
find the maximum of n numbers or average of n numbers we are repeating some
instructions time and again ,COMMA  in that case we will go back to the earlier instruction
otherwise one instruction is executed after another right .PERIOD 
As time passes we have got some instruction here not doing any meaningful computation
say just to illustrate X equals 10 ,COMMA  now here is another point what does this equal mean all
right .PERIOD 

This is something that we should understand in our school we often do say X equal to Y
that means X ,COMMA  the value of X is equal to the value of Y .PERIOD  If X is 5 ,COMMA  then Y is 5 ,COMMA  but here
this symbol whenever we are using now is this symbol actually means assignment now
this is something which you should understand and this is fundamental to any
programming language that we will use .PERIOD  When I write X here I am writing X this symbol
Y I will read it as X is assigned Y what does it mean X is getting the value of Y .PERIOD 
Now often is therefore ,COMMA  in order to avoid this confusion we write it in this way that the
value of Y is assigned to X now here is something to really understand what is X ,COMMA  X is it
a value no ,COMMA  X is a variable therefore ,COMMA  X is a memory location the compiler has allocated
some memory location with a specific address ,COMMA  this X is nothing ,COMMA  but a memory location
with some distinct address is it readable ,COMMA  memory location with some distinct address
that is X and Y is also a memory location with distinct address ,COMMA  but this assignment
means it is getting the value that is in Y .PERIOD 
Let us think of like this that here is a memory location that has that is X .PERIOD  So ,COMMA  X when I
am writing X that is means that it is actually the address of X ,COMMA  that has been address of
this memory location and Y is also memory location and when I am writing Y this
variable name Y just for ease of our understanding otherwise I would have to write the
address here and the address in a computer system in machine language will be a string
of binary bits I mean a bits bit string ,COMMA  that will be really complicated .PERIOD  So ,COMMA  for the sake of

understanding we are just writing X and Y ,COMMA  but you must understand that this X or this Y
means the address of X and who has allocated the address of X or the address of Y the
compiler .PERIOD  Now when I am doing assignment this X is assigned the value of Y suppose Y
had 5 all right the value was 5 now this 5 is then written over here and this also becomes
5 this is the meaning of assignment it is not exactly meaning equal to Y essentially after
this what happened is the value of X is actual equal to the value of Y ,COMMA  but this sign
typically means assignment in order to show this equality we have got other symbols will
come across that later .PERIOD 
Let us move to this ,COMMA  here we are executing an instruction one instruction after another .PERIOD 
So ,COMMA  here in the first instruction we find that X has been assigned the value 10 is not say
once again let me come here .PERIOD 

This is this means X is assigned the value of Y if I write this X assigned 10 that means ,COMMA 
X is assigned the value 10 because here I had some value in Y whatever it is and that was
being transferred to X ,COMMA  but here it is not this side the right hand side is no longer a
variable ,COMMA  but a value right the right hand side is a value therefore ,COMMA  X is a memory
location .PERIOD 
For this example X is a memory location which is having the value 10 after execution of
this instruction this will be the situation in the memory after the execution of this
instruction right .PERIOD  Here let us now you will understand as I assign 10 to X and this is a

same memory location this is a memory location for X the same memory location see
how the picture is changing ,COMMA  here that memory location X is getting the value 10 on this
side I am showing the memory location allocated to the variable X .PERIOD  So ,COMMA  10 next step I
assign 20 ,COMMA  this location gets 20 .PERIOD 
This 10 that was there same location 10 was there 10 is being over written by 20 here .PERIOD 
So ,COMMA  when this is being executed then this 10 is being over written and 20 is being written ,COMMA 
I am getting here 20 .PERIOD  Now X has got 20 what is X now X is 20 now I do another
arithmetic operation here what how do you explain this X assigned X plus 1 .PERIOD 

Let us go back one moment to this X was this is X it was 20 and I have come across an
instruction ,COMMA  which says X equal to X plus 1 what does it mean ?QUESTIONMARK  It means assign to X
what ?QUESTIONMARK  X plus 1 ;SEMICOLON  that means ,COMMA  whatever value you get after computation of the expression
will be assigned to X .PERIOD  So ,COMMA  how will it be done ?QUESTIONMARK  Right now what is the value of X 20 ,COMMA  the
CPU will have doing some addition operation ,COMMA  will it read this value 20 here and some
incrementation by 1 .PERIOD 
So ,COMMA  that these 2 will be added the value from the location X will be taken it will be added
with 1 or incremented with 1 .PERIOD  So ,COMMA  here I will be getting after addition I will be getting 21 ,COMMA 
now this assignment means whatever value you get after computation will be assigned to
this .PERIOD  Why this because on the left hand side I have got the same location X ,COMMA  this will be
changed to 21 .PERIOD 

Now suppose if instead I had the situation like this .PERIOD 

X at 20 and I write Y assigned X plus 1 what does it mean ?QUESTIONMARK  It means that this Y is
another memory location and what is been told over here ,COMMA  you take X take the content of
X and ,COMMA  you will take 20 ,COMMA  and have 1 added add them you will get 21 and assign it to Y in
that case you see the picture ,COMMA  the main content of the memory location the value of the
memory location X remains unchanged and another location gets the value 21 right
unlike the earlier case .PERIOD  When we had written X assigned X plus 1 when I do that then in
this case this value will be overwritten this 20 will be over written ,COMMA  but in this case it is
not being over written it is remaining all right .PERIOD 
Now ,COMMA  let us go back to the slide here ,COMMA  when I therefore ,COMMA  you understand X was 20 assign
20 ,COMMA  then next step X is assigned X plus 1 ,COMMA  it becomes 21 the same location X is becoming
21 ,COMMA  now I am doing X assigned X multiplied by 5 .PERIOD 

So ,COMMA  again what I am doing ?QUESTIONMARK  I am the same thing X assigned X times 5 ,COMMA  I had X and X
was 21 here I took that value ,COMMA  and this time instead of adding the CPU is doing some
multiplication and with this constant value 5 and is getting the value 105 .PERIOD  Now this 105
is again written back to X ,COMMA  it is going over there and it will over write this 21 and we will
write 105 .PERIOD 
Therefore here we will have the result as 105

I hope you have been able to understand the difference between the variables and values
here ,COMMA  and the variables the fact that the variables are nothing ,COMMA  but memory locations .PERIOD  I

will continue with this in the next class ,COMMA  quickly let us have a look at this .PERIOD  Let us revise
here another situation another program segment the part of the program .PERIOD  X is assigned
20 ,COMMA  Y is assigned 15 ,COMMA  next step Y is assigned 15 ,COMMA  X is assigned Y plus 3 ,COMMA  Y is assigned X
divided by 6 now ;SEMICOLON  obviously ,COMMA  since there are 2 variables in this program ,COMMA  there will be 2
memory locations assigned .PERIOD 
Now ,COMMA  here in the first instruction X is being assigned 20 therefore ,COMMA  this location has got
20 written in it what is there in Y I do not know ;SEMICOLON  anything that was earlier from the
beginning was remaining that is there I do not care .PERIOD  Next step I am assigning 15 to Y
therefore ,COMMA  now X remains as it is 20 and Y becomes 15 .PERIOD  Now what am I doing in the third
step ?QUESTIONMARK  I am doing X assigned Y plus 3 just as I had explained in the last slide just now
that I will be actually taking the content of Y .PERIOD 

Whatever Y was it was 15 or something I take it and add something to this and store it
back to X all right that is what I am doing right .PERIOD 
X assigned Y plus 3 ,COMMA  Y was 15 ,COMMA  that is taken 3 is added to that the result is 18 and where
is that loaded ,COMMA  that it loaded into X and ,COMMA  it becomes 18 and what happens to Y ?QUESTIONMARK  Y is not
disturbed because here at this point Y has just been read it is not been written into Y has
been just read ,COMMA  I read from this location I did not disturb it I disturbed x .PERIOD  So ,COMMA  I added 3
and made it 18 here what I am doing ?QUESTIONMARK  I am now disturbing Y how ?QUESTIONMARK  I am reading the
value of X dividing it by 6 ,COMMA  18 divided by 6 will be 3 I am writing that to Y therefore ,COMMA 

now I am disturbing Y and Y has got a new value ,COMMA  now ,COMMA  my result if I had written here
print X and Y then my result would be 18 and 3 right .PERIOD 
So ,COMMA  that is how the variables are handled by a programme and I tried to explain to you the
difference between variables and values ,COMMA  you please look at the pseudo code of the
examples that we did in the last lecture and see what are the variables and what are the
values and try to draw a diagram as I have done today just to have clearer conception for
that .PERIOD 

In the last class ,COMMA  last lecture ,COMMA  we were discussed about variables and values

And we explained that variables or mapped by the compiler to different memory
locations .PERIOD  So ,COMMA  whenever we mention about any variable X Y or Z ,COMMA  each of them
corresponds to a memory location ,COMMA  each of them corresponds to a memory location and
each of them corresponds to a memory location

And whenever we assign some value likes 20 to X ;SEMICOLON  that means ,COMMA  in a particular memory
location that value is written .PERIOD  So ,COMMA  we had done this example once again ,COMMA  we quickly go
through it that X is being assigned 20 .PERIOD  So ,COMMA  the memory location corresponding to X is
getting the value 20 whereas ,COMMA  the memory location corresponding to Y can be anything ,COMMA 
when we assign in this statement the value 15 to Y .PERIOD 
Then 15 is written in the location ,COMMA  corresponding to Y ,COMMA  when we do Y plus 3 and assign it
to X ;SEMICOLON  that means ,COMMA  actually we are reading this value of Y ,COMMA  here reading the value of Y
which is 15 and we are adding 3 with that and we are getting 18 and that 18 is written
into this location ,COMMA  all right .PERIOD  This may appear to be very simple ,COMMA  but this way of thinking
or way of looking at the things will come in very handy as we will see at a later ,COMMA  during
the later phases of programming .PERIOD 
Now ,COMMA  here again when we are ,COMMA  what is been meant by this statement ?QUESTIONMARK  That the value how
will I read ?QUESTIONMARK  I will read it like this that the value of X value stored in X that is 18 will be
divided by 6 and that result will be stored in Y all right .PERIOD  So ,COMMA  X was 18 ,COMMA  18 has been
divided by 6 and we get 3 and that 3 is written in Y .PERIOD  Now ,COMMA  here there are couple of
things ,COMMA  that what is this 18 ?QUESTIONMARK  What is this 20 ?QUESTIONMARK  These are values and whereas ,COMMA  these are
variables ,COMMA  these are also known as constants .PERIOD  Constants are the values which do not
change during the execution of the program ,COMMA  next we can now ,COMMA  we can think of the
software .PERIOD 

Now ,COMMA  you know any computer system ;SEMICOLON  consist of hardware as well as software right .PERIOD  So ,COMMA 
we will have some hardware as well as software .PERIOD  Now ,COMMA  the hardware is consisting of the
C P U ,COMMA  the memory ,COMMA  the I O devices ,COMMA  all those things are hardware and the software is the
instructions ,COMMA  that this hardware that is executed by this hardware ,COMMA  the instructions that are
executed by this hardware constitute the software .PERIOD  Now ,COMMA  software can be of two types for
example ,COMMA  first one is the application software ;SEMICOLON  application software is the software that
we write .PERIOD 

So ,COMMA  we can just have an idea of this ,COMMA  through this onion type of diagram at the core ,COMMA  we
have got the hardware .PERIOD  The hardware is here and I am putting two layers around this and
the user is standing somewhere here and the user is not directly interacting with the
hardware ,COMMA  because the hardware nearly understands ones and zeros and it is very difficult
for the user to write in ones and zeros .PERIOD  So ,COMMA  the user will write in some high level
language H L L ,COMMA  in which the user writes and the system automatically converts it into a
way that is understood by the hardware .PERIOD 
And what is that automatic way of converting it ,COMMA  we have seen that is compiler ,COMMA  is a
software compiler is again a software right ,COMMA  a complier is software which converts before
coming to application software .PERIOD  Let me talk about system software .PERIOD  So ,COMMA  we know that
when the user has written something in high level language ,COMMA  that is converted by a
program called compiler into the machine level language or high machine level language
right ,COMMA  which the hardware understands .PERIOD 
So ,COMMA  the compiler is let us mark it like this .PERIOD  These are part of this layer ,COMMA  which is the
system software similarly ;SEMICOLON  operating system is another very important software ,COMMA  that is
lying in this layer ,COMMA  internal layer which enables the user to use the computer in a much
more user friendly way and in a much more efficient way .PERIOD  So ,COMMA  operating system compiler
etcetera are the core ,COMMA  very important elements of the entire computer system ,COMMA  without
which we cannot ,COMMA  we would not be able to use the computer in ,COMMA  as efficient way as we do
it now a days .PERIOD 
Now ,COMMA  given this hardware and this layer of operating system ,COMMA  and compiler ,COMMA  and other
system software ,COMMA  now ,COMMA  we are in a position to write some programs for our day to day
use ,COMMA  for example ,COMMA  a company wants to find out the salary information of the people ,COMMA  they
can use some pay roll software ,COMMA  here or for example ,COMMA  you want to design some data
analysis software that will take some data and using a particular software will analyze
the data statistically and give you some good insights .PERIOD 
So ,COMMA  all those things ,COMMA  the user is writing and they are forming the application software .PERIOD  So ,COMMA 
most of the time the programmers ,COMMA  who are not systems programmers ,COMMA  not the system
designers ,COMMA  but just users they mostly use the application software given this ,COMMA  we come to
a very important software .PERIOD 

We just now mentioned ,COMMA  that is an operating system .PERIOD  Now ,COMMA  you know that you are
averred of typical operating systems like windows ,COMMA  Linux or Unix ,COMMA  now a day’s Apple is
becoming popular Mac OS ,COMMA  all these things are operating systems .PERIOD 
Now ,COMMA  what is the operating system ?QUESTIONMARK  The operating system is a layer around the hardware
which enables a user to use the software ,COMMA  use this computer system .PERIOD  I am sorry ,COMMA  use the
system in a much more friendly way .PERIOD  Now ,COMMA  there are different varieties of operating
system ;SEMICOLON  single user operating system ,COMMA  multi user operating system ,COMMA  etcetera .PERIOD  Now ,COMMA  this
operating system also activates another system software that we have talked about ,COMMA  that is
a compiler right .PERIOD  The operating system will call or will activate the software system ,COMMA 
software call the compiler ,COMMA  when you want to run a high level program ,COMMA  given this
background .PERIOD  Let us now move to discussion on programming .PERIOD 

We know by now that programming means we have to express our intention of solving a
problem by executing a number of steps and those number of steps ,COMMA  once again you know
that by now ,COMMA  we start with the algorithm and that algorithm can be expressed in different
ways like pseudo code or flow chart and then the programmer actually writes them in a
high level language ,COMMA  some high level language .PERIOD 
Now ,COMMA  what we are going to discuss now ,COMMA  is a particular high level language ,COMMA  which is
called C .PERIOD  We are taking C just as an example of an high level language ,COMMA  because we have
to express the logic in the form of some high level language .PERIOD  We are taking C as an
example and as I have mentioned earlier that the logic ,COMMA  the style and the philosophy ,COMMA 
remains more or less the same across different programming languages like Java ,COMMA  C plus
plus and others of course ,COMMA  C is the simplest to start with .PERIOD 
Let us see now ,COMMA  we are using the term language ,COMMA  think of a human language ;SEMICOLON  any
language is constituted of some vocabulary right .PERIOD  The vocabulary say for example ,COMMA  in
English ,COMMA  the vocabulary consists of some words right .PERIOD  Different words like a bird is a
valid word in a ,COMMA  in the English vocabulary now ,COMMA  but if I had written r b i d that is possibly
not a valid word in the English language vocabulary all right .PERIOD 
Now ,COMMA  we have got some valid words .PERIOD  Similarly ,COMMA  C will also have some valid words ,COMMA 
which will see through ,COMMA  which we can express the basic elements of a C program ,COMMA  just as
English sentence is built using English ,COMMA  valid English words ,COMMA  otherwise the meaning will

not be understood in the case of C programming language .PERIOD  Say C will have ,COMMA  it is own
vocabulary right .PERIOD  The words valid in C now ,COMMA  if I had written some word in English ,COMMA  that
is now some string ,COMMA  some patter in English like r b i d that unless this has got some
special meaning ,COMMA  this will not be an ,COMMA  if this is a part of a sentence ,COMMA  this will not be very
clearly understood by anybody .PERIOD 
Now ,COMMA  when I have written a C program ,COMMA  who is going to understand this ,COMMA  for whom I am ,COMMA 
I writing this C program ,COMMA  I am writing this C program ,COMMA  for the compiler C ,COMMA  compiler all
right .PERIOD  I am writing it for the C compiler and the C compiler is responsible to understand
this and just as we understand an English sentence open the door .PERIOD  So ,COMMA  we understand the
meaning of that sentence ,COMMA  we go and execute that we open the door .PERIOD 
Similarly ,COMMA  in C if we write something ,COMMA  unless the compiler understands this ,COMMA  it will not be
able to convert it to the machine language ,COMMA  which will be executed by the hardware or the
computer right .PERIOD  So ,COMMA  the C program must constitute of valid C words and we will see what
are the valid words and what are the rules for that .PERIOD  Now ,COMMA  the next thing ,COMMA  if I write a
particular sentence

I saw a bird that is a valid English sentence ,COMMA  why is it valid ?QUESTIONMARK  Because it is grammatically
correct and also it is carrying a very clear meaning .PERIOD  It is a meaningful sentence right ,COMMA  this
is both correct ,COMMA  grammatically by grammar and also it is meaningful .PERIOD  Now suppose ,COMMA  I
wrote it ,COMMA  wrote something like I sees a bird .PERIOD  Now ,COMMA  this is grammatically wrong ;SEMICOLON  however ,COMMA 

it conveys some meaning ,COMMA  I understand that the person who wrote this is weak in
grammar ,COMMA  he is not very much conversant with subject ,COMMA  verb ,COMMA  agreement ,COMMA  but still I can
make a meaning out of it .PERIOD 
On the other hand for a compiler ,COMMA  if I write a C sentence ,COMMA  let me call it not sentence ,COMMA  let
me call it C statement .PERIOD  Now ,COMMA  a C statement ;SEMICOLON  that means ,COMMA  a statement in the language C
will consist of some valid words in C and also it will have to follow some grammatical
rules of C .PERIOD  Unfortunately ,COMMA  here although it is grammatically wrong ,COMMA  I could understand
the meaning of this ,COMMA  but a C statement ,COMMA  if it is grammatically wrong ,COMMA  grammatically
according to the grammar of C ,COMMA  if it is not in tune with the grammar of C .PERIOD 
Then is grammatically wrong and since this C sentence will be interpreted not by a
human being ,COMMA  but by a machine ,COMMA  computer hardware smart ,COMMA  it may look like is basically ,COMMA 
not as intelligent as human beings .PERIOD  So ,COMMA  that as of now ,COMMA  whatever we can make out the
meaning of it a compiler a C program will not the compiler ,COMMA  will not be able to make out
correspondingly the correct machine language cannot be generated therefore ,COMMA  if there is
something that is grammatically wrong according to C grammar that will be indicated
marked by the compiler as a syntax error all right .PERIOD  So ,COMMA  unless we write something in the
correct syntax ,COMMA  there is always a chance of it will it not there is always a chance it will ;SEMICOLON 
obviously ,COMMA  lead to a syntax error and the compiler will not produce the corresponding
machine code ,COMMA  all right .PERIOD 
So ,COMMA  we are now supposed to learn what is therefore ,COMMA  we need to know what are the valid
words in C and what are the correct grammatical structures in C .PERIOD  Now ,COMMA  if we learn both
these ,COMMA  we learn the C language similarly ,COMMA  if you want to learn any other language
computer language you have to exactly know this things what are the valid words ,COMMA  in that
language and what is the correct grammatical structure in that language .PERIOD  So ,COMMA  given this
we will start looking at C programs ,COMMA  even before that we once again recapitulate .PERIOD 

Whatever we are expressing them using some variables constants ,COMMA  right and the variables
I have got ,COMMA  we have shown X Y Z ,COMMA  etcetera ,COMMA  at variables .PERIOD  So ,COMMA  each of this variables which
are nothing ,COMMA  but memory locations are been given some names right .PERIOD  So ,COMMA  we have to give
some names of the variables all right .PERIOD  There are some rules for naming them just as in
English ,COMMA  we start a proper noun with a capital letter Ravana ,COMMA  all right Sita ,COMMA  we write them
with the capital letter this is the rule of English ;SEMICOLON  however ,COMMA  if you write in any Indian
language ,COMMA  say you write anything ,COMMA  Amar you write that there is no question of any capital
letter here ,COMMA  but it is a ,COMMA  it is a property of English ,COMMA  it is a rule of English that the capital first
letter of a proper noun must start with the capital letter .PERIOD 
Similarly ,COMMA  for naming the variables in C there are some rules .PERIOD  So ,COMMA  here we have seen X Y
Z ,COMMA  etcetera .PERIOD  These are the variables .PERIOD  So ,COMMA  there are some rules for naming the variables ,COMMA  we
will come back to this again ,COMMA  but first of all any string of alphabets say ,COMMA  let me introduce
one word ;SEMICOLON  alphanumeric .PERIOD 

Alphanumeric means what alphabets and what are the English alphabets A B C up to Z
small letter a b c up to z that is alphabet and numerals ,COMMA  we know 0 to 9 all right 0 1 2 3 up
to 9 .PERIOD  Now ,COMMA  an alphanumeric means A union of both these either alphabet or numeral .PERIOD  So ,COMMA 
a variable name in C can consist of any alphanumeric character now .PERIOD 
So ,COMMA  it can be say ,COMMA  Apple is a valid variable name in C ,COMMA  again if I start with small a this is
also valid variable name in c ,COMMA  but although these two are same ,COMMA  since I have put in
different characters ,COMMA  one capital ,COMMA  one small ,COMMA  these two will be treated as two separate
variable names all right .PERIOD  Similarly ,COMMA  I can write ,COMMA  say Apple 1 2 that is also valid variable
name .PERIOD  Now ,COMMA  there are some special characters like underscore ,COMMA  that is allowed like I could
have written something like this ,COMMA  Apple underscore 1 2 that is also valid variable name .PERIOD 
However I cannot start a variable name with a digit or number for example ,COMMA  1 2 Apple is
not a variable ,COMMA  valid variable name other special characters like say ,COMMA  Apple percentage is
not a valid variable name .PERIOD  So ,COMMA  these are some of the rules .PERIOD  So ,COMMA  the what are rules of
naming a C variable ,COMMA  it can consist of any alphanumeric character ,COMMA  any length ,COMMA  but it must
start with an alphabet and only some specific special characters like the underscore is
allowed ,COMMA  others are not .PERIOD 
So ,COMMA  this is not allowed ,COMMA  but say Apple bob 3 4 is a valid name .PERIOD  So ,COMMA  here I can use as again
a p p l e b small o ,COMMA  small b ,COMMA  there is also a valid name .PERIOD  So ,COMMA  in general what is the rule ;SEMICOLON  I
can have a string of alphanumeric character ,COMMA  starting with an alphabet and having no

special characters except for this underscore all right .PERIOD  So ,COMMA  with that ,COMMA  that is how we will
name the variables and each variable I will again repeat ,COMMA  you know that a variable
essentially consists of memory locations ,COMMA  a variable is nothing ,COMMA  but a memory location
and we are putting the name to that particular memory location .PERIOD 

So ,COMMA  if Apple be this memory location ,COMMA  may be a p p l e is another memory location .PERIOD  Now ,COMMA 
which variable will go to which memory location is decided by the compiler .PERIOD  So ,COMMA  might
be Bob is another one ,COMMA  all right .PERIOD  So ,COMMA  these are separate memory locations .PERIOD 
So ,COMMA  variables and naming of variables is a fundamental step in writing a C program ,COMMA 
because whatever we write ,COMMA  we have to write them through variables ,COMMA  now quickly once
again we look at this that whenever we are writing suppose ,COMMA  again I am writing .PERIOD 

Now ,COMMA  a suppose there are three numbers A B C or .PERIOD  So ,COMMA  I want to find the average of that .PERIOD 
So ,COMMA  I can write it in the form of say and say average ,COMMA  you can see that average is the valid
name in the case of a variable .PERIOD  So ,COMMA  I can say A V G is A plus B plus C ,COMMA  whole thing
divided by 3 .PERIOD  Now ,COMMA  this one I can call to be A C sentence or I am saying sentence .PERIOD 
So ,COMMA  that you can have an analogy without English ,COMMA  but we will call it C statement all right
and this C statement consists of several things ,COMMA  will come to the other things ,COMMA  but you can
see that we are ,COMMA  it is consisting of 1 2 3 4 variables and one constant that is 3 all right and
there are some special parenthesis and all these are also valid symbols in C and these are
operators .PERIOD  So ,COMMA  we will see how was C statement is constituted ,COMMA  but whenever we write A
C statement ,COMMA  it will consist of a number of variables .PERIOD 

Now ,COMMA  coming to A C program ,COMMA  A C program consists of a set of in ,COMMA  let me call it a
number of may be one ,COMMA  but at least one number of functions .PERIOD  What are functions ?QUESTIONMARK  There
is a significance of this term functions ,COMMA  but for the time being let us simply try to
visualize it in this way that I am trying to build a machine .PERIOD 

Which will do something ,COMMA  what will it do .PERIOD 
Say for example ,COMMA  it is a machine that will take ,COMMA  say 2 or 3 numbers ,COMMA  A B C and will
produce the average .PERIOD  Now ,COMMA  this is the machine all right .PERIOD  It does something ;SEMICOLON  takes some

input and give some output .PERIOD  Now ,COMMA  this entire machine can be built of with smaller sub
machines all right and one machine ,COMMA  each of this sub machines can do some specific task
for example ,COMMA  if I take a complicated ,COMMA  say paper rolling machine ,COMMA  then there are so many
things to be done in order to roll out or prepare papers .PERIOD 
So ,COMMA  similarly ,COMMA  there can be different sub machines ,COMMA  which are doing different functions .PERIOD 
So ,COMMA  each of them ,COMMA  each of these sub machines are carrying out different functions are
carrying out different functions ,COMMA  all right .PERIOD  This is doing one ,COMMA  this is doing another and all
these three together is doing something .PERIOD 

Now ,COMMA  as I said in the worst ,COMMA  in the ,COMMA  in a special case just like for a simple case of average ,COMMA 
I may not need many sub modules ,COMMA  because I can very well take A B and C here ,COMMA  A B
and C and simply in this machine I can write a program like A V G is equal to A plus B
plus C divided by 3 and that will be the output right .PERIOD 
So ,COMMA  here I do not need any sub machines ,COMMA  because it is simple problem ,COMMA  but never the less ,COMMA 
I need at least one function ,COMMA  that is what is this task is being done .PERIOD  So ,COMMA  any C program
will require at least one function and in many cases we will see ,COMMA  it will require more
number of functions .PERIOD  We will come to this in the next lecture .PERIOD 

So ,COMMA  we have started our discussion on a specific programming language ;SEMICOLON  that is C and
once again I repeat ,COMMA  that a C program will be constituted of some valid words of the C
language ,COMMA  just as the an English sentence must be constituted with valid English words ,COMMA 
similarly for C and must be every language has got a grammar .PERIOD  So ,COMMA  C has got a very strict
grammar and any statement that is written in C that is not adhering to that grammar will
not be accepted by the compiler .PERIOD  The compiler will reject it ,COMMA  saying that it is a syntax
error or grammatical error .PERIOD  So ,COMMA  before going further into discussions on C briefly ,COMMA  let us
look at the history of C ,COMMA  it was originally developed in 1970 by Dennis Ritchie all right
and his book .PERIOD 

I have also referred to you at AT and T ,COMMA  Bell labs and become very popular by the mid
1980's ,COMMA  because it was the compilers .PERIOD  Now ,COMMA  a language ,COMMA  a computer language cannot be
popular ,COMMA  cannot be used unless there is a compiler for it .PERIOD  So ,COMMA  it took some time ,COMMA  although
it was developed in seventies ,COMMA  but many compilers in ,COMMA  for different platforms ,COMMA  for

workstations ,COMMA  for PC’s ,COMMA  for different platforms were made available by mid 1980's and
this became very popular and there were some standardizations that also took place .PERIOD 
Now ,COMMA  even that we ,COMMA  let us look at the structure of a C program .PERIOD  Let us look at the
structure of a C program ,COMMA  here every C program will consist of One or more functions one or more functions .PERIOD  One of the functions will be given the named main ,COMMA  which is the function .PERIOD  Now ,COMMA  I in the last lecture ,COMMA  I said that there should be at least one function ,COMMA  if nothing else is there ,COMMA  if the even ,COMMA  if the program is .PERIOD  So ,COMMA  simple that I do not need any sub machines ,COMMA  in that case I can do it with only one simple function and that function has to be named main and if there be a number of say for example ,COMMA  sub func ,COMMA  number of functions or sub machines ,COMMA  in that case also there has to be one program ,COMMA  which has to be called the main and the rest can be given some other names ,COMMA  the program will always begin by executing the main function .PERIOD  So ,COMMA  once again let us go to the diagram that we had used in the last lecture .PERIOD 

Say I have got a program ,COMMA  which has got only one function ,COMMA  very simple then this
function will be called main and no other sub functions are there it will take some inputs ,COMMA 
whatever the inputs are ,COMMA  it will process that and the output will be made available .PERIOD  Now ,COMMA 
suppose I have got two sub machines ,COMMA  required for this one here and after that another
one .PERIOD 

So ,COMMA  this sub machine will do something ,COMMA  then this sub machine will do and then will
come out and this is the output and there is some input coming in .PERIOD  Here these are the inputs and they are some sub machines ,COMMA  but I have got one machine ,COMMA  which is the main .PERIOD 
This is again the main .PERIOD  So ,COMMA  although I am taking help of the sub machines ,COMMA  I have to first
enter the main function and then from the main function I can enter here and go
somewhere else and ultimately ,COMMA  I will have to come out through the main function .PERIOD  So ,COMMA 
we cannot escape the function .PERIOD 
So ,COMMA  the main will be there and typically we write the main any C body ,COMMA  within two curly
braces ,COMMA  here whatever I am drawing as a diagram that is equivalent to these two curly
braces .PERIOD  Inside this ,COMMA  whatever is written is a C program ,COMMA  whatever I write here ,COMMA  whatever C
program I want to write ,COMMA  I have to write within these two curly braces ,COMMA  I will come back
to this in a moment .PERIOD  So ,COMMA  so there has to be one function called the main and the program will always begin by executing the main function ,COMMA  each function must contain a heading ,COMMA  which consists of the function ,COMMA  name followed by something application ,COMMA  say ;SEMICOLON  followed by an optional list of arguments ,COMMA 
I will explain that later .PERIOD 

Let us again come back to this ,COMMA  that I have got a function ,COMMA  I have got a program which has
got one function ,COMMA  whose name is main and I have got another function ,COMMA  whose name is
say add and there is another function whose name is find .PERIOD  Is it readable ?QUESTIONMARK  Find average or
let me ,COMMA  this is a little confusing ,COMMA  let me rename this ,COMMA  I name it as divide sum ,COMMA  take the
example of our simple finding average all right .PERIOD  I want to find average .PERIOD 
So ,COMMA  what are the sub tasks ,COMMA  one is I have to read the numbers ,COMMA  say read say ABC that
reading suppose ,COMMA  I am doing here this read ABC is here ,COMMA  one after that I am doing ,COMMA  add
ABC ,COMMA  say adding ABC is being done by this sub machine say ,COMMA  and therefore ,COMMA  I have to
give a name to this ,COMMA  sub machine that this sub machine is inside the body of this sub
machine ,COMMA  I will actually do the addition ,COMMA  but the name of the sub machine should be
expressive of what .PERIOD 
This sub machine of the function is supposed to do similarly ,COMMA  after I do that then I divide
sum right I will divide sum by 3 by whatever 3 here in this case .PERIOD  So ,COMMA  that is being done by
this sub machine this is too simple these are two simple sub machines ,COMMA  but this is being
done by this submachine .PERIOD  So ,COMMA  they each of them has to be given some name each of the
functions including main has to be given some name .PERIOD  Now ,COMMA  along with that there is
another point that has been mentioned here ,COMMA  there is the argument each of these functions
must have a place ,COMMA  where I can write the arguments right .PERIOD  Now ,COMMA  I am not writing anything

on main ,COMMA  but say when I say what are these arguments ,COMMA  if I just consider this separately
all right ,COMMA  any function separately any function

If I consider separately ,COMMA  now this function will have some inputs and some outputs .PERIOD  What
are the inputs and what are the outputs ?QUESTIONMARK  Suppose ,COMMA  the name of this function is my
function ,COMMA  then this function will have some arguments ,COMMA  which are given in within this
parenthesis and suppose ,COMMA  these are A and B are two variables ,COMMA  which are read by this and
C is a variable that is output by this .PERIOD 
So ,COMMA  the name of this function should be associated with the names of the variables ,COMMA  which
are taken as input or is supplied as output by this function these are called arguments ,COMMA  we
will come to this when we discuss some other very important properties of functions ,COMMA  but
for the time being just remember that a function must have a name and there should be
some place for writing the arguments ,COMMA  often you will find that a function like main .PERIOD 
Suppose ,COMMA  I am writing a function which will simply print a particular line ,COMMA  then inside the
body of the function I just want to print ,COMMA  I will say print my name ,COMMA  is something
whatever .PERIOD  So ,COMMA  my name just say my name .PERIOD  Now ,COMMA  this function whenever it is entered ,COMMA  it
will just print my name it is not requiring any values to be passed ,COMMA  but still then I will
have to put this parenthesis with the name although ,COMMA  I may keep the inside of this
parenthesis gland .PERIOD  So ,COMMA  a function in order to be a valid function in C ,COMMA  these are a C rule
that in order to have a valid function .PERIOD  A function must have a name and a place for the

arguments .PERIOD  So ,COMMA  a function heading is the function name all right ,COMMA  followed by an optional
list of arguments enclosed in parenthesis like this is optional ,COMMA  because it can be blank and
there are these are the things that there will be some argument declarations ,COMMA  etcetera ,COMMA  will
come to this particular part later ,COMMA  but before that we have to understand a compound
statement .PERIOD  What is a compound sentence ?QUESTIONMARK  Say ,COMMA  simply in English if we consider ,COMMA  you
know that a simple sentence has got only one principal ,COMMA  verb principal finite verb ;SEMICOLON 
however ,COMMA  I can have a compound sentence like a boy went to school and his father was
happy say .PERIOD 

So ,COMMA  here there are two sentences his father was happy and a boy went to school .PERIOD  These
are two simple sentences and we are connecting them with an end here ,COMMA  all right .PERIOD  So ,COMMA 
these are compound sentence .PERIOD  Similarly ,COMMA  we can have complex sentence and all those .PERIOD 
Here the idea is similar ,COMMA  but not exactly the same ,COMMA  I am saying that .PERIOD 

A function is a machine ,COMMA  which has got a name like say ,COMMA  add and sum parameters A B C A
B and the third parameter is sum ;SEMICOLON  that means ,COMMA  it will take A as input B as input and will
produce sum ,COMMA  but here I write a number of C statements ,COMMA  a number of C statements are
written over here .PERIOD  Each of this C statement is a statement and all these together are
together forms are compound statement .PERIOD  Whenever ,COMMA  we find more than one C statement
working together that will be a compound statement .PERIOD  So ,COMMA  here the entire function add will
be if it consists of a number of statements ,COMMA  then it is a compound statement ,COMMA  in the default
case ,COMMA  in the very trivial case ,COMMA  when the program consists of only one statement then also
we can call it a compound statement ,COMMA  but with only one statement .PERIOD 

So ,COMMA  next ,COMMA  each compound statement is enclosed within a sorry ,COMMA  is enclosed within a pair
of braces like this ,COMMA  this is called braces ,COMMA  this is called parentheses and this is called braces
right .PERIOD 
The braces may contain combinations of elementary statements ,COMMA  a single one or other
compound statements .PERIOD  Now ,COMMA  once again let us see till now ,COMMA  I was drawing the machine as
this

I was drawing it as a rectangle .PERIOD  Now ,COMMA  I will move towards ,COMMA  more towards C .PERIOD  So ,COMMA  I will say
that this boundary will be specified in C as this sort of boundary ,COMMA  whatever is here is
within this parenthesis .PERIOD  Now ,COMMA  each of them ,COMMA  each of this braces ,COMMA  I mean inside these
braces ,COMMA  we will have some statements .PERIOD  It can be an elementary statement like say ,COMMA  A
assign 20 or maybe more number of statements .PERIOD  Now each of the C statements are
delimited by a semicolon .PERIOD 
This is very important ,COMMA  this you must remember ,COMMA  each of these are delimited by
semicolon ,COMMA  if I do not write the semicolon ,COMMA  the sentence is not completed ,COMMA  just like in
English we have to write a sentence and we have to complete it by a full stop right .PERIOD  It
rains very simple sentence ,COMMA  it rains and then there is a full stop here .PERIOD 
Similarly ,COMMA  in C ,COMMA  the end of one single elementary statement or a set of statements is
pointed out by semicolon all right .PERIOD  Otherwise ,COMMA  it will be ambiguous ,COMMA  there can be a
problem like for example ,COMMA  if I write A 20 B 15 and I forget the semicolon .PERIOD  If I can ,COMMA  I am
writing one after another ,COMMA  because that is nice to write one after another ,COMMA  but if I write
them side by side that is also equivalent ,COMMA  but if I put semicolons here ,COMMA  the compiler will
understand that this is a one statement .PERIOD 
This is another statement ,COMMA  but if I do not give the semicolon here ,COMMA  for example ,COMMA  I write A
20 B 15 ,COMMA  then the compiler will be in a problem ,COMMA  because it does not know what it is
supposed to assign 20 or 20 B or whatever is it possible to assign 20 B many things will
come .PERIOD  So ,COMMA  we must be very careful about completing the statements with semicolon .PERIOD 
So ,COMMA  the braces may contain combinations of elementary statements and other compound
statements .PERIOD  Now ,COMMA  there is another very important thing called comments ,COMMA  whenever you
write programs ,COMMA  you must be generous of writing comments .PERIOD  Now ,COMMA  what are these
comments ?QUESTIONMARK  Comments are statements ,COMMA  which are not ,COMMA  which are not converted by the
compiler to machine language ,COMMA  but then why do we write it ?QUESTIONMARK  The reason is that whenever
we write a complicated or a large enough programs ,COMMA  the presence of the comments
enables us or enables suppose ,COMMA  I have written a program ,COMMA  it will enable somebody else to
understand the program .PERIOD  So ,COMMA  if I write something like say

I am again ,COMMA  I am not going to a complicated example as yet I am remaining with that
finding the average of the numbers ,COMMA  but suppose ,COMMA  I am doing it in two steps all right .PERIOD  Say ,COMMA 
I do ,COMMA  I am writing ,COMMA  I am just doing something like A assigned 20 ,COMMA  B assigned 15 ,COMMA  sum
assigned A plus B and then C assigned 25 ,COMMA  sum assigned sum plus C .PERIOD  Now ,COMMA  when I write
this ,COMMA  somebody may this rather too simple ,COMMA  but somebody may say what are ;SEMICOLON  what am I
doing here at both the places ?QUESTIONMARK  I am doing sum .PERIOD  So ,COMMA  that somebody else does not get
confused ,COMMA  I can write something like this .PERIOD  Let me just check the syntax here ,COMMA  yes I was
right .PERIOD  So ,COMMA  what is happening ?QUESTIONMARK 

So ,COMMA  I can write say ,COMMA  A assign 20 ,COMMA  B assign 15 ,COMMA  note the semicolon that I am putting after
every statement ,COMMA  sum is equal to A plus B .PERIOD  A plus B and here I can put in a comment ,COMMA  say
adding first two numbers I am ending this with this symbol ,COMMA  this is again I am doing a
bad job here .PERIOD  Say ,COMMA  I write numbers and then I put this sort of symbol .PERIOD 
So ,COMMA  here you see I put here this and here reverse this ,COMMA  whatever I write in between that is
assumed by the compiler to be a comment statement .PERIOD  So ,COMMA  the compiler need not convert
this into machine code .PERIOD  So ,COMMA  here again I can write later say CS sorry ,COMMA  C assigned 25 and
sum equals some plus C .PERIOD  Now ,COMMA  I can explain that adding whatever I want I can write in
any form ,COMMA  adding third number to sum and put this I am sorry ,COMMA  here always I am making ,COMMA 
I am not being able to manage the space ,COMMA  it should be ,COMMA  there should be a space in
between .PERIOD  So ,COMMA  I will have to rank the third number to sum and I put this end of comment .PERIOD 
Now ,COMMA  this part will not be compiled .PERIOD 
So ,COMMA  for any program ,COMMA  when we write as the program ,COMMA  becomes more and more
complicated .PERIOD  We should be generous about writing the comments that will also help us .PERIOD 
Say ,COMMA  you have written a program today and he want to look at it after ,COMMA  say one month and
see what you did ?QUESTIONMARK  Such comments will be helping you to understand what you did or
somebody else of course ,COMMA  to understand what you did right .PERIOD  So ,COMMA  for examples let us see
here ,COMMA 

I have got a simple thing A assign B plus C .PERIOD  So ,COMMA  here you see ,COMMA  add two numbers between
this to this and the end of comment is this ,COMMA  all right .PERIOD 

Now ,COMMA  let us look at a simple C program there for now ,COMMA  this part I will be explaining
separately ,COMMA  but before that let us look at this part of the code is a very simple program ,COMMA 
simplest possible program .PERIOD  What it does ?QUESTIONMARK  It simply prints our first look at C program ,COMMA  this
line as is will be printed as is will be printed ,COMMA  where will it be printed this ?QUESTIONMARK  Will be
printed on the screen or on the printer or on some other file ,COMMA  where will it be printed here ,COMMA 
we are writing another statement hash include stdio dot h .PERIOD 
This stdio dot h means standard input output std for standard .PERIOD  So ,COMMA  it is stdio is standard
input output .PERIOD  Now ,COMMA  if nothing is specified ,COMMA  then the standard input is our keyboard ,COMMA  by
default .PERIOD  It is the keyboard and the output by default ,COMMA  is the screen .PERIOD  So ,COMMA  when I write this
then ,COMMA  when I write print f ;SEMICOLON  that means ,COMMA  this line will be printed on the screen that is the
meaning of a stdio dot h .PERIOD 
Now ,COMMA  this single piece of simple program has got many things to illustrate .PERIOD  This term
hash include is an instruction to the compiler that you need not convert it to the machine
language ,COMMA  but before you convert the program to the machine language ,COMMA  please do this .PERIOD 
What is doing this ?QUESTIONMARK 

Please ,COMMA  include stdio the standard i o dot h .PERIOD  Now ,COMMA  what is this stdio dot h ?QUESTIONMARK  In order to
understand this ,COMMA  you have to know what a library is now ?QUESTIONMARK  Any programming
environment ,COMMA  any programming environment provides you with a library of functions C ,COMMA 
provides you a library of functions .PERIOD 

Now ,COMMA  this library of functions and library of other packages ,COMMA  which are library functions
or codes ,COMMA  let us see that is already there now .PERIOD  So ,COMMA  I am going to write a program here and
here there is a library and in that library there are many things here ,COMMA  all right and one

such thing is stdio and all these libraries files have got an extension dot h .PERIOD  Why that is ?QUESTIONMARK 
That we will see later .PERIOD  Now ,COMMA  when I am writing this part of the program ,COMMA  if I say hash
include within this corner brackets stdio dot h ;SEMICOLON  that means ,COMMA  whenever I am writing this
program ,COMMA  whatever program I have written ,COMMA  that will be converted to the machine code
that will be ultimately converted to the machine code .PERIOD 
While doing that ,COMMA  this before ,COMMA  doing that this stdio part must be included or must be
included some of the information ,COMMA  must be included ,COMMA  that will tell me that well you see
whenever you are doing this print f that print f will be ,COMMA  will have to be done on standard
output and what is that standard output ?QUESTIONMARK  The printer ,COMMA  it is a printer ,COMMA  so ,COMMA  that is the purpose
of hash include .PERIOD  There is a preprocessing statement ,COMMA  compiler a preprocessing statement .PERIOD 
Now ,COMMA  I had said that every language has got ,COMMA  some of it is own vocabulary .PERIOD  Now ,COMMA  in
English when you understand ,COMMA  whenever I write print or write this words ,COMMA  carry meaning
to you in English in C ,COMMA  we write it as print f .PERIOD 

This is a special word of C ,COMMA  why they say if there is a meaning for that .PERIOD  That is in C ,COMMA 
wherever we write ,COMMA  whatever we write ,COMMA  we consider that as if we are writing in a file ,COMMA  say
in your office or in your work desk ,COMMA  whenever you write something ,COMMA  you write it on a
piece of paper and put it in a file in C .PERIOD  We consider every input or every output device to
be a file and this f stands for file as if I am printing on the file ,COMMA  which file ?QUESTIONMARK  The printer

file ,COMMA  then the next class ,COMMA  we will start with this and will describe some of the other he
brew like statements ,COMMA  here which will from ,COMMA  which we will go ahead .PERIOD 
Thank you .PERIOD 

So ,COMMA  we are looking at a sample C program .PERIOD 

And as we had discussed in the last lecture ,COMMA  we have a structure as is shown here .PERIOD  You
can see that there is a main function here a main function is there ,COMMA  and that main function
is covered by two parentheses .PERIOD  Now ,COMMA  we can see that we start with the header file that
includes stdio dot h .PERIOD  An stdio dot h stands for standard IO .PERIOD 
That means ,COMMA  whenever we will get some instructions to carry out input or output that will
be in reference to or with respect to the standard input that is a keyboard ;SEMICOLON  that means ,COMMA  the
data will be taken from the keyboard .PERIOD  And if anything is to be printed it will be printed
on the screen .PERIOD  So ,COMMA  that is a default thing for any C program we have to put in stdio dot h
include hash include ,COMMA  this is known as this is read as hash include stdio dot h .PERIOD  Unless you
want to take the file do not want to take it from the keyboard or do not want to print on
the screen .PERIOD 

Next thing is that the main function which as I said in the last class that there must be a
ma main function .PERIOD  And the main function will have a place for the parameters ,COMMA  you can
see here for the parameters here which may or may not be empty .PERIOD  The third point is the
structure the overall boundary of the main function of for that matter for any function
there should be a boundary specified ,COMMA  and that boundary specified with by this to curly
brackets .PERIOD 
Next we come to the statement .PERIOD  As I had said that just like any other language c also has
got some words which are understood by any by the compiler ;SEMICOLON  print if is one such word
which is the statement for printing the sentence that is given within these double quotes .PERIOD 
You can see that double quotes here and so ,COMMA  what will it print ?QUESTIONMARK  It will print our first look
at the C program here as his shown here that will be printed .PERIOD 
Print f within quote here there is a quote n quote and here is a start quote our first look at
the C program .PERIOD  In addition there is I am sorry let me go up ,COMMA  we can see to special
symbols which are these backslash ns right let me just clear it out ,COMMA  here you can see this
backslash n something of the sort .PERIOD  This means go to a new line or end of line now
suppose .PERIOD 

Let us see suppose I am I had something like this I had printed something all right I had
printed something this is a screen ,COMMA  I had printed a brown fox .PERIOD  Now after I printed ;SEMICOLON  that
means ,COMMA  a computer printer you can see where my pen is my pen is lying here right my

pen is here .PERIOD  Now if I say backslash n this is no radar backslash ,COMMA  backslash n ;SEMICOLON  that means ,COMMA 
my pen will come to the beginning of the new line and here I will write our first C
program ,COMMA  and by default my pen is here ,COMMA  but since I have given another backslash n the
pen will come here .PERIOD 
So ,COMMA  next time if I again start with the backslash n it will come to the new line ,COMMA  and if I do
not give a backslash n it will continue from here .PERIOD  You will understand this more when we
look at more number of programs ,COMMA  it will be much more clear to you .PERIOD  So ,COMMA  this the
structure of a very simple C program we will see more of this .PERIOD 

Now ,COMMA  here is a another program .PERIOD  Again now it is easier to understand you have got an
includes t d i o dot h which has to be there for any C program ,COMMA  there will be a main
function as is being shown here ,COMMA  and there are parenthesis between these two the program
should be written ,COMMA  there is a boundary of the main function .PERIOD  Now here there are some
more new things which are being shown to you in the form of example .PERIOD 
So ,COMMA  you see the first line is int a ,COMMA  b ,COMMA  c what is meant by that is that I am I will be using in
this program 3 variables a b and c and each of them is of type integer .PERIOD  Now you are
already acquainted with the term variables ,COMMA  but you are probably not acquainted with the
term type of a variable .PERIOD 

So ,COMMA  quickly let us go to that ,COMMA  we have got variables and the variables can be of different
type ,COMMA  also constants can be of different type for example ,COMMA  the variables can be of type
integer for example ,COMMA  7 ,COMMA 17 all these things 256 ,COMMA  1999 all these are integers .PERIOD  Another type
of variable can be real numbers which are say 10 .PERIOD 5 ,COMMA  6 .PERIOD 325 fractional numbers right these
are real .PERIOD 
This is also known as in c as floating point numbers .PERIOD  Now integers are these reals of flow
floating point numbers of these .PERIOD  Similarly I can have characters like say x y p whatever
these are different characters or maybe and is a character .PERIOD  So ,COMMA  each of any of these
alphanumeric and all those can be characters now .PERIOD  So ,COMMA  we know what is an integer ,COMMA  what
is a real what is a floating point ,COMMA  what is a floating point what is a character .PERIOD 

Now ,COMMA  a variable is of type integer ,COMMA  what does it mean ?QUESTIONMARK  As you know a variable is nothing ,COMMA 
but a memory location right it means and suppose this variable I say variable a is of type
integer .PERIOD  So ,COMMA  there is a memory location corresponding to a and this memory location can
only hold values which are integers .PERIOD  So ,COMMA  57 I can store here ,COMMA  but if I try to store 57 .PERIOD 5 here ,COMMA 
it will not store 57 .PERIOD 5 ,COMMA  because it has been told to be an integer .PERIOD 
Similarly if I say variable b is of type floating point ,COMMA  I am in short I am writing float ;SEMICOLON  that
means ,COMMA  this variable b can store a floating point number .PERIOD  So ,COMMA  57 .PERIOD 5 can be stored here .PERIOD 
Even if I try to store in b 57 in b if I store 57 just 57 then that will be stored as 57 .PERIOD 0 all .PERIOD 
Similarly there can be types of characters .PERIOD  Now depending on the type of the variable the
compiler assigns different sizes of memory for the different variables .PERIOD 

For example in standard c compilers and it is a convention that for an integer two
memory locations are allocated .PERIOD 
Now ,COMMA  how big this will be say sometimes it is my each of these memory locations can be
16 bits ,COMMA  in that case I am using 2 16 bits ;SEMICOLON  that means ,COMMA  32 bits to store an integer whereas ,COMMA 
for a real number .PERIOD  Now this is a convention ,COMMA  4 locations are used for storing a real
number .PERIOD  So ,COMMA  64 bits 16 ,COMMA  16 ,COMMA  16 ,COMMA  16 .PERIOD  So ,COMMA  that will be for real numbers now .PERIOD  So ,COMMA  depending
on what I write ,COMMA  what how I define the type of the variable when I say a b c I also say
what type of variability ;SEMICOLON  is it an integer ,COMMA  is it a real or what it is .PERIOD 
Now ,COMMA  if you come here we will see that here I have written float and I did not write
floating point number .PERIOD  Now in c in order to specify variable to be real we declare that to
be float say p q ;SEMICOLON  that means ,COMMA  semi colon ;SEMICOLON  that means ,COMMA  p and q are two variables which are
of type floating point number right and if I write int a b c ;SEMICOLON  that means ,COMMA  a b and c are 3
variables ,COMMA  which all of type floating integer type int .PERIOD  So ,COMMA  we do not write integer we just
write in c int .PERIOD  Now obviously ,COMMA  then for p how many bytes how many depending on how
many bits will be given how many memory locations will be given for p may be 4 ,COMMA  q it
will be 4 ,COMMA  but for a b c it will be only 2 all right .PERIOD 
Now ,COMMA  let us therefore ,COMMA  go back to the program here ,COMMA  here we find int a b c now this
statement this is called a type declaration all right this is known as a type declaration this
is the first statement .PERIOD  So ,COMMA  I have declared the variables now in C program before the

variable is used it should be declared about its type .PERIOD  The other thing is you can see this .PERIOD 
So ,COMMA  here you can see a has been assigned 10 ,COMMA  b has been assigned 20 ;SEMICOLON  that means ,COMMA  what .PERIOD 
That means in the memory location a corresponding to a memory location corresponding
to a 10 has been written ,COMMA  and to the memory location corresponding to b 20 has been
written all right and this statement c assigned a plus b ,COMMA  I had explained in another lecture
that ;SEMICOLON  that means ,COMMA  this data this value 10 ,COMMA  and these value 20 will be taken out on the from
the left hand side from the corresponding memory locations they will be added and the
result will be 30 all right ;SEMICOLON  the result will be 30 and the 30 will be written into the location
c .PERIOD  So ,COMMA  this will be 30 this much is clear .PERIOD 
Now what about this line ?QUESTIONMARK  I know that a print if statement just tells me that I have to print
whatever is there in the quote .PERIOD  So ,COMMA  how will the print look like ?QUESTIONMARK  Please note the sum of
percentage d and percentage d is percentage d this is equivalent to writing this .PERIOD 

The sum of dash and dash is dash there are 3 gaps ,COMMA  one here ,COMMA  one here and one here now
how will these gaps we filled ?QUESTIONMARK  They will be filled by the values of a ,COMMA  b and c respectively
each of these dashes will be filled up by the respective values of a b c .PERIOD  Now this
percentage d is a format statement is saying that this gap can be filled by a digit or by an
integer .PERIOD 

This gap can be filled only with an integer .PERIOD  Now here I a is an integer therefore ,COMMA  this gap
will be filled with the integer value 10 and percentage d ,COMMA  and it is being printed as it is
because it is within this double quote and dash .PERIOD  this dash will be filled with another digit ,COMMA 
and what is the digit ?QUESTIONMARK  The second space b and b is 20 .PERIOD  So ,COMMA  it will be 20 is what is a plus b
is c and what is the value of c c the value of c is 30 .PERIOD 
So ,COMMA  this is what will be printed all right .PERIOD  So ,COMMA  this is how we print a sentence ,COMMA  where I want
I have got some places for different variables and these places will be filled up by the
values of the variables ,COMMA  whose names are being specified here .PERIOD  I repeat this gaps will be
filled by the values of the variables whose names or whose identifier are been specified
here and the type of this variable ,COMMA  and the specification of this dash should match .PERIOD  Now ,COMMA 
it will be printed sum of 10 and 20 is 30 ;SEMICOLON  now coming to the third sample program .PERIOD 

Now ,COMMA  this is a little more complicated ,COMMA  and this is trying to find out the largest of 3
numbers ;SEMICOLON  that means ,COMMA  what we had done in a flowchart exercise finding the max of 3
numbers .PERIOD  Now that was discussed using flowcharts and pseudo code and here we are
discussing that using a program a C program how is that idea translated into C program .PERIOD 
Again let us start with even before that I would like to point out something ,COMMA  again let us
revise the structure of the program ,COMMA  we start with header stdio dot h ,COMMA  now we start we put
in a comment what is this ?QUESTIONMARK  We saw in the last class it is a comment this comment is just

telling us the compiler has got nothing to do with ,COMMA  it is just telling us that this program
finds the largest of 3 numbers .PERIOD 
Then as usual we have got a main function which must be there and there should be a
parenthesis which is delineating the boundary of this program .PERIOD  Now for and also we have
seen this ,COMMA  I am using 3 variables a b and c and I have put in the type of that .PERIOD  The next
new thing that is coming up is here scan f ,COMMA  this is an input statement for reading 3
variables from the keyboard .PERIOD  Now recall that I said that for every language there are
there is a vocabulary ,COMMA  there is the set of words that the language understands .PERIOD 
So in c ,COMMA  in an earlier one we have seen in an earlier program we have seen the statement
print f right we had seen a program print f .PERIOD  So ,COMMA  print f is a particular word ,COMMA  now we now
encounter another word int is also another word ;SEMICOLON  int is another word which specific to c
and the meaning of this every word will have a meaning .PERIOD  So ,COMMA  this means that whatever
follows are variable names of type integer .PERIOD  Whatever follows this word int are variable
names of type integer .PERIOD 
Next ,COMMA  new word that we are getting is scan f .PERIOD  Just like we had seen print f earlier all right
print f is a word ,COMMA  that tells us that something is being printed here scan f is an int is a
word that tells that whatever is inside this parenthesis is a input statement .PERIOD  Now let us
study this a little bit here .PERIOD  Here again you will see that there is a percentage d percentage ,COMMA 
d percentage 3 percentage ds within quote and that percentage d means it is a specified
for an integer ,COMMA  some integer is being will be that scan f means say assume it is really .PERIOD 

So ,COMMA  therefore ,COMMA  it something like this ,COMMA  I am going I am creating as if 3 places ,COMMA  because
corresponding to each percentage d ,COMMA  percentage d ,COMMA  percentage d ,COMMA  percentage d within the
quote ,COMMA  I am creating 3 spaces and followed by that let us go back to this ,COMMA  I am sorry here
there should be no comma all right ;SEMICOLON  I am just giving 3 percentage ds .PERIOD 

So ,COMMA  let me go back here .PERIOD  So ,COMMA  it should be within the court here is scan f ,COMMA  within quote
percentage d blank percentage d blank ,COMMA  percentage d and the quote is closed comma ;SEMICOLON  that
means ,COMMA  as if just to understand I am creating 3 spaces each of which I have ready to

accept an integer and where will those be stored ?QUESTIONMARK  Here I am writing and a ,COMMA  and b ,COMMA  and c .PERIOD 
Now here I will request you to just forget about this ampersand sign forget about this for
the time being this will explain a little later .PERIOD 
Just assume that a ,COMMA  b and c ,COMMA  but before that for any read statement will have to put an
amperesand before the variable names there is a reason for that .PERIOD  What is the meaning of
this sentence ?QUESTIONMARK  The meaning of this sentence is that there are 3 places which are ready to
hold 3 variables ,COMMA  which will come to the locations a b c ;SEMICOLON  when I am reading as if I am
reading from the user 3 variables a b c ok .PERIOD 
Now ,COMMA  why I put that amperesand will explain a little later .PERIOD  So ,COMMA  3 space have been created
and what are the spaces ?QUESTIONMARK  These spaces are nothing ,COMMA  but these 3 memory locations which
3 memory locations whose names are being specified here all right .PERIOD  So ,COMMA  this is something
that you have to be a little careful and practice a little bit it will be very easy later on .PERIOD  So ,COMMA 
within the quote I specify the format specify that is integer in this case percentage d and
this other variable names .PERIOD 
Now ,COMMA  let us go back to that anything that is new here .PERIOD  Now a new word we are
encountering here ,COMMA  if is a conditional statement you did not bother about it ,COMMA  if you recall
we had in the flowchart we had a thing called diamond right where we are taking some
decisions based on some conditions yes and no right .PERIOD  We are doing that here we are
looking at some condition here if a is greater than b and a is also greater then c ,COMMA  if that is
yes then I am printing that a is the largest number .PERIOD  Try to apply simple logic here ,COMMA  if is a
conditional word condition is a conditional word and this entire statement starting from if
to this semi colon is one statement ,COMMA  and where I check the condition whether a is greater
than b and a is greater than c .PERIOD 
If that is so ,COMMA  that is if the diamond comes out with that yes ,COMMA  then I am printing that the
largest number is a .PERIOD  Otherwise ,COMMA  that means if the answer to this is no otherwise I am
again checking again if again I am checking another condition ,COMMA  I am checking another
condition here what to do I what my checking ?QUESTIONMARK  Is b garter than c yes if yes then I am
printing the largest number is b otherwise is yes ,COMMA  otherwise if it is no then I am painting
the largest number is c .PERIOD 
So ,COMMA  we are encountered in some new words if and else .PERIOD  If means if in the diameter result
of this diamond box is yes then this statement will be executed otherwise ;SEMICOLON  that means ,COMMA  if

the answer to this diamond box is no ,COMMA  then this part will be executed .PERIOD  Now here again the
second block I am checking if b is greater than c ,COMMA  again if this is true for this condition
this will be executed when this condition is true or yes if it is false then this statement
will be executed .PERIOD  So ,COMMA  it is a little more complicated program ,COMMA  but a very useful example .PERIOD 

So ,COMMA  we see the comments we have already mentioned ,COMMA  now you are coming to another
program .PERIOD 

This is using what we earlier had said that a big machine can we divide into sub
machines .PERIOD  So ,COMMA  big program this one is not a big program ,COMMA  but any programs can you
broken down into different functions .PERIOD  Here is the main function this one is main let me
draw it a little nicely .PERIOD  Here we have got a main function and inside there is another
function whose name is my function I am sorry .PERIOD 
Now ,COMMA  let us look at this ,COMMA  now first here there is another new thing we are introducing and
that you should understand that is define PI to be 3 .PERIOD 1415926 ;SEMICOLON  that means ,COMMA  this verified in
this program this PI will appear ,COMMA  there will replace it with this value 3 .PERIOD 1415926 ,COMMA  but
inside the program I will not right PI ,COMMA  I am just defining it once for all and this means I
am replacing pi by this value before the compilation is done .PERIOD  So ,COMMA  this is again a p
processor statement .PERIOD 
We will continue with this example in the next lecture .PERIOD 

So ,COMMA  we were discussing a little more complicated a little more different program that is
using a function .PERIOD 

Here ,COMMA  what we had discussed in the last lecture is ,COMMA  that we are using a new type of
statement that is hash define this is a preprocessor statement ;SEMICOLON  this is called a preprocessor
statement which is replacing PI with the value that is specified .PERIOD 
Now ,COMMA  anywhere I can do I can define other things like this also for example ,COMMA  I can write
see hash define resistance is 10 ohm ;SEMICOLON  10 .PERIOD 2 ohm whatever .PERIOD  That means ,COMMA  in my program
wherever I get this variable name resistance ,COMMA  that will be replaced by this constant value
10 .PERIOD 2 even before the program is compiled ;SEMICOLON  that is the first new thing that we saw .PERIOD 

The second thing is look at this ,COMMA  let us study this program .PERIOD  First time putting an a
comment and the comment tells me what this program is going to do .PERIOD  The comment is
compute the area of a circle ,COMMA  and as usual I start with a main sorry as usual I start with a
main an inside main let us see what we have done ,COMMA  we have done something different .PERIOD 
Now all of you will be able to say what is this .PERIOD  This is a type declaration for two
variables radius and area .PERIOD  At what sort of type declaration is that it is float ;SEMICOLON  that means ,COMMA 
radius and area are two variables which will hold real numbers or floating point numbers
right .PERIOD  Now I also declare myfunc this is another function ,COMMA  and the style in which I wrote
tells a compiler that this is a function and this function is also of type float .PERIOD 
What is the type of a function when we will be studying function in detail ,COMMA  we will be
understanding there .PERIOD  Now what have we done here ?QUESTIONMARK  Scan f you know that by now scan f
is reading the value of some variable .PERIOD  How many here I look at this point ?QUESTIONMARK  I find that it is
1 percentage f .PERIOD  So ,COMMA  only one variable is being read and what is that variable that is that is
radius alright .PERIOD  So ,COMMA  I will read the value of the radius and radius is of type float right .PERIOD  So ,COMMA  it
will be say 15 .PERIOD 25 that is being read now computing the area the main function is not
doing itself .PERIOD  So ,COMMA  let us quickly go back to our old diagram .PERIOD 

So ,COMMA  this is the main machine of the main function .PERIOD  So ,COMMA  here what have you done ?QUESTIONMARK  We
have read I am writing in a pseudo code I have read the value of radius and there is a
function called myfunc ;SEMICOLON  my function .PERIOD  Now after I read the radius I do not want to take
the botheration of computing the area ,COMMA  this machine submachine knows how to compute
the area it knows that area will be computed as pi times r times r ;SEMICOLON  that means ,COMMA  pi r square
right area of a circle .PERIOD 
But this is a function that can compute area of any circle it has been design ,COMMA  because by
pi r square you are not finding the area of only this circle ,COMMA  you can find the area of the
circle or might be this circle only thing that is differing is the radius right ;SEMICOLON  here it is one
radius ,COMMA  here there is another radius ,COMMA  here is another radius .PERIOD  So ,COMMA  this machine or this
function can compute any any area of any circle provided it gets the
radius told to him told to this .PERIOD 
So ,COMMA  this machine is expecting some value to be passed on to this .PERIOD  Please note the terms I
am using .PERIOD  This function once some value required some value to be passed on to this .PERIOD 
Now you can ask that well be such a simple program ,COMMA  I could have written it here itself
yes certainly you could have written it here itself ,COMMA  but this is just an example .PERIOD  Actually in
a very complicated scenario ,COMMA  there are many complicated tasks and if we want to solve
the entire task by yourself by through single program ,COMMA  there is a chance of error that is
problem number one .PERIOD 

So ,COMMA  we want to divide the problem into sub problems ;SEMICOLON  that is a general programming
philosophy that we want to divide the problem into sub problems and solve each of the
sub problems separately because they are more manageable ,COMMA  I can find out what are the
errors whether they are working properly or not and then I combine them together and
solve the overall problem that is advantage number 1 .PERIOD 
Advantage number 2 is that suppose let us just for the sake of argument ,COMMA  assume that my
function this finding the area is really a complicated program very complicated program .PERIOD 
So ,COMMA  somebody has really taken the effort to develop this complicated program .PERIOD  Now
whenever me or you or anybody any programmer wants to use this facility ,COMMA  then they do
not need to reinvent the wheel and write that complicated program once again it is
available and I can reuse it ,COMMA  and only thing that I need to do while using it is just to pass
the parameter .PERIOD  Therefore ,COMMA  the second big advantage is reuse of functions that is why the
concept of function is so important in programming alright .PERIOD  You will encounter this
irrespective of programming languages .PERIOD  So ,COMMA  let us go back to this .PERIOD 

So ,COMMA  here you see I have I am not computing the area ,COMMA  I means the main is not computing
the area what the main is doing ?QUESTIONMARK  It is just here it is calling my function .PERIOD 
So ,COMMA  immediately this one is being called ,COMMA  and what will my function do ?QUESTIONMARK  My function is
ready my function is here and it is just expecting something which is r to come in
because it will compute pi r square .PERIOD  This expecting r and this one has got the variable

that radius in the variable radius .PERIOD  So ,COMMA  this is being passed on to this .PERIOD  So ,COMMA  over here from
the main function here is the main ,COMMA  from the main this radius is being connected to this r
alright and this function my function is reading is getting the value of r ,COMMA  and inside that it
is computing the area .PERIOD 
Now ,COMMA  there are some details which I will mention later ,COMMA  it is computing the area and it is
finding the value in its own variable a .PERIOD  A is a variable now for any program ,COMMA  if this
function is used then instead of radius you may have my radius or any other value any
other sorry any other variable name can be there .PERIOD  Now any this will work for all of them
let me clarify it once again .PERIOD 

See here there is a function and this this function accepts r and produces a .PERIOD 
Now from ,COMMA  as I said that it can be reused from my program ,COMMA  I am using it with the
variable radius it is been connected here .PERIOD  Maybe from your program you have not used
the variable name radius ,COMMA  you have used the variable name say rad so that will that when
your program is using this function ,COMMA  this rad will be connected to r .PERIOD  Now suppose here in
my program I have used the variable name area for noting the area .PERIOD  So ,COMMA  this output a will
connect to area for example ,COMMA  for your program you said area .PERIOD 
Now ,COMMA  recall that in c small and capital makes difference to this is another variable name
is a different variable .PERIOD  So ,COMMA  for you this a will connect over here ,COMMA  now this person this my

function is only concerned with r and a and the job of connecting them is up to the
function that is using it .PERIOD  So ,COMMA  here what happened I called the main function my function
computed a how here I wrote PI r r know how do I know PI ;SEMICOLON  because pi has already been
defined here .PERIOD  So ,COMMA  this pi will be replaced by this value .PERIOD  So ,COMMA  3 .PERIOD 1415926 times r times r and
what is this r ?QUESTIONMARK  Since it has been call when it has been called with radius the value of
radius will come here and return a .PERIOD  Now this return term means where will it return ,COMMA  this
is another new word that you are coming across .PERIOD  This return means it is returning to the
point from where you are called .PERIOD  The programmers going on like this from here it called
my function .PERIOD 
So ,COMMA  after my function is executed ,COMMA  it will return back to the same point .PERIOD 

So ,COMMA  we have come across a new word return and return is well returning the value a ,COMMA  and
that is being assigned to my variable area all right and then print f you can now
understand it will what will be printed ?QUESTIONMARK  Area is dash and this one will take some floating
point number maybe 255 .PERIOD 72 whatever it is and this value of area will be filling up this
place .PERIOD 
So ,COMMA  this is another example of a C program .PERIOD  So ,COMMA  through these examples ,COMMA  what we tried to
do is to introduce you to some of the very common names ,COMMA  common words and common
features of the C programming language .PERIOD 

Next we move to this that main is also a function I have already said that that main is
also a function this is clear to you now ,COMMA  but just quickly have a look at this .PERIOD  Here I have
identified some variables ,COMMA  have identified some variables a b c which are integers and the
same old program and is also a function fine .PERIOD 
Now ,COMMA  here are some words of advice ,COMMA  when we are writing a program it has got a couple
of things we have to keep in mind ,COMMA  first it must be correct so that it can be executed by a
compiler .PERIOD  It should not it should adhere to the rules of the game the syntax in the
grammar of the C language .PERIOD  The other thing is also this program has to be understood by
others ,COMMA  because if they you have written program and someone else wants to extend this
program .PERIOD  You are working in a big company and there are number of programmers and
each of them are writing a small segment of the program and everybody must be able to
understand everybody’s program .PERIOD 
Therefore the programs should be written in such a way so that it is understandable more
better understandable .PERIOD  Just like if we write in very bad hand writing write something
here ,COMMA  something there ,COMMA  something there I not understand it ,COMMA  but if you write it nicely in a
sequence it is much with proper paragraphs etcetera it is much better readable and better
understandable .PERIOD  So ,COMMA  here we will see some of the requirements for desirable
programming style one is of course ,COMMA  clarity .PERIOD 

It must be very clear ;SEMICOLON  the program should be clearly written it should be easy to follow
the program logic .PERIOD  Now here is something that is very important I insist on that there
should be meaningful variable names .PERIOD  For example ,COMMA  I want to add two numbers and when
I say sum assigned a plus b or sum assigned num 1 plus num 2 it is good semi colon
please do not forget the semi colon and listen .PERIOD 
Now ,COMMA  the sum is a meaningful variable name ,COMMA  it immediately tells me what this variable
is meant for it is holding the sum .PERIOD  But suppose if I had written something like t t is equal
to t t t multiplied by t multi minus x ,COMMA  then from there its not very clear what is this t t why
are you using this t t .PERIOD  If say for example ,COMMA  average I am computing average as avg and that
is x plus y plus z divided by 3 is very understanding semi colon it is understandable ,COMMA  I
could have written the full thing average equals to this or I could have written avg all
these things are fine .PERIOD 
But if I had written p q r is equal to x plus y plus z divided by 3 ,COMMA  then its not very clear
although I can look at this side and understand that therefore ,COMMA  it is p q r is the average ,COMMA  but
this not a very good practice .PERIOD  Now so ,COMMA  make variable and constant names meaningful for
example ,COMMA  pi should be written as p i is not good that 3 ,COMMA  4 3 .PERIOD 1415 all those that value I chi because that is not very clear what this value standing for .PERIOD 

So ,COMMA  here are some examples use area instead of a ,COMMA  radius instead of r and program
documentation .PERIOD  We had said that we should be very generous about writing comments ,COMMA 
but if that too many comments then that is also not very desirable .PERIOD 

Now you are coming to a very important point that is program indentation what is that ?QUESTIONMARK 
The structure of the program should be immediately feasible .PERIOD  We will give you some
examples .PERIOD 

Here is a good example ,COMMA  here this is simple I am writing in straight line ,COMMA  here there is a
function that is fine let us come to another example which will be better illustrating this
this is a bad style you see here compare these 2 .PERIOD 

Here there is a declaration then I leave some blank ,COMMA  and then I put the actual code here
these are the declaration .PERIOD  So ,COMMA  I understand this a declaration .PERIOD  Compared to this which is
easy to understand this is something this is something else .PERIOD  Compared to that here why I
where I do not put a gap it is difficult to understand ,COMMA  where the declaration ends and

where the code starts .PERIOD  So ,COMMA  here is another good example of finding the largest of three
numbers look at this .PERIOD 

As I said that if I have read this ,COMMA  but one bad thing is here ,COMMA  there should be a gap here
there should have been a gap here .PERIOD  Now here if a and b .PERIOD  So ,COMMA  that is the first diamond a
decision box if a is greater than b and a is greater than c then I am doing something
alright then I am doing this this part of the program ,COMMA  otherwise I am doing this .PERIOD  So ,COMMA  here
you can quickly looking at this indentation ,COMMA  that this print f is a under this and this part is
under this ,COMMA  that is very clear from this indentation I have shifted it a little bit .PERIOD 
And so immediately you can understand that this print f is if this condition is true .PERIOD  That
means ,COMMA  this part is for this diamond box to be true like that ;SEMICOLON  is a good indentation good
style now the same thing .PERIOD 

Same thing would be bad style if I write it in this way .PERIOD 

From here it is not at all clear which one is a corresponding to which one ,COMMA  not very clear
if I study it closely I will be able to understand sorry ,COMMA  I will be able to understand that
this print f this print f corresponds to this condition .PERIOD 
But immediately when I look at it is not very visible .PERIOD  So ,COMMA  this is a bad style alright .PERIOD  So ,COMMA 
indentation is something that is very much prescribed in good programming ,COMMA  this
becomes very important when we actually go for more complicated programs .PERIOD 

Now coming to the C character set .PERIOD  In an earlier lecture I had briefly talked about this
just as in English we have got a character set a to z capital A to Z .PERIOD  Similarly C language
has got a character set with which we make the words we have already seen them .PERIOD 
So ,COMMA  the first thing is of course ,COMMA  the upper case letters ,COMMA  the lower case letters a to z digit 0
to 9 and some special characters like you can see this hash we have already encountered
this when we said hash include that is a part of the c symbol set percentage we have seen
that when we say percentage d ,COMMA  percentage f you are seen that and this sort of symbols
this have already encounter all these are some certain special characters ,COMMA  that are allowed
in C .PERIOD 

Now the identifiers and keywords we have also talked about that .PERIOD  The names are given to
very different programming elements for example ,COMMA  variables we already know ,COMMA  constants
we already know ,COMMA  functions we have already seen each of them are given some names .PERIOD 

For example when we wrote myfunc that was the name given to a particular function .PERIOD 
When I wrote avg that was the name given to a particular variable that was the name
given to a particular variable .PERIOD  When I wrote pi that was the name given to a particular
constant right .PERIOD  So ,COMMA  in that we have encountered this .PERIOD  So ,COMMA  now ,COMMA  the how there is some

restriction on the names that I have also mention ,COMMA  may consist of letters digits 0 to 9 and
this underscore character with no space in between .PERIOD  Whenever I want to put space ,COMMA  I will
put in this underscore character is very useful is very useful to put this underscore
character hear what is happening here .PERIOD 
The first character must be a letter ,COMMA  this character must be a letter an identifier can be
orbital is long ,COMMA  but that depends on some c compilers some c compilers recognize only
the first few characters 16 or 31 .PERIOD  And another very important thing that you had talked
about that it is case sensitive .PERIOD  A small area written in small letters and area written in
capital letters or an area with a mix of small and capital are all different these are not the
same this we had mentioned in the last class .PERIOD 

There is some keywords some words which are reserved for and have got some
predefined meanings in C for example ,COMMA  auto ,COMMA  brake ,COMMA  constant ,COMMA  float you know float has
got a specific meaning int got a specific meaning return your seniors got a specific
meaning etcetera .PERIOD  If it has got a specific meaning ,COMMA  l c f seen it has got a specific meaning ,COMMA 
but within comments you are free because it never being so ,COMMA  close the looked at by the
compiler the compiler simply text it and print it out .PERIOD 
So ,COMMA  this is another thing that you have to remember ,COMMA  whatever keywords you face during
programming you will gradually remember that these are the keywords and that should
not be used as a variable name .PERIOD 

So ,COMMA  here we will conclude this lecture with some examples ,COMMA  you can see some valid
identifier x is a valid identifier ,COMMA  a b c of now simple interest I put in an underscore here ,COMMA  a
123 is fine because it starting with a ,COMMA  and alphabet list stud name (Refer Time: 26:55)
student name very clear understood employee 1 ,COMMA  employee 2 average employee salary
see I wanted to write a big thing .PERIOD  And I could take to that buy instead of blank I just put
underscore alright invalid identifier studies and why because I cannot start with sorry .PERIOD 
Because ,COMMA  I cannot start with blank sorry I cannot start with the numeral ,COMMA  for this is wrong
this is wrong because there is a special character that is been put in here ,COMMA  I am in hide
could have written my underscore name .PERIOD  My thing is also is also this not looking nice I
could have done this my name ,COMMA  but is not allowed hello is not allowed because here I put in some special characters ,COMMA  simple interest is not allowed because hes a blank I cannot put in a blank ,COMMA  but I could have rewritten simple underscore interest that is quite for light .PERIOD  Area is not valid because it has got a parenthesis ,COMMA  and percentage is using special characters here .PERIOD  So ,COMMA  these are invalid identifier examples of invalid identifier .PERIOD  So ,COMMA  you should keep that in mind .PERIOD  We will continuity with R programming lectures .PERIOD 
So ,COMMA  till now what we have done is we have looked at some of the rules for writing the
program and how the variables and the constant should be named ;SEMICOLON  we will continue with
this .PERIOD 

So ,COMMA  till now we have looked at how in C language .PERIOD 

We can write the identifier ,COMMA  this is becoming a little too thick ,COMMA  which identifiers are used
for used for writing the variable names and the constant name .PERIOD  So ,COMMA  for example ,COMMA  PI or
some variable name suggest sum all those things .PERIOD  Now we have seen what are the rules
that the language c imposes on writing the names of variables or constants ,COMMA  that is how
we can write the identifier alright .PERIOD 

Also we have seen that there are different data types like int with stands for integer ,COMMA  and
float which represents floating point numbers or real numbers ,COMMA  and char is used to specify
some data which is of type character .PERIOD  Will see some more examples of this in the course
of these lectures ,COMMA  now we also know that int means integer and whenever a particular
variable a is declared to be an integer ,COMMA  then typically it also varies from machine to
machine and compiler to compiler ,COMMA  2 bits or 16 bits are located for storing one integer
alright .PERIOD 
Each of these boxes are that I am showing here are 8 bits wide .PERIOD  So ,COMMA  there are 2 such .PERIOD  So ,COMMA 
16 bits ,COMMA  for float we will have 2 more real numbers are stored using 32 bits whereas ,COMMA 
characters are typical is stored in 8 bits .PERIOD  Now this is not so sacrosanct as in some
machine which is much more powerful and much more accurate having high resolution
we can have 32 bits for storing integers 64 bits for storing floating point numbers and
characters can be a bit 16 bits .PERIOD 
However depending on what is the type declaration ,COMMA  the amount of storage the amount of
memory that is allocated to a particular variable varies ok .PERIOD 

We just like int float char we also have got some more like short int alright ,COMMA  long int or
unsigned int .PERIOD  These are also different data types ,COMMA  will come across his in the course of
this lecture .PERIOD  Short int means just if in an integer takes 2 bits or short int will take one bit
if a long int if a int take 16 by 16 bits ;SEMICOLON  that means ,COMMA  2 bytes or long int can be made to
consume 4 such bytes or 32 bits ,COMMA  but still that will be an integer .PERIOD  So ,COMMA  in this 4 bytes an
integer that that will be stored ;SEMICOLON  that means ,COMMA  a integer accuracy will be much larger .PERIOD 
So ,COMMA  depending on the number of bits I allocate to a particular variable ,COMMA  depending on the
number of bits suppose I allocate n bits the range of values that I can represent varies for
example ,COMMA  if there be n bits then I can go from I can have 2 to the power n distinct values
stored for example ,COMMA  if there be 8 bits ,COMMA  then the maximum value that I can store is when all
these 8 bits are once and that is your knowledge of binary arithmetic will tell you that
this will be 2 to the power 8 right that is 256 it will be actually 255 alright .PERIOD  So ,COMMA  255 and if
I make everything 0 if each of them are made 0 all zeros will be 0 right ,COMMA  I can have the
range from 0 to 255 ;SEMICOLON  that means ,COMMA  total 0 to 255 ;SEMICOLON  that means ,COMMA  I can store any of distinct 256
values 2 out of 256 values distinct values I can store any one of them .PERIOD  Now if this 8
would have become 16 ,COMMA  then my maximum range would be 2 the power 16 minus one
right that is the maximum value that I can store it .PERIOD 

Now signed and unsigned mean sometimes in our presentation we keep one bit for the
sign part in that case of course ,COMMA  the range decreases ,COMMA  but if I go for unsigned ,COMMA  then we
remaining within say 16 bits to bytes .PERIOD 
I can have a larger representation we will go will encounter these details as and when we
need them .PERIOD 

Now ,COMMA  let us come to some examples of the data types .PERIOD  You can see integers 0 ,COMMA  25 minus
156 all these are examples of integers .PERIOD  Now here I am for the first time showing some
characters .PERIOD  Now the character values are you see the character values have got something
special say I am declaring some variable char as type char my variable ,COMMA  I name that my
var my var is of type character and I assign I want to assign to my var I want to assign
that my variable will hold the character a .PERIOD 
Now ,COMMA  when I am assigning a character ,COMMA  then I have to put a single quote around this .PERIOD  For
example ,COMMA  I had another variable int yourvar .PERIOD  Yourvar is another variable which is of type
int .PERIOD  So ,COMMA  if I assign into that in yourvar then I can stay to say an integer value 10 ,COMMA  but when
I right onto a character a character constant has to be always in cap ,COMMA  I mean encapsulated
with into single quotes right as here .PERIOD 
Now ,COMMA  this single quote within the single quote is a character slash ,COMMA  what about this this is
just single quote single quote ;SEMICOLON  that means ,COMMA  we win that there is a blank so ;SEMICOLON  that means ,COMMA  I

am see if I say myvar is assigned this ;SEMICOLON  that means ,COMMA  myvar will be assigned a blank
character .PERIOD  Now you should remember that each of these characters ,COMMA  that we type in have
got an ASCII value each of these characters have got an ASCII value .PERIOD 

What is ASCII ?QUESTIONMARK  ASCII stands for American standard code for information interchange .PERIOD 
Now according to this table for every English character a b c d and capital A B C D and
1 2 two everything up to 9 or all of them have got some particular code American
standard code and that is accepted in all the computers .PERIOD  So ,COMMA  whenever I type an a ,COMMA  when I
strike the key on the keyboard when I strike the key a right whenever a strike a then
actually when I as I press a what goes inside the computer is an ASCII code of a alright .PERIOD 
Now ,COMMA  this ASCII code of a will be store therefore ,COMMA  and the code for b the quote for capital
A are all distinct .PERIOD  So ,COMMA  whenever I type in a character from the keyboard a particular
ASCII code goes in whenever I assign some value to a variable for example ,COMMA  as I did
right now myvar signed a this means that myvar will now ,COMMA  have done the ASCII code of
a alright it will have the ASCII code of a .PERIOD 

Now the third variety that is these three are very common float for example ,COMMA  23 .PERIOD 54 or
minus 0 .PERIOD 00345 25 .PERIOD 0 or I can also write it in this way .PERIOD  2 .PERIOD 5 E12 what does this mean ?QUESTIONMARK 
This means ,COMMA  it is 2 .PERIOD 5 times 10 to the power 12 ,COMMA  what does this mean ?QUESTIONMARK  This means 1 .PERIOD 234
times 10 to the power minus 5 ,COMMA  because it is E minus 5 here it is E 12 I can use capital E
or small e that really does not matter these are the examples of floating point constant ok .PERIOD 

So ,COMMA  if I have a variable like float x and I assign I can assign x to be say x is 1 ,COMMA  y is 1 ,COMMA  z is
another one .PERIOD  So ,COMMA  I can assign x to be 23 .PERIOD 54 semi colon or I can assign y to be 2 .PERIOD 5 E 12
and z to be 1 .PERIOD 234 E minus 5 alright .PERIOD 
That means now z will have the value 1 .PERIOD 234 times 10 to the power minus 5 that is how
we represent the floating point numbers given this .PERIOD  So ,COMMA  this part is clear that is how we
write the variables now and the these are the examples of data types .PERIOD 

Now ,COMMA  coming to constants the constants can give integer constants on floating point
constants just the once that we I was showing right now .PERIOD  But there is another type of
constant character constant so on .PERIOD  We have already seen example of character constants
of single character like we had say a sorry what is happening here ;SEMICOLON  can have a single
character like A or say x all these within a single quote a single characters ,COMMA  and there is
another type of character constant which is a string .PERIOD 
For example I can have a string which is another type of character constant which is not
a single character ,COMMA  but a string of characters .PERIOD  For example ,COMMA  I want to write down my name
the name of a person .PERIOD  So ,COMMA  string type variable name to name and I can assign some value
to the string like say g o p a l alright .PERIOD  So ,COMMA  this is a number of characters taken together is
forming a string of characters ,COMMA  it could also be named to be x 1 2 y double quote .PERIOD  Now
note that in this case I am using double quote where is for single character I was using

single quote .PERIOD  Now these are some of the rules of defining character constants on numeric
constants in C .PERIOD 

Next we move to you have seen the integer constant .PERIOD  Now couple of things to be just
mentioned that the maximum and minimum number of values ,COMMA  that can be stored as an
integer constant is dependent on how many bits are allocated for the presentation .PERIOD  For
example ,COMMA  as I said that for 32 bit representation ,COMMA  I can have 2 to the power 32 different
combination alright .PERIOD  So ,COMMA  if you compute this you will find that on one side here is 0 when
everything .PERIOD 
If I take one bit to designate positive or negative ,COMMA  then I will be left with that 31 bits .PERIOD  So ,COMMA 
the maximum I can have on the positive side is 2 to the power of 31 minus the 1 middle
one is 0 alright and I can go up to this and on the other side I can go up to 2 to the power
minus 2 to the power 31 right .PERIOD  So ,COMMA  this is the range ,COMMA  there is a maximum integers and the
minimum integer that I can represent .PERIOD 
But ;SEMICOLON  obviously ,COMMA  we need not be so concerned about it ,COMMA  because that varies with the
number of bit representation in the machine .PERIOD  So ,COMMA  for a 64 bit representation ;SEMICOLON  obviously ,COMMA 
this size will be doubled ;SEMICOLON  will be much larger I am sorry it will it will be much larger .PERIOD 

So ,COMMA  we have also seen floating point numbers just now .PERIOD  So ,COMMA  I do not need to repeat this ,COMMA 
and where it why are we going for this this type of why are you going for exponential
type of representation ,COMMA  because that enables us to represent much larger numbers and
very small numbers also using less number of bits because I can always write 0 .PERIOD 123 into
10 to the power minus whatever .PERIOD 
So ,COMMA  here minus 12 I could have written minus 15 .PERIOD  So ,COMMA  it has got 2 num 2 parts one is the
mantis apart that is this part I just put the decimal part 1 2 3 be present in binary
somewhere and on this side I put some bits for the exponents .PERIOD  So ,COMMA  it can be minus 15 plus
15 .PERIOD  So ,COMMA  using less number of bits I can increase the range and can go for a much larger
range of a presentation .PERIOD 

This one we have already explained that single character constants ,COMMA  now here of course ,COMMA 
you can see that this operator plus also has gotten ASCII quote every character has
gotten ASCII representation whatever we have we find on the keyboard has gotten
ASCII representation .PERIOD  Therefore ,COMMA  I can also have capital z or plus as a character now here
is something that is a little new to you we have already encounter one of these as a friend
earlier ,COMMA  here you can see that we are using a special character like backslash .PERIOD 
This backslash means that whatever is following a backsplash is not the normal nature of
that for example ,COMMA  if I write n ,COMMA  it really does not mean an a character n ,COMMA  but backslash n has
got a different meaning alright .PERIOD  For example ,COMMA  suppose I was writing something printf say
I write you have seen that example earlier printf suppose I am just writing a b c and then
I put backslash n ;SEMICOLON  that means ,COMMA  I am I will be painting a b c ,COMMA  but after that I will not print n ,COMMA 
but since its backslash n ,COMMA  its a some other information it is telling us that go to the new
line .PERIOD  So ,COMMA  immediately we go to the new line .PERIOD  Similarly we can see that backslash t this
one is the horizontal tab .PERIOD 

So ,COMMA  if I have backslash t my cursor will move from here to some fixed tabular distances
right .PERIOD 
Backslash now you know single quote or double quote ;SEMICOLON  single quote if I put a charac if I
just want to print the characters single quote how do I do it ?QUESTIONMARK  I will do it because any
character have to do it in this quote .PERIOD  Now if I put single quote here then it will be
confused it will take these 2 and will take a blank character in between ,COMMA  because a blank
character is represented as n is blank with into single quotes ,COMMA  but I really want that here
not blank ,COMMA  but I want to print the single quote .PERIOD 

So ,COMMA  in that case what should I do ?QUESTIONMARK  For this should take the signal quote and then
backslash single quote back I mean single quote ;SEMICOLON  that means ,COMMA  this single quote is different
from these 2 single quotes .PERIOD  So ,COMMA  these are the boundaries of the character representation
and what is the character ?QUESTIONMARK  That is single quote similarly for double quote you can now
very easily reason that I must enclose it with in single quote ,COMMA  and then backslash double
quote followed by single quote  .PERIOD 
Similarly ,COMMA  if I want to print backslash what should I do ?QUESTIONMARK  Single quote then backslash ;SEMICOLON  that
means ,COMMA  it is something different ,COMMA  backslash single quote similarly backslash null is
backslash 0 alright .PERIOD 

So ,COMMA  these are some special character constants that we may encounter during our
programming practice .PERIOD  The other new things that we have learnt is string constant ;SEMICOLON  now
string constants are us are sequence of characters its a sequence of characters enclosed
within double quotes .PERIOD 
Just like we wrote that the characters may be the characters within the double quote may
be letters ,COMMA  numbers ,COMMA  special characters bank blank spaces like that for example ,COMMA  nice good
morning this is a blank here ,COMMA  now what will happen with this .PERIOD  When I put this as a string
do not think that it will be computed and printed as 9 .PERIOD  It is just a string that will be
printed .PERIOD  So ,COMMA  if I write in this way within double quote if I write three plus six then just 3
plus 6 that string will be printed .PERIOD  The difference between the with character constants is
that ,COMMA  backslash I mean the single quote c this is a character this is a string and they are
not equivalent .PERIOD 
Because their representations we will see we will be internally there will be represented
in a different way this one has got an equivalent integer value that is ASCII code
whereas ,COMMA  this does not have an ASCII code this is something different where they will be
c and something more which will see later .PERIOD  So ,COMMA  string constants thing only thing to
remember is ,COMMA  string constants are a sequence of characters which can be letters numbers
expressions whatever this sort of operator special characters enclosed within double
quotes alright that is a string character  .PERIOD 

Now ,COMMA  we already know what variables are .PERIOD  So ,COMMA  we do not need to repeat that .PERIOD 

And we have we have seen the variables .PERIOD 

We know that the variables are to be declared and the general syntax is a particular data
type .PERIOD 
Sorry is it will be a particular data type followed by variable list right .PERIOD  So ,COMMA  like examples
we have already seen ,COMMA  int velocity distance int a b c d ,COMMA  a b c d velocity distance all integer
variables temperature is a float temp is a floating point variable ,COMMA  flag option these are
character type of variables we have already seen them right .PERIOD 

Now ,COMMA  we come to something that we evaded till now .PERIOD  Pointers have got big role in C
programming ,COMMA  but we will just have a very simple look at the pointers .PERIOD  Here pointer
means basically address alright .PERIOD  So ,COMMA  you please forget about the title for the time being ,COMMA  a
variable is assigned a specific memory location that we know and that memory location
is assigned by the compiler .PERIOD  So ,COMMA  if we have some variable say when we find out int a b c .PERIOD 

Then as we have discussed earlier a b c are three memory location ,COMMA  which are the sign by
the compiler which of these memory locations actually have got an address right .PERIOD  So ,COMMA  the
address can be say this is 1350 is an address just like our houses have an address just like
your rooms have got some numbers ,COMMA  just as your drawers may have some levels .PERIOD  So ,COMMA 
similarly might be this is 1400 ,COMMA  this is say 1450 or 1420 suppose a b c has got this 3
addresses are right .PERIOD 
Now ,COMMA  when I read when I try to read something ,COMMA  we know that I need to scanf .PERIOD  Now in
scanf what I did is percentage d and a ;SEMICOLON  that means ,COMMA  I am trying to read the variable a ,COMMA  but
I did not explain to you earlier why I put this .PERIOD  And this and means that and you know
what is this percentage d .PERIOD  So ,COMMA  I have got some space some space to hold an integer and
that space is the in the a variable ,COMMA  but when the you from the keyboard type in say the
value 25 .PERIOD 
When will that value go ?QUESTIONMARK  The value will go to the address of the variable a ,COMMA  what is the
address of the variable a ?QUESTIONMARK  1350 .PERIOD  So ,COMMA  it will go to 1350 ,COMMA  25 will come here similarly when

we write say scanf percentage d ,COMMA  percentage d comma and a and b then I am going to
read 2 values and 2 integers ,COMMA  and the address of the first once upon suppose type in 25
and 27 .PERIOD  So ,COMMA  for the add 25 will go to the address of a that is a 1350 and 27 will go to the
address of b that is 1400 .PERIOD 
Given this lets now read this a variable is a sign the specific memory location we know
that .PERIOD  For example ,COMMA  of variable speed is assigned memory location 1350 and assume that
the memory location contains the data value 100 .PERIOD  So ,COMMA  when we use the name speed in an
expression it refers to the value 100 .PERIOD  So ,COMMA  for example ,COMMA  when we write distance is speed
into time ,COMMA  then it will take this speed from this location 1350 .PERIOD  Every variable has an
address and its contents .PERIOD  So ,COMMA  we have seen a has got an address a is a variable a has got
an address 1350 .PERIOD 
And when I write the 25 into that 25 is a content .PERIOD  So ,COMMA  address and content we had earlier
discussed also .PERIOD 

But you see here integers speed I think you can read it and .PERIOD  So ,COMMA  speed is this particular
location that is in 1350 and when I right when I write speed equals speed assigned 100 ,COMMA 
then 100 is written over here alright when I assign it .PERIOD  So ,COMMA  speed is getting the value 100
whenever ,COMMA  but when I say what is and speed when I am asking the question what is the
address of the variable speed ,COMMA  what is the address of the variable speed and the answer
would be 1350 .PERIOD 

So ,COMMA  this and sorry this and operation this and operation is nothing ,COMMA  but asking for the
pointer to speed or the address to the variable speed .PERIOD  So ,COMMA  this should be the answer .PERIOD  So ,COMMA 
and of suppose here time is given here ,COMMA  if I just say and time what will that be returned
what is and time ?QUESTIONMARK  And time will be 1351 something of this sort alright .PERIOD  So ,COMMA  that is another
thing that we needed to understand what is the purpose of this and .PERIOD 

So ,COMMA  here in C terminology speed refers to the contents of the memory location ,COMMA  and speed
refers to the address of the memory location corresponding to the variable speed .PERIOD  So ,COMMA  let
us come to this example printf percentage f percentage f percentage f ;SEMICOLON  that means ,COMMA  I am
going to print three floating point numbers and what are the variables c floating point
values speed time and distance ;SEMICOLON  that means ,COMMA  what am I going to print look here I am
going to print the contents of the memory location speed ,COMMA  the content of the memory
location time ,COMMA  the content of the memory location distance .PERIOD 
And when I am reading percentage f percentage f and speed and time ;SEMICOLON  that means ,COMMA  what
that I am reading where I am reading in the address of the variable speed ,COMMA  I am reading in
the address of the variable time .PERIOD  So ,COMMA  this is required to be understood .PERIOD  So ,COMMA  basically when
I have say speed I once again repeat ,COMMA  suppose speed is 25 and I print speed ;SEMICOLON  that means ,COMMA  I
am printing the content of this location speed ,COMMA  but whenever I am reading into speed
where am I reading the value ?QUESTIONMARK  I am reading into the address of speed that is this location .PERIOD 

That is the main difference between these 2 alright .PERIOD  Let us stop here in the next lecture ,COMMA 
we will straight way move head to write some c expressions ,COMMA  because till now whatever
we have learnt are the bits and pieces the tools of c that is how the how just like in the
language how the word are written what are the some of the simple rules ,COMMA  but then we
will have to learn writing the real sentences in a language .PERIOD  So ,COMMA  that it we will start from
the next lecture
Thank you

In the last lecture ,COMMA  we encountered a special notation as if like this where we can put in
ampersand and a variable name to denote the address of the particular variable right .PERIOD 

So ,COMMA  that is what we encountered in the earlier class .PERIOD  Next we will be now we will be
moving ahead towards some statements which are absolutely essential for writing any C
program .PERIOD 

Just as in English ,COMMA  we write different types of sentences ,COMMA  similarly in the language C just
is as it is a language there are again different types of statements that we can write ,COMMA  and
through which we can express what we want to do .PERIOD  The simplest type of statement that
we have already encountered about is assignment statement .PERIOD  Assignment statement
means I have got some contents in some resistor ;SEMICOLON  some resistor say X some memory
location say variable x and has got some value 50 ,COMMA  now how does this value come over
here ?QUESTIONMARK  Initially it was not there .PERIOD  So ,COMMA  suppose I have got memory location variable say
speed ,COMMA  and I want to put in some value into this location alright say 500 .PERIOD  So ,COMMA  what we do
we write speed assigned 500 semicolon .PERIOD 
So ,COMMA  the general syntax for dot is a variable name followed by the expression ;SEMICOLON  as you have
written here speed is a variable name and the expression here is nothing ,COMMA  but the constant
alright it could be something else .PERIOD 

For example ,COMMA  I could have written speed assigned 2 times 500 or may be v times q
whatever speed is assigned v times q .PERIOD  I and here are some examples of such assignments .PERIOD 
As you can see here velocity is a variable right on the left hand side the variable name is
there ,COMMA  on this side is an expression now what type of expression is this ?QUESTIONMARK  20 is nothing ,COMMA  but
a constant value .PERIOD  Please note that all the statements must be ended with a semicolon you
get the second .PERIOD  B assigned 15 again a constant .PERIOD  Look at third one temp assigned 12 .PERIOD 5 .PERIOD  So ,COMMA 
what type of variable is temp ?QUESTIONMARK  You will immediately answer temp must be a floating
point variable of real number .PERIOD 
Here you see a different type of expression a variable A is being assigned the variable A
plus 10 what does it mean .PERIOD  So ,COMMA  A assigned A plus 10 .PERIOD  So ,COMMA  A being a variable ,COMMA  A is a
memory location and suppose it has got some value 25 .PERIOD 7 ,COMMA  if A is a floating point variable .PERIOD 

Now if I do A assigned A plus 10 ;SEMICOLON  that means ,COMMA  whatever is there in the as the value of the
variable A is taken out .PERIOD  So ,COMMA  we take out we read 25 .PERIOD 7 add 10 with that and we get 35 .PERIOD 7
and then this 35 .PERIOD 7 comes in here and I get a new look of A the same location ,COMMA  will now
hold 35 .PERIOD 7 .PERIOD  So ,COMMA  you see the left hand side if the destination ,COMMA  where the new value occurred
computation of the expression will go .PERIOD  And the left side sorry the right side can have the
same variable of the source or might be the sum of a variable could be sum of the
variable also like here this expression you see ,COMMA  I am using 3 variables here .PERIOD 

V is one variable ,COMMA  u is one variable I am sorry I am using 4 variables here ,COMMA  f is another
variable and t is another variable .PERIOD 
Now ,COMMA  suppose you have got some value 20 f have got some value 0 .PERIOD 5 ,COMMA  and t has got some
value 2 .PERIOD  Then v is being computed as u is been taken 20 plus the product of these 2 2 and
5 .PERIOD  So ,COMMA  2 and 0 .PERIOD 5 will be 1 and 1 is being added to 20 .PERIOD  So ,COMMA  these 2 being added is
becoming 21 ,COMMA  and this 21 is filling up this variable v alright .PERIOD  So ,COMMA  here you see I can use
more number of variables ,COMMA  I am sorry this is must be a little nice .PERIOD  So ,COMMA  it should be 21 .PERIOD 0 .PERIOD 
Similarly here you see if they mix up variables how many are here s if a variable u is a
variable t is a variable f t t ,COMMA  f t .PERIOD  So ,COMMA  1 2 3 are there again u f t and s alright and there is a
constant 0 .PERIOD 5 .PERIOD  So ,COMMA  this side entirely this side is the expression .PERIOD 
Similarly ,COMMA  this is again an expression ,COMMA  this is an expression this is also an expression will
see more of these expressions in a moment alright .PERIOD 

So ,COMMA  a value can be assigned to a variable when the variable is declared for example ,COMMA  when
I am declaring a variable ,COMMA  just starting I want to declare a particular variable and .PERIOD  So ,COMMA  I
want to declare a variable may be acceleration .PERIOD  Acceleration alright now when and I say
that acceleration is a real number .PERIOD  So ,COMMA  when I declare it I will write float acceleration ,COMMA  and
then at some point later on I can say acceleration assigned say 2 .PERIOD 5 ,COMMA  this is one way .PERIOD  The
other way is that I could have written it when I declared it a float acceleration assigned or
initialised to 2 .PERIOD 5 this is also allowed in c .PERIOD  So ,COMMA  a value can be assigned when it is declared .PERIOD 

(Refer Slide Time: 09:13)

For example here speed is an integer ,COMMA  which is being declared as an integer and along
with that it is being assigned the value 30 .PERIOD  Here you see the char is a type of another
variable flag and when I am saying that it is a flag is a character ,COMMA  I am along with that I
am also assigning it to value y .PERIOD 
Now ,COMMA  you understand you remember that within the single quote means it is a did the
character string .PERIOD  So ,COMMA  I could have done it also like this char flag ,COMMA  and then alter on flag
assigned y that is equivalent to what i did here .PERIOD  Several values can be assigned the same
value using multiple assignments operative what does it mean ?QUESTIONMARK  As soon as we see the
example it will be clear for example ,COMMA  a b c all these are being assigned the value 5 flag ne
and flag 2 both are being assigned the value y ,COMMA  speed and flow both are being assigned
the value 0 .PERIOD 0 .PERIOD  So ,COMMA  here say for example ,COMMA  the correct thing would be to say float ,COMMA  speed
flow are assigned 0 .PERIOD 0 .PERIOD  So ,COMMA  that is the simplest opposable way we go about it .PERIOD 

Now ,COMMA  when we write an expression ,COMMA  first thing we have seen now is the assignment
statement .PERIOD  Now in the assignment statement if you have seen the earlier slide we were
using some operative .PERIOD  For example ,COMMA  u assigned say v minus f times t right .PERIOD  So ,COMMA  these are
an ;SEMICOLON  this is an assignment statement here is an assignment ,COMMA  but on this side I have written
an expression .PERIOD 
So ,COMMA  how can we write an expression in c .PERIOD  We have seen quite a few examples of that
expressions in the earlier slides right ,COMMA  we have seen different types of expressions like s
assigned u times t plus 0 .PERIOD 5 times f times t times t .PERIOD  So ,COMMA  this is you will immediately recall
that this is our standard school formula f is equal to u t plus half f t square right .PERIOD  Now this
expression has got 2 components ,COMMA  this well-known expression in school has got 2
components .PERIOD  One side is the expression here which has to be computed and then that has
to be assigned to another result of other variable .PERIOD  So ,COMMA  that is being written here .PERIOD  Now this
is the way an expression is written in c you cannot just write it in this way as we are
doing in our school ,COMMA  this is not possible we have to write it in this way ok .PERIOD 
Now ,COMMA  here when we write this expression you please observe a couple of things ,COMMA  look at
these this ,COMMA  this ,COMMA  this .PERIOD  These are known as the operators you have this is meaning
multiplication this is meaning addition these are again multiplication symbols .PERIOD  Now
these they are sets of allowed operators in c .PERIOD  Just as every language allow some contrast
to form sentence and some of them are not some other contrasts are not valid in a

sentence formation ,COMMA  similar to that in the programming language c or for that matter for
any programming language there are some allowed operators by which we can form
expressions .PERIOD  So ,COMMA  we have got 3 types of operators the type of operators ;SEMICOLON  that we have
encountered till now we have seen till now are arithmetic operators ,COMMA  but besides
arithmetic operators there are 2 other types of operators called relational operators and
logical operators ok .PERIOD 
(Refer Slide Time: 14:30)

So ,COMMA  let us see a little more of this arithmetic operators ,COMMA  these are the some of the very
familiar arithmetic operators you know that this is ,COMMA  this means addition normal
subtraction ,COMMA  this is division ,COMMA  remember unlike this sort of division we use in schools we
use here this symbol for division .PERIOD  Unlike this symbol that we use for multiplication ,COMMA  here
we use this symbol and new symbol that we are introducing here is this symbol ,COMMA  like the
percentage sign .PERIOD  Now this does not mean percent computing percentage ,COMMA  it means
modulus what does modulus mean ?QUESTIONMARK  Say the modulus means finding the remainder for
example ,COMMA  if I compute 15 modulus 3 ;SEMICOLON  that means ,COMMA  I am dividing 15 by 3 and whatever is
the remainder is my result .PERIOD  So ,COMMA  what is my remainder here ?QUESTIONMARK  Remainder is 0 .PERIOD  So ,COMMA  modulus
is basically the remainder operator .PERIOD  So ,COMMA  another example let us look at .PERIOD 

Say I have got 27 modulus 2 what would be the result be ?QUESTIONMARK  27 divided by 2 the quotient is
13 right quotient is 13 and the remainder is 1 .PERIOD  So ,COMMA  this modulus would be 1 whereas ,COMMA  if I
has done 20 6 modulus 2 that would be 0 .PERIOD 
Now ,COMMA  again I have got if I instead of modulus operator if I had done 26 divided by 2 the
result would be 13 .PERIOD  So ,COMMA  this gives you the quotient whereas ,COMMA  this gives you the remainder
alright .PERIOD  So ,COMMA  this is a new operator that we are coming across and you should keep that in
mind next let us proceed .PERIOD 

And here some examples distance is rate or velocity or speed multiplied by time .PERIOD  Please
note again as I have told earlier also that any expression must end with a semicolon as is
being done here what does it this mean ?QUESTIONMARK  Can you read this variable ,COMMA  can you read this
variable it is meaningful net income is income minus tax .PERIOD  So ,COMMA  operator is minus this is the
arithmetic expression and this is the arithmetic operator .PERIOD  Speed is distance divided by
time again ended with a semicolon speed is distance divided by time how do we find the
area of a circle ?QUESTIONMARK  Pi you remember pi we can define pi we had seen this example earlier
has defined pi 3 .PERIOD 1415 etcetera ,COMMA  etcetera ,COMMA  we could have done that .PERIOD  So ,COMMA  pi is a constant
times radius times radius .PERIOD  Here basically what I am computing is area is being assigned
is the assignment operator and the expression is pi r square .PERIOD  Now this expression I am
writing in this way pi times r radius times radius .PERIOD 

Here is another expression y assigned a x square what does it ,COMMA  how does it how do we
write it typically in school .PERIOD  This is expression which is a x square plus b x plus c alright
this is a very familiar expression of a quadratic expression .PERIOD  Now when we write it again
here you see how many operators I have got 2 multiplication operations 3 multiplication
operations and 2 addition operations right and one assignment operation .PERIOD  So ,COMMA  here again
quotient is divided by divisor .PERIOD  Now this is exactly what I was telling a couple of
moments back ,COMMA  that this operator is actually turning you the quotient alright of a division
operation and this is actually giving you the remainder of a division operation .PERIOD  So ,COMMA  here
are some examples of arithmetic expression .PERIOD 

Suppose x and y are 2 integer variables ,COMMA  and the values are we know 13 and 15 .PERIOD  When
added to y x plus y arithmetic operator plus will give me 18 x minus y 13 minus 5 will
give me 8 .PERIOD  Now the point to note here is that here again always try to think in terms of
our memory location diagram x and y are 2 variables ,COMMA  x is 13 and y is 5 .PERIOD  So ,COMMA  x plus y
means the content of the location x plus the content of the location y ;SEMICOLON  x minus y is the
content of the location x minus the content of the location y .PERIOD 
Similarly ,COMMA  when we multiply it is 65 ,COMMA  now if I add an assignment with this operation with
this operation I just add a assignment for example ,COMMA  I write I am giving 2 variations z
assigned x times y ;SEMICOLON  that means ,COMMA  what ?QUESTIONMARK  There is another location with where the content of
x and the content of y are taken and multiplied and 13 times 5 is 65 that is stored there
and that is possible because I have assigned it here .PERIOD  Again I could have assigned
alternative could have done x assigned x times y what would have happened in this case ?QUESTIONMARK 
The content of x would have been taken 13 multiplied with a content of y that is 5 13 and
5 would be 65 ,COMMA  and this product 65 where would that be written ?QUESTIONMARK  It would be written in x
why because it is being assigned to x .PERIOD  So ,COMMA  then this would be over written with 65 .PERIOD 
Similarly ,COMMA  we will recall now x divided by 2 is a division from expecting the quotient 13
divided by 5 what will be the quotient 2 ,COMMA  but x modulus y would be the remainder of
when I divided 13 by 5 .PERIOD  So ,COMMA  that modulus is 3 .PERIOD 

Now ,COMMA  in an expression we can have different operators .PERIOD  If more than one different
operator occurs in a particular expression how will that expression be evaluated .PERIOD  So ,COMMA 
now ,COMMA  we are concerned about how we will evaluate or find the result of computing an
expression k .PERIOD  Now here is a list in decreasing order of priority .PERIOD  So ,COMMA  if I have something
like this say x assigned p plus q times z minus x divided by l plus m .PERIOD  Now here you can
see that I have got different operators what are those ?QUESTIONMARK  Our well known operators are plus
multiplication minus division plus again here is another operator that is parentheses .PERIOD 
Now as we learnt in school algebra that the parentheses has got the highest priority
alright .PERIOD  So ,COMMA  I will first compute the elements which are within the parentheses .PERIOD  So ,COMMA  first p
plus q will be computed then l plus and l plus m will be computed now out of this p plus
q and l plus m which one will be computed first ?QUESTIONMARK  Whenever these 2 that are these are of
the same priority this parentheses ,COMMA  now if there will be more than one operator of the
same priority they will computed left to right .PERIOD 
So ,COMMA  first we will have p plus q computed alright suppose that is something ,COMMA  say let us call
it a some value A times Z minus X suppose this is computed to be some constant B .PERIOD  So ,COMMA 
in that way it will be computed .PERIOD  So ,COMMA  the parentheses has got the highest priority next after
parentheses is unary minus .PERIOD 

Unary minus means usually when we write something like x minus y ,COMMA  then I have got 2
variables on which I am carrying out this subtraction .PERIOD  This is binary operator in the sense
that I am leaving 2 variables of 2 constants 2 elements and which I am carrying out this
computation .PERIOD  Unary minus means that particular variable is being operated on for
example ,COMMA  if I had something like this minus x plus 7 .PERIOD 5 semicolon and suppose x was 2 .PERIOD 5
n .PERIOD  So ,COMMA  what will be the value ?QUESTIONMARK  X is 2 .PERIOD 5 .PERIOD  So ,COMMA  for this will be done .PERIOD  So ,COMMA  it will be minus 2 .PERIOD 5
plus 7 .PERIOD 5 .PERIOD  So ,COMMA  the result will be 10 5 ;SEMICOLON  it is not that I will first compute this 2 .PERIOD 5 plus 7 .PERIOD 5 and
then do negation alright .PERIOD 
So ,COMMA  the unary minus .PERIOD  So ,COMMA  here I have shown a variable ,COMMA  it could be something constant
also minus 2 plus 6 that means ,COMMA  you all know that 6 subtracted by 2 although it is plus
because this has got the higher precedence .PERIOD 

The next one is multiplication division and modulus .PERIOD  These 3 will have the same priority
multiplication division and modulus these 3 operators will have same priority therefore ,COMMA 
if I have an expression like say x division y multiplied by z modulus q how will that be
which one will be done first ?QUESTIONMARK  This ,COMMA  this and this have got the same priority therefore ,COMMA  we
will carrying it out left to right alright ,COMMA  but if the expression was something like this
minus .PERIOD 

X divided by y multiplied by z modulus q then which would be done first ?QUESTIONMARK  First is unary
minus should be done first followed by these 3 candidates which will be done left to
right left to right .PERIOD 

Next comes addition and subtraction .PERIOD  So ,COMMA  if I have got an expression again like say x
times y even before that if we put it ,COMMA  p plus x times y divided by z minus q then in which
order would it be computed ?QUESTIONMARK  First plus will not be computed multiplication has got an
higher priority this also has got an higher priority .PERIOD  So ,COMMA  out of these 2 which one will be
done first left to right ?QUESTIONMARK  So ,COMMA  first I will do this suppose this is yielding a result A .PERIOD  So ,COMMA  it
will be p plus A then divided by Z minus q and then this one will be done because left to
right of the same precedence suppose it is B then it turns out to be p ,COMMA  it turns out to be p
plus b minus q alright .PERIOD  Now out of this plus and minus have got the same priority then
which one will be done first this part will be done first ,COMMA  suppose that is c ,COMMA  c minus q this
is how this entire operation will be done .PERIOD 

For operators of the same priority the evaluation is from left to right .PERIOD  In the next class we
will see some more examples of this and we will proceed further .PERIOD 

In the last lecture ,COMMA  we were introduced to the precedence among the operators ,COMMA  and we
had seen that parentheses has got the highest precedence followed by unary minus then
multiplication division module ,COMMA  and modulus have got the same priority addition and
subtraction are having the next priority .PERIOD  And for operators of the same priority if an
expression there are more than one operators which are of the priority then evaluation is
done from left to right .PERIOD 
Only one thing we did not mention and that is if we want to change the precedence of the
evaluation ,COMMA  then we can always do it using parentheses because we know parentheses is
the highest priority one or so ,COMMA  over riding scenario .PERIOD  So ,COMMA  let us look at some examples for
this which will make the idea clear .PERIOD 

Here are some examples arithmetic expressions ;SEMICOLON  here you can see a plus b times c minus
d divided by e .PERIOD  Now according to my precedence rule ,COMMA  this is equivalent a plus as if I
have if I have done it hand computation .PERIOD  If I had done by hand computation how would I
have done there is a chance of confusion ,COMMA  somebody could have done a plus b and the
whole thing multiplied by c etcetera the you know even in school level in order to avoid
such confusions we use parentheses .PERIOD  And this is equivalent to this scenario that a ;SEMICOLON  this b c
are parenthesized and d divided by e are parenthesized .PERIOD  So ,COMMA  first this will be done then
this will be done why b into b times c first ,COMMA  because it is left and this is right ,COMMA  right .PERIOD 
So ,COMMA  first this then this then addition and sub .PERIOD  So ,COMMA  let us see how you will break it down .PERIOD 
Again we will have first b times c will be done followed by b times e then we have
suppose this result is x and this result is y .PERIOD  Then my expression is a plus x minus y now
out of these again these 2 they are the same precedence .PERIOD  So ,COMMA  first this will be done
suppose this is z minus y that is how the computation will go on .PERIOD 
Here what is the significance of this ?QUESTIONMARK  The critical point to note here this part here there is
an unary operator .PERIOD  Therefore ,COMMA  during computation what is it means the computer will
automatically assume that this parentheses are there alright .PERIOD  If you had not wanted that
then you better write in some other way put it some other way .PERIOD  So ,COMMA  that the confusion is
not there .PERIOD  The computer will not allow the compiler will generate the code in a way that
it will be treated as this a times first minus b will be done ,COMMA  then this one is the highest

precedence next highest precedence .PERIOD  So ,COMMA  this will be done ,COMMA  then multiplication between
these 2 will be done now I am sorry I am sorry here normally if I had done this what
would have happened .PERIOD 

First of all I will be doing minus b and by capital letter I am writing some constant value
alright .PERIOD  So ,COMMA  b is right now is 5 .PERIOD  So ,COMMA  first after computing this it would be a times minus 5
because b was 5 plus suppose d was 100 and e was 9 .PERIOD  So ,COMMA  what is my modulus 1 right .PERIOD 
So ,COMMA  then I am I will be now at this point ,COMMA  I have got b modulus e minus f .PERIOD 
Now ,COMMA  at this point which one has got the higher priority ?QUESTIONMARK  This and this ,COMMA  now since now I
have put a parentheses here therefore ,COMMA  if I put a parentheses here then this will be done
first otherwise this would be would have been done first ;SEMICOLON  because this multiplication has
got the same priority as this and put it in a place to write now .PERIOD  So ,COMMA  similarly here a minus
b plus c plus d .PERIOD 
Now ,COMMA  here these are having the same priority left to right ,COMMA  now I want it would to be done
in a particular order therefore ,COMMA  I have put the parentheses in such a way that a minus b
should be done first ,COMMA  then a minus b plus c will be done first then d will be added to that .PERIOD 
That would have been done anyway why because since these are of the same priority that
would be done left to right .PERIOD  So ,COMMA  first this would be done ,COMMA  then this would have been done
then this would have been done either way .PERIOD 

Here also the same I can write in this way ,COMMA  but that is the precedence is being shown in
the form of bracket .PERIOD 

But here this is an example ,COMMA  where I use parentheses to over write the precedence .PERIOD  The
precedence between this multiplication and this modulus was the same ,COMMA  but just by
putting this parentheses there ,COMMA  I have forced this to be computed first .PERIOD  Similarly here now
normally given this ,COMMA  this would be done first ,COMMA  then this would have been done ,COMMA  then this
would have then then additions would have been done .PERIOD 
But I have over written that by saying that wait first you do it a plus b ,COMMA  then you multiply
c and d multiplied e that is there anyway ,COMMA  and then you do the addition ,COMMA  but this is
actually over writing the normal precedence .PERIOD  So ,COMMA  you should I mean with a little bit of
practice we will initially we will make some mistakes ,COMMA  but then gradually with practice
that will go away n and all of you will be able to write it fine .PERIOD 

Now ,COMMA  we are coming to a very important concept of this arithmetic expression evaluation
integer arithmetic .PERIOD 
What does it mean ?QUESTIONMARK  It means that when the operands in an arithmetic expression are
integers ,COMMA  then the expression is called an integer expression and the operation is called
the integer arithmetic .PERIOD  Integer arithmetic always deals integer values ,COMMA  it will always
yields I am sorry it will always yield integer values .PERIOD  So ,COMMA  it will be clearer when we take
some examples .PERIOD 

On the other hand real arithmetic is arithmetic operation involving only real or floating
point values .PERIOD 
For example here you can see this expression 1 .PERIOD 0 divided by 3 .PERIOD 0 multiplied by 3 .PERIOD 0 .PERIOD  Now
all these are operands now here is I would like to introduce a term ,COMMA  when I say a plus b
then this plus I call it as an operator ,COMMA  and these I call as operand on which the operation is
being done .PERIOD  Now in real arithmetic all the operands are floating point numbers .PERIOD 
Now ,COMMA  sometimes the floating point values are rounded to the number of significant digits
because it may be 7 .PERIOD 5976 like that you can go on ,COMMA  its often rounded to the number of
significant digits permissible in the particular machine ,COMMA  we get an approximation of the
results .PERIOD  Now one thing that we have to remember is that the modulus operation is not
defined over real operands .PERIOD 

So ,COMMA  I am not allowed to do 3 .PERIOD 5 modulus 2 .PERIOD 1 that is not allowed .PERIOD  The modulus operation is
allowed only for integer arithmetic .PERIOD 

Now ,COMMA  we can also have mixed mode arithmetic ,COMMA  where some of the operands are integers
and some are float or real in the case we call it a mixed mode arithmetic expression .PERIOD  If
any of the operand is of real type then only real arithmetic is performed and the result is
a real number this is this example will make it clear .PERIOD 
Now ,COMMA  you see here look at the first one 25 divided by 10 ,COMMA  both the operands this operand
and this operand both these operands are integer therefore ,COMMA  when I divide by divide them
I get an integer quotient or integer result whereas ,COMMA  if one of the operands was integer and
one was real if at least if even one is real ,COMMA  then the result will be real .PERIOD  So ,COMMA  what is
happening here ?QUESTIONMARK  This is becoming like 25 .PERIOD 0 divided by 10 .PERIOD 0 so that will become 2 .PERIOD 5
alright .PERIOD 
Now ,COMMA  here on the other hand since both are integers the result will be integer .PERIOD  So ,COMMA  let me
just put in one twist on this .PERIOD  Suppose now here 25 divided by 10 is actually what ?QUESTIONMARK  Is a if I
divide it ,COMMA  it is also 2 .PERIOD 5 right 2 .PERIOD 5 ,COMMA  but since this operator is nothing ,COMMA  but an integer division .PERIOD 
So ,COMMA  it will in out the quotient and the quotient is an integer the quotient is 2 ,COMMA  if I had done
25 modulus 10 what would my result be ?QUESTIONMARK  The result would be 5 as a integer right .PERIOD  So ,COMMA  we
could understand what is meant by mixed mode real mode ,COMMA  and integer mode of
arithmetic we will see some more things later .PERIOD 

Now ,COMMA  there are some problems of value assignment for example ,COMMA  in assignment operation
we actually take the expression value and assigned it to a variable or we assign a
particular variable to another variable .PERIOD  For example ,COMMA  we could have as we have done say
something v is u plus f times t ,COMMA  this is an expression value is going first it will be
computed and the value will go to v .PERIOD  So ,COMMA  the value is going there right on the other hand I
could have done v assigned u ;SEMICOLON  that means ,COMMA  the value of u is going to the this variable here
also ,COMMA  this value is going here the value of an expression here just a value of a variable .PERIOD 
But the most important point is that the data type of the right hand side should be
compatible with that of the left hand side ok .PERIOD 

Now ,COMMA  if for example ,COMMA  I say v assigned u and u is a float and v is an int ,COMMA  then may I may
have problem what type of problem can I have ?QUESTIONMARK  Suppose u is 25 .PERIOD 7 ,COMMA  I assigned this to v .PERIOD 
So ,COMMA  v can only take an integer value .PERIOD  So ,COMMA  in most of the cases we will get an error why ?QUESTIONMARK 
Because you know that depending on the computers ,COMMA  depending on the different
architectures integers are often 2 bytes and floats are given 4 bytes .PERIOD 
So ,COMMA  you are trying to track in a large number I mean a 4 byte into a 2 byte space the space
is not there .PERIOD  So ,COMMA  the errors can come ,COMMA  in some cases may be they will cut it out and
represent it as ignore this part and you will not understand it will just assign 25 to v ,COMMA  that
is also an error that is skipping in now this is this error will go unnoticed .PERIOD  If the compiler
catches it which is mostly the case ,COMMA  in that case you will you will the compilation error
will occur and we will understand that it is not working alright .PERIOD 

For example as I said the 4 bytes floating point number is not allowed to be assigned to a
2 byte integer variable .PERIOD 

So ,COMMA  sometimes what we do this is an new concept called type casting ,COMMA  look at this
example .PERIOD  Here we have defined x to be integer .PERIOD  So ,COMMA  x have got 2 bytes ,COMMA  suppose that I
show 2 bytes for x and r is floating number which has been represented through 4 bytes .PERIOD 
Now sometimes what we do we type cast this thing 2 times r will be what 2 times r will
be float ?QUESTIONMARK  Because the r is real and .PERIOD  So ,COMMA  if one of the operators are real ,COMMA  then it this part

will be a real arithmetic ,COMMA  but then that result and casting back to int .PERIOD  So ,COMMA  this operation is
called the type casting operation ;SEMICOLON  that means ,COMMA  whatever I have I have casting that o fit it
in a way .PERIOD  So ,COMMA  that it can fit in as an integer ok .PERIOD 
Here is the another example say perimeter has been defined as double ;SEMICOLON  that means ,COMMA  it can
have twice the floating point space .PERIOD  Pi is a float three point one 4 now you see this is pi
we have encountered that pi earlier ,COMMA  but here this pi is not the constant which has defined
as the pi ,COMMA  but pi is a variable ,COMMA  which has been initialised at the time of declaration and r is
an integer .PERIOD 
Therefore when I am computing perimeter is twice pi r .PERIOD  So ,COMMA  what am I actually giving ?QUESTIONMARK 

I am trying to compute 2 pi r right the circumference of a circle .PERIOD  So ,COMMA  twice 2 is real now
pi dot r perimeter is doubled .PERIOD  So ,COMMA  I want to have perimeter with a larger accuracy
therefore ,COMMA  I first make r to be doubled ,COMMA  I type cast this integer to a double retype ,COMMA  I type
cast this float to a double type then I multiply and get the perimeter .PERIOD  So ,COMMA  this is another
very powerful operation ,COMMA  which we often need for scientific computation .PERIOD 

So ,COMMA  type casting of a floating point expression to an integer as is shown here ,COMMA  and the type
casting to double has been shown here we have already explained that .PERIOD 

Now ,COMMA  we have till now looked at arithmetic expressions ,COMMA  how to form arithmetic
expressions ,COMMA  and arithmetic expressions are formed using arithmetic operators .PERIOD  Besides
arithmetic operators there is another very important type of operator called the relational
operator .PERIOD  A relational operator is used to compare 2 quantities let us see for example ,COMMA  this
symbol say very familiar denotes is less than ,COMMA  this symbol which is also familiar shows is

greater than ,COMMA  this symbol is less than or equal to this ,COMMA  sometimes in our normal course we
write it in this way ,COMMA  but in a computer we cannot write it in this way we have to write it
less than equal to alright .PERIOD 
Similarly ,COMMA  greater than equal to unlike the greater than equal to that we used to write in
this way ,COMMA  we have to write here greater than or equal to now this means greater than or
equal to that is well known to us .PERIOD 

Next here is another operator this requires some discussion is equal to .PERIOD  Now earlier this
is very important to know than this is a very source of a very common error and common
mistake .PERIOD  Typically when we say in our normal arithmetic x equals y we meant that the
value of x and the value of y are the same right ,COMMA  but we have seen that in c language this
actually means the variable x is being assigned the value of y right .PERIOD 
So ,COMMA  how do I compare whether these 2 variables are equal or not ,COMMA  for that c provides this
technique of using 2 consecutive equal it is find to show x whether x is equal to y alright
we will come to this in a moment ,COMMA  there is another operator that is not equal to again .PERIOD 

Let us compare to what we had in school ,COMMA  we used to write something like this in c we
used to write it with this exclamation mark followed by equality ,COMMA  this is means it is not
equal to alright .PERIOD 
Now ,COMMA  a very important thing comes into the play whenever I am using this relational
operators what do I get ?QUESTIONMARK  If I write x less than y in an now we know that what are these x
and y ?QUESTIONMARK  These are 2 operands and what is this ?QUESTIONMARK  This is on one operator .PERIOD  So ,COMMA  when I carry
out some operation I will be getting some result .PERIOD  So ,COMMA  if I had done x plus y and suppose x
was 5 and y was 7 ,COMMA  then x plus y would have given me what 12 would have resulted into
12 ,COMMA  5 plus 7 .PERIOD 
Now ,COMMA  if I do this x less than y ;SEMICOLON  that means ,COMMA  5 less than 7 what will this give me ?QUESTIONMARK  It will
any relational operator gives me only true or false 1 or 0 .PERIOD  So ,COMMA  when I say x less than y
and x is 5 y is 7 it is true therefore ,COMMA  x less than y in this case will return 1 .PERIOD 

If I write y less than x ,COMMA  it will return me false because y is 7 and x is 5 ,COMMA  then this will be
false this will return 0 ok .PERIOD 
Similarly ,COMMA  for greater than y greater than x will return me in this case is for this particular
value set ,COMMA  y greater than x will give me true one or it conceptually we can say true that
this true cannot be represented as t r u e in a computer it is this in c it is represented as 1 .PERIOD 
Less than equal to in this case what would we have what would have happened ?QUESTIONMARK  Y less
than equal to x is it true or false less than or equal to in this case is y less than x ?QUESTIONMARK  No is y
equal to x ?QUESTIONMARK  No therefore ,COMMA  it will be false .PERIOD 
Y greater than or equal to x what would have happened ?QUESTIONMARK  Y is not greater than is greater x
not equal to x therefore ,COMMA  it immediately becomes true y is y equal to x in this case no .PERIOD  So ,COMMA 
it will return false y is not equal to x is it true or false it is true therefore ,COMMA  it will be one .PERIOD 
So ,COMMA  what we could have observed is we can form expressions using relational operators ,COMMA 
but these expressions only return the values true and false ok .PERIOD 
We will see that these relational operators if you recall in our flowchart discussions ,COMMA  we
often had some decision box is shown as rhombus and in that decision box we used to
say x greater than 10 or say .PERIOD 

We used to write something like N equal to 3 right yes or no right we have taken one
path for yes one path for no and that can be captured very easily using such relational
operators as we will see .PERIOD 

Now ,COMMA  here are some other examples or I have already given you enough examples 10
greater than 20 true or false ,COMMA  it is false 25 less than 35 .PERIOD 5 yes it is true ,COMMA  12 greater than 7
plus 5 now here if one of the operands is an expression that will search the evaluated .PERIOD  So ,COMMA 

the arithmetic operators and expressions have higher priority over relational operators
alright .PERIOD 
So ,COMMA  here what will happen 7 plus 5 will be first computed .PERIOD  So ,COMMA  that is 12 if 12 greater than
12 no .PERIOD  So ,COMMA  it is false .PERIOD  So ,COMMA  when arithmetic expressions are used ,COMMA  on either side of a
relational operator the arithmetic expressions will be evaluated first and the arithmetic
expressions will be evaluated in accordance with a precedence that we have already
defined .PERIOD  So ,COMMA  if there will be something like this a plus b greater than c minus d that is
equivalent to ,COMMA  first I will compute a plus then I will compute c plus d and then suppose a
plus b is 10 and c plus d is 17 ,COMMA  then this will lead to false first these will be computed
then the relational operator will be computed .PERIOD 

So ,COMMA  here is a quick look at an application of this ,COMMA  suppose I want to implement the
flowchart something like this ,COMMA  I have read x and y and I want to do x greater than y if so ,COMMA 
yes I will be say I will print x is larger otherwise I will print y is small otherwise I will
print y is larger yes .PERIOD  So ,COMMA  that sort of situation how will that translate into c language here
you see this part we have not discussed ,COMMA  but is very intuitive you can understand .PERIOD  If x is
greater than y ,COMMA  I print what is larger dash is larger then what will come here the value of
x .PERIOD  So ,COMMA  I will print say x is 10 and y is 15 n this is x and this is y then what will be printed
here ?QUESTIONMARK  10 is not greater than 15 .PERIOD  So ,COMMA  this part will not be executed will come to here

because x is not greater than y .PERIOD  So ,COMMA  we are taking no path ,COMMA  and we will print dash is larger
and in dash what will come the value of y that is 15 .PERIOD 
So ,COMMA  what will be printed is 15 is larger .PERIOD  So ,COMMA  that is how we can implement this sort of
decision box and when I have that the choice between path based of the decision ,COMMA  that is
being a condition is being computed using relational operators which this conditions are
telling me which path I will take if the is the situation true if .PERIOD  So ,COMMA  I will take this path
otherwise I will take this path this is known as these are (Refer Time: 30:06) of the
relational operators .PERIOD 

So ,COMMA  next class we will start with logical operators ,COMMA  today we have discussed about
arithmetic expression how arithmetic expressions are formed using arithmetic operators
and what are the very important thing that we discussed today is ,COMMA  you know in the earlier
lecture also lecture that what is the precedence till now ,COMMA  why what I have discussed is
that what is the precedence of the operators in an arithmetic expression and what is the
relational operators .PERIOD  And we have seen that relational operators have the lower priority
than arithmetic expressions .PERIOD  So ,COMMA  if I am either side of the relational operators the
arithmetic expressions those will be evaluated first ,COMMA  in accordance to the arithmetic
operation priority .PERIOD  Next we will come to another very important concept that is logical
operators .PERIOD 
Thanks .PERIOD 

In the last lecture we had talked about two different types of operators ,COMMA  relational
operator and arithmetic operators .PERIOD  Today we will be discussing about the third type of
operator which is known as a logical operator .PERIOD 
Logical operators are also known as logical connectives .PERIOD  So ,COMMA  there are two essentially
there are two logical operators in C ,COMMA  one is logical AND and the other one is a logical
OR .PERIOD  Now ,COMMA  what do they do ?QUESTIONMARK  They act upon the operands themselves which are logical
expressions .PERIOD  For example ,COMMA  let us say I am writing a logical expression temperature is
greater than 50 ,COMMA  now this will this statement suppose the temperature now is 40 degree
centigrade then temperature greater than 40 greater than 50 will result in false value ,COMMA 
because the relational operator will always generate either true or false .PERIOD  And suppose
there is another logical expression a times b plus c is greater than equal to 25 ,COMMA  now this is
another logical expression sorry this is another relational expression .PERIOD  On the left hand
side of this expression I have got an arithmetic expression and on the right hand side I
have got a constant and I am connecting them with a relational operator greater than

equal to .PERIOD  Now ,COMMA  if a times b plus c is greater than 25 or equal to 25 then this will result in
true .PERIOD 
Now ,COMMA  I can connect these two this one and this two together and write another expression
like temperature greater than 50 and a times b plus c is greater than equal to 25 .PERIOD  Now ,COMMA 
this expression is a combination of two relational expressions and a logical operator a
logical connective .PERIOD  This logical AND means that this entire thing expression will be true
or will result in a 1 if both of them are true .PERIOD  So ,COMMA  if the temperature is 40 then this will
become false or 0 and if this is 25 then this is true ,COMMA  but 0 and 1 both are not true therefore ,COMMA 
this 0 and 1 will result in 0 .PERIOD  But suppose if the temperature was 50 and a times b plus c is
equal to 25 or greater than 25 then this is true and also this is true in that case these two
together and because they are ANDed then this will be true .PERIOD 
So ,COMMA  the logical AND operator what it does is it turns a true value or 1 if all the
components of the expression logical expression connected by the AND operator ,COMMA  logical
AND operator is true .PERIOD 

Now ,COMMA  one thing you can note here that since this ampersand is a character and we have
already use this ampersand in expressions like AND scanf and we have discussed that
this AND actually means we are trying to get the address of a particular I am sorry I am
sorry absolutely sorry .PERIOD 

I actually what I write is scanf etcetera percentage d and velocity say where velocity is a
variable alright .PERIOD  So ,COMMA  this AND in that case you is used to mean the address of this
variable velocity .PERIOD 
So ,COMMA  in order to differentiate between this usage of AND and the logical operator logical
AND is denoted as two ampersands ,COMMA  two ANDs .PERIOD 

Similarly logical OR means that some expressions say ,COMMA  I have I write it in an abstract
way say expression 1 or expression 2 or expression 3 .PERIOD  Now ,COMMA  this composite expression

will be true if any one of them either expression 1 or expression 2 or expression 3 is true .PERIOD 
If any one of them is true then this entire thing will be true ,COMMA  if two of them are true then
also it will return true ,COMMA  if all the three are true then also it will be true ,COMMA  but if none of them
are true if none of them are true then it will not be true ,COMMA  then none of them will be true .PERIOD 
So ,COMMA  what is the difference between this logical OR and logical AND therefore ?QUESTIONMARK  In logical
AND if instead of this it was written like if ,COMMA  instead of this it was written like expression
1 and expression 2 and expression 3 this composite and expression would be true only if
all these three expressions are true alright .PERIOD  So ,COMMA  that is logical OR .PERIOD 
Now ,COMMA  what do they do ?QUESTIONMARK  They act up on the operands that are themselves logical
expressions why logical expressions where from did I get logical expressions I got the
logical expressions from relational operators .PERIOD 

For example ,COMMA  now I am writing some time is greater than 20 is a logical expression .PERIOD  What
is this ?QUESTIONMARK  This is a relational operator ,COMMA  but this expression is a logical expression .PERIOD  Why it is
a logical expression ?QUESTIONMARK  Because this will return only true or false nothing in between ,COMMA  so t
greater than 20 if t is time or whatever value t might be if that is greater than 20 then it
will return 1 or it will return 0 .PERIOD  So ,COMMA  the logical connectives or the logical operators they
are acting upon the operands themselves and connecting them .PERIOD  The individual logical
expressions get combined into a more complex condition that are either true or false .PERIOD  We
will see some examples .PERIOD 

So ,COMMA  logical AND the result is true if both the operands are true had or for two operands .PERIOD 
If a three operands if all the operands are true ,COMMA  it should be connected as if all operands
are true and logical OR the result is true if at least one of the operands are true ,COMMA  if at least
one this is most important .PERIOD 
So ,COMMA  let us look at the truth table here X and Y any of them can have the value false or
true .PERIOD  Accordingly we can have four combinations X false ,COMMA  Y false ,COMMA  X false ,COMMA  Y true ,COMMA  X true
Y false and both X and Y are true .PERIOD  Now ,COMMA  if I carry out the logical AND then for all these
cases say false false the result will be false ,COMMA  so 0 .PERIOD  False and one true still it will be false
because here I want all operands should be true .PERIOD  One is X is true Y is false the result will
be false if both of them are true the result will be true .PERIOD  While in the case of OR X or Y
will result in false if X is false and Y is false ,COMMA  but if X is false and Y is true will get a true
because I am interested in getting at least one to be true if this is true and this is false
then also true if both of them are true then also it is true .PERIOD 
So ,COMMA  I think it is clear to you what is meant by the logical operators and how we can
combine logical expressions based on that .PERIOD 

Now ,COMMA  we have seen three types of operations .PERIOD 

So ,COMMA  actually operators ,COMMA  one is the arithmetic operators ,COMMA  the next is relational operators and
the third one is logical operators .PERIOD  Now ,COMMA  arithmetic operations use of arithmetic operations
lead to arithmetic expressions .PERIOD  The use of relational operators lead to logical expressions
why logical expressions ,COMMA  they lead to true or false value right logical expressions and use
of logical operators will combine and get more complex logical expressions complex or
let me not write complex ,COMMA  let me write composite that communicates the meaning better

composite logical expressions ,COMMA  composite logical expressions .PERIOD  So ,COMMA  will see the use of this
pretty soon when we will be looking at the control operators right .PERIOD 
Next ,COMMA  just to wrap up the things let us come to the input output statements .PERIOD 

By the way besides this besides the arithmetic expressions ,COMMA  logical expressions we had
seen another type of expression those are assignment expressions or assignment
operators .PERIOD  By that means ,COMMA  the left hand side is an expression and right hand side is a
variable we assigned the result of the computation of the right hand sorry I just said the
opposite the right hand side is an expression on this side is an expression .PERIOD  Here on the
left side is a variable and we compute the expression and assign the value of that
computation to this variable and this is the assignment operator .PERIOD 

Now ,COMMA  besides that we have seen two other statements one is a printf statement we have
seen that performs the output to the standard output device typically when we declare s t
d i o dot h then by default it is taken as a screen .PERIOD  The other one and it requires a format
string in which we can specify the text we printed out and the specifications on how to
print the values like printf number is dash and that dash can be filled up by percentage d
for ;SEMICOLON  that means ,COMMA  the specification is that an integer can come here .PERIOD  And then you
remember what this means this means ,COMMA  I am going to the new line alright and then
followed by the number .PERIOD  The format specification causes the value listed to be embedded
here I have discussed that that you can consider this format to be a place holder alright ,COMMA 
the number is dash and how can this dash be filled out the dash since its percentage d
some integer value can come and fill it up right we have seen that .PERIOD 
The other statement that we saw is scanf that is for reading the values .PERIOD 

So ,COMMA  it performs input from standard in input device ,COMMA  normally by default it is a keyboard
and then it also requires a format string and list of variables like it is required to put an
ampersand before the names of the variables ,COMMA  we have also explained why that is so .PERIOD  The
reason is that this ampersand essentially means the address of that variable where the
value that is being read will be put .PERIOD 
So ,COMMA  here are some examples ,COMMA  scanf percentage d and size ;SEMICOLON  that means ,COMMA  what that I am
reading in a variable size ,COMMA  size is a name of a variable and in which I am putting in some
integer value alright .PERIOD  Similarly next char say is a say this one is a character variable .PERIOD  So ,COMMA  I
am specifying that only a character can come in here and that is why I have put in the
specification percentage C .PERIOD  Percentage f means some floating point number will come
here ,COMMA  but in all these cases this ampersand means the address of the corresponding
variables alright .PERIOD  Here percentage d ,COMMA  percentage d means sequentially I am going to read
two integer variables a and b .PERIOD  So ,COMMA  all these we have seen and you will be best learning
this by practicing it time and again and we will see a number of examples and in this
course there will be quite a few assignments which you will have to do .PERIOD 
Next ,COMMA  we will move to ,COMMA  next we will move to a new topic which is a control structures
and control statements .PERIOD  We have seen if we recall in a flowchart ,COMMA  let us go back to the
flowchart where we have got some computation statements where we are doing some
computations .PERIOD 

And we usually carry out one statement after another right that is how we do and in that
way we will go on till the end of the program .PERIOD  For example ,COMMA  read number one ,COMMA  read
number two etcetera divide add the numbers and divide the numbers to get the average .PERIOD 
So ,COMMA  when we computed the average it was something like this and at the end we did some
printf and in the meanwhile they were some reading the numbers these were some of
them were input some were computations right .PERIOD  But it was a complete sequential thing .PERIOD 

But if you recall the other type of ,COMMA  the other type of flowcharts that we had seen there we
had started we did some computation and then we took some decisions and based on the
decisions I have sometimes gone back to the earlier operation that earlier thing I had
done and otherwise I would have followed this path .PERIOD  Typically in the examples that I we
had sees we just see the pseudo code if I write say for computing the average of three
numbers I will be read num 1 ,COMMA  read num 2 ,COMMA  read num 3 and then sum equals to num 1
plus num 2 like that I add them and then I compute the average to be sum divided by 3
right .PERIOD  So ,COMMA  and then we print the sum print the average .PERIOD 
So ,COMMA  this entire thing is going in a sequence alright .PERIOD  Just one after another one after
another no change in the path .PERIOD 

But in this case for example when we try to if you recall when we are not writing the this
program in this form of pseudo code instead I initialise a count to be 3 ,COMMA  then read number
1 ,COMMA  sum and initially count here and say sum was 0 ,COMMA  assign 0 and then sum is let me just
make it make it just num I am reading one number and sum plus num and then count I
decrement .PERIOD  So ,COMMA  I may count to be count minus 1 because I have ,COMMA  one I have already read .PERIOD 
Now ,COMMA  I check if count is greater than 0 then what I do in my flowchart ,COMMA  I go back to
reading the number again .PERIOD  Otherwise ,COMMA  else I come to the computation of the average
right .PERIOD  Otherwise ,COMMA  if as long as count is greater than 0 I am continuously doing this thing
right this steps .PERIOD 

So ,COMMA  here at this point you check that I am looking at the value of count and depending on
the value of count I am deciding whether I will be going in this direction or I will go
back and change the direction of the flow .PERIOD  So that means ,COMMA  as if the at this point the
execution is undergoing a decision making to decide which part it will go through this
path or this path .PERIOD 
As if you are therefore ,COMMA  you are controlling the flow of the program either in this way or
you change the path ,COMMA  we will see that we can change the path in two different ways .PERIOD  One
is that sequentially I am coming and I may go ahead I can skip some of the operations
and I can go jump forward that is also a change of the path .PERIOD  This dotted line is showing
the normal sequential execution or could be that some here I can go back to another path .PERIOD 
So ,COMMA  these are two types of change of flow ,COMMA  change of flow that is that can be resulted in
and that can be resulted in using the control structure .PERIOD 
So ,COMMA  we will soon go into the details of the control structure and see how such control
structures or change of the sequential flow can be achieved in any programming will
exemplify as we are doing for all others examples using the constructs of C ,COMMA  but that does
not mean that it is restricted only to C .PERIOD  It can be ,COMMA  there are similar control constructs for
other languages as well .PERIOD  We will come to that in the next lecture .PERIOD 

In the last lecture ,COMMA  we had an idea of what control structures are .PERIOD  Control structures are
some language structures which by which we can change the flow of control which
normally is sequential that means ,COMMA  one executed after another .PERIOD 
Now ,COMMA  in the language we just as we have statements arithmetic expressions logical
expressions all those are statements ,COMMA  in our language c language we also have some
control statements for achieving the control structures .PERIOD 

What they do ?QUESTIONMARK  As I have said allow different sets of instructions to be executed
depending on the outcome of a logical test .PERIOD  So ,COMMA  if we go back to the flowchart ,COMMA  we are
coming in a sequential flow ,COMMA  at this point we encounter decision point and at this decision
point we carry out some logical tests for example ,COMMA  is x greater than 0 yes or no .PERIOD  If it be
yes there will be some flow and if it be no there will be some other flow all right some of
not necessarily backward it can go somewhere else etcetera all right .PERIOD  So ,COMMA  based on the
logical test ;SEMICOLON  that means this test which will result in a logical value and what are the
logical values ?QUESTIONMARK  Logical values are either 0 and 1 either true or false .PERIOD 

So ,COMMA  whether true or false that is a ;SEMICOLON  this is called branching .PERIOD  So ,COMMA  again whenever I am
coming to a decision box and from there I am branching out ,COMMA  either in this direction or in
some other direction all right .PERIOD  So ,COMMA  this is a branching branch point .PERIOD  So ,COMMA  that is change of
the control flow .PERIOD 

Some applications they also require that a set of instructions be executed repeatedly ,COMMA  they
will be going they will be executing as in the case reading the numbers c numbers .PERIOD  I will
be repeating reading a number adding that with some I mean decrementing count

checking whether count is equal to 0 ,COMMA  and then again go back and read the number and
this slope will continue based on some condition .PERIOD  How long in the earlier example how
long I will where we doing that based on what condition ?QUESTIONMARK  The condition was whether
count is 0 or not .PERIOD  As long as the count is not zero we are going on doing this .PERIOD  So ,COMMA  this is
also known as looping doing the same repeatedly ,COMMA  this is also known as looping .PERIOD  So ,COMMA 
branching or if we go back to the earlier one then it is called a loop .PERIOD 

Now ,COMMA  do we specify the conditions ?QUESTIONMARK  By now I am sure you have get how we do that .PERIOD  We
specify the conditions using relational operators or there are four relational operators you
have seen ;SEMICOLON  less than ,COMMA  less than equal to ,COMMA  greater than ,COMMA  greater than equal to .PERIOD  I have said not
equal to also ,COMMA  but not equal to can also be seen as the negation of the equality operator .PERIOD 
The equality operator is this double equal to sign and not equal to is exclamation mark
for the equal to now .PERIOD  So ,COMMA  using this relational operators ,COMMA  we will get using one single any
of these one single relational operator ,COMMA  we will get one logical expression and using
logical operators and connectives ,COMMA  we will be able to connect a number of logical
operations logical expressions and logical another logical expression .PERIOD  In that way we can
carry out we can generate the condition using this .PERIOD 

Now ,COMMA  two logical operators we have seen and or .PERIOD  Another unary negation operator we did
not discuss earlier ,COMMA  but we are doing it now that is this means not all right .PERIOD  For example ,COMMA 
suppose x is 5 and at some point I compute x greater than 5 ,COMMA  the result of this logical
expression will be false right this is false ,COMMA  but if I take the negative of this then this false
will be negated and the negation of that will be taken .PERIOD  So ,COMMA  that will be one two ;SEMICOLON  that
means ,COMMA  what is the meaning of this ,COMMA  is it the case I can read it in this way ,COMMA  is it the case
that x is greater than 5 is false is not true yes that statement is true .PERIOD  I can state it in
another way is it the case that x is not greater than 5 ?QUESTIONMARK  Yes that is the case again I tell the
first one that is more complicated is it the case that the statement is greater than 5 is not
true that statement is true ?QUESTIONMARK  That it is not true is true .PERIOD  So ,COMMA  that is not means whatever
logical expression I have after this that will be negated .PERIOD  So ,COMMA  it is equivalent to not of the
logical expression .PERIOD 
So ,COMMA  if this logical expression if this logical expression leads to this logical expression is
only 1 ,COMMA  then not of that will invert it and make it 0 or if this logical expression was 0 then
this not of this will make it 1 .PERIOD  So ,COMMA  this is the unary negation operation all right .PERIOD 

Let us see some examples count less than equal to 0 this is the logical expression it will
be either true or false maths plus physics ;SEMICOLON  that means ,COMMA  here maths is the marks obtained
by a student in maths plus physics ,COMMA  plus chemistry divided by 3 is greater than or equal to
60 that means ,COMMA  the average of these 3 marks is greater than or equal to 60 .PERIOD 
Either the person the sex of that person is male sorry and let us look at this if I am using
a logical connective the person this will be true if the person is a male and he age is
greater than or equal to 21 .PERIOD  So ,COMMA  for a female of age 22 this will be false ,COMMA  for a male age 20
it will be false .PERIOD  A male age 25 it will true .PERIOD  Here again another one with this connective
marks is greater than 80 and marks is less than 90 sorry marks is greater than equal to 80
and marks is less than 90 ;SEMICOLON  that means ,COMMA  what anything starting from 80 to 89 ,COMMA  if the marks
is between this then this will be true .PERIOD  .PERIOD 

Another one with an or operator balance is greater than 5000 or the number of
transaction is greater than 25 say in a bank see situation for example ,COMMA  you are making a
lot of transactions what is the transaction when you deposit a money that is a transaction ,COMMA 
when you withdraw the money that is also a transaction .PERIOD  So ,COMMA  there are different
transactions .PERIOD  So ,COMMA  what we are saying here either I have got 5000 rupees greater than sorry
greater than 5000 rupees in my balance or I have done more than 25 transactions .PERIOD  If any
one of them true suppose you have got 6000 rupees in your balance and number of
transactions is 26 ,COMMA  then also this is true .PERIOD  If the balance is 6000 and number of transactions
you have done is only 20 then also it is true ,COMMA  we have already explained the role of or
operator earlier ok .PERIOD 
Now ,COMMA  this if the grade of the student is a if a student has got grade a what will be the
value of this logical expression true or false if the student has actually got the a grade all
right .PERIOD  So ,COMMA  this one this part will be true ,COMMA  but my actual logical expression is this one
which is a negation of that .PERIOD  So ,COMMA  it will be false because the person has grade a what does
it means ?QUESTIONMARK  It means that is it the case that the student has not got grade a .PERIOD 

Here is another little more complicated x greater than 20 and y less than 16 ,COMMA  but the way
we should evaluate this is ,COMMA  I will evaluate each of them separately suppose x is greater
than 20 suppose 21 .PERIOD  So ,COMMA  this is true and y is 15 .PERIOD  So ,COMMA  this is true .PERIOD  So ,COMMA  both these together is
true then I take this one with this and so ,COMMA  the result will become false let me clear it again
suppose x is 21 .PERIOD  So ,COMMA  this part is true then I compute this y is 17 ,COMMA  this part is false
therefore ,COMMA  these two are connected by this ampersand ;SEMICOLON  that means ,COMMA  logics are not I a m
sorry very sorry it should it is not ampersand double and ;SEMICOLON  that means ,COMMA  and operator by
logical and .PERIOD  So ,COMMA  these two will result in though the logical and it will result in 0 ,COMMA  but my
actual expression is the negation of that .PERIOD  So ,COMMA  the result will be 1 clear .PERIOD 

So ,COMMA  that is how we carry these are the examples of evaluation of logical expressions and
logical expressions .PERIOD  So ,COMMA  each of them each of these logical expressions can serve as a
condition in our control structure in our this loop in our this diamond box ,COMMA  decision box
where we test or let us call it the test box in that any of these sort of logical expressions
can reside and the result of that can be either 0 or non-zero false or true ok .PERIOD 
Accordingly we will branch out in either this direction or in some other direction .PERIOD 

So ,COMMA  0 indicates false and non 0 indicates true typically the true is reprinted by the value
one in most of the machines .PERIOD 

This is something that we have already seen ,COMMA  the decision symbol in the flowchart
indicates the decision to be made it contains an expression that can be true or false ,COMMA  test
the condition and follow the appropriate path that is how we will do is a single entry
single exit structure ;SEMICOLON  that means in this diamond box we will enter through any one point
and we will exit from only one point either this or this ,COMMA  simultaneously we cannot come
out of this because the thing cannot be true or false at the same time therefore ,COMMA  any one
exit will take .PERIOD 

The general syntax ,COMMA  syntax means what ?QUESTIONMARK  Syntax means the grammar ;SEMICOLON  the exact
grammatical structure that we should write is if condition then I carry out some
operations .PERIOD  You have seen in an earlier lecture when we were comparing two numbers x
and y and would be printing x is large is x is greater than y then what did we write we
wrote something like this ,COMMA  we wrote if x is greater than equal to y ,COMMA  print f what we printed
y x is greater than equal to y ,COMMA  x is large or not in this form we wrote down that x is large
here all right .PERIOD  So ,COMMA  if this condition is true then I will be doing this print operation ,COMMA  x is
large then black slash end I am not being able to write very clearly here .PERIOD 

So ,COMMA  I try again if x is greater than y or greater than equal to y .PERIOD  So ,COMMA  this is the condition
you see this is this is the reserved word in c end the condition .PERIOD  If the condition is true
then this is followed by a statement .PERIOD  Now if it be a single statement I do not need to give
this curly bracket ,COMMA  but just I am giving it just to keep the parity ,COMMA  here I write print f x is
large then black slash end right and we end this statement ok .PERIOD 
So ,COMMA  if this condition is true ,COMMA  then this statement will be executed that is my syntax
otherwise some other statement will be executed .PERIOD  Now this is something which takes
some times to settle down .PERIOD  So ,COMMA  we will explain it repeatedly to some extent .PERIOD 

If there is a single statement in the block this braces can be omitted I am sorry this braces
can be omitted .PERIOD 

Now ,COMMA  let us come to this structure .PERIOD  If statement first of all we are looking at the first and
very important control statement in c that is the if statement ,COMMA  if some condition .PERIOD  So ,COMMA  we
come here the structure is we carry out some tests on some condition grade is greater
than equal to 60 if it is true ,COMMA  then we do something I print past otherwise I would write
something else .PERIOD  So ,COMMA  this is a selection structure what is it selecting ?QUESTIONMARK  It is selecting which
path should I go all right .PERIOD 
Now ,COMMA  you see here we have come we are coming to this path ,COMMA  if this here I carried out a
test if this test is true I do this do this execute this statement ,COMMA  and come back and continue
not come back and then continue to this part .PERIOD  If this statement is not true ;SEMICOLON  that means ,COMMA  if
this test fails then I will not take this I will not select this path ,COMMA  I will continue in the path
which in which I was going right .PERIOD  So ,COMMA  that is why this is often known as a selection
structure .PERIOD 

So ,COMMA  a decision can be made on any expression .PERIOD  Here you see only thing that we are trying
to do is test whether some condition is true or false .PERIOD  Now we if the result of an
expression is 0 then we take it to be false and if it be non 0 then we will take it to be true .PERIOD 
If I evaluate something to be true like say for example ,COMMA  if x was 5 and I carry out x is x
equal to 5 ,COMMA  this logical expression we will evaluate to true ;SEMICOLON  that means 1 that means ,COMMA  it is
non zero .PERIOD 
If I had written x less than 5 then it would have resulted in false it would be 0 .PERIOD  Now
suppose I simply do something different I write in this decision box I am coming like
this .PERIOD 

And inside the decision box I write and x was 6 say I do not write a logical expression
here I write an arithmetic expression x or let me x was 5 ,COMMA  I carry out some expression x
plus 5 .PERIOD 

What will be the result of this expression be ?QUESTIONMARK  It will be ten that is it is non 0 then also it
will be taken as true although we will we do not need it all the time you need not bother
about it ,COMMA  but in general a decision can be made on any expression .PERIOD  Typically and most
conveniently we will be using logical expressions ,COMMA  but if I carry out an arithmetic

expression something a times b plus c minus d ,COMMA  then also this will give me a value and
this value gives 0 means it is false and not 0 then it will be taken as true however ,COMMA  this is
just a matter of detail you need not get too much bothered about it right now ,COMMA  we will try
to keep as much as possible relational expressions or logical expressions inside this text
blocks .PERIOD 

So ,COMMA  here if grade is greater than or equal to 60 being passed 10 ;SEMICOLON  that means ,COMMA  this is the
equivalent of this structure that we have shown here .PERIOD  This flowchart can be simply
written as this statement I think probably you will be able to read it now ,COMMA  if has been
given in a different colour because this is what we have introduced here this if is a use of
if the selection structure followed by a condition if the condition is true then this
statement will be executed .PERIOD 
If the condition is false ,COMMA  then this statement will not be executed we will bypass this
statement .PERIOD  Now please remember this ,COMMA  when I write if some conditions some statements
this statements will be executed only if this condition is true ,COMMA  I write it in a different way
now .PERIOD 

Say for example ,COMMA  I have a got a number of statements ,COMMA  some statements are there and then
here there is an if statement .PERIOD  If condition then some statements here may be more than
one statements are in a brace .PERIOD  Now if the condition and after that there are other
statements .PERIOD 
Now ,COMMA  if the condition is true ,COMMA  then only these statements will be executed lets name this
statements to be a then this block a will be executed this block will be executed .PERIOD  If this
condition is false then this block A will be bypassed and on false I will come here and
come to so ,COMMA  this block b .PERIOD  So ,COMMA  if the condition is false then the block B will be executed ,COMMA  if
the condition is true then this block A will be executed all right .PERIOD 
Now ,COMMA  suppose let me explain it in a little different way I am drawing another diagram .PERIOD 

Now ,COMMA  here is some block of statements ,COMMA  let us call the block of statements to be a and
then I have one statement ,COMMA  if condition n whatever the condition is ,COMMA  then within
parentheses there is a block of statements B .PERIOD  And then there is a block of statements C .PERIOD 
So ,COMMA  the 6 flow of I mean the flow will be that first A will be executed then if the
condition is true ,COMMA  then if the condition is true then B will be executed after that what will
happen ?QUESTIONMARK  After that again we will come here and C will be executed .PERIOD 
Now ,COMMA  if the condition were false condition were false ,COMMA  I just computed a after that what
would have computed condition will be checked B will not be evaluated not be executed
because condition is false after that C will be executed .PERIOD  So ,COMMA  please note that in this
structure I am computing I am executing C either way ,COMMA  now the choice of whether b is
being done or not is dependent on the condition .PERIOD  So ,COMMA  this gives you an idea of procedure
if the condition is false then also this part will be executed .PERIOD  So ,COMMA  here we will conclude
today with this example ,COMMA  small example program lets try to understand each line of them .PERIOD 

We start with include s t d i o dot h I hope you have not forgotten that any c program
must have a main program main function and here is the main function .PERIOD  Inside the body
of the main function what is being done I have declared what is being done here ,COMMA  I have
declared 3 variables a b and c .PERIOD  Then what am I doing here observe this line scan f
percentage d percentage d percentage d and a and b and c .PERIOD  So ,COMMA  I am needing 3 variables a
b c ok .PERIOD 
Now ,COMMA  what am I doing here ,COMMA  I am evaluating an if condition if a is greater than equal to b
and a is greater than c .PERIOD  So ,COMMA  you understand that if a is a number b is a number c is a
number a is greater than b and a is also greater than c ;SEMICOLON  that means ,COMMA  a is the largest
number .PERIOD  So ,COMMA  then I change this ,COMMA  I change this only if this condition is true otherwise I will
do something else .PERIOD  Now suppose a is greater than b suppose a is 20 ,COMMA  b is 10 and c is 5 .PERIOD 
So ,COMMA  this one will be true then the largest number is a that we printed ,COMMA  next statement will
come to is another if statement .PERIOD 
What is being done here ?QUESTIONMARK  If b is greater than equal to a and b is greater than or equal to c
b is not greater than equal or to a therefore ,COMMA  this does not evaluate it to be true therefore ,COMMA 
this statement it does not execute .PERIOD  Next I come to this statement I am showing this I am
following this flow ,COMMA  but only branch that I took is if this condition was true ,COMMA  then I printed
this in this particular case of data in this case of data for some other case should be very

different now if c is greater than a not true .PERIOD  So ,COMMA  this is false this will not be executed .PERIOD  So ,COMMA 
the only thing that we printed is a largest number is a .PERIOD 

Now ,COMMA  if for example ,COMMA  a was 10 ,COMMA  b was 20 and c was 5 then what would have happened let
us see here a is greater than or equal to b I try to test this fail .PERIOD  So ,COMMA  this will not be
executed .PERIOD  So ,COMMA  I come here right and then I test this b is greater than a right and b is
greater than c that is also right .PERIOD  So ,COMMA  this condition passes .PERIOD 
So ,COMMA  then I execute this I print larger number is b .PERIOD  I print that and then I come to the next
statement what happens in this statement ?QUESTIONMARK  C is greater than or equal to a false .PERIOD  So ,COMMA  the
only thing that is printed is the largest number is b all right .PERIOD  So ,COMMA  we stop here we will
continue our explanations in the next lecture further ,COMMA  we will have we will need to
discuss it and also try it a little bit more ,COMMA  because from this point onwards our logic and
logical constructs are becoming started becoming just a little more complicated ,COMMA  but is
very interesting and it is very easy to understand ,COMMA  if you just try to think about it
logically .PERIOD 
Thank you very much .PERIOD 

We are looking at the IF selection structure where the structure was something like if
some condition and then there were some statements ,COMMA  and here is an example of what we
are looking at .PERIOD 

So ,COMMA  here you can see that if a is greater than b and also greater than c here is a logical
connective .PERIOD  So ,COMMA  then this statement will be executed .PERIOD  So ,COMMA  in English we can just call it
like if the condition is true then if the condition is true ,COMMA  then execute a set of statements .PERIOD 
So ,COMMA  in this case the set of statements is just only this printf .PERIOD  Otherwise if this condition is
true then this statement will be printed .PERIOD  So ,COMMA  this is what we discussed in the last class .PERIOD 
Now ,COMMA  one thing for those who will be writing programs in C you should remember that
this condition is always within a parentheses and within that parentheses there can be a
composite expression which is here you can see there is a logical expression ,COMMA  here is
another logical expression and here is a composite logical expression joining them by
AND or it could be by OR etcetera .PERIOD  So ,COMMA  in that way we can form the condition statement

and if the condition statement is true then these things will be executed .PERIOD  We will see
more examples as we go ahead .PERIOD 
So ,COMMA  let us look at a little more different ,COMMA  a little more extensions of the structure .PERIOD 

Here we are going to see the if-else structure what we actually want to mean is if a
condition is true then will be doing these things and if the condition is false then I will do
these things .PERIOD  Let me clarify it a little bit more .PERIOD 

Suppose I write if x is greater than 5 increment x by 1 and printf “new value of x is
percentage d back slash n x” alright .PERIOD  That means ,COMMA  if x is greater than 5 suppose x is an
integer I am assuming that x is an integer here .PERIOD  So ,COMMA  somehow somewhere up here I have
written int x equal to for int x just int x and later on I have assigned x to be 7 alright .PERIOD 
Now ,COMMA  when I encounter this condition this condition always true then I come to this set of
statements because this condition is true .PERIOD  So ,COMMA  what will be the value of x now ?QUESTIONMARK  x was 7 it
is greater than 5 therefore ,COMMA  x will be 8 and what will be printed new value of x is 8 that is
what will be printed .PERIOD  Now ,COMMA  suppose I write printf x not greater than 5 .PERIOD  What I intent to do
is if this condition is true then this will be printed otherwise this will be printed that is
what my intention is ,COMMA  that is what I want to do .PERIOD  But the way I have written it will actually
do something different .PERIOD  You see when the execution will be done you know the
execution is normally done in a sequential manner .PERIOD  So ,COMMA  here we will come x is greater
than 5 ,COMMA  x is 7 ,COMMA  so x is greater than 5 this thing will you printed and will come out and
come to this next statement .PERIOD  Let me number these statements say this statement was 1 ,COMMA 
this was 2 ,COMMA  this was 3 .PERIOD  Now ,COMMA  see I am calling this entire if statement to be a single
statement ;SEMICOLON  so 3 and then 4 .PERIOD 
So ,COMMA  normally 1 will be executed ,COMMA  then 2 then 3 now 3 will be executed because x is
greater than 5 .PERIOD  So ,COMMA  this condition is true and then what will be executed 4 .PERIOD  So ,COMMA  what will
be the output what will be written ?QUESTIONMARK  Here new value of x is 8 will be printed and here
when it 4 is executed again you printed x is not ,COMMA  x not greater than 5 ,COMMA  but that was not my
intention .PERIOD  So ,COMMA  in order to avoid that I can write a new statement here there was an if ,COMMA  if I
write here else this .PERIOD  That means what ?QUESTIONMARK  If this condition is true then print this otherwise ;SEMICOLON 
that means ,COMMA  if this condition is false then do this and then number 5 can be something
else and that will be executed .PERIOD  So ,COMMA  what will be the execution ?QUESTIONMARK  Suppose x is equal to 4 ,COMMA 
let us try to write down what is execution sequence then 1 ,COMMA  then 2 .PERIOD 
Now ,COMMA  x is equal to 4 therefore ,COMMA  this condition will be false this condition will be false
therefore ,COMMA  this statement 3 will not be executed ,COMMA  this part of 3 will not be executed then
we will come to this else statement ;SEMICOLON  that means ,COMMA  if the condition is false then I am coming
over here .PERIOD  And so 4 will be executed 4 will be executed ,COMMA  3 will not be executed
completely and then 5 will be executed .PERIOD 

But if I had not put this else then what would have happened in this case if x is 4 ,COMMA  in that
case this will not be this will not be true only this statement will be printed fine there will
not be much problem ,COMMA  but suppose x is equal to 7 .PERIOD  And if this else is not there then what
will you print it x is 8 x not greater than 5 .PERIOD  But if I put the else here if I put the else here I
am fairly repeating a little bit more because you lot of students face difficulty in this
structure .PERIOD  So ,COMMA  if I put else here in that case this will be x is 7 .PERIOD  So ,COMMA  this will be printed and
at this else this condition was true .PERIOD  So ,COMMA  this is this part will not be executed ,COMMA  this part will
be executed only if the condition was false .PERIOD  So ,COMMA  this contradictory situation would not
occur alright .PERIOD 

So ,COMMA  let us look at some examples of this if statement if-else .PERIOD  It is also a single entry single
exit structure it allows us to specify to alternate blocks of statement one of which ,COMMA  one of
the which is executed any one of them depending on the outcome of the condition .PERIOD 

Essentially what we are trying to say is that I will have a single entry point to a decision
box and I will check for some condition I will test that particular condition if that
condition is true then true then I will do some state set of statements let us call that S 1 ,COMMA 
otherwise if it is false then I will carry out some S 2 alright and then I will be meeting
may be at some other point which is S 3 .PERIOD 
So ,COMMA  this structure I can write as if condition then I do I have name I am not writing the
statements I am just writing S 1 else S 2 and then S 3 .PERIOD  So ,COMMA  my flow will be either this way
and S 3 or this way and S 3 .PERIOD  If I had not put this else how would this diagram look like ?QUESTIONMARK 
You have seen this diagram ,COMMA  now if I had not put this else how would the diagram look
like .PERIOD  The diagram would look like if here I have got the condition block decision box true
then I do S 1 and then I do S 2 and S 3 .PERIOD  So ,COMMA  will come at this point if it false then I will
also come at this point if it is true then also I will join at this point if this else was not
there .PERIOD  But since this else is there then I just separate the out their point of joining alright
will see more examples of this .PERIOD 

So ,COMMA  the general syntax of this is if condition then block on1 ,COMMA e block 1 is what I was
calling S 1 the set of statements else block 2 the other statements alright .PERIOD  If a block
contains a single statement then the braces can be deleted I am sorry if the block contains
a single statement then this a start essential that I put them ,COMMA  but just for the sake of
generality in most of the cases I will have more than one statement therefore ,COMMA  I am
putting that in place alright .PERIOD 

So ,COMMA  the diagram that I was looking at I was explaining that sort of diagram .PERIOD  Suppose the
grade is 60 ,COMMA  if the grade is greater than equal to 60 suppose somebody’s grade is or marks
is 50 then at this point the condition is false this part will be executed ,COMMA  if the grade is 70
that is this condition is true this part will be executed .PERIOD  Then I will come to this common
point ,COMMA  this is a common point which will come .PERIOD 
So ,COMMA  this I can write as if grade is 60 see here there is only one statement .PERIOD  So ,COMMA  I did not
need not put the I have not put the braces here print sorry printf passed else printf failed
and then whatever I had to do I will do it here and then whatever was following that will
follow here .PERIOD  So ,COMMA  let us come to .PERIOD  So ,COMMA  I hope this is clear .PERIOD 

So ,COMMA  the syntax of if-else let us look at little bit more here I have said block 1 ,COMMA  block 1
means or S 1 whatever you name it .PERIOD  This is block 1 or I had name it as S 1 the same set
of statements where their number of statements each separated by a semicolon .PERIOD  Please
note suppose there n statements here separated by a semicolon .PERIOD 

Now ,COMMA  next I come to this if I want to do else also if expression statements 1 to n ,COMMA  else
state these statements 1 to m .PERIOD  So ,COMMA  this is my block 2 and this is block 1 .PERIOD  So ,COMMA  here we can
see that based on this expression which is a condition evaluation if this condition is true I
will carry out these statements else I carry out these statements .PERIOD  Note that this individual
statements have got semicolon and this is a whole body of the else statement this is the
whole body of the if statement .PERIOD  So ,COMMA  composite if this entire thing we call an if-else
structure .PERIOD 

So ,COMMA  if grade is 60 printf passed else print failed .PERIOD 
Now ,COMMA  this next we are coming to a little more complication of the same thing it is the
next thing of if-else structure .PERIOD 

Now ,COMMA  why this if-else what are we trying to achieve we are achieving branching .PERIOD  That
means ,COMMA  we are carrying out a sequential flow we are carrying out a sequential flow and
from there we make a decision box and then we branched either in this direction or in
this direction .PERIOD 
Now ,COMMA  suppose here in this direction it is true and this is false again I come and make a
decision .PERIOD  It can be ,COMMA  if x is greater than 5 then I come here and y is greater than 7 then I do
something here it can be x is greater than 5 I follow this path ,COMMA  but y is not greater than 7 .PERIOD 
So ,COMMA  I follow this is true this is false I follow this false path .PERIOD  If x is not greater than 5 I
come here and suppose I check z less than 2 true or false there can be 2 outcomes .PERIOD  So ,COMMA 
suppose x is 4 ,COMMA  not greater than 5 I will come through this path ,COMMA  now z is 3 ,COMMA  z is not
greater than 2 ,COMMA  less than 2 therefore ,COMMA  I will follow this path .PERIOD  So ,COMMA  you see the path that we
follow that is a branching that we do can have the path that we follow can have more
than one decision box say x is greater than x is 7 .PERIOD  So ,COMMA  here I was coming in this path then
I follow this path because x is 7 this condition is true and I find that y is 8 so I follow this
path alright ,COMMA  if y was 6 then I would have followed this path .PERIOD 

So ,COMMA  in the path that the program follows there can be more than 1 decision box .PERIOD  So ,COMMA  that is
what we mean by nesting of if-else structures .PERIOD 

That means nest one if-else statement within another .PERIOD  Now ,COMMA  all statements may not have
the else part .PERIOD  Now ,COMMA  rule to be remembered is an else clause is associated with the closest
preceding unmatched if really confusing what do I mean by this .PERIOD 
Let us look at this how will this be executed .PERIOD 

Here e1 means some expression ,COMMA  if e1 is true then s1 else if e2 then s2 .PERIOD  Now ,COMMA  with whom
does this else go ?QUESTIONMARK  This else certainly goes with this preceding if .PERIOD  If I just quickly draw
this that flowchart corresponding to this how does it look like ?QUESTIONMARK  I come here and x
evaluation ,COMMA  evaluate the expression e1 on true I do s1 ,COMMA  on true I do s1 ,COMMA  on false here is
false alright I come here and there is another if here .PERIOD  So ,COMMA  I again check e2 ,COMMA  if e2 is true
then I do s2 .PERIOD  This statement actually means this graph .PERIOD  If e1 is true then I will carry out
s1 otherwise else is there .PERIOD  So ,COMMA  this else is linked to this if then I do this one .PERIOD 
What about this ?QUESTIONMARK  Let us erase this for a while and how would we interpret this one .PERIOD  Here
you can see the two elses .PERIOD  With whom is this else paired ?QUESTIONMARK  This else is paired with I have
written it in a bad way ,COMMA  this else is paired with this if .PERIOD 

So ,COMMA  this means again I check e1 ,COMMA  e1 is true so I carry out s1 else false ;SEMICOLON  that means ,COMMA  this
else is for this decision box I check here e2 ,COMMA  e2 is true so I carry out s2 and else I carry
out s3 this is what I am trying to do .PERIOD 
Now ,COMMA  here I would have preferred to write it in a better way .PERIOD  That is why if you recall in
a earlier lecture we had talked about a good program writing practice that is indentation .PERIOD 

I would have like to write it in this way if e1 then s1 else if e2 then s2else s3 which
makes a very clear that this else is corresponding to this if and this if this else is
corresponding to this if right .PERIOD 
Let us look at the third scenario what does it mean .PERIOD  If e1 if e2 s1 how would I draw that ?QUESTIONMARK 

I draw that like that I take e1 if e1 ;SEMICOLON  that means ,COMMA  if e1 is true I immediately come here and
the statement starts with another if .PERIOD  A nested if ,COMMA  this is known as the nested if one if

within another there is one if statement there is another if statement within this ,COMMA  this is
knows as nesting alright .PERIOD 
So ,COMMA  here sorry over here if e2 s1 .PERIOD  So ,COMMA  immediately I am there is no else here by the way .PERIOD 
So ,COMMA  if e1 then I come here then if statement is again there therefore ,COMMA  there is another
decision box where I am checking the condition e2 and if e2 is true then I will follow
then I will carry out s1 else s2 ,COMMA  which else should it be here or there .PERIOD  Now ,COMMA  this is
something this else is pairing with a preceding if ,COMMA  so it should be false will be s2 .PERIOD  Now
this else is therefore ,COMMA  covered this path is covered .PERIOD  So ,COMMA  this else can only mean this one
and s3 will be because this is already covered right .PERIOD  So ,COMMA  this is the nearest one to this
clear .PERIOD  So ,COMMA  if we go to the earlier slide .PERIOD  Let me go back to the presentation .PERIOD 

So ,COMMA  here this one how would this one actually look like ?QUESTIONMARK  How will this one look like ?QUESTIONMARK 
There is something still there .PERIOD  So ,COMMA  how will this one look like ;SEMICOLON  coming straight here if e1
if the condition is met then I again test here if e2 this is true this is true then I come and
do it here s1 and else this else is again with this if .PERIOD  So ,COMMA  it will be here s2 and I have not
specified this one here alright .PERIOD 
So ,COMMA  if you put a little bit of mind here .PERIOD  So ,COMMA  you can see many different other scenarios that
can come and we can proceed accordingly .PERIOD 

Let us see here .PERIOD  This one as I was saying it will be nicer to write it in this way because
here you may feel there two elses two if who goes with whom .PERIOD  Now ,COMMA  here if I write it in
this way if e1 s1 else ;SEMICOLON  that means ,COMMA  this if-else else if e2 s2 .PERIOD  Here if e1 s1 else if e2 s2 else
s3 .PERIOD  So ,COMMA  this else is therefore ,COMMA  with I am sorry I think I will have to go back to a couple of
slides you see and else clause I would like to be corrected a little bit and else clause is
associated with the closest preceding unmatched if ,COMMA  any if that is not there that should be
it should match with that .PERIOD  So ,COMMA  that is what I explained in these examples .PERIOD 
So ,COMMA  it is a much better for example ,COMMA  just look at this how would I like to like write this .PERIOD  If
e1 I would not prefer this also ,COMMA  I would prefer that I write it in this way .PERIOD  If e1 then if e2
s1 else s2 that becomes very clear this if-else and else are very clear .PERIOD  Say for example ,COMMA 
here also this is better ,COMMA  but still I would prefer to write this one as this one ,COMMA  this is one
way I can write if e1 if then I mean this is the part of if ,COMMA  if e2 s1 else s2 and under this if
that is what is been done here else s3 .PERIOD 

So ,COMMA  what we have learnt today is a nesting of another structure .PERIOD  What we are discussing
now is how we can have a better or more versatile flow .PERIOD 

Normally it is the sequential flow ,COMMA  but based on the decision points I may have to take
different paths which is known as branching right and for branching or selecting the
proper path the structure is if .PERIOD  Along with that we have learnt today if-else structure and
we have seen how if-else structure can be nested to give rise to some better more
versatile scenarios .PERIOD  We will continue with this in the next lecture .PERIOD 

Thank you .PERIOD 

Welcome .PERIOD  In the last lecture we had looked at the nested if-else structure .PERIOD  Today we will
continue with that discussion .PERIOD 

So ,COMMA  here is an example that uses the nested if-else structure .PERIOD  Here you can see again let us
come to the programming fundamentals in C ,COMMA  we have got just for revision we start with
an include stdio dot h and then we have got the main function .PERIOD  Inside the main function
we declare 3 variables a ,COMMA  b and c and probably you might have guessed now that we are
again trying to find out our ,COMMA  I mean the maximum of the 3 integers a b and c .PERIOD 
So ,COMMA  what are we doing next ?QUESTIONMARK  We are first reading the 3 numbers from the keyboard right ,COMMA 
scanf ,COMMA  percentage d ,COMMA  percentage d ,COMMA  percentage d ,COMMA  then a ,COMMA  b and c preceded with an
ampersand and you know why this ampersand is used that is the address of the location a
b and c .PERIOD 
Now ,COMMA  comes the main logic here if a is greater than or equal to b ,COMMA  a is 25 b is 20 .PERIOD  So ,COMMA  if a
is greater than equal to b then I check whether a is greater than c .PERIOD  So ,COMMA  this is passed then I
check this .PERIOD  So ,COMMA  if a is greater than b then I proceed to do if a is greater than equal to c if
that is also true ,COMMA  then we print the largest number is a ;SEMICOLON  otherwise what we do not know as
yet .PERIOD 

So ,COMMA  if a is greater than b ,COMMA  a is 25 ,COMMA  b is 20 ,COMMA  c is 15 in that case a is greater .PERIOD  Let us suppose c
is thirty then what happens a is greater than b true then I come and compare a is greater
than c this part ,COMMA  no false .PERIOD  Therefore this else is with respect to this nearest if that we
learnt in the earlier lecture .PERIOD  So ,COMMA  if this fails then we print the largest number is c because
a was greater than b ,COMMA  but a is not greater than c therefore ,COMMA  c must be the largest .PERIOD 

Now ,COMMA  if a is not greater than b .PERIOD  Suppose a is 20 and b is 25 ,COMMA  then a greater than b this
fails ,COMMA  this fails then I am not entering this block at all I am straightway going to this else
then I am checking a is not greater than b ,COMMA  but therefore ,COMMA  b is must be greater than or
equal to a or not even equal to b must be greater ,COMMA  greater than a then I check if b is
greater than c suppose b is greater than c then the largest number is b otherwise if that is
not .PERIOD  So ,COMMA  b is not greater than c suppose c was thirty then this else will come because this
if we will fail therefore ,COMMA  I will print gain the largest number is c .PERIOD 

So ,COMMA  I would suggest you to work it out yourself and I can also write the same thing .PERIOD  If
you consider that this if a is greater than b then if a is greater than equal to c ,COMMA  tell me if I
write it in this way if a is greater than equal to c and and ;SEMICOLON  that means ,COMMA  and a is sorry here I
right a is greater than equal to b and a is greater than equal to c printf this line largest is a
else printf largest is c .PERIOD  So ,COMMA  do you think that these two are equivalent ?QUESTIONMARK  These two nested
ifs and this logical operator .PERIOD 
Now ,COMMA  here I should have put a parenthesis here .PERIOD  Please note I need a parenthesis here it is
better that if I put it it becomes much clearer .PERIOD  Are these two equivalent ?QUESTIONMARK  If you just think
a while you will find yes they are equivalent because I am computing this and then I am
computing this if this any one of this is false I will not be executing this statement right .PERIOD 
So ,COMMA  this is an example of nested if .PERIOD 
We can have many such examples .PERIOD  Let me give you one example .PERIOD  Let us workout right
now .PERIOD 

Suppose I am trying to see if a figure is a triangle or a square or a rectangle or rectal I
mean 4 sided figure whether it is a triangular figure or a quadric quadrilateral figure .PERIOD  And
if it is a triangular figure then I want to see whether it is isosceles ;SEMICOLON  that means ,COMMA  two sides
are equal or it is not isosceles .PERIOD  Suppose that is what I want to do .PERIOD  So ,COMMA  how can I proceed
to do that ;SEMICOLON  how would I write the logic ?QUESTIONMARK  Let me just only write the relevant part .PERIOD  I have
done some the declarations are here and then I have done scanf percentage d ,COMMA  number of

sides all right number of sides .PERIOD  So ,COMMA  number of sides are variable .PERIOD  And then I also then ;SEMICOLON 
what I can do ?QUESTIONMARK  I check if number of sides is equal to 3 then I will be doing something all
right because in that case it will be a triangle .PERIOD 
Then what do I do I ?QUESTIONMARK  Then read that is scanf the 3 sides of the triangle percentage d ,COMMA  first
and suppose all the sides are integer has got all the sides have integer values all right 5 ,COMMA 
6 ,COMMA  5 something of that sort .PERIOD  That is why I am putting percentage d then I am reading the 3
sides and a and b and c semicolon .PERIOD 
If a is same as b or you remember this is the logical OR ,COMMA  or a is the same equal to c or b
is equal to c then what can I say ,COMMA  printf “it is isosceles backslash n” ,COMMA  as our common
practices .PERIOD  If any of these conditions are true either this is equal to this or this is equal to
this or this is equal to this then is isosceles .PERIOD  Else I will printf say I am writing in brief
“not isosceles” .PERIOD  You can write in a much better way .PERIOD  Remember this double quotes we
complete this .PERIOD  Now ,COMMA  that is the ,COMMA  I complete this .PERIOD  Now ,COMMA  this is the if part .PERIOD  If the number of
sides is 3 if the number of sides is not 3 then I do not do anything I will come at this
point because this if you will fail I will come at this point .PERIOD  I can say here can I write here
printf not a triangle ,COMMA  can I do this ,COMMA  just think because here I have checked that the number
of sites is 3 .PERIOD  If it is number of sites is 3 I will do this and print and otherwise I write it
here is it all right .PERIOD  If you look at it you will see that there is a problem here ,COMMA  that if the
number of sites is 3 and then it checks whether it is isosceles or not and then it comes out
and again prints is not a triangle I do not want that .PERIOD  So ,COMMA  what should I do ,COMMA  how can I avoid
this problem ?QUESTIONMARK 
Here you must have guessed now ,COMMA  here I have to put an else that goes with this if all right
and then if this is not true then only this will be executed otherwise some point down the
line here will be executed .PERIOD  Another thing that I would like to mention in this case look at
the use of this parenthesis why was this parenthesis required because I had more than one
statements for this if condition if this condition is true then there are more than one
statements .PERIOD 
Now ,COMMA  here is a puzzle .PERIOD  How many statements are there inside this block ?QUESTIONMARK  How many
statements are there ?QUESTIONMARK  1 ,COMMA  2 ,COMMA  3 ,COMMA  4 ,COMMA  let us see .PERIOD  Here is one statement scanf so one and then
this if statement you see goes up to this .PERIOD  So ,COMMA  that is one statement ,COMMA  but here I am using I
said that if felt is a structure .PERIOD  So ,COMMA  this entire thing is a statement .PERIOD  So ,COMMA  actually I have got

two statements .PERIOD  Since I have got more than one statement I had to put these braces .PERIOD  Now ,COMMA 
suppose of course ,COMMA  then the program will not work here ,COMMA  suppose I had not written this
statement this statement was not there all right this statement was not there in that case I
could have done away with these braces because then it is within this if statement there is
one statement only this brace was not essential .PERIOD  So ,COMMA  you could see this and you can
practice and in the assignment we will also give few programs that you have to do using
this sort of if-else type of structure .PERIOD 

So now ,COMMA  here is the example that we did .PERIOD 

Now ,COMMA  there is a problem here there is a danger I would rather say .PERIOD  You have seen earlier
when I was writing I was writing if a is equal to b ,COMMA  then I was doing something right .PERIOD 
Now ,COMMA  this is very important that is a common point of source of ,COMMA  common source of error
that often because we have learnt to say equal to like this it will we can write in this way .PERIOD 
Now ,COMMA  the problem is if I write it in this way when a compiler looks at this what will it
assume it will see that is an if often you will not find that it will cause an error because
what the compiler will think is well ,COMMA  what is the meaning of this ;SEMICOLON  a this means a is
assigned the value of b .PERIOD  So ,COMMA  it will try to successfully ,COMMA  it will try to transfer copy the value
of b to a all right and this operation will be executed successfully .PERIOD 
Now ,COMMA  if x in any expression is computed successfully ;SEMICOLON  what does it return ?QUESTIONMARK  If you recall it
returns a one and one means true ;SEMICOLON  that means ,COMMA  this condition will evaluate to true .PERIOD  I once
again repeat .PERIOD  Now ,COMMA  we can use any expression that produces a value in the control
structure .PERIOD  Now ,COMMA  if it be a nonzero value then is true and 0 value is false .PERIOD 

So ,COMMA  if I write if a plus b plus c printf “A” else printf “B” what will happen ?QUESTIONMARK  a plus b plus
c is if they will be just be added ,COMMA  but there will be no assignment suppose I make it more
meaningful .PERIOD  Suppose I make it z sorry z assigned (Refer Time: 17:53) I write z assigned
a plus b plus c all right then this there is a problem here because there is no semicolon
here right .PERIOD  So ,COMMA  this will become suppose I do this .PERIOD 
Now ,COMMA  this will be computed and this assignment will be done and this assignment will be
done successfully .PERIOD  So ,COMMA  anything that is done successfully will return this will be
equivalent to if 1 ,COMMA  if 1 means it is true and so what will be printed ,COMMA  printf A will be
executed ,COMMA  this will be printed .PERIOD 

Now ,COMMA  similarly I can say let us see I just write if this and something .PERIOD  What does this
mean ?QUESTIONMARK  Semicolon nothing before this we call it a null statement ;SEMICOLON  that means ,COMMA  I have not
state anything meaningful ,COMMA  but it is still a statement .PERIOD  Remaining silent is sometimes a set
statement .PERIOD  Now ,COMMA  this means that this is always true this will always be true .PERIOD  So ,COMMA  this is
equivalent to if 1 this ;SEMICOLON  that means ,COMMA  always you do this statement this ,COMMA  whatever is here
you read do it always all right .PERIOD  So ,COMMA  this is a interesting thing in C .PERIOD 

However sometimes you know it varies all with the compilers also some compilers take
care of such situations and may give you a warning some very few compilers can also
give any error .PERIOD  Now ,COMMA  let us look at this example sorry this example .PERIOD 
If pay code is equal to 4 ,COMMA  what does this mean ?QUESTIONMARK  This means if the pay code is 4 this is a
logical equality if this is true then will print you will get a bonus .PERIOD  Now ,COMMA  instead of ,COMMA  I want
to do like this ,COMMA  this means that I am coming here I am checking pay code in non C
language you speak out 4 yes I do something no I do something else .PERIOD  But if I had written
it in this way what would it mean ?QUESTIONMARK 
If pay code assigned 4 .PERIOD  Now ,COMMA  pay code being out suppose pay code is an integer type of
variable then this can be assigned the value 4 successfully and anything that is done
successfully this will result in if done successfully one do this .PERIOD  That means ,COMMA  it will be
successfully executed it is not doing what you are intending .PERIOD  So ,COMMA  sometimes we are saved
by the compiler when it points out that note here ,COMMA  here is something some syntax error
that you are committing all right ,COMMA  but there are situations when we unintentionally can do
such mistakes which will go unnoticed by the compiler and the result that will be getting
may not be what we desired .PERIOD 
So ,COMMA  this is a very critical point you should keep it in mind for all programming languages
we will find there such nuances some specialties which you will have to keep in mind .PERIOD 
We are just mentioning here the ones for C .PERIOD  But if I had done it in this way it would be
ok .PERIOD 

So ,COMMA  generalization of expression evaluation in C is assignment operated is also a part of
expression that we know .PERIOD 

Now ,COMMA  let us see here i is assigned 3 .PERIOD  So ,COMMA  typically some compilers what they do till now ,COMMA  I
was saying that if an instruction is executed correctly it will return 1 ,COMMA  but generally
speaking it will return the value that has been assigned .PERIOD 
So ,COMMA  typically here i assign 3 will return the value 3 after assigning it to it ,COMMA  but for us when
we do what we are bothered about if the condition this part is open sorry I would rather .PERIOD 

Now ,COMMA  say is part is 0 or nonzero .PERIOD  If it is nonzero then this true I was saying if 1 it is true ,COMMA 
if 3 that is also true the only falsity will come if it is 0 .PERIOD  So ,COMMA  this returns the value 3 after
assigning it to i .PERIOD 

And then ,COMMA  so let us look at this code .PERIOD  I give you 1 minute to look at this code and think
what this code will do ,COMMA  what will be the result of this .PERIOD  Look at this code carefully then we
will analyze it .PERIOD 
You can see that here we have initialized a variable i to 4 and j has just been declared ,COMMA 
but not initialized .PERIOD  So ,COMMA  here the picture is something like this ,COMMA  i has been initialized to 4
and j can have something ,COMMA  but I have not initialized at .PERIOD  Now ,COMMA  here if this statement ,COMMA  what
will this statement do ?QUESTIONMARK  First the condition part ;SEMICOLON  that means ,COMMA  within the bracket this part
will be evaluated and what will happen ,COMMA  what is this i is being assigned 3 so this will be 3
and the value that will be returned by this execution of this statement will be 3 ,COMMA  then j
will be 0 then j will be 0 .PERIOD  Else j equal to 1 that will never come because this will be done
successfully ,COMMA  this will never come .PERIOD  So ,COMMA  the output will be ,COMMA  output I have not given any
printf here ,COMMA  but this j ,COMMA  value of j will be 0 .PERIOD 

So ,COMMA  what will be the value of j ?QUESTIONMARK  Whatever be the value of i ,COMMA  j will be 0 right .PERIOD  Now ,COMMA  instead
if I had written it correctly ,COMMA  correctly means if my intention was that if i is equal to 3 ,COMMA  j
should be 0 otherwise j should be 1 then I should have written it in this way .PERIOD  So ,COMMA  that if I
is equal to 3 then j will be 0 otherwise j will be 1 .PERIOD  So ,COMMA  this is a very important point that
you have to keep in mind and gradually with practice they will be ok with this .PERIOD 

So ,COMMA  here ,COMMA  more about expression .PERIOD  Now ,COMMA  here we introduce two new expressions typically
when we write suppose there is a variable i and the variable i has got a value 5 .PERIOD  Now ,COMMA  if I

want to implement the value 5 ,COMMA  if I want to implement the value of i I will write i
assigned i plus 1 or if I want to decrement the value of i then I can write i assign i minus
1 ,COMMA  but C allows us or gives us one special implemented another special decrement
operation .PERIOD 
So ,COMMA  this thing I could have written also as instead of this ,COMMA  this part I could have simply
written i plus plus ,COMMA  i plus plus means i is assigned i plus 1 and this 1 will be i minus
minus all right .PERIOD  So ,COMMA  this is known as the decrement operator ,COMMA  this is known as the
increment operator .PERIOD  Sometimes it becomes handy to write it in this way ,COMMA  but if you are
new in programming i personally would discourage you because you should not get
ground in the special features of a language initially better you go by the standard
features because these features have got some more complications which will come to
later .PERIOD  But you may know that this is an increment operator which is equivalent to this and
this is a decrement operator which is equivalent to this all right .PERIOD 

So ,COMMA  this is I can write it in two ways sorry i plus plus or plus plus i .PERIOD  The reason why I
were I discourage you to get into the usage of this initially will be evident soon .PERIOD  If I write
i plus plus it means this is called post operation this means pre operation of prefix
operation .PERIOD  We will soon see what that means .PERIOD  So ,COMMA  I can have plus plus i or minus minus i
that is a prefix operation and postfix operation is i plus plus and i minus minus .PERIOD 

Now ,COMMA  plus plus i means first increment or decrement depending on whether it is plus or
minus and then use it in the evaluation .PERIOD  For example ,COMMA  suppose I have got the value i here
as 5 and I write x as signed plus plus i plus z or let me make it a constant ,COMMA  let us say z is
5 .PERIOD  Then what will happen ,COMMA  this is what ,COMMA  this is pre increment i first increment i and then
do the operation .PERIOD 
Now ,COMMA  this has got precedence of course ,COMMA  over this .PERIOD  So ,COMMA  first i will be ,COMMA  i will be
incremented ,COMMA  so i will be 6 and z was 5 .PERIOD  So ,COMMA  the result will be x will be 11 ,COMMA  but if I had
done written it x assigned i plus plus plus z here also I will first increment this 6 and then
z will be added to that .PERIOD  But there are situations where we will do it after computation of
the whole thing .PERIOD  I think I will need a separate session for you to explain this clearly .PERIOD  We
will do that in a more careful manner .PERIOD 

Let us look at this here int t is an integer and the value of m is 1 .PERIOD  t assigned plus plus m ;SEMICOLON 
that means ,COMMA  what m was 1 and m is first incremented and assigned to t therefore ,COMMA  t will be
2 all right .PERIOD  Again if we do it like this here then yes ,COMMA  here it makes the difference very
clear I am sorry t sorry here you see m was 1 and what I have done I have put the
assignment of I have done a post operation ,COMMA  post fix operation ;SEMICOLON  that means ,COMMA  first I will be
doing the assignment ,COMMA  first I will be doing the assignment and then I will increment .PERIOD  So ,COMMA 
what will happen ?QUESTIONMARK  m was 1 here ,COMMA  so first this 1 will go over here .PERIOD  So ,COMMA  t will become 1
right and then before I complete this operation I increment m so m becomes 2 all right .PERIOD 
So ,COMMA  we will see more examples of such things in the subsequent lectures .PERIOD 
Thank you .PERIOD 

In the last lecture we had discussed about 2 new operations ,COMMA  that is post increment and
pre increment .PERIOD  Here you can see that we are calling them as prefix operations because the
operator is before the operand here you can see also the operator is before operand and
what is the operator ?QUESTIONMARK  Operator is incrementation ,COMMA  but that is being denoted as plus plus
twice the addition operation or twice the subtraction operation .PERIOD  And in this here we are
talking off we are calling it to be postfix operation ,COMMA  here you can see that the operand is
coming first and the operators are following right .PERIOD  So ,COMMA  the operators are following them .PERIOD 
So ,COMMA  that is why this is known as postfix here also you can see the operated operand to be
I followed by the operator minus minus right .PERIOD  So ,COMMA  that is why these are called postfix or
prefix .PERIOD  The significance of these as we discussed in the last class is that a particular
variable .PERIOD 
Will be first incremented here in this case it will be first incremented and then used in
operation ,COMMA  here it will be first decremented then will be used in the operation .PERIOD  While here
it will be first the operation will be done and then the decrementation will be done here

first the operation will be done then the incrementation will be done .PERIOD  So ,COMMA  we can ,COMMA  that is
what we have written here first increment or decrement and then use it in the evaluation
and here increment or decrement is done after being used in evaluation .PERIOD  So ,COMMA  it will be
clearer when we come with some examples ,COMMA  see about the example that we have shown
in the last class t and m are 2 variables ,COMMA  m is initialized to 1 and when I am saying plus
plus m ;SEMICOLON  that means ,COMMA  first I increment m .PERIOD 
So ,COMMA  m will be here you can see as soon as I do that m will become 2 and then that is
being assigned to t .PERIOD  So ,COMMA  t becomes 2 whereas ,COMMA  here you can see that m is 1 and we have
done post increment .PERIOD  So ,COMMA  first the assignment operation will be done ;SEMICOLON  that means ,COMMA  m was
1 .PERIOD  So ,COMMA  sorry m was to here after this I am doing this .PERIOD  So ,COMMA  m will be .PERIOD  So ,COMMA  t will be one .PERIOD  So ,COMMA 
what will happen is m is 1 .PERIOD  So ,COMMA  that m will be assigned to t .PERIOD  So ,COMMA  t becomes 1and after that
it will be incremented .PERIOD  So ,COMMA  ultimately m will be to ,COMMA  but t will be 1 .PERIOD  So ,COMMA  if you look at these
2 you will find the difference between these .PERIOD 

Let us have a few more examples ,COMMA  suppose we have got 2 variables a and b whose initial
values are 10 and 20 .PERIOD  They are initialized to 10 and 20 next we carry out look at this
operation very carefully ,COMMA  it looks a little clumsy here there are 2 operators one is this one
another one is this one .PERIOD  So ,COMMA  this is pre increment .PERIOD 
So ,COMMA  this is equivalent to x is assigned 50 plus as if I have put a parenthesis ,COMMA  but that is not
required that first a will be incremented and then that will be added to 50 .PERIOD  So ,COMMA  what result

do we expect a was 10 .PERIOD  So ,COMMA  first that will be incremented .PERIOD  So ,COMMA  that will be 11 and that will
be added to 50 and .PERIOD  So ,COMMA  x will be x we get the value 61 all right that is what will happen
in this case .PERIOD  So ,COMMA  a is 11 and x is 61 as we have shown .PERIOD 

Now ,COMMA  let us take this again this is the ;SEMICOLON  this is post increment .PERIOD  So ,COMMA  what do we expect here
let us see what will happen in this case ,COMMA  first here after the operation is done then a will
be incremented .PERIOD  So ,COMMA  what will happen ?QUESTIONMARK  X was 50 sorry sorry I am sorry a was 10 and I
am adding 50 and 10 and a ;SEMICOLON  that means ,COMMA  50 plus 10 .PERIOD  So ,COMMA  that becomes 60 and that 60 is
being assigned to x .PERIOD 
Because ,COMMA  the assignment operation ,COMMA  is taking precedence over this post increment .PERIOD  So ,COMMA  we
get x to be 60 ,COMMA  but I have my job is not it clear because after is participation in this
operation ,COMMA  it will be incremented by 1 .PERIOD  So ,COMMA  a was 10 then we will be made incremented
by 1 .PERIOD  So ,COMMA  it will become 11 .PERIOD  So ,COMMA  consequently this is the result what we will get .PERIOD 

Now ,COMMA  let us see again here ;SEMICOLON  what do you expect to happen .PERIOD  A is 10 as usual ,COMMA  a is 10 and b
is 20 what is being said here ?QUESTIONMARK  A is post increment ,COMMA  but b is pre increment pre decrement .PERIOD 
So ,COMMA  first b will be decremented .PERIOD  So ,COMMA  b will become 19 decrement means by 1 .PERIOD  So ,COMMA  it will
be decremented it will be nineteen it will be added to a ;SEMICOLON  what was a ?QUESTIONMARK  10 .PERIOD 
So ,COMMA  these 2 will be added and what is that 29 and that 29 will go to x .PERIOD  So ,COMMA  x will be 29
and then my job is not it clear not it over .PERIOD  So ,COMMA  this will be incremented and a will be 11
all right .PERIOD  So ,COMMA  this is how the thing will happen .PERIOD 

So ,COMMA  the results that we get in this case will be b will be 19 ,COMMA  because b has been
decremented x will be 29 and a will be 11 .PERIOD  I hope you have understood the flow .PERIOD  So ,COMMA  now
this is another one ,COMMA  here we really do not know what to do because here I am
incrementing pre incrementing a post incrementing a here now I will take this value of a
now what will happen .PERIOD  Suppose the problem here is suppose a is let us take the case here
a to be 10 now first .PERIOD 
I will decrementing I will incrementing .PERIOD  So ,COMMA  a will be 11 ,COMMA  but a was this a is not
incremented .PERIOD  So ,COMMA  a minus 11 .PERIOD  So ,COMMA  11 minus 11 ,COMMA  will it be 0 and then this will be a will be
12 or which one will be done first this is a particular scenario ,COMMA  for the same variable in
the post increment the post decrement is given often that is implementation dependent
and the compiler does not take it well .PERIOD  So ,COMMA  it often results in undefined value .PERIOD  So ,COMMA  you
should try to avoid this as much as possible actually you should not use this you should
use you can use the pre increment post increment ,COMMA  but as I said in the last class I had
strongly suggest that at the initial phase of programming you avoid using this pre
increment post increment operations ,COMMA  instead although it will be a little laborious you
write x assigned x plus 1 or x assigned x minus 1 for pre increment and pre decrement ,COMMA 
but it is good to know that c allows us with this facilities .PERIOD 

Now ,COMMA  here is another one which at the initial phase you should not try to use unless you
are very confident .PERIOD  We know if conditions then we do something else something .PERIOD  So ,COMMA 

there are three things ,COMMA  if some condition then although we do not write them ,COMMA  then we do
some operations else we do some other operation .PERIOD  Then the same thing can be written ,COMMA  it
call it a ternary conditional operation here we write it in a different way .PERIOD 

Just to save space on I mean the size of the program what we do here say grade greater
than equal to 60 printf passed otherwise printf failed .PERIOD  So ,COMMA  this means here this is the this
part is the condition part and this part is the part that will be computed if the condition is
true ,COMMA  and this part will be computed if the condition is false all right .PERIOD  So ,COMMA  this is
equivalent to writing if grade greater than equal to 60 printf ,COMMA  past else printf failed all
right this is equivalent to that .PERIOD  So ,COMMA  what is happening here in this example ?QUESTIONMARK  So ,COMMA  the
general syntax is if there is an expression there is a condition expression then we carry
out if that is true .PERIOD 

Then we carry out expression true otherwise if it is false ,COMMA  then we carry out if it is true
then we carry out this part this part ,COMMA  that is fall following interrogation mark ,COMMA  and we
carry out the expression three that is the expression that is following the colon mark for
the else case or if the condition is false .PERIOD  So ,COMMA  this is again writing that if then else in a
cryptic shorter way this is known as ternary conditional operation ,COMMA  but again I would say
that this is a specialty of c it is good to know that ,COMMA  but initial phase at the initial phase of
programming I discourage you to use this  .PERIOD 

So ,COMMA  here is an example what will this v can anyone tell me ?QUESTIONMARK  We are computing the
interest on the amount of money you have got in bank ,COMMA  this means here let us look at this
part this is a ternary operator .PERIOD  If the balance is greater than 5000 then you compute
balance times 0 .PERIOD 2 that means ,COMMA  20 percent of the balance or compute 10 percent of the
balance .PERIOD  If somebody has got a balance 6000 then have 20 percent of that computed and
assign it to the interest part .PERIOD  So ,COMMA  you see a bigger statement if balance is greater than 500
then interested equals balance multiplied by 0 .PERIOD 02 else interest equal to balance multiplied
by 0 .PERIOD 01 all these things can be done in one single sentence or one single statement using
c all right .PERIOD  So ,COMMA  that is why some people prefer to use such ternary operators and you will
also certainly use it ,COMMA  but when you are very confident about your programming .PERIOD  So ,COMMA  this .PERIOD 

Now ,COMMA  we come to a new construct you know that is the switch construct .PERIOD  Now in order to
understand this .PERIOD  So ,COMMA  let us quickly go to the flow chart for a while see I draw flow chart
like this .PERIOD 

I am evaluating some values here all right or maybe I get some value from the user here ,COMMA 
I read some value let me make it clearer .PERIOD 
I read some value from the user all right something read colour now here depending on
the colour that the users applies earlier in this decision box whatever you doing ?QUESTIONMARK  We
were either going for true or for false .PERIOD  Now here what we are seeing if the colour is red
then we do something ,COMMA  if the colour is blue we do something if the colour is magenta ,COMMA  we
do something if the colour is orange then we do something if the colour is violet we do
something ok .PERIOD 
So ,COMMA  the same diagram I can draw in a different way that is .PERIOD 

I am reading colour and then as if I am coming to a switch box ,COMMA  think of this to be a
switch box where number of switches are there all right and number of switches are there
now depending on what value of the colour is coming .PERIOD  So ,COMMA  this may be the red switch ,COMMA 
this will be the blue switch ,COMMA  this one with orange switch ,COMMA  depending on which switch
which value is coming .PERIOD  So ,COMMA  let the value be v .PERIOD  If v is r then this switch gets closed and we
follow this path .PERIOD  If the v is blue then this switch gets closed and we follow this path .PERIOD  If v
is orange then then this switch gets closed and we follow this path all right that is why
because of this analogy which switch this statement is also known as switch statement ,COMMA 
this is also very much use for branching .PERIOD 
Branching we have seen with this else type of thing and here ,COMMA  also we will see another
variety of a c construct called switch using which we will do that .PERIOD  So ,COMMA  let us see here now
let us look at the construct of this .PERIOD  The syntax of the switch statement is this switch
expression then case expression 1 expression 2 let me give an example first and it will be
better I will come back to this .PERIOD 

So ,COMMA  here is the total switch structure ,COMMA  it is a multiple selection structure .PERIOD  So ,COMMA  I come to this
point switch if the case is a ,COMMA  if it is the case that the colour is red like that if the case is a
then I take the case a actions and then come out M otherwise I take the case reactions in
the case be b then only I will take the case b action and then come out .PERIOD 

Similarly if there may be different cases .PERIOD  So ,COMMA  what we are getting here is an advant is an
example ,COMMA  that we are showing here what we are getting here is using this case construct
multiple branching we are accommodating in one shot .PERIOD  L et us look at this I was giving

an example with colour here it is an example with a letter .PERIOD  So ,COMMA  I have read some letter
from the user some letter has been now that letter can be anything A to Z say A to Z .PERIOD  So ,COMMA 
if it be if the case is that the letter is A .PERIOD  Look at how it has been written case A before
that switch what is my variable on which way I am switching ?QUESTIONMARK  Switch on variable letter .PERIOD 

In the earlier example it was switch on the variable colour .PERIOD  So ,COMMA  here we start with switch
on the variable letter .PERIOD 
And what are the possible switches I encapsulate that in 2 braces just as we do .PERIOD  Now
within this I am taking multiple decisions multiple possibilities are there for example ,COMMA  if
the letter is a ;SEMICOLON  that means ,COMMA  if it is the case that the letter is A then we put a semicolon then
I write down print the first later .PERIOD  So ,COMMA  what will be printed first later and then there is a
break statement what this break statement does ?QUESTIONMARK  That you execute this and then you
come out of this entire switch box come out here ;SEMICOLON  that means join the next statement .PERIOD  If
the letter was B then here it is not written I am writing case B printf second letter
backslash n and then break ;SEMICOLON  that means ,COMMA  if the case is B then .PERIOD 
I will print this and after that with the break I will come out of this now after that I have
not written anything else ,COMMA  but I have written case z only this is case z all right printf last
letter as is shown here and then break .PERIOD  Now if somebody this letter was p if this letter
was q or some other alphabet sorry I mean anything small alphabet or capital alphabet x
whatever in that case what do I do ?QUESTIONMARK  This one only tells me what I can do if the letter is A

or if the letter is Z or in my case if the letter is B ,COMMA  but if it B something else otherwise
then we use this statement called the default statement if anything is other than what has
been specified here then we will say that it is some other letter and .PERIOD 
Then break it you see here if the letter is a then only I entered here and then went out if
the letter is b then I only entered here if the letter is c then I will come to default if the
letter is c it is not specified here I will come here and I will escape I will go right it is an
intermediate letter and then come out .PERIOD  So ,COMMA  with this understanding if we can go back to
the earlier slide ,COMMA  the flowchart then we can see that the flow chart will be something like
this .PERIOD 

We start then we evaluate expression ,COMMA  we evaluate expression come here its equivalent to
case a yes do something do something and then break otherwise it will come here is
looking at I am just doing this case z ,COMMA  if true then do something oh and then break right
otherwise .PERIOD 
So ,COMMA  this is true this is false ,COMMA  this is true this is false otherwise default I will come here do
something and then break now all these breaks all these breaks brings me to the next
statement after the case statement .PERIOD  So ,COMMA  anything that is here whenever I encounter a break
this comes brings me here this also brings me here ,COMMA  this also brings me here and I
continue following the sequential nature of program from here all right .PERIOD 

So ,COMMA  we have a seen .PERIOD  So ,COMMA  here is another nice example we can look at it say here switch ,COMMA  I
am switching on an expression what is that ?QUESTIONMARK  Choice to upper now if this has got some
multiple parameters into this ,COMMA  let me take it up in the next lecture so that I can devote
some time on this .PERIOD 
Thank you .PERIOD 

So we are looking at a new construct that is switch and case .PERIOD 

So ,COMMA  here is another example ,COMMA  but this example has got many more things embedded in it .PERIOD 
For example ,COMMA  in order to understand this you have to understand two things that are being
introduced here ,COMMA  one is getchar .PERIOD  This is a construct we have seen scanf ,COMMA  we have seen
printf as input output statements right ,COMMA  but getchar is also another statement another
function actually ,COMMA  this is given by you can since we have not considered function in detail
there is a built in library function or an operation you can consider that to be an operation
also that getchar and then they there is a parenthesis as if we want to have some value
here .PERIOD 
It means get the character from the user .PERIOD  So ,COMMA  where from does the user provide you the
character whatever the user types ,COMMA  that will be captured by this function and this will get
that particular character that is why it is called getchar ,COMMA  all right .PERIOD 

That other thing that we have here is another function to upper to upper and then you can
see that there is another parenthesis to upper what it does is it converts any character
variable to its upper for example ,COMMA  if I type a as a character say I have got a variable
mychar .PERIOD  Now suppose I have declared mychar to be a character type of variable and
somewhere here I assigned mychar to be a .PERIOD 
Then what does mychar get ?QUESTIONMARK  Mychar gets a ascii value of small a ,COMMA  now if I say toupper
mychar then what it will do ?QUESTIONMARK  It will take the ascii value of small a and will return me the
ascii value of capital A all right to the upper a .PERIOD  So ,COMMA  this one will be returned .PERIOD 

So ,COMMA  here you see to upper what not mychar ,COMMA  but what ?QUESTIONMARK  We have written to upper then
getchar character .PERIOD  So ,COMMA  what it means is that ,COMMA  you will get the character from the keyboard
suppose it is small a ,COMMA  and then that will be converted to capital A .PERIOD  So ,COMMA  it becomes capital
A and then that is being fed assigned to choice ok .PERIOD 
Let us look at it because it gives us the opportunity to look at nesting of functions also
here two built in functions which are being used here to get the character and assign it to
choice all right .PERIOD  So ,COMMA  you can also have another example similarly we have got to lower
getchar something ,COMMA  where if I had given capital A it will be converted to small a ok .PERIOD 

And then I assign it to something else other things also I could do by suppose I getchar ,COMMA 
mychar and mychar is assigned a sorry mychar has been assigned a ,COMMA  then I can say again
I can assign not mychar .PERIOD 
So ,COMMA  some others mychar and suppose the there was another variable mychar 1 to upper
mychar that was also possible of course ,COMMA  mychar one has to be also declared that is not
declared here ok .PERIOD 
So ,COMMA  this now that was the first part of the thing .PERIOD 

Now ,COMMA  let us look at this .PERIOD  So ,COMMA  we take a choice .PERIOD  So ,COMMA  what is the choice ?QUESTIONMARK  We are taking a
choice and what is the choice ;SEMICOLON  choice is a character that has been given if the user gives a
lowercase character then suppose I want a choice between a multiple choice answer
scenario ,COMMA  type in the answer a b c .PERIOD  So ,COMMA  somebody can type caps cap a shift a or just a all
right whatever you type internally I will convert it to capital .PERIOD 
So ,COMMA  through my ;SEMICOLON  to upper functions .PERIOD  So ,COMMA  now ,COMMA  I take your choice now based on the choice
I go on checking is it r if so ,COMMA  print red and then break its not R then let us go and check
whether its green G .PERIOD  If it is G then print green and then print green and for break you will
come and meet here it is not green also not R not green ,COMMA  I will come to this point is it
blue yes then I will print blue ,COMMA  but suppose somebody has printed as typed in give the
choice as y all right Y then neither it is R nor it is G nor it is B then we will come to
default and we will print invalid choice .PERIOD 
Here since that is a last statement I am closing the bracket immediately after that I may
not give the break statement here ,COMMA  I am free not to give the break statement here .PERIOD 
Otherwise now suppose let us look at this break statement suppose I do not give the
break statement suppose this is not there and my choice is r my choice is small r .PERIOD 

So ,COMMA  at this point the small r will be converted to capital R by this statement right by
this .PERIOD  So ,COMMA  my choice will be capital R now I go here and I will my system will find that it
is r .PERIOD  So ,COMMA  it will printf red I am sorry why should I the printf red will be worked on let me

do it again ,COMMA  my choice was r that was converted to capital R and by this and then I come
to this point and I find that it is r .PERIOD 

So ,COMMA  my system prints red ,COMMA  red has been painted now this break statement is not there .PERIOD  If
the big break statement is not there ,COMMA  then it will not go to check this condition it will
simply print all these things .PERIOD  Since it has follow this path unless I force it to break it will
go on following this path .PERIOD  So ,COMMA  I will have green printed again which is not what I desired
right .PERIOD  So ,COMMA  let us see .PERIOD  So ,COMMA  now ,COMMA  let us see here let us look at this flowchart .PERIOD 

The switch statement if the case is red let us take to the example that we are doing ,COMMA  red
then I print red then break .PERIOD  If the sorry if the break was not there then I would be
following this path again I mean this path would be followed that is why this break is
essential will show that requirement of break in a moment .PERIOD 

Now ,COMMA  let us look what the break statement is used for .PERIOD  The break statement is used to exit
from a switch or terminate from a loop ;SEMICOLON  we have just illustrated it for the switch
statement it can be also used for some other purpose .PERIOD 
So ,COMMA  the break statement causes a break statement causes a transfer of control out of the
entire switch statement to the first statement following the switch statement .PERIOD 

So ,COMMA  I hope you have understood what is meant by the switch statement how it can be
used we will see that ,COMMA  through a number of examples later we will see with the number of
examples .PERIOD  So ,COMMA  we will see that the break statement can be used for exiting from loop also
we will see that ,COMMA  but what is a loop .PERIOD 
Next we come to see repetition ,COMMA  till now what we have seen is branching ,COMMA  but now we are
going to look at another important construct which is repetition .PERIOD  Now just for a moment
let us go back to our old friend example that is finding the sum of n numbers for
example .PERIOD 

Now ,COMMA  how did you do that what was the flow chart ?QUESTIONMARK  The flow chart was something like
this read N there is a number of numbers all right then we make sum equal 0 ,COMMA  I am
adding 10 num adding n numbers then read number I am giving a different variable name
num ,COMMA  then I am adding that with sum ,COMMA  sum is assigned sum plus num ,COMMA  then I am
decrementing N .PERIOD 
Now ,COMMA  I look at is N 0 .PERIOD  if yes then I go and print sum all right .PERIOD  So ,COMMA  if there be three then I
first read one add it .PERIOD  So ,COMMA  n actually shows how many numbers are yet to be added .PERIOD  So ,COMMA 
print sum then stop ,COMMA  but if N is not 0 then what I will do ?QUESTIONMARK  I will go and continue this path
this is another form of structure that we see that we have based on some decision we
have got sum statements somewhere ,COMMA  and we are going back to that and repeatedly doing
this this is we are repeatedly doing this this is known as loop this is known as repetition
or loop all right .PERIOD 
Unlike the earlier case of if then where we look at the condition and then we follow
either this path or this path both in the forward direction ,COMMA  here we are also taking up the
backward direction .PERIOD  So ,COMMA  this is a very important concept we will need it at every step in
our programming exercise .PERIOD  Now there can be different types of loops we will discuss that
later ,COMMA  but first let us take .PERIOD 

Let us look at a counter now there are three types of loops briefly let me tell you one is
loop is something that is repeatedly executed .PERIOD  There can be counter control repetition
where we know that that we know before and how many times I must repeat ok .PERIOD 
Suppose I know that find the sum of N numbers whatever that be n I know that this will
have to be repeated N times all right N times ,COMMA  but there is another case where we actually
go on repeating a particular set of sentences we go on repeating that until a particular
condition occurs ;SEMICOLON  that means ,COMMA  some value has become negative or something that say for
example ,COMMA  I am taking the sum I am adding that and the sum goes beyond 9999 and if it
goes beyond that I will stop ,COMMA  that sort of situation is known as sentinel control or even
controlled repetition this will come later .PERIOD 
But most importantly we will look at this counter controlled repetition where we know
how many times we should look and for that we need a control variable we will see what
that is .PERIOD 

So ,COMMA  counter control repetition requires name of a control variable or a loop counter .PERIOD  If
you recall in when we added n numbers what was my counter variable ?QUESTIONMARK  What was my
control variable or what was the loop counter ,COMMA  how many times will it do n the number of
numbers right .PERIOD 
So ,COMMA  similarly I can have another some other variables say I say I can just draw arbitrary
flowchart for you say is and integer initialized to 0 ,COMMA  then I come here do something and
then i increment i let me use what we learnt I increment i plus plus ;SEMICOLON  then I check ,COMMA  i
greater than 10 if it is yes I will again ,COMMA  if it is no sorry if it is no I will again do that if it is
yes i will come out all right .PERIOD  So ,COMMA  I am doing it as long as i is not greater than 10 .PERIOD 
So ,COMMA  this here what is my control variable ?QUESTIONMARK  My control variable is i or this is a loop
counter based on which how many times I will be carrying it out is determined .PERIOD  Now we
also had an initial value of the control variable what was the initial value that I did in this
case .PERIOD 

The initial value of i was 0 it was initialized to 0 if you have seen the condition that tests
for the final value of the control variable whether the loop should continue or not ,COMMA  what
was my condition test in the earlier case ?QUESTIONMARK  It was i greater than 10 if i is greater than 10
then I will come out otherwise I will go on continuing with the looping and another
increment or decrement operation here i was 0 .PERIOD  So ,COMMA  I implemented it until it comes to 10
or crosses 10 .PERIOD 
If you recall in the earlier example there was n .PERIOD  So ,COMMA  I have to read n numbers after
reading one number I decremented n .PERIOD  So ,COMMA  depending on what I want to do I will have to
increment or decrement the control variable and based on this condition I will come out .PERIOD 
So ,COMMA  here is an example an initialization is done ,COMMA  you can see here a counter has been set
to one it is an integer counter that has been set to one while counter is less than equal to
10 ,COMMA  while it is a statement that you are getting .PERIOD  As long as counter is less than equal to 10 .PERIOD 
So ,COMMA  this is one new term you are learning .PERIOD 
While counter is less than equal to 10 do this printf the counter value and then increment
the counter and then go on doing it ;SEMICOLON  now this is this really does not make any difference
if I had written counter plus plus that we equivalent because these are singleton here
there is no assignment or nothing addition with this value .PERIOD  So ,COMMA  its standing alone it really
does not mean me and does not matter whether it make it counter plus plus or counter

minus minus .PERIOD  So ,COMMA  this one is .PERIOD  So ,COMMA  here is the condition check counter is my control
variable and increment and decrement operation .PERIOD 
Now ,COMMA  you are getting this while statement and now let us try to find the simple English
meaning of while .PERIOD  We often write something like this while it is raining stay home ;SEMICOLON  that
means ,COMMA  as long as it is raining stay home .PERIOD  So ,COMMA  this is the conditions condition as long as
the condition is true do this ,COMMA  here you see while the counter is less than 10 as long as this
condition is true do this .PERIOD  If this condition is false then come here do not do this that is the
meaning of the semantics of while .PERIOD 
So ,COMMA  while is used for one of the methods by which we can achieve counter control
repetition now counter control this we have seen .PERIOD 

So ,COMMA  the while statement actually looks like this ,COMMA  while some condition the statements to
repeat it can be one statement or it can be multiple statements as is shown here within
this block all right ,COMMA  this entire statement should be this entire thing should be repeated ;SEMICOLON 
example here suppose here is a weight loss program I mean as if you have being told to
lose weight by following this while weight is greater than equal to 65 .PERIOD  While weight is
greater than equal to 65 ;SEMICOLON  that means ,COMMA  as long as your weight is greater than 65 ,COMMA  then printf
go exercise ok .PERIOD 

Then come back again enter your weight and then read the weight ,COMMA  now here there is a
nice thing often we had encountered the scanf and printf independently .PERIOD  Now look at this
statement printf enter your weight scanf weight what does this two together mean .PERIOD 

I have got my screen here and a program is running and it just says scanf percentage d
and w say weight ,COMMA  you do not see anything on the screen ,COMMA  but suppose somebody who is a
little more helpful to the user writes printf enter your weight all right .PERIOD  Then here on the
screen it is printed enter your weight and then since backslash n is there you are here .PERIOD 
Now ,COMMA  scanf percentage d and w .PERIOD  Now here then when you type your weight say 65 then
that is shown here you know what data you are supposed to give .PERIOD  So ,COMMA  this sort of thing
makes it more interactive all right .PERIOD  So ,COMMA  here you see these two I have made the program
more interactive ,COMMA  but what is the program do ?QUESTIONMARK  It checks at every point first it checks
weight .PERIOD  If the weight is not greater than 65 ,COMMA  it will simply come out here because this
condition is false otherwise it will carry out all these statements and then it will read the
weight again you see again ,COMMA  the weight has been read and after the weight has been read
it is coming back here and checking it again whether the weight is greater than 65 .PERIOD  If by
one days exercise you have reduced your weight then ;SEMICOLON  obviously ,COMMA  you need not exercise
more you can come out otherwise you will have to again go and do this .PERIOD  So ,COMMA  while is a
very important statement you should understand the meaning of this ,COMMA  and we will try to
do a couple of more exercise on examples on this .PERIOD 

Thank you .PERIOD 

We were looking at C constructs by which we can achieve repetitions or loops ;SEMICOLON  that
means ,COMMA  a set of statements will be executed repeatedly for a fixed number of times ok .PERIOD 

So ,COMMA  one of such constructs that we came across was the while statement as is being
shown here while .PERIOD  And you can see the structure of this that while a particular condition
is true ,COMMA  we will carry out a set of statements .PERIOD  It can be one statement or it can be a
number of statements as is shown here a number of statements will be repeated as long
as this condition is true .PERIOD  An example that we had seen in the last lecture was this that is
as long as I can read this while as long as all right .PERIOD  As long as the weight is greater than
65 we will have to do exercise all right ,COMMA  and here you again check the weight and if it is
greater than 65 you will carried out that is the structure of the while statement .PERIOD 
Now ,COMMA  how can you use it fruitfully ?QUESTIONMARK  Let us take an example of using the while loop for
some meaningful computation .PERIOD  For example ,COMMA  I want to add 10 numbers the example that
we are doing earlier we had shown the 0 count for that .PERIOD  So ,COMMA  I have got a value N .PERIOD 

Let us see let us do it for a small n number N equals to 5 .PERIOD  So ,COMMA  I will carry out the sum of
5 numbers .PERIOD  So ,COMMA  I will have a count another variable count which may be initialized to 0
ok .PERIOD 
Now ,COMMA  we can write something like .PERIOD  So ,COMMA  initially count is 0 ,COMMA  count is an integer ,COMMA  count is 0
while count is less than N and also I do another thing I am going to add 5 numbers .PERIOD  So ,COMMA  I
create another variable sum .PERIOD  So ,COMMA  sum is 0 and count is 0 .PERIOD  So ,COMMA  while count is less than N ,COMMA  I
can I write a complete program ;SEMICOLON  now printf .PERIOD  Please enter a number and then .PERIOD  So ,COMMA  on the
screen I will have please enter the number printed here ,COMMA  then I am doing scanf percentage
d and num ,COMMA  num is the variable which I am reading ,COMMA  and then I am adding updating sum
initially sum was 0 .PERIOD  So ,COMMA  sum plus num all right I do this and then I how many numbers I
have read I have read one numbers .PERIOD  So ,COMMA  I will do count plus plus ;SEMICOLON  that means ,COMMA  count is
now 1 .PERIOD 
So ,COMMA  one number has been read .PERIOD  So ,COMMA  I will be completing here ,COMMA  now let us see what will
happen .PERIOD  Suppose M was 5 .PERIOD  So ,COMMA  sum is 0 .PERIOD  So ,COMMA  the first number has been read .PERIOD  So ,COMMA  count
was 0 please enter a number and some number has been entered and suppose that number
was 5 ,COMMA  then sum is sum plus number .PERIOD  So ,COMMA  this one becomes 5 then I increment count .PERIOD  So ,COMMA 
count becomes 1 .PERIOD  I come back here ,COMMA  I find count is still less than 5 ,COMMA  because I am going to
n is 5 right .PERIOD 

So ,COMMA  count is still less than 5 I again do that suppose I did the second number 6 .PERIOD  So ,COMMA  then
this becomes here I add this becomes 11 and count becomes 2 .PERIOD  Please note that count in
this case is therefore ,COMMA  keeping a count of how many numbers I have already read because
I am reading the number here and then incrementing count .PERIOD  So ,COMMA  count now I have read 2
numbers and I have added the sum ok .PERIOD 
So ,COMMA  now after doing this count is becoming 2 average ,COMMA  2 numbers I again go here now 2
is less than 5 I take another number say 11 .PERIOD  So ,COMMA  I add sum .PERIOD  So ,COMMA  it becomes 22 and I
increment count 3 .PERIOD  I have read 3 numbers I go up again here and read the forth number
15 add that with sum .PERIOD  So ,COMMA  22 plus 15 will be 37 and then count will be upgraded it will
become .PERIOD  So ,COMMA  I have read 4 numbers 5 6 11 15 .PERIOD 
Now ,COMMA  I again go up go up here and check count ,COMMA  count is 15 yeah sorry count is 4 which
is less than 5 .PERIOD  So ,COMMA  I read another number suppose that is 7 I come here add it ,COMMA  it becomes
44 and I increment count I first add that number .PERIOD  So ,COMMA  it becomes 44 and then I increment
count .PERIOD  So ,COMMA  count becomes 5 meaning that I have already read 5 numbers .PERIOD 
Now ,COMMA  when I go back here ,COMMA  I check is count less than N ?QUESTIONMARK  No therefore ,COMMA  I will come out of
that and maybe here I will write something like printf the sum is assuming integers is
percentage d back slash n and here I print sum and whatever I do here are the other
components of the complete program declarations integers and all those things are there
all right .PERIOD 
Now ,COMMA  point to be careful about ,COMMA  I must be very careful about expressing the condition .PERIOD 
Look here if instead of this I had if instead of this I had made it less than equal to n then
what would have happened ?QUESTIONMARK  If instead of countless than n ,COMMA  if I had written count less than
equal to n what would have happened ?QUESTIONMARK  After count is five ;SEMICOLON  that means ,COMMA  I have read 5
numbers have added 5 numbers and 44 is my result I would again go back here ,COMMA  and find
that count is less than equal to 5 count is 5 therefore ,COMMA  this condition would be true ,COMMA  I
would again come and would have read another number sorry I should cut it out .PERIOD  I would
have read another number and then count would be incremented 6 ,COMMA  I would have 45
which would be along result because here actually I have read 6 numbers .PERIOD  So ,COMMA  you must
be very careful to specify this particular statement .PERIOD 

So ,COMMA  that the number of times you want the loop to work should be accurate should be
correct .PERIOD  So ,COMMA  I think you have understand this example ,COMMA  a very simple program ,COMMA  but some
theory is needed about this .PERIOD  So ,COMMA  that was an example of while statement .PERIOD 

So ,COMMA  here is another example suppose the digit is 0 what would this one do can you find
out what this will do ?QUESTIONMARK  This is a while statement .PERIOD  All of you try to look at it and find out
what this loop does this while loop does .PERIOD  If you look at it carefully you will see that I am
starting the digit I have initialized digit to be 0 .PERIOD 
Now ,COMMA  while digit is less than equal to 9 ,COMMA  first time I come here it is less than equal to 9 .PERIOD 
So ,COMMA  what will it do careful it will come to this printf statement and we will print digit now
it is a post increment or pre increment it is a post increment ;SEMICOLON  that means ,COMMA  first digit will be
printed .PERIOD  So ,COMMA  0 will be printed then digit will be incremented .PERIOD  So ,COMMA  this digit will now
become 1 I again go back here and find that digit is less than equal to 9 right .PERIOD  So ,COMMA  I will
come here ,COMMA  print the digit 1 and then again increment digit ,COMMA  digit will become 2 I go back
here check whether it is less than equal to 9 ,COMMA  it is still less than equal to 9 ,COMMA  I will come
inside the loop will print the digit 2 in that way it will go on ultimately 8 will be printed
and 8 has been printed ,COMMA  and I go back after printing 8 ;SEMICOLON  this has been incremented to 9 ,COMMA  I
go back here .PERIOD 
Now ,COMMA  you see here less than equal to 9 therefore ,COMMA  I will still executed ;SEMICOLON  that means ,COMMA  I will
print 9 and then increment it ,COMMA  it will be 10 and then when I go up here this condition is no

longer true therefore ,COMMA  I will come out of this loop .PERIOD  So ,COMMA  what will be printed 0 to 9 the 10
numbers will be printed .PERIOD  So ,COMMA  that is how the while loop works .PERIOD 

So ,COMMA  this flowchart is very important to remember what while does you have actually
understood it by now ,COMMA  but the key point to note the most important point to note is this ,COMMA 
that when I am executing the program in this direction ,COMMA  I first compute the condition .PERIOD 
First I compute the condition and if the condition is true I execute the body of the loop
then I again go up check the condition and this will be going on .PERIOD 
So ,COMMA  first the condition is checked if it is false I will go out of the loop .PERIOD  So ,COMMA  if initially say
for example ,COMMA  I write something like this say digit ,COMMA  is equal to 20 ,COMMA and I start something like
while digit is less than equal to 15 ,COMMA  some things I will be doing .PERIOD  Now in this case when it
comes to this condition at the very beginning in will fail ,COMMA  because this condition is not
true .PERIOD  So ,COMMA  it will come out to this false path and this loop will not be executed ,COMMA  will be just
coming to the next statement after the loop .PERIOD 
So ,COMMA  in while the condition is first evaluated and depending on the success of the test of
the condition ,COMMA  will either enter the loop or will bypass the loop .PERIOD  So ,COMMA  this flowchart is very
important .PERIOD 

Now ,COMMA  we will be contrasting while statement with another statement which is the do
while statement what is the difference looks like very similar .PERIOD  So ,COMMA  there is a scope of
confusion while and do while .PERIOD  So ,COMMA  as the name implies here do comes first do something
and then check the condition .PERIOD  What it means is say do some statements here while
condition will do all these statements and then check the condition .PERIOD 
So ,COMMA  let us see what will happen here ,COMMA  the weight loss program again really with while is
do go exercise .PERIOD  So ,COMMA  we start with a do you do ,COMMA  go exercise printf comeback whatever
whatever ,COMMA  then read the weight and while weight is 65 .PERIOD  So ,COMMA  at least the condition is being
checked here the condition is being checked here .PERIOD  So ,COMMA  it will at least carry out the
computation once .PERIOD 

So ,COMMA  the digit thing if we do suppose I write something like this .PERIOD  So ,COMMA  digit is 20 ,COMMA  and I write
while digit is less than equal to 15 say I do digit plus plus ,COMMA  printf digit .PERIOD  Now in this case
since the digit is 20 what will be printed here nothing all right or say let me make it even
simpler .PERIOD 

Let me make it a little different digit is 20 ,COMMA  while 15 digit plus plus printf percentage d
back slash n digit .PERIOD  If I do this since digit is 20 what will be printed here 20 will be printed
because this plus plus will not be executed right because here it will feel .PERIOD 

But if I do it now if I do it as digit equals 20 ,COMMA  do I need to give the bracket ,COMMA  I may or may
not ,COMMA  but let me gives give it it really does not matter digit plus plus ;SEMICOLON  while digit is less
than 15 less than equal to 15 and here I write printf percentage d back slash n digit all
right what will happen let contrast this here also digit is 20 here also digit was 20 .PERIOD 
Now ,COMMA  here it was tested at this point .PERIOD  So ,COMMA  this digit plus plus will not be executed ,COMMA  it will
straight way come here and will print digit it will be 20 whereas ,COMMA  in this case I first
encountered this do ,COMMA  and as I do I check this digit I make this digit plus plus ;SEMICOLON  that means ,COMMA 
it becomes 21 ,COMMA  and then I check while digit is less than equal to 15 .PERIOD  Now I find digit is
not less than equal to 15 of course ,COMMA  I will not do it again ,COMMA  but once I have already done it .PERIOD 
So ,COMMA  when I take the printf digit will be printed to be 21 .PERIOD 
So ,COMMA  here is the difference between while and do while .PERIOD  So ,COMMA  these are 2 constructs by
which just 2 examples constructs by which we can carry out the loop .PERIOD  So ,COMMA  at least one
round is carried out .PERIOD  So ,COMMA  if I take if I look at the flowchart ,COMMA  it will be looking like this it
will have a set of statements which will be executed at least once whatever the condition
b condition s .PERIOD  So ,COMMA  this will be executed first it will be first executed here .PERIOD 

And then we check the condition if it is false I will not do it again ,COMMA  I will come out
otherwise I will repeat .PERIOD  So ,COMMA  here again that old example digit was 0 ,COMMA  do printf digit plus
plus while digit is less than 9 .PERIOD  So ,COMMA  you remember in the earlier case we had printed 0 1 2
3 4 5 6 7 8 9 ;SEMICOLON  now what will be printed in this case let us see digit is 0 initially .PERIOD 

Now ,COMMA  we come here first we print digits .PERIOD  So ,COMMA  0 is printed ,COMMA  0 is printed then digit plus plus
is done .PERIOD  So ,COMMA  digit is 1right .PERIOD  So ,COMMA  digit now becomes 1 digit was 0 .PERIOD  So ,COMMA  it becomes 1 and
then I check is digit less than 9 yes it is less than 9 .PERIOD  So ,COMMA  I again print digit one is printed
let us make this 9 let us say that is 5 all right let us say it 5 .PERIOD  So ,COMMA  we have done make made
it one and after printing one digit has been made 2 plus plus has been done ,COMMA  I check again
it is less than 5 .PERIOD  So ,COMMA  I will do .PERIOD  Go to the loop again I will do it again .PERIOD  So ,COMMA  I will be printing
2 and then make digit to be 3 it is still less than 5 ,COMMA  I will go again I will print 3 and then I
make digit to be 4 still less than 5 ,COMMA  I print 4 I make it 5 all right less than equal to 5 right .PERIOD 
So ,COMMA  I print 5 print 5 I first print 5 ,COMMA  then increment it to 6 as I do it I increment to 6 and
then I check whether it is a less than equal to 5 .PERIOD 
So ,COMMA  if it is since it is less than not less than equal to 5 ,COMMA  I will come out of the loop .PERIOD  So ,COMMA 
what I will be printing is 0 1 2 3 4 5 .PERIOD  So ,COMMA  this is an example of while do while next .PERIOD 

So ,COMMA  this is one type of statement that we have encountered here ,COMMA  that is while and do
while .PERIOD  Here we are not be specifying any number of times that it will be doing ;SEMICOLON  as long as
a condition is not met I will be doing it .PERIOD 
Now ,COMMA  how is it that the condition is being affected it is through the computation insides .PERIOD 
So ,COMMA  for example ,COMMA  the computation here this is plus plus ,COMMA  that is being done by that this
condition variable is changing all right there are cases where I know a priory beforehand

I know beforehand that I will have to carry it out 10 times I will have to carry it out 20
times so and so forth ok .PERIOD 
So ,COMMA  for that another construct is very important and is used in C language that is the ;SEMICOLON  for
construct .PERIOD  Welcome to the ;SEMICOLON  for construct this a little complicated ,COMMA  you should be attention
there 3 components of this for one is an initial a value ,COMMA  now this initial value can be
assigned to a control variable .PERIOD  So ,COMMA  there is a loop program and how many times it will
loop .PERIOD  How many times it will loop that is being determined by some control variable .PERIOD  In
the case of while what was our control variable ?QUESTIONMARK  Say for example ,COMMA  in the earlier is a case
of earlier example the value of digit was the control variable .PERIOD  Here we put some control
variable and initialize the control variable with some value ;SEMICOLON  here some control variable is
initialized and then we have a condition .PERIOD  If that condition is true ,COMMA  then I will enter the
loop and do that and after doing this loop I have got some iteration parameter by which
we update the control variable and check the condition in that way it will go on .PERIOD 
So ,COMMA  let us have a look at the structure in a little more detail .PERIOD 

See here we have got some initial value expression some condition and iteration and we
have got some statements which will be looping .PERIOD  Here is an example say I am calculating
the factorial of 10 .PERIOD  So ,COMMA  I am trying to compute the factorial of 10 ,COMMA  some people write it in
this way some people write it in this way all right .PERIOD 

Now ,COMMA  here what is being done I will explain it in a little bit more detail ,COMMA  fact is a variable
which is standing for factorial it is initialized to 1 .PERIOD  Now you know factorial of 5 is what ?QUESTIONMARK 
1 times 2 times 3 times 4 times 5 right .PERIOD  So ,COMMA  I am started with some variable and
multiplying it with it is successor ,COMMA  and then the product I take and multiply with the
successor of the last integer and in that way it goes on .PERIOD  So ,COMMA  here is a look of how it will
look like we have got a for statement here ,COMMA  and I am saying for I assigned one now this is
what I was talking about I is a control variable here that is being initialized to 1 .PERIOD 
So ,COMMA  that is less than 10 of course ,COMMA  because here I am trying to compute factorial 10 and
then what I do fact was 1 .PERIOD  So ,COMMA  fact will be fact multiplied by i what was i ?QUESTIONMARK  I was 1 .PERIOD  So ,COMMA  it
is one times 1 ,COMMA  then after this operation is done I go and do this iteration operation
iteration operation what it is doing it is incrementing i and i is becoming 2 ,COMMA  and then
before I enter I just check whether it is still less than 10 yes it is less than 10 ,COMMA  I will again
do that .PERIOD  So ,COMMA  fact will be it was 1 ,COMMA  1 times what is i now 2 ,COMMA  1 times 2 after I compute 1
times 2 I will increment i .PERIOD  So ,COMMA  that will become now 3 it is still less than 10 please follow
my pen it is still less than 10 ,COMMA  I go in compute what was I three .PERIOD  So ,COMMA  I whatever was fact
was the product of 1 and 2 .PERIOD  So ,COMMA  I multiplied that with 3 ,COMMA  and then I increment the iteration
variable it becomes 4 again I come and check is it less than 10 yes it is I go on here and I
multiply it in that way it goes on and on .PERIOD 
Now ,COMMA  ultimately it will be ultimately it will be like that 5 6 7 8 now suppose i is 9 sorry
suppose i is 9 .PERIOD  So ,COMMA  I come here I multiplying fact with 9 i plus plus .PERIOD  So ,COMMA  i becomes 10 ,COMMA  i
come here ,COMMA  i is still less than equal to 10 is it is equal to 10 ,COMMA  I come here multiply 10 i
plus plus it becomes 11 ,COMMA  I come here this condition is not satisfied I come out all right ,COMMA 
this is the for statement will look at it in the little more details in the next class .PERIOD 

We were looking at new construct for building up loops in C language and that construct
is for construct .PERIOD 

So ,COMMA  let me first write a simple program again the same program that we are writing for
reading for finding the sum of 10 numbers .PERIOD  So ,COMMA  just I am writing and you try to follow
what the meaning of this program is ,COMMA  then we will go and further explain it .PERIOD  My intention
is to read n numbers and find their sum the simple thing ,COMMA  how can I write that .PERIOD 
So ,COMMA  I put a variable again sum is 0 and I have read some value n whatever that value is .PERIOD 

Suppose say n equals 5 user has provided me or I can initialize it to 5 .PERIOD  So ,COMMA  5 numbers I
will read and add .PERIOD  Now ,COMMA  I write for i .PERIOD  What is this i ?QUESTIONMARK  i is an control variable or we also
call it as very common name of this is an index variable ,COMMA  index variable .PERIOD  It need not be i
it can be anything ,COMMA  but an integer variable .PERIOD  So ,COMMA  that has to be declared at the beginning .PERIOD 
Si ,COMMA  I can declare let me start with normal declarations int ,COMMA  some program has start at main
int sum i and the number that I will read ,COMMA  I will see if I need any other variables later and
also n sorry and also n .PERIOD 

And here I do sum 0 n equals to 5 .PERIOD  Now ,COMMA  this thing I could have read from the user ,COMMA  could
have taken from the user the value .PERIOD  How could I take it from the user ?QUESTIONMARK  By doing a scanf ,COMMA 
scanf printf please enter the number of numbers you want to add then scanf percentage d
ampersand n in that way I could read this But here for the sake of saving time I am just
initializing it N is 5 .PERIOD 
Now ,COMMA  what I do for i ,COMMA  this i equals 1 semicolon .PERIOD  So ,COMMA  this one complete statement i less
than equal to N semicolon i plus plus .PERIOD  What does it mean ?QUESTIONMARK  We will see what it means
then what would I do I will printf .PERIOD  Please enter number let us say integer I call it please
enter an integer scanf percentage d num ampersand num .PERIOD  Then sum assigned sum plus
num that is all .PERIOD 
Here I do not have to increment this control variable why ,COMMA  after I add the number that has
been read here after I add that with sum I am going back to this for loop and where am I
going to ,COMMA  I am now doing this operation that is incrementing i .PERIOD  So ,COMMA  i will become it was i
was 1 ,COMMA  so i will become 2 and then again I add the number .PERIOD  After I make i equal i
increment i ,COMMA  initially i was 1 here ,COMMA  so what is happening .PERIOD  Let us look at what is happening
to the control variable of the index i was 1 ,COMMA  I do it once .PERIOD  So ,COMMA  the sum becomes number
suppose the number was 5 suppose the number was 5 that was entered .PERIOD  So ,COMMA  the sum
becomes 5 ,COMMA  I increment i so i becomes 2 ,COMMA  I check it is less than 5 less than this n .PERIOD  I again
read another number suppose I read 7 as the second number .PERIOD 
So ,COMMA  sum becomes 5 plus 7 12 and then I go back here increment it ,COMMA  it becomes 3 all right .PERIOD 
I check again after doing this I come here check it is still less than 5 ,COMMA  so less than n I
again do this I need another number suppose it is 12 .PERIOD  So ,COMMA  12 plus 12 it will be 24 .PERIOD  Here
increment this ,COMMA  it becomes 4 ,COMMA  i still go over there still it is less than 5 .PERIOD  I read the next
number which was 6 say ,COMMA  so sum becomes 30 here .PERIOD  Then i is incremented to be 5 ,COMMA  i again
come here and check that is less than equal to n true .PERIOD  So ,COMMA  I come here I read another
number say 10 sum becomes 40 ,COMMA  come back here i become 6 ,COMMA  i come at this point this
condition is not true therefore ,COMMA  i will come to this point where maybe I will be writing
something like printf percentage d backslash n sum .PERIOD  So ,COMMA  the sum will be printed at this
point 40 .PERIOD 
Now ,COMMA  you see I have read how many numbers 5 7 12 6 10 ,COMMA  5 numbers and that is what I
wanted to do .PERIOD  Now ,COMMA  I can look at this .PERIOD  Now ,COMMA  I could have done several this thing in a

different way also .PERIOD  For example ,COMMA  if I had just instead of this i equal to 1 ,COMMA  I make it I
initialize this to be 0 all right ,COMMA  I initialize i to 0 and keep everything the same .PERIOD  What will
be changing ?QUESTIONMARK  N is 5 ,COMMA  so here i will start not from 1 ,COMMA  but from 0 .PERIOD  So ,COMMA  first will be 0 then it
will be 1 ,COMMA  then it will be 2 ,COMMA  then it will be 3 ,COMMA  then it will be 4 ,COMMA  then it will be 5 .PERIOD  So ,COMMA 
ultimately how many numbers would I read ?QUESTIONMARK  6 numbers .PERIOD  But I was actually trying to read
5 numbers .PERIOD  I am sure you are confused .PERIOD  So ,COMMA  let me show it through another example .PERIOD 

Suppose I read ,COMMA  I want to read 3 numbers .PERIOD  If I write it in this way for i ,COMMA  now by the way it
need not be i ,COMMA  I could have written declared it properly and I could have taken any
variable to be my index ,COMMA  I could have saved that it is my index But the only constraint is
that this must be an integer variable .PERIOD  My index is 0 ,COMMA  note the semicolon here because this
is one statement then I write my index less than equal to 5 say less than equal to I am
trying to read 3 .PERIOD  So ,COMMA  my index is less than equal to 3 semicolon again and then my index
plus plus and I just read the numbers .PERIOD  So ,COMMA  I am dropping off the printf just writing scanf
percentage d and num .PERIOD 
Now ,COMMA  I since its only one statement I can simply remove this parenthesis .PERIOD  Now ,COMMA  let us see
I wanted to read 3 numbers .PERIOD  Now ,COMMA  what will happen ?QUESTIONMARK  Here I write my value the value of
my index and the value of num .PERIOD  My index has been initialized to 0 and I check with my
index my I check with this statement ,COMMA  it is less than equal to 3 .PERIOD  So ,COMMA  I read the number

suppose the number is 15 ,COMMA  I increment my index .PERIOD  So ,COMMA  my index now becomes 1 ,COMMA  my index
becomes one still less than equal to 3 ,COMMA  I read another number 5 .PERIOD 
Next I come here .PERIOD  So ,COMMA  I do this and come here and my index becomes 2 ,COMMA  still less than
equal to 3 ,COMMA  I read the number say 14 .PERIOD  I again come here my index becomes 3 less than
equal to 3 ,COMMA  I read another number 5 .PERIOD  I come here my index becomes 4 I compare this
condition is not satisfied .PERIOD  So ,COMMA  I come out of this loop .PERIOD 
But in the process how many numbers have I read ?QUESTIONMARK  I have read 4 numbers 1 2 3 4 .PERIOD  But
what was my intention ?QUESTIONMARK  My intention was to read 3 numbers .PERIOD  So ,COMMA  where did I go wrong
where did my logic go wrong .PERIOD  This is what as a programmer you must be very careful
and cautious about .PERIOD  Where did I go wrong ?QUESTIONMARK  You can say that I have gone wrong in either
of the 2 places ,COMMA  one is I could have simply initialized my index not with 0 ,COMMA  but I could
have initialize it to 1 .PERIOD  In that case what would have happened ,COMMA  first this part we forget we
will start with my index one ,COMMA  read one number less than 3 .PERIOD  So ,COMMA  then become 2 less than 3
I read the other number increment it ,COMMA  it becomes 3 still less than equal to 3 I read this
number ,COMMA  whenever I come to 4 then my index becomes 4 this condition is violated .PERIOD  So ,COMMA  I
will not be read in this number it will be all right .PERIOD 
Otherwise ,COMMA  another thing I could have done what could I have done ?QUESTIONMARK  You must have
discovered it by .PERIOD  Now ,COMMA  that suppose I had kept my index to be 0 ,COMMA  I decide no I like this
circular figure 0 very much ,COMMA  so I keep it like that .PERIOD  Then what should I do in order that I
can still be logically correct ?QUESTIONMARK  I would have changed this condition from less than equal to
to less than ,COMMA  then let us see what would have happened .PERIOD  Then also my index starts with 0
I read one number incremented .PERIOD  So ,COMMA  it becomes 1 ,COMMA  I check for the condition my index is
still less than 3 .PERIOD  So ,COMMA  I read the other number 5 my index is incremented 2 still less than 3 .PERIOD 
I read the other number 14 fine as soon as I after I read I make it 3 incremented and I
check the condition .PERIOD  Now ,COMMA  it is no longer true it is not less than ,COMMA  but equal to ,COMMA  but less than
equal to is not my condition my condition is less than therefore ,COMMA  I will not read the forth
number .PERIOD 
So ,COMMA  this is a point where often people make mistakes while writing for loops .PERIOD  So ,COMMA  I
encourage all of you to very carefully study this we look into the for loop a little bit
more .PERIOD  So ,COMMA  we have seen the initial .PERIOD  So ,COMMA  I have given you some example one point that is
very important you must have noticed while I was writing this that there is no semicolon

at the end of this statement why ,COMMA  because the entire for statement has not ended here it is
going on for this period to this ,COMMA  that is the end of the statement .PERIOD  So ,COMMA  no semicolon is given
for this for conditional part all right .PERIOD  And here all these are expressions you can see that
this I am sorry what happened .PERIOD  You can see that this is an expression sorry this is an
expression ,COMMA  this is another expression ,COMMA  this is another expression .PERIOD 
Now ,COMMA  since these are expressions it can be very general for example ,COMMA  I could have written
initialization is fine ,COMMA  but here I could have done something i plus p times 2 is less than 25
that is very much valid and here also I could have done i assigned I could have written i
assign i plus 5 or I could have written i assigned i times 5 anything .PERIOD  This is a modified
modulator I am changing the condition and changing the index variable and then testing
that index variable with respect to a condition .PERIOD  Only point that you should remember is
that that this must been integer variable .PERIOD 

So ,COMMA  how it works ?QUESTIONMARK  The expression one that is say typically i assigned 1 ,COMMA  the expression 1
is used to initialize some variable call index that controls the looping action .PERIOD  Expression
2 i less than equal to 5 represents a condition that must be true so that the loop continues .PERIOD 
An expression 3 say i assigned i plus 2 all right that is the bracket ,COMMA  i assigned i plus 2 or i
plus plus as you are seeing till now ,COMMA  they are used to alter the value of the index initially
assigned by expression 1 .PERIOD  We have seen this ,COMMA  so not much to worry about it .PERIOD 

So ,COMMA  expression one is used to initialize ,COMMA  so here .PERIOD 

So ,COMMA  what is the way it is done is first expression 1 is executed .PERIOD  So ,COMMA  for j equals 0 ,COMMA  j less
than equal to k plus 5 can be anything it can be an expression j plus plus .PERIOD  So ,COMMA  first this
expression is executed then after we execute this ,COMMA  I check by initialization have I violated
the condition in that case of course ,COMMA  there is no point getting into the loop I will go out .PERIOD 
Otherwise if it is not done then I go inside the loop carry out the loop and then instead of
going into the loop straight back I will first come to this alteration or modulator

statement .PERIOD  So ,COMMA  it is I am sorry what did I write here .PERIOD  I wanted to write j assign j plus 1
here or j plus plus whatever .PERIOD  I do that and after I do that what do I do ,COMMA  I immediately
come back to this expression and test it again is it true ,COMMA  if so I will get into otherwise I
will exit .PERIOD  So ,COMMA  this is the structure of the for statement .PERIOD 
Now ,COMMA  there are a couple of critical issues ,COMMA  but before that let us write a simple program
with for .PERIOD  Suppose I want to find the sum of first 10 natural numbers .PERIOD 

What are the first 10 natural numbers ?QUESTIONMARK  1 2 3 4 5 up to n .PERIOD  So ,COMMA  in school mathematics you
know that the sum for 10 numbers it is the formula is n times n plus 1 by 2 right .PERIOD  So ,COMMA  one
simple program is if I want to find the sum of n numbers you can simply do in your main
int sum assign 0 and then in one short you can write sum assign 10 because I want to
write 10 natural numbers ,COMMA  10 times 11 divided by 2 and then printf sum ,COMMA  that could be
one way .PERIOD  But that is not what I am going to do .PERIOD  I want to illustrate the for loop .PERIOD 

So ,COMMA  the way I can do it is main main function and here I put in int sum equals 0 .PERIOD  Now ,COMMA  I
know that it is not I am not going to find the sum of n natural numbers I am going to find
the sum of 10 natural numbers .PERIOD  So ,COMMA  I can write it in this way for .PERIOD  So ,COMMA  in sum equal to 0
another variable I have to initialized that is my index I write it int my index not
necessarily i or j all right ,COMMA  but it must be an integer .PERIOD  So ,COMMA  for ,COMMA  but I am not initializing it
here ,COMMA  for my index assigned 0 my index less than 10 ,COMMA  please verify whether I am right or
wrong my index plus plus .PERIOD  Sum assigned sum plus my index plus 1 what will happen ?QUESTIONMARK 
Sum was 0 ,COMMA  my index was 0 ,COMMA  so my index plus 1 ,COMMA  the sum will be 1 .PERIOD  What am I
expecting ?QUESTIONMARK  10 times 11 by 2 right .PERIOD  So ,COMMA  that will be 55 right ,COMMA  sum of first n natural
numbers .PERIOD 
Now ,COMMA  my index becomes 1 .PERIOD  So ,COMMA  my index is 1 now ,COMMA  less than 10 I again add that .PERIOD  So ,COMMA  sum
was what was my sum ?QUESTIONMARK  My sum was 1 .PERIOD  So ,COMMA  here is first iteration sum was 1 ,COMMA  then sum
was 1 ,COMMA  I have written it here .PERIOD  So ,COMMA  sum plus my index my index was 1 .PERIOD  So ,COMMA  1 plus 1 am I
right .PERIOD  So ,COMMA  here it was right .PERIOD  Now ,COMMA  sum was 1 and my index is 1 plus ,COMMA  2 ,COMMA  1 plus 1 .PERIOD  So ,COMMA  it
will be 1 plus 2 ,COMMA  this will be added so the sum will be 3 .PERIOD 
Next my index will be implemented to 2 .PERIOD  So ,COMMA  now ,COMMA  sum is 3 my index is 2 plus 1 ,COMMA  so 3
plus 2 5 and 1 so sum will be 6 .PERIOD  In that way it will go on and ultimately I will come to
this point where it will exceed 10 and then I can stop .PERIOD 

So ,COMMA  here is now ,COMMA  you can also do that ,COMMA  some of natural numbers you can do that all in a
loop using the very the index itself being updated and creating the different natural
numbers every time .PERIOD 

So ,COMMA  if I had written it in this way for i equals 1 ,COMMA  there is the first one less than 10 less than
10 would that be i plus plus sum equals sum plus i .PERIOD  What would have happened ?QUESTIONMARK  i is 1 ,COMMA 
sum is 1 right .PERIOD 
Now ,COMMA  next i is incremented i is 2 and then sum was 1 so that will be added sum is 3 .PERIOD 
Again this will be added 3 sum is 4 sum is 3 .PERIOD  So ,COMMA  then be 6 again 4 then be 10 in that way
it will go on ultimately .PERIOD  So ,COMMA  suppose I was trying to do it for 5 numbers .PERIOD  So ,COMMA  i just i less
than 5 first 5 natural numbers .PERIOD  So ,COMMA  sum is 5 .PERIOD  So ,COMMA  now 4 ,COMMA  I have already taken .PERIOD  Now ,COMMA  i plus
plus it becomes 5 ,COMMA  but I will get stuck here .PERIOD 
So ,COMMA  if I start it with 1 what should I do ?QUESTIONMARK  I just did it in a couple of moments earlier in the
earlier lecture .PERIOD  So ,COMMA  what should I do here ?QUESTIONMARK  I should make it i less than equal to 5 ,COMMA  in that
case I will take this 10 plus 5 15 .PERIOD  So ,COMMA  5 natural numbers sum of 5 times 6 by 2 is 15 right .PERIOD 
So ,COMMA  I can compute that using this loop all right .PERIOD  So ,COMMA  that is a very interesting application .PERIOD 
So ,COMMA  for is a very powerful will see ,COMMA  in future application that for is a very powerful
construct using which we can do many things .PERIOD 

Now ,COMMA  we are discussing about formation of loops ,COMMA  creation of loops in a program using
for statement .PERIOD  Before that we have seen the while statement and do while statement and
then we have seen the for statement as well .PERIOD 

Now ,COMMA  the for statement as we had shown we had discussed in the last class it is basically
starting to take an expression ,COMMA  arithmetic expression and then it starts with in sorry
initialization expression and then we check a particular condition .PERIOD  So ,COMMA  something like this
for some variable integer variable j assigned some value 5 maybe and then some
expression here this one is j less than equal to 25 and then here there will be some
statements which will be executed and after that there is a third expression which is
altering it and that can be j assigned j plus 5 all right and the body of the x loop .PERIOD  These
are structure that we had seen .PERIOD 

Now ,COMMA  there are some critical issues that are to be noted for the for structure .PERIOD 

So ,COMMA  if you look at this you can see that we are using arithmetic expressions .PERIOD  For example ,COMMA 
x assigned 2 and y assigned 10 that is an arithmetic expression .PERIOD  So ,COMMA  similarly this is a
valid arithmetic expression for j assigned x ,COMMA  j less than equal to 4 times x times y that is
the condition .PERIOD  That means ,COMMA  after some computation will have to find out whether j is
satisfying this condition and here j here probably this is something this construct we have
not shown you ,COMMA  this is I do not like it very much and initially you need not bother about

this j plus equal to y by x this is a C structure ,COMMA  say C syntax expressing j equals j plus y
by x .PERIOD  So ,COMMA  the whole thing can be written in this way .PERIOD 
So ,COMMA  this ,COMMA  but that is not important for the purpose of understanding for expressions .PERIOD  So ,COMMA 
here is just an expression .PERIOD 

And this is equivalent to like this for say x was 2 and y was 10 ,COMMA  then this is equivalent to
j assigned 2 because j assigned x and j assigned 2 are essentially same ;SEMICOLON  j as less than
equal to 4 times x times y that means ,COMMA  4 times 2 times 10 that means ,COMMA  80 and j equals
assigned j plus y by x is 5 .PERIOD  So ,COMMA  this is equivalent all right .PERIOD  So ,COMMA  this is initialization ,COMMA  this is
loop continuation condition and this is the increment or I as I was saying that this is a
modulator or the alteration .PERIOD 
Now ,COMMA  increment can be negative .PERIOD  So ,COMMA  this increment all the way we are calling it
increment that is why we should not call it increment let us call it a modulator because
say the same thing I can write as for j assigned 2 maybe something j less than equal to 80
and might be j minus minus .PERIOD  It can be the case when can it be .PERIOD  Say for example ,COMMA  if I add
if I want that I will be printing the numbers in the reverse order starting from 10 .PERIOD  So ,COMMA 
what should I do ?QUESTIONMARK  So ,COMMA  can I do this what I want to do is ,COMMA  that I want to print something
like 10 9 8 7 5 all right in this order .PERIOD 

So ,COMMA  simply I can do this repeatedly in a loop for example ,COMMA  for j assigned 10 and j sorry ,COMMA  j
greater than equal to 5 j minus minus and here I just do printf percentage d backslash n j .PERIOD 
So ,COMMA  what will happen ?QUESTIONMARK  Initially j is 10 less greater than equal to 5 ,COMMA  so 10 will be printed .PERIOD 
Then I go back I decrement j .PERIOD  So ,COMMA  j will become 9 still greater than equal to 5 I come in
here print j 9 ,COMMA  I again decrement j decrement j becomes 8 I compare with this still it is
greater than equal to 5 I get in and printed .PERIOD  In that way I can do it I can repeatedly do the
same thing ,COMMA  but here as you can see I am being able to achieve this reverse order by
instead of incrementing and decrementing this index .PERIOD  That is why I can increment to
decrement ,COMMA  I can multiply it ,COMMA  I change it ,COMMA  I modulate it ,COMMA  that is why this to an alteration
expression or modulation expression is a better term than increment or decrement .PERIOD 

So ,COMMA  if the loop continuation ,COMMA  if the loop continuation condition is initially false is initially
false then the body struck the for structure will not be executed .PERIOD  It will proceed with the
statement for the next statement .PERIOD 

So ,COMMA  for example ,COMMA  if I write something like this as you have seen earlier j equal to 20 and
for i equals i assigned 1 ,COMMA  i greater than j i plus plus say and then I want to do some things
here all right .PERIOD 

Now ,COMMA  j is 20 I will first initialize i to 1 and immediately I find the first thing that I do is
its false I check this and its false i is not greater than j therefore ,COMMA  this stay these
statements will not be executed even once and the statements following the for loop will
be executed .PERIOD 

Now ,COMMA  here are some examples of for loops .PERIOD  This is again computing the factorial fact .PERIOD 
Factorial is a the variable ,COMMA  fact is touring the factorial factorial all of you know as
factorial n is n multiplied by n minus 1 multiplied by n minus 2 so on so forth up to 1 .PERIOD 
So ,COMMA  it is 1 and I have got a variable i .PERIOD  Now ,COMMA  you can see simply I can do it like this i
assigned 1 ,COMMA  i less than 10 i plus plus fact assign fact times i .PERIOD  Now ,COMMA  what is happening
here ?QUESTIONMARK  So ,COMMA  I have got fact to be 1 .PERIOD  So ,COMMA  i equals 1 then with that what I do is 1 times 1 is
fine and I then make i to be 2 and then i ,COMMA  i becomes then 2 .PERIOD  So ,COMMA  1 times 2 then i becomes
3 then 1 times 2 times 3 then i becomes 4 then 1 times 2 times 4 times 3 times 4 and so
on and so forth it will go on in this loop .PERIOD  So ,COMMA  that is a nice way of writing factorial .PERIOD 

And here is another example you can see what it does quickly .PERIOD  You can explain it
yourself what it does .PERIOD  Sum is 0 and N is a variable and count is another integer variable
all right .PERIOD  Sum is 0 ,COMMA  N is a 1 variable and count is another integer variable .PERIOD  Now ,COMMA  we are
reading N and for i equals 1 ,COMMA  i less than equal to N I am adding some .PERIOD  So ,COMMA  what is being
done here what will happen if I press this program what is going to happen ?QUESTIONMARK  Let us do
that .PERIOD 
Suppose I have read N to be here ,COMMA  I have read N to be 5 .PERIOD  Now ,COMMA  what am I doing here ?QUESTIONMARK  I
here there is one problem here i should have been declared there is a mistake here int N
and here i also add i should have been declared here .PERIOD  Now ,COMMA  i assigned 1 .PERIOD  So ,COMMA  i is 1 ,COMMA  N was
5 ,COMMA  i less than 5 less than equal to 5 .PERIOD  So ,COMMA  sum is sum was 0 .PERIOD  So ,COMMA  sum is 0 plus i times i ,COMMA  i
was 1 .PERIOD  So ,COMMA  0 plus 1 square and then I check i increment i .PERIOD  So ,COMMA  i becomes 2 ,COMMA  i becomes 2
and I check that i is less than it not less than a is still less than equal to 5 so I got this sum
and with that I add now ,COMMA  i square i times i ,COMMA  so 2 square .PERIOD  Similarly ,COMMA  it will go on it will do 3
square .PERIOD  So ,COMMA  i will become then 4 and then still it is less than equal to ,COMMA  so 4 square then i
will become 5 and still it is true .PERIOD  So ,COMMA  it will be 5 squared then i become 6 this condition
will be violated and i will come to this printf .PERIOD 
So ,COMMA  what will sum be sum is 1 square plus 2 square plus 3 square and if I make it N then
up to N square .PERIOD  So ,COMMA  this is the very well known series the sum of the square of natural

numbers we can compute by this small program using for loop right .PERIOD  So ,COMMA  it is a nice
example .PERIOD 

Now ,COMMA  we introduce the comma operator .PERIOD  As we say that here for when we write for then i
assigned 1 instead of that I can put in more than one statements here using a comma
operator .PERIOD  For example ,COMMA  for fact 1 i equals 1 ,COMMA  i less than equal to 10 .PERIOD  Now ,COMMA  this part is
what ?QUESTIONMARK  This part is the initialization .PERIOD  Now ,COMMA  remember that this will not be continuously
initialized ,COMMA  this is just an just a statement that I put here an assignment statement ,COMMA  but my
index variable for the control variable for the loop is i .PERIOD  So ,COMMA  I could have written this
earlier example of factorial maybe ,COMMA  earlier example of factorial this could be initialized
here also all right .PERIOD  So ,COMMA  that is just saving space saving the number of lines of code .PERIOD 
But personally I would suggest as I did earlier also that is for of those of you who are
beginners in programming you should not try this tricks or should not try this thriftiness
reducing the number of lines ,COMMA  that is not so important to how much you can reduce .PERIOD  The
most important thing is to be logically can syntactically correct while you write a
program ok .PERIOD 
So ,COMMA  we can give several things in comma like some here again .PERIOD  So ,COMMA  the program becomes
even smaller look smarter ,COMMA  but sometimes at the beginning if you try to do that you try to
be smart and in the process you may result in some long program long long logic better
avoid that .PERIOD 

Now ,COMMA  infinite loop in general what is an infinite loop .PERIOD  When a program continues ,COMMA 
program continues in a loop repeatedly it goes on and it is never completing its going on
because the condition that is supposed to turn out to be false at a particular point of time .PERIOD 
So ,COMMA  that it comes up the out of the loop never happens all right .PERIOD  That can always happen
that say if I write something like for i equals 1 ,COMMA  i less than n and whatever i plus plus .PERIOD 
Now ,COMMA  every time inside the loop when you get in you read you do something and then
increment i and when you come inside the loop you do i minus minus ,COMMA  then whatever has
been done here will be canceled out here .PERIOD  So ,COMMA  this loop will never reach this condition I
less than i therefore ,COMMA  that this loop will continue forever such situations are known as the
condition of infinite loop .PERIOD 
Now ,COMMA  sometimes usually we do not like that ,COMMA  but sometimes it may be necessary to
specify that something will happen forever all right .PERIOD  Say some particular work has to be
done continuously .PERIOD 

Now ,COMMA  in order to specify that for loop provides us some facility like say for and while
everything say this one we had discussed earlier while 1 ,COMMA  that means ,COMMA  always it is true it is
a nonzero this while loop this expression part condition expression part should return
nonzero and so it will go on .PERIOD  Now ,COMMA  here for and I put null ;SEMICOLON  that means ,COMMA  the for has had 3
parts ,COMMA  for the initialization part ,COMMA  some condition part and some incrementation
decrementation part whatever .PERIOD 
Now ,COMMA  I just keep everything blank .PERIOD  So ,COMMA  I turn it to be for nothing and nothing all these
things are blank .PERIOD  In that case what will happen ?QUESTIONMARK  In that case what will happen ?QUESTIONMARK  If I keep
some statements here that will go on forever .PERIOD  Similarly if I in the case of do while if I
just put while 1 that is again in finite loop .PERIOD  So ,COMMA  by this I can express my desire that some
things will have should continue forever all right .PERIOD  So ,COMMA  this is another trick that you can
utilize in some cases for the for and the while constraints .PERIOD 

Now ,COMMA  we come to another statement which we have encountered a little few lectures
earlier in the context of switch statements .PERIOD  While we are considering the switch
statements if you recall you have seen that after every case statement switch on a
particular variable then their case red case ,COMMA  green case ,COMMA  blue if you recall then we did
something and then give a break ,COMMA  did something give a break like that we proceeded
right .PERIOD 
So ,COMMA  the break statement of course ,COMMA  we know can help us we can use it with several things
one is while ,COMMA  do while ,COMMA  for and switch .PERIOD  Now ,COMMA  this switch ,COMMA  switch part we have seen ,COMMA  but
we can also use it for while do while and for ,COMMA  for breaking out of the loop ,COMMA  we want to
break out of the loop .PERIOD  Sometimes that is required it works with while ,COMMA  do while ,COMMA  for ,COMMA  but
does not work with if and else statement .PERIOD  It causes immediately exit from a while for a
do while or case we have seen that switch statements earlier .PERIOD 
So ,COMMA  the program continues after with the next statement let us see .PERIOD  Why do we want to
use it ?QUESTIONMARK  It helps us to escape early from a loop .PERIOD  Sometimes we want to escape early I do
not want to go till the end of the loop ,COMMA  when a particular condition is met I want to come
out .PERIOD  I am doing it in a loop ,COMMA  but waiting for some condition to take place as soon as that
condition takes place I come out of the loop .PERIOD  Maybe ,COMMA  as we have seen in the case
statement switch some expression all right color ,COMMA  then case R we do something and then

give break right ,COMMA  case G we do something and then give break right we do like that .PERIOD  So ,COMMA 
we skip the remaining part of the switch block right .PERIOD  We come out of that .PERIOD 

So ,COMMA  similarly we will see a couple of examples of this .PERIOD  Say here there is a complete
example let us look at that .PERIOD  Here is a complete example complete program ,COMMA  once again
include stdio dot h you are running some programs main ,COMMA  then fact and i are integers fact
we are computing factorial .PERIOD  So ,COMMA  fact is 1 ,COMMA  i is 1 ,COMMA  while i is less than 10 ;SEMICOLON  that means ,COMMA  I want
to break out while i is less than 10 fact times i ,COMMA  if fact is greater than 100 ,COMMA  then factorial is
above 100 factorial of a number is above 100 .PERIOD  So ,COMMA  for example ,COMMA  I am going on up to 10
numbers .PERIOD  So ,COMMA  what will happen with the factorials ?QUESTIONMARK  Let us see .PERIOD  So ,COMMA  factorial 1 will be 1 ,COMMA 
factorial 2 will be 2 ,COMMA  factorial 3 will be 3 times 2 that is 6 ,COMMA  factorial 4 will be 4 times 3 for
4 times 6 ,COMMA  it will be 4 times 3 times 2 ,COMMA  so 4 times 6 ;SEMICOLON  that means 24 ,COMMA  then 24 times 5 ,COMMA  so
that will be how much it will be ,COMMA  more than how much will it be if I have got this 4 3 2
and multiply that with 5 ,COMMA  so 26 .PERIOD 
So ,COMMA  here just with 5 numbers I am exceeding the value 120 ,COMMA  but I do not know when I am
going to reach the value 100 .PERIOD  So ,COMMA  I have written the program in this way ,COMMA  fact while i is
less than 10 I will test it up to 10 numbers every time ,COMMA  I compute fact if fact is greater
than 100 print .PERIOD  So ,COMMA  here as soon as fact becomes 100 will say factorial of 5 is above 100 ,COMMA 
factorial of 5 is above 100 and then I break out .PERIOD  Otherwise if I had not put this break then
this would have continued till this loop all for all the 10 numbers up to factorial 10 ,COMMA  but I

just want to stop whenever my result becomes more than 100 .PERIOD  So ,COMMA  this is one way we can
utilize a break right .PERIOD 
Similarly there is another statement although we do not use it often it is better to know
that sometimes it can come handy ,COMMA  that is a continued statement ;SEMICOLON  that means ,COMMA  the
remaining part of the body of a loop we will skip if I put a continue all right .PERIOD 

So ,COMMA  let us see and it proceeds to the next iteration of the loop .PERIOD  So ,COMMA  what happens is let us
look at one example here .PERIOD 

So ,COMMA  while one that means what ;SEMICOLON  that means ,COMMA  it is always true .PERIOD  It will continually go on
doing it .PERIOD  So ,COMMA  fact is fact times i ,COMMA  i plus plus .PERIOD  So ,COMMA  I start with i 1 ,COMMA  then 2 ,COMMA  then 3 .PERIOD  If i is less
than 10 I will go into the loop otherwise I will break .PERIOD  So ,COMMA  this continue is basically
remain forcing me to go back to this point ,COMMA  by forsaking this part .PERIOD  I am not coming to the
remaining of the loop ,COMMA  but if this condition is not holding then I will not execute continue
I straight away come here and do break .PERIOD  I think it will need a couple of moment for you
to just realize what is happening here all right .PERIOD 
So ,COMMA  just look at this .PERIOD  So ,COMMA  in this way it will I think you can understand it .PERIOD  So ,COMMA  I have got i
to be 1 .PERIOD  So ,COMMA  fact will be 1 times 1 ,COMMA  then i becomes 2 and then I go back .PERIOD  So ,COMMA  it will be fact
will be 1 times 1 times 2 ,COMMA  i will be 3 and in that will go on ,COMMA  but as it will go on as long as
i is 10 ,COMMA  less than 10 .PERIOD  Then i will not come to break I will go back here .PERIOD  But if i is less than
10 i will come to break and i will come out of the loop .PERIOD  So ,COMMA  it is a combination of
continue and break this is .PERIOD  But what I want is that you should understand how the for
loop is used for repetition that is very important to understand and will carry out with
some examples in the next lecture .PERIOD 

Till now ,COMMA  we have learnt about some constructs of programming .PERIOD  To implement some
very generalized structures ,COMMA  programming structures ,COMMA  right .PERIOD  What are they ?QUESTIONMARK  First ,COMMA  we have
seen ,COMMA  how we can do Branching ,COMMA  right .PERIOD 

And Branching means that whenever there is a sequential flow ,COMMA  we take a decision pop or
we come to a decision box and depending on whether the result is true or false ;SEMICOLON  we take
different paths right .PERIOD  That is what we have seen and that is implemented by if else
statement right .PERIOD 
We have seen that and the other thing that we have learnt is repetition or looping all
right .PERIOD  That means ,COMMA  we have come to a particular point ,COMMA  we take a decision and based on
the decision ,COMMA  we decide whether we will go back to an earlier point or we will continue
forward .PERIOD  So this is ,COMMA  this repetition we have we could achieve by While statement ,COMMA  do
While statement or While do statement or for statement .PERIOD  So ,COMMA  if else and do while ,COMMA  while
do ,COMMA  for all these are constructs in the C language .PERIOD 

Whereas ,COMMA  the concept of Branching and Repetition or Looping is general for most of the
programming languages .PERIOD  So ,COMMA  these are general concept ,COMMA  while this is a specific construct
corresponding to the C language .PERIOD  Now to start our journey into the world of real
examples ,COMMA  let us first start with the school level equation solving .PERIOD 

When we try to solve a quadratic equation of the form ax square plus bx plus c equals 0 .PERIOD 
We tried to solve it ,COMMA  means we wanted to find the roots of the equation .PERIOD  Roots of the
equation of this form and what are the roots ?QUESTIONMARK  The roots are the values of x that will saw ,COMMA 
that will satisfy this equation .PERIOD 
For example I can have 3x square plus five 5x plus 1 equals 0 all right .PERIOD  What are the
values of x that will solve that will solve this right .PERIOD  So ,COMMA  we knew .PERIOD 

We know that ,COMMA  we can solve this general equation by the well-known Sreedhar Acharya’s
Method ;SEMICOLON  that is x is minus b plus minus root over b square minus 4ac divided by 2a .PERIOD  By
this ,COMMA  we can find the roots of this equation and since it is a quadratic equation how many
roots will be there ?QUESTIONMARK  There will be 2 roots .PERIOD  We also know that if b square minus 4ac is
equal to 0 then ,COMMA  this part will be 0 .PERIOD  What will be the roots ?QUESTIONMARK  Roots will be minus b by 2a
only .PERIOD 
So ,COMMA  there will be 2 roots which are equal .PERIOD  The same roots .PERIOD  For example ,COMMA  if I have x minus
a whole square that is equal to x square minus 2ax plus ,COMMA  what will that be ?QUESTIONMARK  Plus a square
right .PERIOD  Now if I saw and if I say that this is equal to 0 ,COMMA  from here I say that this is equal to
o ,COMMA  if I solve it I will make this as x minus a whole square and ;SEMICOLON  that means ,COMMA  x assigned a
will be the root right .PERIOD  That means ,COMMA  x minus a is 0 .PERIOD  So ,COMMA  x both the roots will be equal .PERIOD  So ,COMMA  if
I have root over b square minus 4ac equal to 0 ,COMMA  in that case I will have both the roots
equal .PERIOD 

If root over b square minus 4ac is negative ,COMMA  we know then ,COMMA  our roots which are minus b
plus minus root over b square minus 4ac by 2a ;SEMICOLON  if this part is negative ,COMMA  then ,COMMA  the roots
will be imaginary right .PERIOD  If b square minus 4ac is greater than 0 ,COMMA  then ,COMMA  we will have Real
roots right and the Real roots will be minus b plus this and minus b minus this by 2a .PERIOD  So ,COMMA 
that will be that is a school level knowledge that we have .PERIOD 
Now ,COMMA  if I want to apply this knowledge ,COMMA  to write a program ,COMMA  that can take as input any
equation of that form ax square plus bx plus c and find its root .PERIOD  How will the program
look like ?QUESTIONMARK  Suppose ,COMMA  I want to write such a program and now ,COMMA  henceforth in my discussion
about this problem I will called ,COMMA  I will call this b square minus 4ac to be the
Discriminate ,COMMA  I write it for short ,COMMA  Disc ,COMMA  as the Discriminate .PERIOD  Because that is ,COMMA  what is
telling me discriminating between the roots Disc .PERIOD  So ,COMMA  whenever I refer to Discriminate ;SEMICOLON 
that means ,COMMA  I am talking of b square minus 4ac .PERIOD 

Now ,COMMA  I want to write a generalized program ,COMMA  for finding the roots of ax square plus bx
plus c ;SEMICOLON  so ,COMMA  equal to zero .PERIOD  So ,COMMA  I want to write a program that will be equally applicable to
solve this root ,COMMA  this equation ,COMMA  solve this equation or 25x square plus sorry here I should
not write c ,COMMA  let me put it something like 5 .PERIOD  25x square plus 17 equals 0 or any such
equation .PERIOD  So ,COMMA  you see here what is the coefficient of x ?QUESTIONMARK  Coefficient of x square is 25 .PERIOD 
What is the coefficient of x .PERIOD  In this equation it is 0 ,COMMA  that is why this term has vanished
and what is the value of c here ?QUESTIONMARK  It is 17 .PERIOD 
Whereas ,COMMA  in this equation the coefficient of x is 3 ,COMMA  x square is 3 ,COMMA  the coefficient of x is 4
and the constant term is 5 .PERIOD  So ,COMMA  since I am going to solve any general equation of this
form ,COMMA  how can I define the specific equation ?QUESTIONMARK  An equation of this form can be specified
by specifying the coefficients .PERIOD  So ,COMMA  I have to accept the values of a ,COMMA  b and c from the user
and you can see that the root is dependent on the value of these coefficients ,COMMA  because we
know the root x is minus b plus root over b square minus 4ac by 2a and minus b minus
root over b square minus 4ac by 2a .PERIOD 
So ,COMMA  the roots are determined only by the value of these coefficients .PERIOD  Therefore ,COMMA  the 1st
step that I will have to do here we can start with a flow chart .PERIOD 

So ,COMMA  I will 1st ,COMMA  I write Read a ,COMMA  b ,COMMA  c .PERIOD  Read them from the user .PERIOD  Then ,COMMA  I compute ,COMMA  Find
Discriminate equal to b square minus 4ac .PERIOD  I just compute this part ,COMMA  b square minus 4ac .PERIOD 
Because depending on this ,COMMA  we will have the different values of the root or I would say
all right .PERIOD  So now ,COMMA  so earlier probably I said that the Discriminate is root over b square
minus 4ac .PERIOD  I would like to correct myself .PERIOD  I would say Discriminate is this part b square
minus 4ac .PERIOD 
Because depending on the value of this ,COMMA  if this is negative ,COMMA  then ,COMMA  the roots will be
imaginary .PERIOD  Because the square root of this will be imaginary .PERIOD  So ,COMMA  this is the Discriminate
part .PERIOD  If this is 0 then ,COMMA  the roots are equal .PERIOD  If this is greater than 0 then ,COMMA  the roots are
positive and real and if it is negative then ,COMMA  the roots are imaginary .PERIOD  So ,COMMA  at this point ,COMMA  I will
make a decision .PERIOD  Discriminate greater than 0 ,COMMA  yes .PERIOD  Then ,COMMA  what should I do ?QUESTIONMARK  I will Print
Roots are real and then ,COMMA  I will print the roots .PERIOD  If the Discriminate is not greater than 0
then ,COMMA  I come here and I check whether Discriminate is 0 ,COMMA  if Yes then ,COMMA  my decision is
Roots are equal and then I go and Print the roots .PERIOD 
If this is No ,COMMA  then ,COMMA  obviously ,COMMA  I will print Imaginary roots .PERIOD  I can see this part and then ,COMMA  I
will go and Print the roots .PERIOD  That is the flow chart of the whole thing .PERIOD  So ,COMMA  I am computing
this value and based on that ,COMMA  I am finding the roots .PERIOD  Now if the flow chart is clear to you ,COMMA 
let us proceed to write the program for this .PERIOD  Now here ,COMMA  obviously ,COMMA  I should have said that

the Discriminate is actually this part b square minus 4ac and then ,COMMA  I take the square root
of that .PERIOD 

So ,COMMA  now if we start writing the program ,COMMA  if I am a nice programmer ,COMMA  I will always start
with so ,COMMA  first of course ,COMMA  hash include stdio dot h .PERIOD  Then ,COMMA  I am including another thing
which is a library called math dot lib .PERIOD  Dot lib stands for library .PERIOD  Why I am including that ?QUESTIONMARK 
I will come to that later .PERIOD  Now we start our program ,COMMA  main and we start .PERIOD  I can give a
comment ,COMMA  program to find roots of a Quadratic Equation all right .PERIOD  So ,COMMA  that is a comment .PERIOD 
So ,COMMA  anybody can understand ,COMMA  what I am writing here .PERIOD 
Now ,COMMA  I will have to declare a number of variables .PERIOD  I will declare the ,COMMA  lets say the
coefficients are all integers .PERIOD  So ,COMMA  int a ,COMMA  b ,COMMA  c .PERIOD  Now b square minus 4ac can be anything .PERIOD  So ,COMMA 
I put float Discriminate ;SEMICOLON  also float root 1 ,COMMA  root 2 ;SEMICOLON  2 roots .PERIOD  Next ,COMMA  what should I do ?QUESTIONMARK  Let me
proceed ,COMMA  to the next page ,COMMA  with this declaration ,COMMA  I hope you have been able to take down
this declarations .PERIOD 

Now ,COMMA  lets proceed and go to the next page .PERIOD  I am continuing with that .PERIOD  I start with printf
Enter coefficients a then ,COMMA  b then ,COMMA  c all right .PERIOD 
So ,COMMA  the user is told that ,COMMA  he is supposed to enter the coefficients now .PERIOD  Next thing will be
scanf ,COMMA  since I know ,COMMA  I can also say that please Enter integer coefficients ;SEMICOLON  I am just
restricting into here like that ,COMMA  though its not necessary .PERIOD  So ,COMMA  scanf percentage d percentage
d percentage d ,COMMA  and a ,COMMA  and b ,COMMA  and c .PERIOD  So ,COMMA  what I will do ?QUESTIONMARK  My system will read the 3
integers a ,COMMA  b and c .PERIOD  Now starts the main program and as if you have studied the flowchart
that I had shown ,COMMA  here you can see that ,COMMA  I have got only 1 decision box and I can proceed
through that decision box .PERIOD  There are 2 decision boxes actually ,COMMA  one in this direction ;SEMICOLON 
another one in this direction .PERIOD 
So ,COMMA  accordingly I do not have any loop here .PERIOD  So ,COMMA  what is the construct that I will be
needing here .PERIOD  The construct that I will be needing here is if .PERIOD  So ,COMMA  what should I do ?QUESTIONMARK  First ,COMMA 
let me compute the Discriminate all right .PERIOD  I have got this b ,COMMA  a and c .PERIOD  So ,COMMA  I do Discriminate
assigned b square minus 4ac .PERIOD  So ,COMMA  b times b minus 4 times a times c .PERIOD  So ,COMMA  this is an
arithmetic expression .PERIOD  I get Discriminate .PERIOD  Now I will have to take the path depending on
the Discriminate .PERIOD  So ,COMMA  what I will write here is if then ,COMMA  a parenthesis for the condition if
Discriminate is greater than 0 ,COMMA  printf Roots are real and I can put a backslash in here else
I have not computed the roots as yet ok .PERIOD 

So ,COMMA  let me write the else as close to the if as possible ,COMMA  as we have learnt about
indentation .PERIOD  So ,COMMA  else if ,COMMA  I should have written this if also and small just for the sake of
uniformity and at not only for the sake of uniformity ,COMMA  C is very much case sensitive .PERIOD  So ,COMMA 
capital if is not if .PERIOD  So ,COMMA  if Discriminate is equal to 0 ,COMMA  printf Roots are equal backslash n ;SEMICOLON 
else now this ,COMMA  else comes under this if ,COMMA  you remember that else and ifs are tied up ,COMMA  based
on the closest the else is connected to the closest if .PERIOD  So ,COMMA  these 2 else ,COMMA  else the only option
is Discriminate is neither greater than 0 nor equal to 0 .PERIOD 
So ,COMMA  Discriminate is less than 0 .PERIOD  Then printf Roots are imaginary and backslash n again .PERIOD 
Now so ,COMMA  I have just said what type of roots they are .PERIOD  But I have not printed the roots as
yet ,COMMA  we have not I have not found out the roots .PERIOD  So ,COMMA  what I can do ?QUESTIONMARK  I can modify this a
little bit or how do I find out the roots ?QUESTIONMARK  Let me go to the next page .PERIOD  I do this and then ,COMMA  I
come back to a particular stage or I can do it here itself .PERIOD  How would I find out the roots ?QUESTIONMARK 
Say ,COMMA  let me go back and do it here .PERIOD  Here ,COMMA  I have I have not written down ,COMMA  what the roots
are ?QUESTIONMARK 
How could I ?QUESTIONMARK  Suppose I modify this part a little bit ;SEMICOLON  I modify this part a little bit .PERIOD  So ,COMMA  let
me modify this part ,COMMA  I will rewrite this part in the next page .PERIOD 

So ,COMMA  I rewrite it as ,COMMA  if Disc is greater than 0 ,COMMA  printf Roots are real I find .PERIOD  Now I compute
say I compute ,COMMA  lets call it ,COMMA  I should have declared this also Discriminate 1 ,COMMA  another part
that is ,COMMA  I had the Discriminate part .PERIOD  So ,COMMA  I can certainly make another variable .PERIOD  So ,COMMA  I add 1

more variable here ,COMMA  int a ,COMMA  b ,COMMA  c and here I entered another variable say d .PERIOD  Why ,COMMA  I will show
later .PERIOD 
So ,COMMA  I have entered another variable d there .PERIOD  So ,COMMA  printf Roots are equal and d is square root
of Disc .PERIOD  So ,COMMA  I called Disc to be b square minus 4ac .PERIOD  Now I am finding the root of that .PERIOD 
Now here I have committed 1 mistake .PERIOD  Can you tell me what the mistake is ?QUESTIONMARK  So ,COMMA  this
Discriminate can be integer ,COMMA  but when I take the square root of that ,COMMA  it can be a float right
and also here I have already declared ,COMMA  if you look at I Disc ,COMMA  I somehow declared Disk as
float ,COMMA  but since a ,COMMA  b ,COMMA  c are integers ,COMMA  then ,COMMA  this will also be an integer .PERIOD 
So ,COMMA  I should correct it a little bit .PERIOD  What should I do ?QUESTIONMARK  I or it really does not matter if I keep
it as float .PERIOD  So ,COMMA  only thing is that I cannot keep the d here .PERIOD  I will have to remove this d all
right and I will also remove this .PERIOD 

And will make this small d as a float .PERIOD  So ,COMMA  then I come here ;SEMICOLON  d is square root of the
discriminate .PERIOD  Now what is this square root ?QUESTIONMARK  Who will compute this square root ?QUESTIONMARK  The
square root computation is done by an inbuilt function in C library .PERIOD  C compiler provides
us with a library of some inbuilt function ,COMMA  mathematical functions which we can call and
invoke whenever we need them .PERIOD 
So ,COMMA  you can see here ,COMMA  that is why I have included this math dot lib ;SEMICOLON  that means ,COMMA  I will be
using some library function here ,COMMA  dot lib means library .PERIOD  So ,COMMA  you will find in the course of

this core lectures and more examples ,COMMA  where you will see more number of library
functions .PERIOD  But just for this ,COMMA  we need the square root function .PERIOD  So ,COMMA  I compute the square
root of Disc d assign the square root of Disc and then ,COMMA  root 1 is what root one is minus b
plus d by 2a .PERIOD  Is it clear ?QUESTIONMARK  The 2 roots ,COMMA  one is I have my formula is b plus minus root over
of b square minus 4ac by 2 a .PERIOD 
So ,COMMA  this b square minus 4ac is d here all right .PERIOD  So ,COMMA  b plus d whole divided by 2a ,COMMA  I should
also put a parentheses here ,COMMA  is root 1 and root 2 is minus b sorry minus b minus d divided
by 2a .PERIOD  Then ,COMMA  I have got the 2 roots and I can print here .PERIOD  So ,COMMA  I have computed the roots .PERIOD 
So ,COMMA  I can either print it here .PERIOD  I can printf that The Roots can be float .PERIOD  I can say the roots
are percentage f ,COMMA  roots are floats percentage f ,COMMA  percentage f backslash n and root 1 comma
root 2 .PERIOD  So ,COMMA  this is the whole part compound statement if Disc is greater than 0 .PERIOD 
So ,COMMA  if we go up .PERIOD  So ,COMMA  I will modify this part in this way .PERIOD  We will also have to modify this
part .PERIOD  What should you do ?QUESTIONMARK  Simply ,COMMA  what can I do to write this ?QUESTIONMARK  If Disc is 0 then ,COMMA  I will
print roots are equal right ,COMMA  as I have written roots are real and then ,COMMA  I will find out ;SEMICOLON  now I
do not need to find out this part .PERIOD  So ,COMMA  let me just show you this part and I leave the other
part for you .PERIOD 

That second part ,COMMA  if Disc ,COMMA  oh my god what did I do here ;SEMICOLON  this all right .PERIOD  It is greater than
equal to ,COMMA  if disc is 0 .PERIOD  Then ,COMMA  printf that the more than once sentences .PERIOD  So ,COMMA  this is coming
else that else part ,COMMA  else if disc is 0 ;SEMICOLON  printf the roots are equal and here I donot need to

bother much I can put a backslash n ,COMMA  that you know by now printf The Roots are equal .PERIOD 
Root is what ?QUESTIONMARK 
Now ,COMMA  if in this ,COMMA  b plus minus root over b square minus 4ac by 2a ,COMMA  if this part is 0 .PERIOD  Then ,COMMA 
my root is only minus b divided by 2a 2 multiplied by a and printf The Root is
percentage f backslash n root or I can say root 1 ,COMMA  because I did not declare anything as
root .PERIOD  So ,COMMA  root 1 anyone root that is same .PERIOD  This is this part if the Discriminate is 0 .PERIOD  See
yeah .PERIOD  So ,COMMA  I have just mentioned root 1 .PERIOD  Why ?QUESTIONMARK  Sorry ,COMMA  you see here I declared only root 1
and root 2 ,COMMA  I did not declare any root .PERIOD  So ,COMMA  I can make root 1 root 2 .PERIOD  Now ,COMMA  so this is
replacing this part .PERIOD 
Now what will you do here ?QUESTIONMARK  The roots are imaginary ,COMMA  but the same thing the values will
be the same ;SEMICOLON  only thing is roots are imaginary .PERIOD  I leave it to you as an assignment ;SEMICOLON  you
think off ,COMMA  what will you do for that part ?QUESTIONMARK  For the imaginary part .PERIOD  You can understand that
only thing that you need to do is to print some roots as say the real part .PERIOD  Real part is this
and imaginary part is this .PERIOD  So ,COMMA  you think about it ;SEMICOLON  we can discuss about it in the next
lecture .PERIOD 

So ,COMMA  we were looking at solving a quadratic equation and we have seen that there are three
cases .PERIOD  One is if the discriminant is 0 we print the roots that their roots are real ,COMMA  sorry if
the discriminant is greater than 0 then the roots are real ,COMMA  otherwise if it is equal to 0 then
the roots are equal and if the discriminant is neither greater than 0 nor equal to 0 ;SEMICOLON  that
means ,COMMA  it is less than 0 then the roots are imaginary .PERIOD 

So ,COMMA  next what we did is we started with a program like this where we declared the
coefficients here and then the discriminant and the intermediate variable d and 2 roots
right root 1 and root 2 .PERIOD 

Next we proceeded with this and we modified this part .PERIOD 

If disc is greater than 0 printf roots are real and then I modified this ,COMMA  this part and
replaced this part with this ,COMMA  if discriminant is 0 prints the roots are real and also compute
the root .PERIOD 

Now ,COMMA  if the discriminant is equal to 0 then prints the roots are equal compute the root and
print it .PERIOD  Now ,COMMA  I asked you to see how you will deal with the third case if the discriminant
is not equal to 0 .PERIOD 

So ,COMMA  this if ,COMMA  when this if comes then we was already failed the condition the discriminant
is greater than 0 and if the discriminant is not equal to 0 then we will come to just an else
here right ,COMMA  and let me go to the next page to write the else part of this .PERIOD 

So ,COMMA  it will be else simply I am sorry here did I give the parenthesis ,COMMA  yes I did .PERIOD  So ,COMMA  I am
ok .PERIOD  This is please note these are the points where we often make the mistakes .PERIOD  Else printf
“the roots are imaginary backslash n” fine ,COMMA  and what are the roots ?QUESTIONMARK  So ,COMMA  if we if the roots
are imaginary then the real part say one ,COMMA  one root is minus b by 2a is the real part and
plus i that is what we ,COMMA  i d by 2a is it clear another this is one root another root is b by 2a
minus i d by 2 a .PERIOD 
What does ,COMMA  so this d ,COMMA  basically you see what we are doing is x is minus b plus minus root
over b squared minus 4 ac by 2a .PERIOD  So ,COMMA  this is my discriminant and I take the square root of
that .PERIOD  So ,COMMA  plus minus root over d by 2a right .PERIOD  In my program what did I write d or
discriminant square root of disc sorry disc .PERIOD  So ,COMMA  I should not use different name .PERIOD  So ,COMMA  it
should be disc by 2a and that square root of disc can be either imaginary ,COMMA  so negative if
this is negative then I will find it is its absolute value and ,COMMA  this can be written as minus b
by 2a plus square root of disc by 2a is one root another root is b by 2a minus root over
disc by 2a and since its imaginary it should be i ,COMMA  the imaginary part .PERIOD 
So ,COMMA  I can print it as a real part to be b minus 2a and imaginary part is square root of disc
by 2a and the square root of disc is nothing but d .PERIOD  So ,COMMA  minus b by 2a plus i d by 2a that is
what I am writing here all right .PERIOD  So ,COMMA  this is the real part this is the imaginary part .PERIOD  So ,COMMA  I
can print it in different ways .PERIOD 

I can just say else printf roots are imaginary or rather I should have said this is wrong to
say .PERIOD  What should I have said ,COMMA  you should have I mean I am doing a mistake here all
through ,COMMA  starting from this point ,COMMA  you must have observed it .PERIOD 
Here the roots are complex roots then in that case ,COMMA  not the imaginary roots because it has
got a real part and the imaginary part .PERIOD  So ,COMMA  the roots are complex .PERIOD  I should have written
roots are I should have written complex roots and then I could print real part percentage f
backslash n ,COMMA  I can put an expression here minus b divided by 2a .PERIOD  We can make it a little
cleaner ,COMMA  looks very nasty here ,COMMA  b divided by 2a that is the imaginary part that is a real part
all right .PERIOD 
And printf imaginary part is plus i percentage f comma minus i percentage f backslash n
followed by .PERIOD  What is my imaginary part ?QUESTIONMARK  Imaginary part is d by 2a .PERIOD  So ,COMMA  you see I have
put this i part plus i and i here comma b divided by again d divided by twice a all right .PERIOD 
So ,COMMA  this and then of course ,COMMA  everything is done so I come to the end of my program .PERIOD 
Before that here there should be a parenthesis .PERIOD  So ,COMMA  this is the complex part .PERIOD 
Now ,COMMA  as we will become little more conversant with programming you can see that I
have repeated many things right .PERIOD  So ,COMMA  instead of doing it there are some common you can
think of how can write it in a much more elegant and shorter way .PERIOD  But this is an example
which gives you an exposure to the use of if then else statements ,COMMA  if else statements in C .PERIOD 

Next ,COMMA  well another example we can take up .PERIOD  Say for example ,COMMA  we are going to compute
the income tax of a person .PERIOD 

Suppose the if the income tax is less than 100 ,COMMA 000 rupees then income tax is nil ,COMMA  if it is
between 100 ,COMMA 000 to 200 ,COMMA 000 rupees then you pay 10 percent of the amount above 1 lakh ,COMMA 
100 ,COMMA 000 .PERIOD  For income above this 200 ,COMMA 000 if the income is above 200 ,COMMA 000 then you pay 20
percent of the amount whole amount not how much is exceeding 10 ,COMMA 000 suppose this is
our income tax policy .PERIOD  How can we do this ?QUESTIONMARK 
So ,COMMA  what is the input that I need from the user ?QUESTIONMARK  I need this income from the user right ;SEMICOLON 
and what is the other variable that I want to compute ?QUESTIONMARK  The tax .PERIOD  So ,COMMA  here earlier I needed
math dot leave in this case probably I will not need that ,COMMA  but ,COMMA  I will not need that if
needed I will can always add it later main and then you can say put a comment
computation of income tax ,COMMA  tax computation all right .PERIOD 
Now ,COMMA  I start my program all right I can put the parenthesis above ,COMMA  does not matter  .PERIOD  Then
printf its always better to do this ,COMMA  “Please enter your income” because if you do that then
you make your program interactive ;SEMICOLON  that means ,COMMA  the user can see what you are doing
right ,COMMA  please enter your income .PERIOD  Well I have not yet declared the variables at all .PERIOD  So ,COMMA  here
I should write float income and tax .PERIOD  Then here scanf ,COMMA  percentage f and income ,COMMA  so I read
the income here fine .PERIOD  Then what should I do ?QUESTIONMARK  Next let me come to the next page then or

because there will be number of if conditions .PERIOD  So ,COMMA  this part is ok ,COMMA  I have read then come
here .PERIOD 

Now ,COMMA  if income is less than or equal to 100 ,COMMA 000 printf no tax ,COMMA  else what is my principle ;SEMICOLON  1
lakh to 2 lakhs ,COMMA  10 percent of the income ,COMMA  10 percent of the income above 100 ,COMMA 000 ,COMMA  so
else if income is less than equal to 200 ,COMMA 000 .PERIOD  So ,COMMA  it is not when it is coming here it is
already greater than 100 ,COMMA 000 ,COMMA  if it is less than 200 ,COMMA 000 then tax will be 10 percent ;SEMICOLON  that
means ,COMMA  0 .PERIOD 1 times the amount that the amount exceeding 100 ,COMMA 000 ,COMMA  so income minus
100 ,COMMA 000 .PERIOD  Printf tax equals percentage f backslash n tax ,COMMA  is this part clear .PERIOD 
This part is so when am I coming here this if condition as failed .PERIOD  So ,COMMA  I am coming here ;SEMICOLON 
that means ,COMMA  it is not less than 100 ,COMMA 000 so it is more than 100 ,COMMA 000 ,COMMA  but if it is less than 200
less than equal to 200 ,COMMA 000 then I am the second bracket and I will be paying 10 percent
of the amount that is exceeding 100 ,COMMA 000 that is why I computed this and then I am
printing this .PERIOD  So ,COMMA  here it is more than one statement I put a bracket .PERIOD  Here you see under if
I had only one statement .PERIOD  So ,COMMA  putting a bracket is not mandatory ,COMMA  but here it is mandatory
otherwise it will mean something else .PERIOD 
So ,COMMA  else this ,COMMA  now if this is also not true ,COMMA  that is if this if does not satisfy then I am in the
third bracket that is here what should I do else tax is 20 percent of the income and printf
tax assigned percentage f backslash n tax .PERIOD  Now ,COMMA  here then I will come to the end .PERIOD  So ,COMMA  I
come to this beginning this ,COMMA  this beginning point and I end the program here .PERIOD 

Now ,COMMA  you can see that I can reduce this program a little bit .PERIOD  How ?QUESTIONMARK  I have written this
printing the text this thing the same thing twice ,COMMA  I am sorry here they should be another
bracket for completing this .PERIOD  This should be completed and then the next bracket .PERIOD  Now ,COMMA 
this I could have done later after these 2 use all right ,COMMA  but under this else under this else .PERIOD 
So ,COMMA  you can also try to reduce it and as an assignment you should run this program and
get yourself satisfied all right .PERIOD  So ,COMMA  this is another classical example of if then else usage
all right .PERIOD 
Given this we will .PERIOD  Now ,COMMA  move to some more examples ,COMMA  some more examples of the
other construct that is while and do while type of constructs .PERIOD  So ,COMMA  here is an example to
show if a number is prime or not .PERIOD 

Now ,COMMA  how do I go about it let us first think of the algorithm for finding out whether a
number is prime or not .PERIOD 

Say for example ,COMMA  I take a number 13 .PERIOD  I want to find out whether 13 is prime or not .PERIOD  So ,COMMA 
when is a number called prime ?QUESTIONMARK  When the number is not divisible by any other number
other than the number itself and 1 .PERIOD  So ,COMMA  in order to find out whether 13 is prime or not ,COMMA 
what should I do ?QUESTIONMARK  I will start with 2 and I will try to see whether the 2 is dividing 13 .PERIOD 
How do I know where the 2 is dividing 13 ?QUESTIONMARK  By the modulus operator ,COMMA  if there will be 2
integers say 14 modulus 2 the modulus leads gives me the remind ,COMMA  sorry remainder .PERIOD  So ,COMMA 
if 14 is divisible by 2 the remainder will be 0 .PERIOD  26 divided by 2 the remainder will be 0 ,COMMA 
but 13 divided by 2 the remainder will be 1 .PERIOD 
So ,COMMA  similarly ,COMMA  suppose I want to see where there are number 15 is divisible by 3 I will do
the modulus operation of 15 with 3 and the remainder will be 0 .PERIOD  So ,COMMA  15 is divisible by
three right .PERIOD 

So ,COMMA  now if I want to find out whether 13 is a prime or not ;SEMICOLON  I will first try to divide see
where that is divisible by 2 .PERIOD  If it is divisible yes ,COMMA  will tell me not prime right it will tell
me not prime ,COMMA  but no then I will try to divide it by 3 ,COMMA  if this is divisible by 3 then again
not prime .PERIOD  No ,COMMA  I will divide by 4 then ;SEMICOLON  obviously ,COMMA  not divisible then I will divide it by 5
so on so forth I will go till I divide it by 12 .PERIOD  Since of course ,COMMA  by 13 it will be divisible ,COMMA  if
the answer continuously up to 12 is no then we say it is not a prime right ,COMMA  not a prime .PERIOD 
So ,COMMA  here you see there are 2 things happening .PERIOD  One is I am taking a check branching here
I am dividing it by 2 ,COMMA  if it is divisible is it is not a prime ,COMMA  if no then I am taking another
path .PERIOD  What is that path ?QUESTIONMARK  That path is again trying with the next successor of this 2 ,COMMA  yes ;SEMICOLON  if
the result is yes I take this path otherwise I will follow this path with a successor of this .PERIOD 
So ,COMMA  the same thing trying with the successor I am doing continuously repeatedly if the
divisibility result is false ;SEMICOLON  that means ,COMMA  if it is not divisible I will continuously go on till I
reach if this number is N ,COMMA  till I reach N minus 1 right ,COMMA  up to that I will try up to N minus 1
I will try .PERIOD  So ,COMMA  this is an example where there is a branching as well as a looping ,COMMA  another
real life mathematically important application .PERIOD  So ,COMMA  let us look at the program now .PERIOD 
Let us try to understand the program here .PERIOD  This include stdio dot h is known to you
mean .PERIOD  I am declaring 2 variables one is n another is i ;SEMICOLON  n is an integer ,COMMA  i is also an integer ,COMMA 
initialize to 2 .PERIOD  I am reading the number here say 13 while i is less than n ;SEMICOLON  that means ,COMMA  i

was 2 if we look at this page we started with 2 we started with 2 and then went on right ,COMMA 
this is the value of i and this is the value of n .PERIOD 
Now ,COMMA  while i is less than n ,COMMA  I had 13 and i is 2 this is n ,COMMA  I will go on up to 13 up to while i
is less than n that means up to 12 ,COMMA  I will go on trying this thing what ;SEMICOLON  if n is divisible by i .PERIOD 
Is n divisible by i ,COMMA  yes then print that the number n is not a prime and then exit we come
out of this loop .PERIOD  Just like break we come out of this loop ,COMMA  but break is not applicable in if
statement exit we can write .PERIOD  So ,COMMA  I come out of the loop .PERIOD 
Otherwise what I am doing still in the while loop ,COMMA  the while loop is starting from this
point and going up to this point .PERIOD  I am incrementing i ,COMMA  so i becomes 3 and again I go and
try to see if it is divisible with 3 know then I come make it 4 ,COMMA  make it 4 ,COMMA  I will again try
this one fails ,COMMA  it is not divisible so I do not do this part ,COMMA  I do not do this part .PERIOD  I come here
make it 5 and go on in this way while i is 12 ,COMMA  up to 12 I check and then it becomes 13 .PERIOD 
So ,COMMA  I come here and ultimately I come out of the loop and till 13 I could see that no ,COMMA  I
could find no number no integer that is dividing it .PERIOD  So ,COMMA  we say that this is a prime
number .PERIOD 
Say for example ,COMMA  what would have happened if I had given the instead of n 13 if I had
given it 14 .PERIOD  What would be the change in this flow ?QUESTIONMARK  I would start with the 2 and again I
divide it by 2 ,COMMA  try dividing it by 2 it is divisible I print that it is not a prime and I exit and
come out of this entire while loop .PERIOD  So ,COMMA  in the while loop here this I am exiting from the
while loop all together ,COMMA  not from the if loop I am exiting from the while loop if is not a
loop by the way .PERIOD  I am exiting from the while loop completely .PERIOD  So ,COMMA  this example also
illustrates the use of if here and the while loop here all right .PERIOD 
We will see a few more examples in the future lectures .PERIOD 

So in the last lecture we have seen how we can write a program to find out whether it is
prime or not .PERIOD 

Now ,COMMA  this program that you see that we have we have discussed in the last class ,COMMA  we will
certainly give us correct result .PERIOD  Now our job is not only to write a correct program it is
also very stimulating intellectually to think of how we can make it a more efficient ,COMMA 
program often the program can be correct ,COMMA  but it is not very efficient .PERIOD  What do I mean by
this efficiency ?QUESTIONMARK  Say if we look at this program and again I take the earlier example that
suppose I have my n is 13 .PERIOD 
Now ,COMMA  and I start with the value of i to be 2 and n is 13 and since it is prime I am checking
this condition time and again and since this is third I mean prime number how many
times it will never come here ,COMMA  it will never succeed .PERIOD  So ,COMMA  I will have to carry on this loop
and ultimately when I exhaust all the possibilities then only I will come to this point .PERIOD 

So ,COMMA  how many times do I have to do this let us see ,COMMA  I am starting with 2 checking ones
then start incrementing and making it 3 ,COMMA  then 4 then testing with 5 ,COMMA  then testing with 6 ,COMMA 
testing with 7 ,COMMA  testing with 8 ,COMMA  testing with 9 10 11 12 .PERIOD  So ,COMMA  how many times did I check it
1 2 3 4 5 6 7 8 9 10 11 times ,COMMA  I had checked it with 11 times
Now ,COMMA  do I really need to check it with 11 times ?QUESTIONMARK  If you think a little bit if this number is
n then ,COMMA  I did not check it and I am starting with 2 .PERIOD  So ,COMMA  n minus 2 times I am checking
right do I really need to check n minus 2 times .PERIOD  If I do not find it divisible by squared
within square root of n times .PERIOD  So ,COMMA  square root of 13 as an integer what would it be ?QUESTIONMARK  13
would be 3 point something right .PERIOD  So ,COMMA  4 times within 4 if it is not divisible ,COMMA  it will not be
divisible late by the future numbers also right .PERIOD 
So ,COMMA  if I just apply this knowledge that if it is not divisible within square root of n ,COMMA  then it
will not be divisible later I can make this program much more efficient how let us see ,COMMA  let
us look at the and a more efficient version of the program .PERIOD 

So ,COMMA  here you see I am starting with 3 and I am reading the value of n fine .PERIOD  So ,COMMA  far no
problem I am starting with n .PERIOD 
Now ,COMMA  here I am checking not up to n I am checking I mean in the earlier case what we
did is sorry earlier case what we did is we tested with up to n ,COMMA  but here what we are doing
is I am testing with up to square root of n and if n is divisible by i ;SEMICOLON  that means ,COMMA  say 13 ,COMMA  I

first try with 3 it is not divisible is try with 4 and .PERIOD  So ,COMMA  square i is for that is less than the
greater than the square root of n right .PERIOD  So ,COMMA  with that I will come out and every time what I
am doing is I am implementing i by 2 .PERIOD  So ,COMMA  I am testing with 3 ,COMMA  I am testing with 5 ,COMMA  I am
testing with 7 like that I am going on .PERIOD  If I apply this then I can always make this program
more efficient clear .PERIOD 

So ,COMMA  you see by the .PERIOD  So ,COMMA  let us take another example here say I am trying to find out
whether 21 is a prime number or not .PERIOD  So ,COMMA  I start with i to be 3 .PERIOD  So ,COMMA  3 is of course ,COMMA  21 will
not work sorry let me change it 21 is not a prime .PERIOD  So ,COMMA  first time in first short it will give
me that it is not the prime fine ,COMMA  but if instead I had a 23 then what will happen ?QUESTIONMARK  I start
with 3 ,COMMA  it does not divide then I come and make it 5 .PERIOD  If something is not divisible by 3 it
will not be divisible by I mean next square root of that I am just going by 1 more I come
to 5 it is not divisible by that ,COMMA  what is the square root of 23 ?QUESTIONMARK  It should be 4 point
something .PERIOD  So ,COMMA  again quickly I am coming to the point where I can see that it is not
divisible .PERIOD  So ,COMMA  by doing this using this small technique ,COMMA  I can make it a little faster the
number of checks will be much more reduced .PERIOD 
So ,COMMA  now ,COMMA  let us go to another example .PERIOD 

This is again finding the sum of and sum of the digits of a number .PERIOD  Now this 1 we did not
do sum of the digits of a number what is meant by this ?QUESTIONMARK  Suppose I have got a number
123 ,COMMA  sum of the digits of a number means 1 plus 2 plus 3 6 .PERIOD  If my number is 243 then the
sum of the digits will be 2 plus 4 plus 3 6 and 3 ,COMMA  9 this is what I want to find out .PERIOD 
So ,COMMA  how do you go about doing that ,COMMA  how do I find out the digits ?QUESTIONMARK  Say 1 2 3 from there
how do I extract out 1 2 and 3 .PERIOD 

Just think over if I have got 123 and I divide it by 10 ,COMMA  I will get a quotient 12 and a
remind remainder .PERIOD  So ,COMMA  the remainder is 1 digit ,COMMA  now I take the quotient divided by 10 ,COMMA  I
will get a remainder sorry a quotient and the remainder ,COMMA  the remainder is another digit
and then I go on till it is the number is not equal to 0 .PERIOD  So ,COMMA  next I take one and divide it by
10 ,COMMA  the quotient is 0 and the remainder is 1 .PERIOD 
So ,COMMA  you see I have got all the digits from the right hand side one after another right .PERIOD  So ,COMMA  I
can add them that is my basic way .PERIOD  So ,COMMA  let us keep it on the side and see what we have
done in this program .PERIOD  I have got a number n ,COMMA  now this number that has been given
initially 123 ,COMMA  I do not need to preserve that number .PERIOD  So ,COMMA  I can play with that and I have to
make a sum of this right 1 2 and 3 .PERIOD  So ,COMMA  I keep a sum to be initially 0 .PERIOD  I keep a variable
sum which is initialized to 0 as we saw in the earlier examples and sum is also an integer
then I read the number that is say 123 has come .PERIOD 
Now ,COMMA  while the number n that is 123 ,COMMA  123 is not zero then I take add n modulus 10 n
modulus 10 will give me what ?QUESTIONMARK  The remainder 3 and add it to the sum .PERIOD  So ,COMMA  my sum now
becomes 3 ,COMMA  and then I want to find out this thing also .PERIOD  I make my n to be n divided by 10
now this operation gives you the quotient right this operation gives you the remainder .PERIOD 
So ,COMMA  I now I get n by 10 means now 12 ,COMMA  and I go back to this loop I check that 12 is not
zero .PERIOD  So ,COMMA  I will again do that ,COMMA  sum will be sum what was that 3 plus n modulus 10 .PERIOD  So ,COMMA  I
again divided by 10 and take the remainder and that remainder is added sum plus this .PERIOD 
So ,COMMA  3 plus 2 will be 5 and then I divide n by 10 .PERIOD  So ,COMMA  now ,COMMA  I find out 1 still I go back 1 is
not I go back actually here ,COMMA  1 is not zero sure .PERIOD  So ,COMMA  I again divide it by I take the
remainder divided by 10 and take the remainder .PERIOD  So ,COMMA  the remainder is 1 ,COMMA  I added with the
sum .PERIOD  So ,COMMA  it will be 6 and then I divide I find the quotient and that is 0 ,COMMA  I go back again
here and find that n is not equal to 0 condition is not true .PERIOD  So ,COMMA  I come out of the loop and
I apply this printf statement what is the printf statement doing ?QUESTIONMARK  The sum of digits of the
given number I cannot say given number n because n has already changed I will come to
that in a moment .PERIOD 
Now ,COMMA  it is sum .PERIOD  So ,COMMA  I have got the sum .PERIOD  So ,COMMA  this is another example of while loop now my
question is if you have understood it ,COMMA  I want the output to come as printf ;SEMICOLON  the sum of
digits of the number 123 is 6 how can I do what modification should I do in this
program .PERIOD 

What I want to be printed is the sum of digits of 123 is 6 what should I modify ?QUESTIONMARK  Of
course ,COMMA  I should modify this statement ,COMMA  this statement should be the sum of the digits of
the number percentage d is percentage d ,COMMA  and here before sum what should I do ?QUESTIONMARK  My n
that was provided by the user has already been destroyed in this loop .PERIOD 
So ,COMMA  what because every time I am dividing it by 10 and making a new number ,COMMA  123 is
becoming 12 and then it is becoming 1 then is becoming 0 .PERIOD  So ,COMMA  I have to save it
somewhere this 123 .PERIOD  So ,COMMA  what I can do here after this reading this ,COMMA  I can save it in another
variable num has n and here I will put num comma now because I am destroying n here ,COMMA 
but I am not touching num .PERIOD  So ,COMMA  num will remain intact only another thing that I have to
do I have to add this num here I must declare it num as an integer otherwise it will give
you syntax error all right .PERIOD 
So ,COMMA  this is another nice example of while using which we can find the number of digits
the sum of the number of digits of a number .PERIOD 

With that we move to another example ;SEMICOLON  decimal to binary conversion some of you may
know it and some of you may not be very conversant with that .PERIOD  We know that we have
got the decimal binary number system where the base is 2 .PERIOD  So ,COMMA  everything is expressed
using zeros and one .PERIOD 
So ,COMMA  sorry if I have a binary digit sorry decimal digit 4 ,COMMA  it is binary equivalent is 1 0 0 ,COMMA  if
we have 5 that is 1 0 1 ,COMMA  if it is 1 then it is 0 0 1 or just 1 ,COMMA  if it is 2 it is 0 1 0 like that the
question is that given our decimal digit how can I convert it to binary what is the
algorithm ?QUESTIONMARK  The algorithm is something like this say I take 4 and divide it by 2 .PERIOD 

So ,COMMA  the remainder is 2 a sorry the quotient is 2 and the remainder is 0 right and then I
divide it by 2 again ,COMMA  the quotient is 0 and this is 0 now when I divide it by 2 further what
will happen [FL] [FL] [FL][FL]
[FL]
[FL]

[FL] [FL] yeah [FL] .PERIOD 

Let us take the number 4 and I want to find out what is the binary equivalent of this ,COMMA  the
algorithm goes like this I first divide it by 2 ,COMMA  because 2 is the base of any binary system I
divide it by 2 .PERIOD  So ,COMMA  I get the quotient as 2 and remainder as 0 .PERIOD 
Next I divide it again by 2 .PERIOD  So ,COMMA  my quotient is 1 and remainder is 0 .PERIOD  Next I divide it again
by 2 my quotient is 0 and remainder is one .PERIOD  So ,COMMA  I go on dividing till I get a quotient to be
0 and I have remembered all the remainders that I got now I can get the binary if I did it
in this direction .PERIOD  So ,COMMA  it is 1 0 0 all right .PERIOD 

Let us take another example suppose I want to have the number 15 ,COMMA  now what is the
binary of 15 to understand that you let us look at the weights of the different positions in
binary ,COMMA  this one is with 2 to the power 0 ,COMMA  2 to the power 1 ,COMMA  2 to the power 2 ,COMMA  2 to the
power 3 ;SEMICOLON  that means ,COMMA  this is 8 4 2 1 now 15 if I have to have I must have a 1 here and 7
more .PERIOD  So ,COMMA  1 here 8 and 4 12 and 1 here 12 ,COMMA  13 ,COMMA  14 and 15 all this should be 1 .PERIOD 
So ,COMMA  can we find out find this out let us see 15 I divide by 2 my quotient is 7 and
remainder is 1 .PERIOD  I again divide it by 2 my quotient is 3 and remainder is 1 .PERIOD  I divide it by 2
again my quotient is 1 ,COMMA  remainder is 1 ,COMMA  I divide it by 2 again my quotient is 0 and the
remainder is 1 ,COMMA  I did it in this direction and we get 1 1 1 1 all right .PERIOD 

Let us take another example again the weights of the system are 1 2 4 8 .PERIOD  2 to the power 0
2 to the power 1 ,COMMA  2 to the power 3 ,COMMA  2 to the power sorry 2 to the power 2 ,COMMA  2 to the power 3
now let us take a number and next one will be 16 is 2 to the power 4 .PERIOD 
Now ,COMMA  let us take a number 23 ,COMMA  what will be the binary representation of that let us see
here 16 will be there of course ,COMMA  I have greater than 16 .PERIOD  So ,COMMA  23 16 and 6 and 7 more .PERIOD  So ,COMMA 
this should be 0 I cannot put a 1 here ,COMMA  because there to be 16 and 8 will be 24 .PERIOD  So ,COMMA  1 here
20 this this .PERIOD  So ,COMMA  my binary is 1 0 1 1 1 let us try in our algorithm divide it by 2 ,COMMA  my
quotient is 11 ,COMMA  I have got a remainder 1 I divide it by 2 my quotient is 5 remainder is 1 ,COMMA  I
divide it by 2 quotient is 2 remainder is 1 divided by 2 is 1 and 0 and divided by 2 is 0
and 1 .PERIOD  So ,COMMA  I reach a 0 I stop and this is the pattern 1 0 1 1 1 ,COMMA  1 0 1 1 1 all right .PERIOD 

Now ,COMMA  let us see how this algorithm that we are talking of can be encoded in C program .PERIOD 
You see here I have declared 1 variable as dec ;SEMICOLON  that means ,COMMA  the decimal number that I
will be reading .PERIOD  So ,COMMA  I am reading that number here .PERIOD  Now in the earlier example we did it
while do now here we are doing do while we are doing something and then I am putting
the while condition later .PERIOD  Do what am I doing printf this means percentage 2 d means I
am printing in binary ,COMMA  I mean this I am taking this dec and I mean 1 beta I am printing I
am defining out the remainder I find out the remainder and then divide it .PERIOD 
And I go on doing this I divide it and I go on doing this while this is the number the
remainder is not equal to 0 .PERIOD  I am dividing it by 2 and finding out the new number ,COMMA  that
this is this point what am I doing ?QUESTIONMARK  I am finding out the quotient ,COMMA  here I am finding out the
quotient and I am based on the quotient I am going on till I get this 0 .PERIOD  Do not bother
about this I can simply take the this thing ,COMMA  first this thing and I go on printing it .PERIOD 
So ,COMMA  here what I am printing I am printing in this in this format I am printing in this
format let us forget about this for the time being all right let us put percent d then I am
dividing it like this way all right .PERIOD  I divide by 2 continually and I am printing in this way 1
then I change it to 11 and then divide it then dec becomes 5 ,COMMA  I print it and go on doing it .PERIOD 
So ,COMMA  at least once I am dividing till it is 0 .PERIOD  This is the algorithm for decimal to binary
conversion you can also try to write it not with do while ,COMMA  but just by while you can I
leave it as an assignment for you to write it using while some condition and not do while
not do while .PERIOD 

So ,COMMA  next let us move to another example that is also very interesting and known to us that
is finding the greatest common divisor of 2 numbers what is the algorithm ?QUESTIONMARK  The
algorithm is shown here ,COMMA  suppose I have got a number 45 and 12 ,COMMA  I am to find out the
greatest common divisor or the hcf of these 2 numbers .PERIOD  What I do is I divide the bigger
number is the smaller number and get a remind remainder .PERIOD  You see remainders are
becoming .PERIOD  So ,COMMA  important they come to the remainder
And then if the remainder is not zero ,COMMA  I divide now the smaller number this 1 with a
remainder and then I get again a remainder which is nonzero ,COMMA  then I take the divisor
current divisor and divide it by this until we get 0 that is what we used to do in school
right .PERIOD  So ,COMMA  ultimately when I get 0 whatever is the divisor currently current divisor that is
our hcf or gcb .PERIOD  Here you see how the code is read you just look at the code a little bit and
try to understand it .PERIOD 
A and B are 2 numbers ,COMMA  now I do not know as it which one is smaller and which one is
bigger .PERIOD  Here in our example we can see one is 12 ,COMMA  one is 45 ,COMMA  but one is 12 one is 45 ,COMMA  but I
am going to try this here the computer does not know which one is 12 which 1 is 45 and
I am taking another variable temp I am reading the numbers A and B .PERIOD  Now if a is greater
than b ;SEMICOLON  that means ,COMMA  I am taking the greater number and moving that in temp out of this 12
and 45 which 1 is the greater number 45 .PERIOD 

So ,COMMA  temps becomes 45 and b becomes a B is the smaller number .PERIOD  So ,COMMA  12 becomes c and b
becomes temp ,COMMA  now you see I have written these 3 in 1 shot .PERIOD  So ,COMMA  let us see here what is
happening after this first temp is 45 ,COMMA  A is 12 and B is 45 now what I am doing here I am
keeping this temp what I am doing here I am dividing B by A .PERIOD  So ,COMMA  45 is being divided by
A 12 and I am checking the remainder the remainder is not zero you can see that .PERIOD  Since it
is not zero I am taking temp to be the modulus of 12 sorry b is what ?QUESTIONMARK  B was 45 right and
A was 12 by this point .PERIOD  So ,COMMA  then and temp was 45 I try this it is not zero .PERIOD 
So ,COMMA  then I take this remainder 9 and again make that to be b .PERIOD  So ,COMMA  now ,COMMA  B becomes 9 and
A becomes the temp which was this number and I go on dividing this and I go on
carrying out this loop or till this becomes 0 .PERIOD  As soon as this becomes 0 then I have got
my GCD stored in A ,COMMA  because every time I am taking the A in A IWelcome to the introductory programming course on NPTEL MOOCs .PERIOD  The goal of this is to learn how to code basic programs in the C programming language .PERIOD  Basically the aim of this course is to teach you how to solve problems using a computer .PERIOD  And by the end of this course ,COMMA  we will hope that you can write medium-sized programs – maybe running to a couple of 100 lines of code comfortably in the C programming language .PERIOD  Programming nowadays is considered a basic skill similar to mathematics that is needed across all disciplines like engineering ,COMMA  in the sciences ,COMMA  and nowadays even in the arts .PERIOD  So ,COMMA  little bit of programming skill is an enhancement to any other skillset that you might already you have .PERIOD  This course we will start from the ground up ;SEMICOLON  we do not assume any prior experience in programming whether in C or in any other language .PERIOD  So ,COMMA  the focus will be to start from the basics ;SEMICOLON  and to use C as a medium of program .PERIOD  A couple of words about the process of programming ;SEMICOLON  it involves two basic steps .PERIOD  One is to define the problem ;SEMICOLON  often you get real-world problems ,COMMA  which are not precise enough to write a program for .PERIOD  So ,COMMA  the first step would be to define and model the problem .PERIOD  And this is a very important step in large scale software development ;SEMICOLON  however we will not focus on this as part of this course .PERIOD  During this course ,COMMA  you will not write large software system like the Indian railways reservation system ;SEMICOLON  those are extremely complex problems involving multiple programmers .PERIOD  In this course ,COMMA  we will assume that the problem is well-defined and already provided to you .PERIOD  So ,COMMA  they will be precise and they will be fairly short and simple .PERIOD  So ,COMMA  this is the first step of programming ,COMMA  which is definition of the problem ,COMMA  which you can assume will be given .PERIOD  Now ,COMMA  comes the second step ,COMMA  which is to obtain logical solution to your problem .PERIOD  And what do we mean by a logical solution ?QUESTIONMARK  A logical solution is a finite sequence of steps ;SEMICOLON  do this first ,COMMA  do this next ;SEMICOLON  if a certain condition is true do this ;SEMICOLON  otherwise ,COMMA  do something else .PERIOD  This is called an algorithm .PERIOD  So ,COMMA  an algorithm is basically a finite step-by-step procedure to solve a problem .PERIOD  One way to visualize an algorithm is using a flowchart .PERIOD  If you are new to programming ,COMMA  it is recommended that ,COMMA  you draw flowcharts to define the solution to your problem .PERIOD  Experienced programmers very rarely draw flowcharts ,COMMA  but that is not a reason for beginning programmers to avoid flowcharts .PERIOD  So ,COMMA  defining a problem is there ;SEMICOLON  then the process of coming up with an algorithm .PERIOD  This is a very important step in the programming process .PERIOD  And followed by this ,COMMA  there is a third step ,COMMA  which is to implement the algorithm in a usual programming language .PERIOD  So ,COMMA  is the concept of an algorithm a new concept ?QUESTIONMARK  I would claim that ,COMMA  it is not .PERIOD  An algorithm is a very familiar concept ;SEMICOLON  the most important example that you can think of are cooking recipes .PERIOD  Now ,COMMA  cooking recipes are written in a way that ,COMMA  they are almost algorithms .PERIOD  They are not quite precise enough for a computer ,COMMA  but they come quite close .PERIOD  For example ,COMMA  let us take an unnamed dish – a desert and let us look at how things specified in a recipe .PERIOD  And we will see that ,COMMA  this analogy is quite deep .PERIOD  There is a very strong similarity in the way that recipe is written and a program is written .PERIOD  So ,COMMA  usually ,COMMA  they will have a list of ingredients upfront .PERIOD  For example ,COMMA  you have ice cream ,COMMA  crushed cereal and so on .PERIOD  And then once you have all the ingredients in place ,COMMA  then you have instructions to say how do you start and how do you end up with the dish .PERIOD  Now ,COMMA  those instructions will be fairly precise ;SEMICOLON  of course ,COMMA  you assume that ,COMMA  the person preparing the dish is a fairly-experienced cook ,COMMA  so that certain instructions need not be given in very precise detail .PERIOD  For example ,COMMA  you can say do this ,COMMA  heat oil and so on .PERIOD  And it is assumed that ,COMMA  a person knows how to heat oil .PERIOD  Even so you will see that ,COMMA  certain recipes are fairly vague and other recipes are fairly detailed .PERIOD  And in any recipe ,COMMA  you can see certain things ,COMMA  which are vague and will cause confusion to most people .PERIOD  For example ,COMMA  here is a term ,COMMA  which says try to make each scoop about as large as your fist .PERIOD  Now ,COMMA  that of course ,COMMA  is a vague term ,COMMA  because my fist could be a different size than yours .PERIOD  And then you will see that ,COMMA  in a formation that makes it easy do dip in order .PERIOD  So ,COMMA  this is fairly vague and it is not very helpful to a cook ,COMMA  who is making this for the first time .PERIOD  So ,COMMA  think of algorithms as similar to recipes ,COMMA  but mentioned in a more precise manner .PERIOD   Another way you can be familiar with algorithms is when you have the – when you buy a make it yourself kit for a furniture or something like that ;SEMICOLON  and you will be provided with a step-by-step instructions on how to assemble the kit .PERIOD  Often when you buy disassembled table or something like that ,COMMA  it will come with a sheet telling you how to start with the components and build a table .PERIOD  Those are also similar to an algorithm .PERIOD  So ,COMMA  let us look at a flowchart to depict a mathematical algorithm and we will use this flowchart to explain certain conventions about how algorithms can be described .PERIOD  So ,COMMA  every flowchart will have a start and an end ;SEMICOLON  and it will have a finite number of boxes .PERIOD  So ,COMMA  this is the finite number of instructions that I was talking about .PERIOD  There are certain conventions in drawing flowcharts ;SEMICOLON  the start and the end are often described in circles .PERIOD  Then there are ordinary boxes and then there are diamonds .PERIOD  We will shortly describe what they mean .PERIOD  So ,COMMA  suppose you want to write an algorithm for adding the first n numbers ;SEMICOLON  all of you know how to do it .PERIOD  The point is how do you describe this step-bystep to somebody who does not know it already .PERIOD   So ,COMMA  first you have to take what is the upper limit N and then you have to sum them up .PERIOD  So ,COMMA  one way to sum them up is start with an initial sum of 0 and then add numbers one by one .PERIOD  So ,COMMA  increment a counter from 1 all the way up to n .PERIOD  So ,COMMA  you start with I equal to 1 and then add the I-th number to the sum ;SEMICOLON  and then increment I ;SEMICOLON  if I is already N ,COMMA  then you are done ;SEMICOLON  if I is not N ,COMMA  then you go back and do the sum all over again until you hit an I .PERIOD  When you reach I equal to N ,COMMA  you come out the program ;SEMICOLON  print the sum ;SEMICOLON  and end the program .PERIOD  So ,COMMA  this is a very simple flowchart .PERIOD  So ,COMMA  initially ,COMMA  if N is less than 1 ,COMMA  you have nothing to do ;SEMICOLON  if N is greater than 1 ,COMMA  you start a counter from I equal to 1 to n and add the numbers one by one until you hit the N-th number .PERIOD  If you wanted to compute a slightly different problem ,COMMA  which is let us say the factorial of N ,COMMA  which is just a product of the first N numbers ,COMMA  the flowchart will look fairly similar ;SEMICOLON  the only difference is that instead of adding numbers ,COMMA  you will multiply them .PERIOD  So ,COMMA  this flowchart is similar to the previous flowchart ;SEMICOLON  you will first input in N ,COMMA  and then increment N until you hit N equal to M .PERIOD  If so you will finally ,COMMA  print the factorial ;SEMICOLON  otherwise ,COMMA  you go back to the loop .PERIOD  So ,COMMA  here are the conventions used .PERIOD  The start symbol is often as a circle or an oval ;SEMICOLON  the input symbol and the output symbol are often represented as parallelograms ;SEMICOLON  and the normal operation boxes are represented as rectangles ;SEMICOLON  and the test box to see whether you have hit a limit to test some condition in general ,COMMA  they are represented as diamonds .PERIOD  In this session ,COMMA  we will write another algorithm to solve a mathematical problem .PERIOD  If you do not know this algorithm already ,COMMA  that is fine ;SEMICOLON  it is more for the purpose of demonstrating ,COMMA  if you know a solution ,COMMA  how do you come up with the algorithm to tell a computer how to solve it .PERIOD  The algorithm is for finding the greatest common divisor or the highest common factor ,COMMA  this is known under two names of two positive integers: m and n .PERIOD  So ,COMMA  this is an algorithm you probably know .PERIOD  How do you solve this ?QUESTIONMARK  Let us first try a naive solution .PERIOD  And before writing an algorithm ,COMMA  let us see what do I mean by the simple solution of GCD .PERIOD  So ,COMMA  you are asked to find the greatest common divisor of m and n ;SEMICOLON  take the smaller number n ;SEMICOLON  and now you start looking for each number k between 1 and n ,COMMA  remember that n is the smaller number ;SEMICOLON  in descending order ,COMMA  do the following .PERIOD  What you do is if k divides m and n ,COMMA  then k is the greatest common divisor of m and n .PERIOD   And this is obvious by the definition of greatest common divisor ;SEMICOLON  if k divides m and n ,COMMA  then it is obviously a divisor of m and n .PERIOD  Also we are coming in descending order ;SEMICOLON  we start from n and go down to n .PERIOD  So ,COMMA  the first divisor that you hit when you go down is going to be the greatest common divisor of m and n .PERIOD  So ,COMMA  this algorithm obviously works .PERIOD  It will compute the GCD correctly ,COMMA  but it is very slow .PERIOD  And think about a very large numbers: m and n ;SEMICOLON  and you will see that ,COMMA  it may go n steps before reaching the correct GCDs .PERIOD  So ,COMMA  compute the GCD of two very large numbers ,COMMA  which are relatively prime to each other ;SEMICOLON  that means that the GCD of m and n are 1 .PERIOD  Now ,COMMA  if you pick such a pair ,COMMA  this algorithm will compute the GCD correctly ,COMMA  but it will take n steps ,COMMA  because you have to go down all the way from n to 1 before you will hit the GCD .PERIOD  Can we do better ?QUESTIONMARK  There is a faster way and it is a very old algorithm .PERIOD  The algorithm is due to Euclid .PERIOD  We will see a slightly modified version of that algorithm .PERIOD  So ,COMMA  before we go into Euclid’s algorithm for GCD ,COMMA  we will describe what it does and give you a slight intuition of why it works .PERIOD  So ,COMMA  consider the GCD of 8 and 6 .PERIOD  Now ,COMMA  you can consider two rods: one of length 8 ,COMMA  and another of length 6 .PERIOD  Now ,COMMA  obviously ,COMMA  if a number divides 6 and 8 ,COMMA  then I should be able to make a stick of that length ,COMMA  so that I can measure 6 exactly with that shorter rod ;SEMICOLON  and I can measure 8 exactly with that shorter rod .PERIOD  This is the meaning of a common divisor ,COMMA  and we have to find the greatest common divisor .PERIOD   So ,COMMA  first ,COMMA  what we will do is we will measure the longer rod using the shorter rod .PERIOD  Now ,COMMA  it may not measure the longer rod exactly .PERIOD  For example ,COMMA  in this case ,COMMA  6 does not measure 8 exactly ;SEMICOLON  there will be a small piece of length 2 left over .PERIOD  So ,COMMA  take that reminder .PERIOD  And now ,COMMA  repeat the process ;SEMICOLON  now ,COMMA  2 has become the shorter rod and 6 has become the longer rod .PERIOD  Now ,COMMA  see if 2 measures 6 exactly ;SEMICOLON  it does .PERIOD  So ,COMMA  you are done .PERIOD  And then you can say that ,COMMA  2 is the GCD of 8 and 6 .PERIOD  The reason why this works is – by the nature of this algorithm ,COMMA  it is clear that 2 divides 6 ,COMMA  because that is why we stop the algorithm .PERIOD  And also ,COMMA  we know that ,COMMA  8 is basically 6 plus 2 .PERIOD  So ,COMMA  it is obviously ,COMMA  a multiple of 2 .PERIOD  So ,COMMA  it is a common divisor .PERIOD  And with a slightly more elaborate argument ,COMMA  we can argue that ,COMMA  it is the greatest common divisor .PERIOD  So ,COMMA  this is an algorithm ,COMMA  which is essentially due to Euclid .PERIOD  So ,COMMA  it was known for at least 2000 years .PERIOD  Let us pick a slightly more elaborate example .PERIOD  Let us say we want to find the GCD of 102 and 21 .PERIOD  The process of taking remainder is what is known as the modulo operator in mathematics .PERIOD  So ,COMMA  102 modulo 21 is the remainder of integer division of 102 by 21 .PERIOD  So ,COMMA  the remainder of when you divide 102 by 21 is 18 .PERIOD  So ,COMMA  that is the shorter rod for the next stage .PERIOD  Now ,COMMA  21 mod 18 is 3 .PERIOD  And that becomes the rod for the next stage ;SEMICOLON  the shorter rod for the next stage .PERIOD  And 18 mod 3 is 0 ;SEMICOLON  that is when you stop the algorithm .PERIOD  So ,COMMA  when the modulo operator gives you 0 result ;SEMICOLON  that means that ,COMMA  the shorter number exactly divides the larger number ;SEMICOLON  that means that ,COMMA  the shorter number is a divisor of the larger number and you stop the algorithm .PERIOD  Now ,COMMA  you say that ,COMMA  GCD of 102 and 21 is 3 .PERIOD  So ,COMMA  this is a slight modification of the classical Euclid’s method for GCD .PERIOD  And so ,COMMA  it is based on the following simple fact ,COMMA  which we have described .PERIOD  And you can prove this mathematically as well .PERIOD  So ,COMMA  suppose you take two positive numbers: a and b ;SEMICOLON  where ,COMMA  a is the larger number ;SEMICOLON  then GCD of a and b is the same as GCD of b and the remainder when you divide a by b .PERIOD  So ,COMMA  it is written by the equation GCD(a ,COMMA  b) is GCD(b ,COMMA  a % b) .PERIOD  The modulo operator is represented as the percentage sign ,COMMA  because this is the convention that we will use in C .PERIOD  And this equation can be seen by our previous slide ;SEMICOLON  a was the bigger rod ;SEMICOLON  b was the shorter rod .PERIOD  This was the first stage .PERIOD  The second stage was when b is the shorter rod .PERIOD  And the shorter rod for the next stage is modulo – is given by the modulo operator .PERIOD  To prove this ,COMMA  you can start by considering the division of a by b and writing a as bq + r .PERIOD  But ,COMMA  we will not go into the proof .PERIOD  From elementary properties of natural numbers ,COMMA  it is possible to prove that ,COMMA  Euclid’s method correctly computes the GCD .PERIOD  Right now ,COMMA  we will move into how do we write the GCD algorithm in the form of an input .PERIOD  So ,COMMA  here is a slightly abbreviated picture .PERIOD  I have skipped the start state ;SEMICOLON  but the start state is there .PERIOD  Let us focus on what happens during the algorithm .PERIOD  You have two numbers: a and b .PERIOD  The first thing to ensure is that ,COMMA  a is the larger number .PERIOD  The reason we do that is that ,COMMA  if a is the larger number ,COMMA  then the modulo operator is properly defined .PERIOD  So ,COMMA  if a is the larger number ,COMMA  then we are fine ;SEMICOLON  we can go into the GCD algorithm .PERIOD  If a is not the larger number ,COMMA  you merely swap a and b ,COMMA  so that whatever is the larger number ,COMMA  you called it a .PERIOD  So ,COMMA  exchange a and b ;SEMICOLON  means that you say that ,COMMA  the value of a is stored in a temporary variable ;SEMICOLON  then the value of b is stored in a ;SEMICOLON  and then the value of b is stored in t with the value of t stored in b .PERIOD  So ,COMMA  here is a way to exchange the values of a and b .PERIOD  So ,COMMA  ensure at first that ,COMMA  a is the larger number .PERIOD  Once you do that ,COMMA  you get into the code for the proper  utility in GCD .PERIOD  First you test whether b is 0 .PERIOD  If b is 0 ,COMMA  then there is nothing to do ;SEMICOLON  a is the GCD of a and b ;SEMICOLON  GCD(4 ,COMMA  0) is 4 ;SEMICOLON  GCD(4 ,COMMA  0) is 8 ,COMMA  and so on .PERIOD  So ,COMMA  if the smaller number is 0 ,COMMA  then there is nothing do in the algorithm ;SEMICOLON  the algorithm is over ;SEMICOLON  and you say that ,COMMA  print a .PERIOD  If b is not 0 ,COMMA  then we do the Euclidean equation .PERIOD  You take a % b ;SEMICOLON  store it in a variable g ;SEMICOLON  then assign the value of b to a and assign the value of g to b .PERIOD  So ,COMMA  this corresponds to the operation of taking b and a % b as the next step .PERIOD  After you do that ,COMMA  you again test the condition whether b has now become 0 .PERIOD  If it is 0 ,COMMA  then we are done and a is the GCD ;SEMICOLON  otherwise ,COMMA  we do another round of taking a % b and setting a = b and b = g .PERIOD  So ,COMMA  a ,COMMA  b and g are what are known as variables .PERIOD  And variables are used in programming to store exactly one value at a time .PERIOD  So ,COMMA  at any particular time ,COMMA  it will have one value ;SEMICOLON  then after the execution of another instruction ,COMMA  it will have a new value and so on .PERIOD  Now ,COMMA  for the purposes of describing an algorithm ,COMMA  imagine that ,COMMA  the variable is a box ;SEMICOLON  and it is a name of a box ;SEMICOLON  and the value is stored inside the box .PERIOD  For example ,COMMA  a ,COMMA  b and g are the variables that we have used in the program .PERIOD  And they are the names for these integer boxes .PERIOD  So ,COMMA  if we are computing ,COMMA  let us say the GCD of 5 and 3 ,COMMA  then you might start with a equal to 5 and b equal to 3 .PERIOD  The second operation that we have used in the code is the assignment operation .PERIOD  So ,COMMA  this is what an example of the assignment operator .PERIOD  And when we do an assignment ,COMMA  what we mean is that ,COMMA  you take the left variable ,COMMA  which is g in this case and assign it the value of what is the expression on the right-hand side ,COMMA  which is a % b  .PERIOD  So ,COMMA  assignment a = b replaces whatever is stored in a by what is stored in b .PERIOD  So ,COMMA  take the right-hand side ;SEMICOLON  take the value of that ;SEMICOLON  and put it into the variable that the left-hand side represents .PERIOD  For example ,COMMA  if a was 5 and b is 3 ;SEMICOLON  after a = b ,COMMA  you would take the value of b and put it in a .PERIOD  So ,COMMA  a will now become 3 and b will remain 3 .PERIOD  Another small thing that we have used in the code is sequential assignment .PERIOD  So ,COMMA  if you write a bunch of statements one after the other ,COMMA  let us say separated by semicolons ;SEMICOLON  then this means that ,COMMA  the instructions are to be executed one after the other in sequence .PERIOD  So ,COMMA  first ,COMMA  you do g equal to a % b ;SEMICOLON  then you do a = b ;SEMICOLON  and after that you do b = g .PERIOD  So ,COMMA  initially ,COMMA  let us say that a is 10 and b is 6 ;SEMICOLON  g is undefined .PERIOD  After you run the statement g equal to a % b ,COMMA  you take 10 modulo 6 ;SEMICOLON  you will have 4 .PERIOD And then a = b ;SEMICOLON  the value of b will be stored in a .PERIOD  So ,COMMA  a become 6 .PERIOD  And then b = g ;SEMICOLON  the value of g will be stored in b .PERIOD  So ,COMMA  b will become 4 .PERIOD  Now ,COMMA  let us just dry run the program or the algorithm and see how it computes the GCD of two numbers .PERIOD  So ,COMMA  I will denote the currently executing statement with an icon and I will call this the program counter .PERIOD  So ,COMMA  this is at any point ,COMMA  it is the next step to be executed .PERIOD  Initially ,COMMA  it is at the beginning of the code ;SEMICOLON  where ,COMMA  you take the input .PERIOD  And we will have three variables ,COMMA  which will represent the current state of a program .PERIOD  So ,COMMA  suppose you want to compute the GCD of 8 and 6 .PERIOD  So ,COMMA  you have a equal to 8 ;SEMICOLON  b equal to 6 .PERIOD  You know that a is greater than b .PERIOD  So ,COMMA  you proceed .PERIOD  Now ,COMMA  you test whether b is 0 .PERIOD  So ,COMMA  since b is non zero ,COMMA  you go into the main body of the loop .PERIOD  So ,COMMA  you do g equal to a % b ;SEMICOLON  a = b ;SEMICOLON  b = g ,COMMA  this step once .PERIOD  So ,COMMA  you will end up with a is now 6 ;SEMICOLON  b is 2 ;SEMICOLON  and g is 2 .PERIOD  You again comeback to the discussion and test whether b is 0 or not ;SEMICOLON  b is not 0 .PERIOD  So ,COMMA  you go back into the body of the loop again .PERIOD  So ,COMMA  you have g to be a % b .PERIOD  So ,COMMA  6 modulo 2 should be 0 .PERIOD  And then you do a = b and b = g .PERIOD  You will have a equal to 2 ;SEMICOLON  b equal to 0 ;SEMICOLON  and g equal to 0 .PERIOD  At this point ,COMMA  b is now 0 .PERIOD  So ,COMMA  you say that a is actually the GCD of three numbers – of the numbers 8 and 6 .PERIOD  So ,COMMA  you can ensure that ,COMMA  it computes the GCD correctly .PERIOD   Once we are understood what algorithms are ,COMMA  we will start writing a few simple programs in the C programming language .PERIOD  Before we begin ,COMMA  we will give a brief introduction to the process of programming .PERIOD  When you are programming ,COMMA  you follow typically ,COMMA  what is known as the programming cycle and this contains three parts .PERIOD  One is the process where you write the program or edit the program ,COMMA  and after you are done editing the program ,COMMA  you save it and then you compile your program .PERIOD  If your compilation succeeds ,COMMA  you are ready to run the program .PERIOD  If your compilation fails ,COMMA  then you return to the editing step and correct the errors and compile again .PERIOD  Once compilation process succeeds ,COMMA  then you can run the program and check whether the output is correct .PERIOD  If the output is correct ,COMMA  you are done ;SEMICOLON  if not you go back to the edit process .PERIOD  So ,COMMA  this is why it is known us the edit ,COMMA  compile ,COMMA  run cycle .PERIOD  So ,COMMA  you edit the program first ,COMMA  then compile it .PERIOD  If there are compilation errors you go back and edit it again ,COMMA  otherwise you run the program .PERIOD  When you run the program ,COMMA  if the logic is correct ,COMMA  then you are done .PERIOD  If your logic is incorrect ,COMMA  then you go back and make changes to the program ,COMMA  compile it and run it again .PERIOD  So ,COMMA  this is the process ,COMMA  that we have to follow in the ,COMMA  when we program .PERIOD  We look at each of the steps one by one .PERIOD  In editing ,COMMA  it is typically done in what is known as in editor .PERIOD  Now ,COMMA  editor is a program that lets you create a text file ,COMMA  make changes to the text file and update the text file ,COMMA  later save it .PERIOD  So ,COMMA  in order to create a program ,COMMA  pick up particular editor of your choice .PERIOD  If you are on Linux ,COMMA  I would recommend a simple editor like G Edit .PERIOD  If you are on windows ,COMMA  there is free editor called Notepadd + + .PERIOD  Be careful that this is not the usual notepad that comes along with the system .PERIOD  Write your code in ,COMMA  in editor of your choice and save it into a file .PERIOD  Let us call it Sample .PERIOD c .PERIOD  Once your code is saved ,COMMA  you have to compile a program .PERIOD  Now ,COMMA  why do we have to compile a program ?QUESTIONMARK  Why is this step necessary ?QUESTIONMARK  The computed does not understand C per say ,COMMA  it cannot execute a C program or the individual statements in a C ,COMMA  in C language correctly .PERIOD  For example ,COMMA  let us say that in C you can write g = a % b .PERIOD  The percentage operation stands for modulo .PERIOD  So ,COMMA  this statement says that you take a % b and assign it to the variable g .PERIOD  Now ,COMMA  the microprocessor ,COMMA  the processor in the computer cannot execute this statement because it does not understand this C programming language .PERIOD  So ,COMMA  it translates it into an equivalent piece of code consisting of even more basic statements .PERIOD  For example ,COMMA  a ,COMMA  this is just for the purpose of illustration and it is not important that you understand exactly what is going on ,COMMA  but in a statement like g = a % b ,COMMA  can be translated into bunch of statements saying load data from particular memory location into particular register ,COMMA  load the second piece of data from another memory location to the second register ,COMMA  divide the contents of these two registers ,COMMA  store the reminder in a third register and then finally ,COMMA  take the result and store it into a third memory location .PERIOD  So ,COMMA  the simple statement that we wrote ,COMMA  g = a % b or g = a % b ,COMMA  becomes a bunch of basic statements ,COMMA  that the microprocessor can understand and then it execute these statements .PERIOD   So ,COMMA  why not program in the microprocessor language or in assembly language ?QUESTIONMARK  Writing programs in machine language is very tedious .PERIOD  One line in a higher programming language like C translates into multiple lines of machine language .PERIOD  So ,COMMA  writing machine language code is very long and it is very tedious and is particularly prone to errors .PERIOD  Also ,COMMA  they are not portable .PERIOD  If you write machine code for a particular processor ,COMMA  let us say ,COMMA  you are writing the code for an Intel processor and you translate it to an AMD machine ,COMMA  it might not work .PERIOD  Whereas ,COMMA  if you take your C code and compile it in another machine ,COMMA  it will run on the machine .PERIOD  So ,COMMA  compilers work as a bridge .PERIOD  What they do is ,COMMA  take a high level C programming language and translate it into the equivalent machine code .PERIOD  So ,COMMA  think of them as a translator .PERIOD  So ,COMMA  you ,COMMA  the input is a C program and then you give it to a compiler .PERIOD  The output of the compiler will be the equivalent machine program for whichever machine you want to run it on .PERIOD  So ,COMMA  compiler is a translator ,COMMA  which translates from C to machine code .PERIOD  How do you compile ?QUESTIONMARK  We have just seen why we bother with compilation and on UNIX system or Linux systems ,COMMA  you can compile the program using the gcc compiler .PERIOD  So ,COMMA  gcc stands for the gnu c compiler .PERIOD  So ,COMMA  for example ,COMMA  if you have edited and saved your file as a Sample .PERIOD c ,COMMA  you can just type on the comment prompt on the terminal gcc Sample .PERIOD c .PERIOD  If your code does not have any errors ,COMMA  then the system will silently say ,COMMA  that the compilation is done and it will show you the prompt .PERIOD  If there are errors ,COMMA  the system will list the errors and so ,COMMA  you can go back to the editor ,COMMA  edit you code to correct errors and come back and compile again .PERIOD  As long as there are compilation errors ,COMMA  there will be no executable file created .PERIOD  So ,COMMA  the executable file is the code ,COMMA  is the file that you can finally run .PERIOD  And if there are compilation errors ,COMMA  the compiler will not produce executable code .PERIOD   So ,COMMA  name your file as whatever you want ,COMMA  let us call it ,COMMA  yourfilename .PERIOD c and then gcc yourfilename .PERIOD c .PERIOD  It will produce the executable file .PERIOD  If you are on Linux ,COMMA  the executable file that it creates is something called a .PERIOD out .PERIOD  If there are no errors and look at your directory ,COMMA  there will be a new file called a .PERIOD out in your directory and we will explain the directory structures in another session ,COMMA  ok .PERIOD  Let us look at a very simple C program .PERIOD  Open your editor depending on which system you are in .PERIOD  So ,COMMA  let us write a very simple program .PERIOD  It is ,COMMA  it is very short .PERIOD  What it has is ,COMMA  are three lines of code and some punctuation .PERIOD  This is known as the C syntax .PERIOD  Let us examine this code .PERIOD  What this code does is ,COMMA  it prints a particular massage ,COMMA  which is ,COMMA  welcome to C .PERIOD   And it has various components ,COMMA  you type it into an editor as it is ,COMMA  make no punctuation mistakes ,COMMA  syntax errors .PERIOD  Now ,COMMA  if you compile the program and you have typed the program correctly ,COMMA  then a new file called a .PERIOD out will be created .PERIOD  So ,COMMA  if you type ,COMMA  gcc Sample .PERIOD c and if there are no errors ,COMMA  it will just say nothing .PERIOD  If there are ,COMMA  if it says something ,COMMA  then there is a compilation error .PERIOD  Compilation creates an executable a .PERIOD out and now you can run the program by typing ,COMMA  and this is important ,COMMA   .PERIOD /a .PERIOD out .PERIOD  So ,COMMA  this syntax is important ,COMMA  what you type is ,COMMA   .PERIOD /a .PERIOD out and then when you run the program it will say ,COMMA  welcome dot ,COMMA  Welcome to C ,COMMA  because that is what the program is supposed to do… Let us look at the program little more carefully .PERIOD  What are its components ?QUESTIONMARK  It had three lines ,COMMA  the first line said # include <stdio .PERIOD h> .PERIOD  So ,COMMA  it has multiple components .PERIOD  One is the first symbol ,COMMA  which is ,COMMA  has the first symbol ,COMMA  which is the hash .PERIOD  Please do not forget to include that .PERIOD  And actually ,COMMA  there is no space between the hash and the first i ,COMMA  so there is no space here .PERIOD  So ,COMMA  # include <stdio .PERIOD h> .PERIOD  This line is supposed to tell C that please include the standard input-output library .PERIOD  The standard input-output library is what has the print routines ,COMMA  which will print output messages on to the terminal .PERIOD  So ,COMMA  if you want to have any input output component of your program ,COMMA  then you should include <stdio .PERIOD h> .PERIOD  Include this line routinely in your ,COMMA  in the first line of your C file because in the course of this class ,COMMA  we will often need scanf and printf statements .PERIOD  So ,COMMA  we will often need input statement and output statements .PERIOD  So ,COMMA  include this by default .PERIOD  Now ,COMMA  if you look at the second line ,COMMA  we will have a function called main .PERIOD  And again ,COMMA  note the parenthesis here that is also part of the syntax .PERIOD  So ,COMMA  main is supposed to be a function .PERIOD  All C programs start by executing the main function and it starts from first statements of the main function .PERIOD  Now ,COMMA  what dose the main function have ?QUESTIONMARK  It has a single line ,COMMA  which says printf Welcome to C .PERIOD  So ,COMMA  printf is the function called to output from a C program .PERIOD  So ,COMMA  to print a particular massage you enclose it in double quotes .PERIOD  So ,COMMA  whatever is enclosed in the double codes ,COMMA  will be printed .PERIOD  So ,COMMA  to repeat again ,COMMA  please note the extra punctuation symbols ,COMMA  which tell you ,COMMA  that these are valid C statements .PERIOD  So ,COMMA  all the underline statements are ,COMMA  all the underline symbols are important .PERIOD  So ,COMMA  in the line printf Welcome to C ,COMMA  this is what is known as a statement in C and statements in C end in a semicolon .PERIOD  So ,COMMA  this semicolon is also important because it tells you ,COMMA  that this is where the statements ends ,COMMA  what typical errors do we have when we code in C .PERIOD  Let us systematically enumerate a few common errors that could happen in even a simple program like what we have seen .PERIOD  For example ,COMMA  you could forget to include <stdio .PERIOD h> .PERIOD  If you do not include the standard input library ,COMMA  then the compiler will give you an error message .PERIOD  You may forget to include the main function ,COMMA  then also you will get some error message .PERIOD  You could forget to include the semicolon in the statement ,COMMA  you could forget to include the braces ,COMMA  the curly braces in main or forget to close the double quote ,COMMA  open or close the double quote in the printf statement .PERIOD  So ,COMMA  these are a few errors that you could make even in a simple code like what we have seen .PERIOD  We have only three lines ,COMMA  but they could also have errors .PERIOD  I would advise you to try deliberately making these mistakes in your code ,COMMA  try compiling them and study the error messages .PERIOD  Once you are familiar with error massages ,COMMA  this will help you later in your coding ,COMMA  because when you see the error massages you can guess what errors did you possibly make in your code .PERIOD  So ,COMMA  go back to the code and correct it .PERIOD   In this session let see another simple program ,COMMA  and try to study what is going on in there .PERIOD  So ,COMMA  here I have slightly more complicated program ,COMMA  then what we just saw .PERIOD  This has two printf statements ;SEMICOLON  once is welcome to ,COMMA  and the second says C programming .PERIOD  So ,COMMA  it is slightly more sophisticated then the code that we have seen .PERIOD  So ,COMMA  to recap the first line # include <stdio .PERIOD h> ,COMMA  tells the compiler to include the standard output library .PERIOD   Then we have the main function ;SEMICOLON  the open and close brackets immediately after name show that main is a function ,COMMA  execution always begins at the first line of the main statement .PERIOD  Then the body of the function the logic of the function is enclosed within two curly braces ;SEMICOLON  the first curly brace signals - beginning of the function ,COMMA  and the last curly brace says that the function is over here .PERIOD  This particular name function has two statements ;SEMICOLON  earlier be have just one statement .PERIOD  The each statement as I said before is terminated with a semicolon .PERIOD  So ,COMMA  this is the first semicolon ,COMMA  and this is the second semicolon .PERIOD  The first semicolon says that the statement printf welcome to ends that point ,COMMA  and then followed by the second statement .PERIOD  And the second statement is also terminated by semicolon .PERIOD  Every statement in C is terminated with the semicolon .PERIOD  Curly braces enclose a set of statement ,COMMA  and each statement in a sequence is executed in the exact sequence that we wrote in the code .PERIOD  Now ,COMMA  once we edit this in an editor save the file ,COMMA  now compile ,COMMA  and run the file .PERIOD  So ,COMMA  let us call it sample .PERIOD c or you may rename it any file you want .PERIOD  And then once the compilation is successful ,COMMA  you can run it using  .PERIOD /a .PERIOD out ,COMMA  and then it will print welcome to C programming ,COMMA  which was essentially the same messages as we seen before .PERIOD   Let us try’s what happens when we execute the program .PERIOD  By tracing we mean step by step looking at each statement ,COMMA  and C’s see what happens when the program executes .PERIOD  We have what is known as a program counter ,COMMA  which says here is the currently executing line of program .PERIOD  The program counter stars executing at the first statement of the mean ,COMMA  for is of reference I have given line numbers in the code .PERIOD  Now this is given just for clarity .PERIOD  Now let us just see ,COMMA  what happens when we run the program line by line .PERIOD  So first we execute the first line of the code ,COMMA  after we are done executing the line 4 .PERIOD  So ,COMMA  after we are done executing lines 3 and 4 ,COMMA  the message welcome to will be printed on the terminal .PERIOD  This will be followed by the next line ,COMMA  so the next lines is C programming .PERIOD  So ,COMMA  after the next line executes ,COMMA  it will print C programming % .PERIOD  I given this in two different colors to highlight that one was printed by the first line ,COMMA  and otherwise printed in second line ,COMMA  otherwise the colors have nosing ,COMMA  no special meaning .PERIOD  The program terminates when the main finishes execution ,COMMA  and this is what is typically known as returning from the function ,COMMA  we will see this terminology later in the course .PERIOD  Now ,COMMA  when you code in addition to the statements which are actually executed ,COMMA  you may also give a few additional remarks ;SEMICOLON  these are what are known as come program comments .PERIOD  For example ,COMMA  the lines a simple C program first print and second print ;SEMICOLON  these are the comments in the code .PERIOD  So ,COMMA  whatever is highlighted in red in the code is what are known as comments .PERIOD  Any text between forward /* ,COMMA  and then later followed by a */ .PERIOD  So ,COMMA  any text between successive /* and */ is a comment ,COMMA  and it will be ignored by the compiler .PERIOD  So ,COMMA  as far as the compiler is concerned a code with comments is the same as a code without comments .PERIOD  It does not effect the logic of the code .PERIOD  So ,COMMA  comments are not part of the program ;SEMICOLON  however ,COMMA  it is highly recommend that any program you write ,COMMA  you should comment the code .PERIOD  This is show that other people can understand your code also you yourself looking at the code 4 months later or five months later ,COMMA  it is it may be difficult to understand what you wrote ?QUESTIONMARK  Much before and comments help you understand the logical of the program .PERIOD   Now ,COMMA  it is a very good idea to comment your programs ,COMMA  and for lager program it is a must to comment the programs .PERIOD  This is standard industry practice ,COMMA  and even if you participating in large programming project like free software projects ,COMMA  comments are highly encouraged ,COMMA  because it will understand other developers ,COMMA  other programmers to understand your code .PERIOD  So ,COMMA  we will try to follow our own advice most of the programs that we will see in this code ,COMMA  we will comment it ,COMMA  so that it easy to follow the logic of the code .PERIOD  Now ,COMMA  a few notes just as a main is a function printf is also a function .PERIOD  Printf is a library function which means that it is given by the C programming language ,COMMA  and we wanted to tell the compiler to include this library function .PERIOD  The statement which set that is this # include <stdio .PERIOD h> .PERIOD  So ,COMMA  # include <stdio .PERIOD h> is the line telling that I want the standard input output library ,COMMA  because that is the library from which I will get the function printf .PERIOD  Now what does printf do ?QUESTIONMARK  Printf takes two arguments ,COMMA  just like arguments to mathematical function .PERIOD  So ,COMMA  it takes an input argument which in our first case was welcome to .PERIOD  So ,COMMA  this was the printf first printf statement in the program that we just soft .PERIOD  Now ,COMMA  this was enclosed in double codes ,COMMA  right .PERIOD  So ,COMMA  it was enclosed in open double quote ,COMMA  and then ended with a close double quote .PERIOD  A sequence of characters in double quotes it is what is known as a string constant .PERIOD  Now we can call the functions that we define or we can call the functions that the library provide .PERIOD  This is how once you define a function ,COMMA  you can call a function .PERIOD  Now we will see an additional concept ,COMMA  the printf statements that we have seen so far ,COMMA  we will print a message and it will print there .PERIOD  And then the prompt the terminal prompt will come immediately after the print .PERIOD  Now typically what we want to do this will print a message ,COMMA  then say tell the prompt to appear on the next line .PERIOD  So ,COMMA  for this we need what is known as the new line character .PERIOD  All letters digits ,COMMA  gamma ,COMMA  punctuation symbol ;SEMICOLON  these are called characters in the C programming language .PERIOD  There are the total of 256 characters in C ,COMMA  256 is 2 to the 8 .PERIOD  So ,COMMA  for example this small letters a to z ,COMMA  capital letters A to Z ,COMMA  0 to 9 ,COMMA  the at symbol ,COMMA  other punctuation symbols like dot ,COMMA  gamma ,COMMA  exclamation mark ,COMMA  and so on ;SEMICOLON  are all characters in C .PERIOD  Now in addition to this there are certain things call special characters .PERIOD  So ,COMMA  there is a special character call new line ,COMMA  in the C programming language it is denoted as \n .PERIOD  So ,COMMA  there are notice that there are two kinds slashes ;SEMICOLON  / ,COMMA  and \ on your keyboard .PERIOD  And the new line character is denoted as \n .PERIOD  So ,COMMA  even though it is single character ,COMMA  it is denoted by two letters .PERIOD  When used in printf it causes the current output line to end ,COMMA  and then printing will start from the new line .PERIOD  So ,COMMA  it is something which says the current line has enter ,COMMA  now whatever you have to print ,COMMA  print it in the next line .PERIOD  The new line character \n is like any other letter ,COMMA  and can be used multiple times in any particular line .PERIOD  For example ,COMMA  if you have something to printfollowed by \n ,COMMA  followed by C ,COMMA  followed by something to print .PERIOD  Now this will be treated as ,COMMA  so many characters and then a new line followed by C .PERIOD  So ,COMMA  let see a particular example ,COMMA  if you have the old program that we just wrote ,COMMA  but we end each message which a \n .PERIOD  So ,COMMA  we have printf welcome to \n ,COMMA  printf C programming \n .PERIOD  When we compile and execute ,COMMA  we will see something new .PERIOD  So ,COMMA  when we run this $ .PERIOD /a .PERIOD out ,COMMA  it will print welcome to ,COMMA  and then the next thing to print is is a \n which is a new line .PERIOD  So ,COMMA  printing will start from the next line ,COMMA  and then it will print the next message with C programming .PERIOD  So ,COMMA  it will print that followed by new line .PERIOD  So ,COMMA  the prompt will appear on the line after words .PERIOD  So ,COMMA  new line character is something that is use to make your output messages a little more here .PERIOD  So ,COMMA  let us just conclude by saying one more thing about new lines ,COMMA  the new line character \n is like any other character ,COMMA  and you can use it multiple times even within single message .PERIOD  For example ,COMMA  if I do the same program ,COMMA  but let us say I have welcome to \n \n C \n .PERIOD  So ,COMMA  I have repeated occurrences of \n in the same message ,COMMA  what it will do is if will print the message welcome to ,COMMA  then it will print a new line ,COMMA  and then it will print another line ,COMMA  and then it will print C followed by new line .PERIOD  So ,COMMA  when you run program you will have welcome to new line ,COMMA  then the blank line ,COMMA  then C ,COMMA  then another line .PERIOD  So ,COMMA  new lines are just like a any other characters ,COMMA  the difference is that ,COMMA  because it is a special character ,COMMA  it is represented by two letter .PERIOD  So ,COMMA  it is not represented by single letter it is represented by \n .PERIOD  So ,COMMA  they are together one character in C ,COMMA  call the new line character .PERIOD  In this session we will see slightly more sophisticated programs .PERIOD  Recall that in our discussion about flowcharts ,COMMA  we talked about variables ,COMMA  which were conceptually seen as little boxes in which you can hold values .PERIOD  So ,COMMA  let us see how to write simple C programs in which we make use of variables .PERIOD  So ,COMMA  we will illustrate with the help of a sample program .PERIOD  So ,COMMA  we have this following program ,COMMA  which is very simple ,COMMA  read a Celsius temperature and convert it into the equivalent Fahrenheit temperature .PERIOD  This is something that all of you must know .PERIOD  So ,COMMA  the flowchart is very simple ,COMMA  you have an input C ,COMMA  which is the current Celsius that you want to convert .PERIOD  Then you apply the formula F ,COMMA  which is 9C/5 + 32 .PERIOD  In this session ,COMMA  we well see how to write simple C programs ,COMMA  which makes use of variables .PERIOD  Recall that in our discussion about flowcharts we talked about variables ,COMMA  which were conceptually seen as little boxes in which you can hold values .PERIOD  So ,COMMA  let us illustrate a simple C program making use of variables with the help of a program .PERIOD  So ,COMMA  we have a small problem ,COMMA  which is convert a Celsius temperature into the equivalent Fahrenheit temperature .PERIOD  This is the formula that all of you must know .PERIOD  So ,COMMA  let us write a C program for it .PERIOD  So ,COMMA  we will draw the simple flowchart for doing the program .PERIOD  You input the temperature in C ,COMMA  in Celsius ,COMMA  convert it into Fahrenheit according to the formula 9C/5 + 32 .PERIOD  Once you have done that ,COMMA  the variable F holds the Fahrenheit value ,COMMA  so you output the F .PERIOD  So ,COMMA  here is the simple flowchart that we want to implement .PERIOD  Now ,COMMA  how do we write the equivalent C code .PERIOD  So ,COMMA  we ,COMMA  in the flowchart we have seen ,COMMA  that we have two variables ,COMMA  C and F .PERIOD  These are the variables that we would want to implement in the C code .PERIOD  So ,COMMA  let us see how to do it .PERIOD  So ,COMMA  we write the following C program in which now we have two more components ,COMMA  one is the variable declaration ,COMMA  float centigrade and then the second is another variable ,COMMA  float Fahrenheit .PERIOD  So ,COMMA  centigrade corresponds to C in the flowchart and Fahrenheit corresponds to F in the flowchart .PERIOD  So ,COMMA  I write the following code ,COMMA  which is supposed to implement the flowchart on the left .PERIOD  So ,COMMA  let us say ,COMMA  that the input is 50 degree Celsius and then the Fahrenheit ,COMMA  the formula is exactly the same as what we have in the flowchart .PERIOD  We have 9C/5 + 32 .PERIOD  Notice here ,COMMA  that these are arithmetic operators .PERIOD  So ,COMMA  the * arithmetic operator stands for multiplication ,COMMA  / stands for division and + stands for addition .PERIOD  So ,COMMA  this is exactly as in the flowchart except ,COMMA  that here in the flowcharts multiplication symbol is being swallowed ,COMMA  but in C you have to specify it using a * operator .PERIOD  So ,COMMA  Fahrenheit equal to 9C/5 + 32 is exactly similar to the analogous line in the flowchart .PERIOD  And finally ,COMMA  for outputting we will use printf statement .PERIOD  So ,COMMA  here is something new in the printf statement .PERIOD  We use what are known us format specifiers ,COMMA  this %f symbols are new and we will describe them shortly .PERIOD  So ,COMMA  let us look at the program in little more detail .PERIOD  So ,COMMA  we have two statements ,COMMA  which are of interest ,COMMA  in the beginning of the code ,COMMA  which are what are known as the definition of the two variables .PERIOD  Recall from are discussion on flowcharts that variables are boxes and each box has a name associated with it .PERIOD  So ,COMMA  you have two concepts associated with variable as far as flowcharts were concerned ,COMMA  one was the box and the second was the name of the box .PERIOD  Now ,COMMA  when we come to C ,COMMA  we will associate a third concept with variable ,COMMA  which is the type of the box .PERIOD  So ,COMMA  if you look at the first statement it says ,COMMA  float centigrade ;SEMICOLON  .PERIOD  Now ,COMMA  this defines a variable centigrades .PERIOD  It creates a box capable of storing a real number and names the box the centigrades .PERIOD  So ,COMMA  the box is of type float .PERIOD  Type float means ,COMMA  that box can hold real number .PERIOD  Similarly ,COMMA  fahrenheit is also a box ,COMMA  which can hold real number .PERIOD  So ,COMMA  you declare that the type of that variable is float .PERIOD  So ,COMMA  these are supposed to be the first two lines of the code .PERIOD  Now ,COMMA  centigrades = 50 that is the line ,COMMA  which assigns the value 50 to the variable centigrades .PERIOD  So ,COMMA  once you execute the code ,COMMA  the box associated with name centigrade will hold the value 50 followed by the line ,COMMA  which computes the value of fahrenheit .PERIOD  So ,COMMA  fahrenheit equal to 9C/5 + 32 .PERIOD  It is an ,COMMA  it associates an arithmetic expression .PERIOD  So ,COMMA  it evaluates an arithmetic expression ,COMMA  takes its value and stores it in the box associated with the fahrenheit .PERIOD  And as we just saw before ,COMMA  * is the multiplication operator ,COMMA  / is the division operator and + is the additional operator .PERIOD  Now ,COMMA  the brackets in an arithmetic expression are just like brackets in mathematics .PERIOD  So ,COMMA  they group together a particular thing .PERIOD  Now ,COMMA  let us just trys to the program .PERIOD  Let us see what happens step by step when we run the program .PERIOD  Let us say that we save the file as sample2 .PERIOD c and then run it as  .PERIOD /a .PERIOD out .PERIOD  So ,COMMA  first we will have two boxes created ,COMMA  one for centigrade and one for fahrenheit .PERIOD  These can store float numbers .PERIOD  Now ,COMMA  what are float numbers ?QUESTIONMARK  Basically ,COMMA  they are real numbers ,COMMA  which are saved by the microprocessor .PERIOD  Now ,COMMA  the microprocessor can store variable real number only using finite precision .PERIOD  So ,COMMA  this is different from actual real numbers that we encounter in mathematics .PERIOD  So ,COMMA  we have only a limited number of digits after the decimal point ,COMMA  but other than that you can think of them as real numbers .PERIOD  We will see floating point number later in the course in greater detail ,COMMA  right .PERIOD  For now ,COMMA  think of them as the machine representation of a real number .PERIOD  So ,COMMA  once you finish the declaration statements what you have are two boxes one first centigrade one for Fahrenheit and because you declare the types to be float it is under stood that those boxes will hold real number .PERIOD  So ,COMMA  let us execute the first executable assignment here .PERIOD  centigrades = 50 and you will see that the box contains 50 .PERIOD 000 something .PERIOD  Even though we specified it as an integer ,COMMA  it will convert it into real number ,COMMA  floating pointing number and store it .PERIOD  Then this is followed by the calculation of the Fahrenheit value ,COMMA  and let us say that you compute 9 times 50 divided by 5 plus 32 ,COMMA  it comes out as 122 .PERIOD  After that line is executed ,COMMA  the box associated with Fahrenheit will contain 122 .PERIOD  Then ,COMMA  the next line says ,COMMA  print ,COMMA  printf the temperature ,COMMA  there is no new line ,COMMA  so the next printf will start from where this printf ended and here you see something new ,COMMA  which is the %f symbol .PERIOD  So ,COMMA  these are what are known as format specifiers .PERIOD  So ,COMMA  the %f symbol say ,COMMA  that take the corresponding variable ,COMMA  which is given centigrades here .PERIOD  Now ,COMMA  print it as a float ,COMMA  print it as a real number .PERIOD  So ,COMMA  notice the difference between first printf and the second printf .PERIOD  The first printf just had a string between “ ,COMMA  the second printf has two arguments ,COMMA  one is a string between “ and the string is %f and then the second argument is centigrades .PERIOD  So ,COMMA  it says take value of the centigrade and print it as a floating point number .PERIOD  So ,COMMA  it does that and you see 50 .PERIOD 000 in the output .PERIOD  There is no new line .PERIOD  So ,COMMA  the next printf starts from the previous line where the previous printf left off ,COMMA  50 Celsius equals ,COMMA  it prints that .PERIOD  And now ,COMMA  you have another format specifier .PERIOD  It says printf %f fahrenheit .PERIOD  fahrenheit is 122 and it will print it as floating point number or as real number .PERIOD  So ,COMMA  it will print it as 122 .PERIOD 000 printf fahrenheit .PERIOD  So ,COMMA  the finial massage ,COMMA  that well be printed will be the temperature ,COMMA  50 centigrade ,COMMA  50 Celsius equals 122 Fahrenheit .PERIOD  So ,COMMA  the new thing we have seen in the program include variable definitions ,COMMA  how they have an associated type and similarly ,COMMA  how do we print these variables .PERIOD  So ,COMMA  we do not want to print the names of the variables ,COMMA  we want to print the ,COMMA  we want to print the content of the variable .PERIOD  We want to print what is stored in the box .PERIOD  For that we use the format specifiers like these %f .PERIOD   So ,COMMA  let us briefly introduce what are types in C .PERIOD  So ,COMMA  variables are the names of the boxes in which to store values ,COMMA  but these boxes are special .PERIOD  Certain boxes can hold only certain kinds of values ,COMMA  so all boxes are not the same .PERIOD  There are different kinds of boxes .PERIOD  Now ,COMMA  types are basically saying ,COMMA  that a particular box can hold a particular kind of data .PERIOD  So ,COMMA  variables are defined with an associated type and we will use some basic types during the course of this program language tutorial .PERIOD  One of the two common type ,COMMA  two of the common types that we see in this program are int ,COMMA  which stands for an integer and float ,COMMA  which stands for a floating point number ,COMMA  which stands for real number .PERIOD  Notice ,COMMA  that machine can hold only a fix number of bits .PERIOD  So ,COMMA  that does not mean ,COMMA  that the integer can go from minus infinite to infinite .PERIOD  It goes from a certain vary small negative number to a very large positive number .PERIOD  Similarly ,COMMA  floating point also is limited by a particular range .PERIOD  This is because machines cannot represent arbitrary values .PERIOD  The type of integer can store all numbers from M+1 ,COMMA  .PERIOD  .PERIOD  .PERIOD 0 ,COMMA 1 ,COMMA  .PERIOD  .PERIOD  .PERIOD  ,COMMA M .PERIOD  So ,COMMA  there will be some large M ,COMMA  for which ,COMMA  for which defines the upper limits and the lower limits of the particular machine .PERIOD  Now ,COMMA  that limit may depend on which particular machine that you use .PERIOD  On a ,COMMA  on a 32-bit machine it will be 232  ,COMMA  M will be 232 .PERIOD  A few final words about variables .PERIOD  Just like in a cooking recipe ,COMMA  you well never mention a step ,COMMA  which involves ingredient without mentioning ,COMMA  that ingredient is needed in the first place .PERIOD  So ,COMMA  you will never say ,COMMA  that use salt and if you look at the list of ingredients ,COMMA  you were ,COMMA  you will see ,COMMA  that there is no salt in the list of ingredients .PERIOD  Such recipes are considered bad .PERIOD  So ,COMMA  when you write a typical recipe ,COMMA  you list out all the ingredients first and then write the steps for the cooking .PERIOD  Similarly ,COMMA  in a program you define whatever variables that you need before those variables are used by any statement in the program .PERIOD  Always define a variable before use .PERIOD  Now ,COMMA  a word about names of variables in the C programming language .PERIOD  The names are consisting of numbers ,COMMA  letters and an underline symbol ,COMMA  an underscore symbol .PERIOD  And there is a particular convention that a variable cannot start with a number .PERIOD  So ,COMMA  the initial letter has to be a letter or an _ ,COMMA  it cannot be number ,COMMA  but further can be either capital letter ,COMMA  small letter or numbers or an _ .PERIOD  So ,COMMA  there are valid names like c_sq ,COMMA  csq1 ,COMMA  c_sq_1 .PERIOD  So ,COMMA  all these are valid .PERIOD  One thing to note is ,COMMA  that the names are sensitive to upper and lower case .PERIOD  So ,COMMA  for example ,COMMA  capital C Centigrade is different from a centigrade ,COMMA  which starts with a small c .PERIOD  So ,COMMA  these are two distinct variables that is the common source of errors when we start programming .PERIOD  Another thing to note or to watch out for is ,COMMA  that the assignment operation ,COMMA  which is equal to is not the same as mathematical equal .PERIOD  So ,COMMA  when mathematically we you say a equal to b ,COMMA  it means ,COMMA  that a and b are the same quantity .PERIOD  So ,COMMA  a equal to b is the same as saying b equal to a .PERIOD  This is not true in C .PERIOD  For example ,COMMA  let us say ,COMMA  that you have the statements b = 3 ;SEMICOLON  and then later you have a = 2 ;SEMICOLON  and further you have the statement a = b ;SEMICOLON  So ,COMMA  the statement a equal to b will set a to b's value .PERIOD  So ,COMMA  b's value is 3 and that value will be copied to a .PERIOD  So ,COMMA  it will set a to 3 and b we will be unchanged .PERIOD  So ,COMMA  watch out for this .PERIOD  If ,COMMA  if you were expecting the mathematical operator ,COMMA  after the operation a = b ,COMMA  a and b we will have the same value ,COMMA  but that is not the case .PERIOD  The meaning of the symbol equal to is ,COMMA  that take the value on the right hand side of the expression and copy that into the box specified by the life side .PERIOD  So ,COMMA  copy the value in the right hand side to the variable on the left .PERIOD  We have seen comparison operators ,COMMA  like less then ,COMMA  equal to ,COMMA  less than or equal .PERIOD  to and so ,COMMA  on .PERIOD  We will see bunch of few more operators in this session .PERIOD  So ,COMMA  let  us consider the modulo operator which we have already seen in when we discussed utility in GCD .PERIOD  So ,COMMA  a % b gives the reminder when a is divided by b .PERIOD  So ,COMMA  suppose we have the following problem ,COMMA  we get a number a and we want to check whether the given number is divisible by 6 .PERIOD  If it is divisible by 6 a % 6 will be 0 the reminder will be 00 .PERIOD  So ,COMMA  we will write a simple code ,COMMA  you have int a ,COMMA  a is of type int .PERIOD  Then ,COMMA  scan the number using scanf( “%d” ,COMMA  &a) .PERIOD  And then ,COMMA  you test whether a is divisible by 6 to test whether a is divisible by 6 you check whether a mod 6 is 0 .PERIOD  If it is divisible ,COMMA  you say that input is divisible by 6 %d a .PERIOD  Otherwise ,COMMA  else ,COMMA  printf the input is not divisible by 6 very simple operation .PERIOD  Now ,COMMA  let us make it slightly more elaborate .PERIOD  Suppose ,COMMA  you have to test whether ,COMMA  this a slight variant .PERIOD  Suppose ,COMMA  you have to test whether a give number is divisible by 6 and by 4 two numbers .PERIOD  How do you do this ?QUESTIONMARK  So ,COMMA  you scanf the number and you test whether a is divisible by 6 .PERIOD  So ,COMMA  a % 6 is 0 .PERIOD  If that is true ,COMMA  then you also check whether a % 4 is 0 .PERIOD  If both are true ,COMMA  then you print that the given number is divisible by 6 and 4 .PERIOD  So ,COMMA  percentage is divisible by 6 and 4 a .PERIOD  So ,COMMA  you can argue about this program and see that ,COMMA  if it is divisible by 6 ,COMMA  but not by 4 then ,COMMA  it will enter the first if ,COMMA  but not enter the second if .PERIOD  Therefore ,COMMA  it will not print that it is divisible by 6 and 4 .PERIOD  Similarly ,COMMA  if it is not even divisible by 6 it will not even enter the first if condition .PERIOD  So ,COMMA  you will in any case not print that it is divisible .PERIOD  So ,COMMA  convince yourself that this particular code will print a number is divisible by 6 and 4 if and only if the given number is divisible by both 6 and 4 .PERIOD  Now ,COMMA  that piece of code was slightly long is there any way to write the same code with a fewer number of lines .PERIOD  And for this c provides what are known as logical operators .PERIOD  Now ,COMMA  there are three logical operators in Boolean logic which are Boolean AND ,COMMA  Boolean OR and Boolean NOT .PERIOD  So ,COMMA  there are three logical operations AND ,COMMA  OR and NOT and C provides all of them .PERIOD  So ,COMMA  the same if condition that we wrote before ,COMMA  we could have easily said if it is divisible by 6 and if it is divisible by 4 then print the output .PERIOD  So ,COMMA  for this C provides an operator which is the Boolean AND operation .PERIOD  So ,COMMA  the Boolean AND operation in C is given by two ANDs .PERIOD  So ,COMMA  by know you should be familiar with the fact it certain operations in C have repeated characters .PERIOD  For example ,COMMA  we already have seen the equality operations which was equal ,COMMA  equal .PERIOD  Similarly ,COMMA  the Boolean operation and it is actually the and symbol on the keyboard .PERIOD  But ,COMMA  you have to have two of them that represents the logical AND .PERIOD  So ,COMMA  this expression says if a % 6 is 0 .PERIOD  So ,COMMA  this expression is what test for a is a multiple of 6 .PERIOD  And this is the expression which test whether a is the multiple of 4 .PERIOD  So ,COMMA  if both conditions are true ,COMMA  then you say that the given number is divisible by 6 and by 4 .PERIOD  So ,COMMA  consecutive ampersand signs ,COMMA  that is the and symbols without any blanks in between is the C operator corresponding to the mathematical and the logical AND function .PERIOD  So ,COMMA  it takes two values as input and returns a 0 .PERIOD  If any of the values is 0 ,COMMA  if both values are 1 then it returns a 1 .PERIOD  So ,COMMA  this is the same as the logical AND .PERIOD  If either of them is 0 then the result is 0 ,COMMA  if both of them are 1 ,COMMA  then the result is 1 .PERIOD  So ,COMMA  the truth table for the operation AND is as follows if a is a non-zero value and b is a non-zero value ,COMMA  then C considers that both are true .PERIOD  So ,COMMA  the output value is of a and b is 1 .PERIOD  If a is 0 and b is any value at all the output is 0 and b is not evaluated .PERIOD  So ,COMMA  this the same as logical end .PERIOD  The only think to notice that ,COMMA  if in evaluating a and b you already know that a is 0 ,COMMA  then you know the result is 0 .PERIOD  So ,COMMA  C will not bother to evaluate b .PERIOD  Because ,COMMA  it knows that the result is already 0 .PERIOD  Every expression has a type a and b is of type int regardless of the types of a and b .PERIOD  This is because a and b is a logical assertion .PERIOD  The type of a logical assertion is that ,COMMA  it is either true or false ,COMMA  it that it corresponds to a Boolean value .PERIOD  Therefore ,COMMA  at the type of an a and then b regardless of what a and b are the result is always 0 or 1 .PERIOD  So ,COMMA  it is of type int .PERIOD  Now ,COMMA  you can print the result as an int ,COMMA  you can say printf %d a and then b .PERIOD  Now ,COMMA  there are three logical operations as I mention .PERIOD  So ,COMMA  there is also OR in c it is denoted by two vertical bars which are there on your keyboard .PERIOD  So ,COMMA  a or b which is a || b evaluates to non-zero if either a is non-zero or b is non-zero .PERIOD  If both of them are zero ,COMMA  then the result is zero .PERIOD  So ,COMMA  this the meaning of a logical OR operation ,COMMA  if both of them are false ,COMMA  then a or b is false .PERIOD  If at least one of them is true then a or b is true .PERIOD  So ,COMMA  you can write the truth table for that .PERIOD  If a and b are 0 then the output is 0 ,COMMA  if a is non zero and b is any value .PERIOD  Then ,COMMA  in already know that the output of a or b is 1 .PERIOD  So ,COMMA  the output is 1 and b will not be evaluated .PERIOD  This is similar to in the case of AND .PERIOD  If a was 0 and b was any other value ,COMMA  then you know that the output of and is 0 .PERIOD  Therefore ,COMMA  b will not be evaluated .PERIOD  Similarly ,COMMA  if here if a is non-zero ,COMMA  then you know the value is 1 .PERIOD  So ,COMMA  b will not evaluated and as before a or b is of type int .PERIOD  So ,COMMA  the third logical operation is NOT .PERIOD  Now ,COMMA  NOT in C is denoted as the exclamation mark .PERIOD  So ,COMMA  let us see an example of that .PERIOD  So ,COMMA  NOT is the logical complement and it takes only one argument ,COMMA  this is different from the previous two that we have seen a or b and a and b both took two arguments it is not takes only one arguments .PERIOD  So ,COMMA  it is called a unary operators .PERIOD  So ,COMMA  NOT of a is an expression of type integer and the value is the negation of a .PERIOD  So ,COMMA  if a is 0 NOT of a will be 1 and if a is non zero then NOT of a will be 0 .PERIOD  So ,COMMA  for example ,COMMA  if I want to say that a is not divisible by 3 I will just write NOT of a mod 3 equal to 0 .PERIOD  You know that a mod 3 equal to 0 test for a being divisible by 3 .PERIOD  So ,COMMA  negation of that it will say that the given number is not divisible by 3 .PERIOD  Let us finish this by slightly complicated example which is that of leap years .PERIOD  So ,COMMA  I am given a particular year number and I want say whether the given number is a corresponds to leap year or not .PERIOD  Now ,COMMA  what is a leap year it is that you add a few years will have February 29th in February all other years will have 28 days in February .PERIOD  So ,COMMA  what is the logic of a leap year .PERIOD  So ,COMMA  roughly an average solar year is 365 .PERIOD 242375 rotations .PERIOD  So ,COMMA  in particular is not an integer .PERIOD  So ,COMMA  we normally say that year has 365 days that is not quite true ,COMMA  this it is a rounding .PERIOD  So ,COMMA  how much are we losing .PERIOD  So ,COMMA  you can calculate it as follows .PERIOD  The remaining number after the decimal point is a roughly 0 .PERIOD 25 .PERIOD  So ,COMMA  at a rough cut let say that every 4 years .PERIOD  Because of this 0 .PERIOD 25 you will lose one day .PERIOD  So ,COMMA  every year you are losing about a quarter of a day .PERIOD  So ,COMMA  if every 4 years you will add a day .PERIOD  Now ,COMMA  when you do that you go back to .PERIOD  .PERIOD  .PERIOD  So ,COMMA  just a minute .PERIOD  So ,COMMA  you have 365 point let us say 25 .PERIOD  So ,COMMA  every 4 years you would lose about a day approximately 1 day .PERIOD  So ,COMMA  in order to compensate for that you add 1 day every 4 years .PERIOD  So ,COMMA  in 100 years you would have added 25 days .PERIOD  But ,COMMA  that is 1 day too much .PERIOD  Because ,COMMA  remember that this number is only 365 .PERIOD 24 something .PERIOD  So ,COMMA  in 100 days you should have added only 24 days .PERIOD  But ,COMMA  now you added a 25 days .PERIOD  So ,COMMA  to compensate for that every 100 year skip adding the extra day .PERIOD  So ,COMMA  every 4 years you have add 1 extra day ,COMMA  ,COMMA  but every 100 years every 100th year you do not add that extra day ,COMMA  you skip it .PERIOD  Because ,COMMA  you would have added 1 more day then you .PERIOD  And then again you can look at what remains ,COMMA  what remains is roughly  .PERIOD 24 which means that every 400 years if you do this adjustment you are losing about a day .PERIOD  Because ,COMMA  every 100 years you are losing about quarter of a day from this 0 .PERIOD 2375 part .PERIOD  So ,COMMA  you do the same logic again every 400 years .PERIOD  So ,COMMA  every 400 years add an extra day .PERIOD  So ,COMMA  this is the logic of the leap year that we all know .PERIOD  So ,COMMA  how do you decide whether year will be leap year .PERIOD  So ,COMMA  the logic that I have outlined just now says that ,COMMA  if a year is a multiple of 4 then it is a leap year .PERIOD  But ,COMMA  if a year is a multiple of 100 as well then it is not a leap year .PERIOD  But ,COMMA  if it is a multiple 400 than it is a leap year .PERIOD  So ,COMMA  here is a pretty complicated expression .PERIOD  So ,COMMA  every 4th year is a leap year .PERIOD  But ,COMMA  skip every 100th year unless it is also a 400th year .PERIOD  And you can write this expression in C ,COMMA  it is slightly complex has you can imagine .PERIOD  So ,COMMA  if the first line the first expression says that ,COMMA  wise year is a multiple of 4 .PERIOD  So ,COMMA  if year is divisible by 4 also the following should be true ,COMMA  it should not be a multiple of 100 unless it is a multiple of 400 .PERIOD  So ,COMMA  it should not be divisible by 100 that should be true or it should be true that ,COMMA  it should be a multiple of 400 .PERIOD  For example ,COMMA  if you have 400 then it is a leap year .PERIOD  So ,COMMA  what will happen is that year modulo 4 400 modulo 4 is 0 .PERIOD  Then ,COMMA  what happens is that you have 400 modulo 100 that is 0 .PERIOD  So ,COMMA  this is equal to 0 that is 1 NOT of 1 is 0 .PERIOD  So ,COMMA  this part is entirely 0 ,COMMA  but it is divisible by 400 ,COMMA  400 divided by 400 is 0 .PERIOD  Therefore ,COMMA  this part is true ,COMMA  this or 0 or 1 is true .PERIOD  Therefore ,COMMA  the whole expression becomes 1 and 1 .PERIOD  So ,COMMA  it is true .PERIOD  So ,COMMA  this logical expression slightly complicated logical expression encodes the logic for saying that the given year is a leap year .PERIOD  So ,COMMA  try this out yourself this is a slightly tricky expression .PERIOD  And convince yourself that ,COMMA  this exactly encodes the logic of the leap year .PERIOD  In this session ,COMMA  we will look at loops in the C Programming language .PERIOD  And we will start with very basic kind of loop which is known as the while statement .PERIOD   So ,COMMA  the general form of a while statement this similar to that of and if which is that there is an expression and you say while that expression ,COMMA  then do this statement .PERIOD  So ,COMMA  the flow chart corresponding to the while expression will be ,COMMA  you test whether the expression is true or false .PERIOD  If it is true you do this statement ,COMMA  if it is false you exit out of the loop and execute the next statement outside the loop .PERIOD  So ,COMMA  if the expression is true in C that is the expression is non-zero ,COMMA  then execute the statement and go to the step outside the loop .PERIOD  If it is false then directly go outside the next statement after the while loop .PERIOD  This is similar if you recall to the ,COMMA  if block without the else .PERIOD  So ,COMMA  loops are a new thing that explicitly there was no loop construct in a flow chart ,COMMA  we just had this way of going back to the expression .PERIOD  But ,COMMA  in programming languages loops are such a basic programming need that in addition to the if block ,COMMA  you have loop construct as well .PERIOD  So ,COMMA  slightly different variant of the while expression will be that while expression statement 1 and then statement 2 .PERIOD  So ,COMMA  the flow chart here is easy to follow if the .PERIOD  .PERIOD  .PERIOD  So ,COMMA  if first test whether the expression is true .PERIOD  If the expression is true then you execute statement 1 .PERIOD  And then after you execute statement 1 ,COMMA  then go to go back to the expression .PERIOD  If the expression is false then you go to statement 2 .PERIOD  So ,COMMA  while the expression is true execute statement 1 and if the expression is false ,COMMA  then execute statement 2 .PERIOD  So ,COMMA  the difference in the ,COMMA  if condition will be that if this was an if block .PERIOD  Then ,COMMA  if the expression is true you do statement 1 and you exit out of the while loop .PERIOD  And that is not done in the case of a normal while loop .PERIOD  After you execute the statement you go back to the expression .PERIOD  So ,COMMA  as long as the expression is true you keep executing statement 1 and if the expression becomes false then you execute statement 2 .PERIOD  So ,COMMA  let us illustrate the use of a while loop with the help of a program .PERIOD  So ,COMMA  we will introduce a very simple problem which is ,COMMA  read a sequence of integers from the terminal until -1 is encountered .PERIOD  So ,COMMA  -1 signals that the input is at end .PERIOD  Now ,COMMA  what I want do is that sum up all the numbers until the -1 and output the sum .PERIOD  It is a very simple program .PERIOD  What you have to do is to read a sequence of numbers ,COMMA  until you hit the first -1 and then add this numbers and output their sum .PERIOD  So ,COMMA  let us first introduce the very simple loop which will do only the basic thing of reading the numbers until a -1 is encounter .PERIOD  So ,COMMA  how do you write the loop you have stdio .PERIOD h .PERIOD  And then you declare an integer variable and read the variable .PERIOD  So ,COMMA  this is supposed to be the first number .PERIOD  If that number is -1 then you do not have to read any more numbers .PERIOD  So ,COMMA  if the number is not -1 .PERIOD  So ,COMMA  if a = -1 is false then you read one more number .PERIOD  After you read one more number you do not finish the loop ,COMMA  you go back and test whether the loop condition is still true .PERIOD  So ,COMMA  you go back and check whether the second number you read was -1 or not .PERIOD  And then ,COMMA  you keep on reading it until you hit a -1 .PERIOD  At some point when you hit a -1 you go back to the loop and the condition that a = -1 will be true .PERIOD  So ,COMMA  NOT of that will be false and you will exit the loop .PERIOD  So ,COMMA  read the first number if it is a -1 do not enter the loop ;SEMICOLON  otherwise ,COMMA  keep on reading numbers until you hit a -1 .PERIOD  That is the meaning of the while loop .PERIOD  So ,COMMA  let us just trace the execution of the loop on a sample input to understand how it works .PERIOD  So ,COMMA  in a box I will represent the memory location a and its current content .PERIOD  So ,COMMA  I run the program after compiling a .PERIOD out and let us say that I enter the number 4 .PERIOD  Now ,COMMA  you scan the number 4 .PERIOD  So ,COMMA  memory location a becomes 4 .PERIOD  Now ,COMMA  4 is not -1 .PERIOD  So ,COMMA  you enter the loop .PERIOD  So ,COMMA  then n let us say the next number is 50 ,COMMA  you read the number into a .PERIOD  So ,COMMA  memory location a is now 15 ,COMMA  15 is not -1 .PERIOD  So ,COMMA  you again enter the loop ,COMMA  you enter -5 ,COMMA  -5 is not -1 .PERIOD  So ,COMMA  you enter the loop again .PERIOD  At this point you enter ,COMMA  you scan the number into a and a becomes -1 .PERIOD  So ,COMMA  you go back to the loop again and now the test that so ,COMMA  a = -1 ,COMMA  so ,COMMA  naught of that is false .PERIOD  So ,COMMA  the while condition becomes false at this point you exit the program .PERIOD  So ,COMMA  this is a very simple part of the program that we want to write ,COMMA  recall that we want to read a bunch of numbers and sum them .PERIOD  And the end of the numbers is represented by a -1 .PERIOD  Until now we have just read those numbers .PERIOD  In this session ,COMMA  we will continue the program that we were writing .PERIOD  Recall that ,COMMA  we were writing a while loop ,COMMA  which will read a bunch of numbers .PERIOD  And it is supposed to sum them up ,COMMA  until you hit a -1 .PERIOD  In the loop that we have seen ,COMMA  so far we just read the numbers until -1 was encountered .PERIOD  So ,COMMA  let us now complete the program and compute their sum as well .PERIOD  So ,COMMA  for computing there sum ,COMMA  how do we normally do it ?QUESTIONMARK  We will add numbers two at a time .PERIOD  So ,COMMA  the first two numbers will be added .PERIOD  Then ,COMMA  that sum will be added to the third number and so on ,COMMA  until you hit a -1 .PERIOD  So ,COMMA  let us try to do that ,COMMA  in the course of a while loop .PERIOD  What I will declare is ,COMMA  I will declare a new variable s .PERIOD  So ,COMMA  here is the new variable s that ,COMMA  I have declared .PERIOD  s is supposed to the hold the sum of the variables that ,COMMA  I have read so far .PERIOD  Now ,COMMA  it is very ,COMMA  very important that ,COMMA  when you declare a variable ,COMMA  you should initialize them properly .PERIOD  In the case of a ,COMMA  we did not initialize it because ,COMMA  we were reading the first number ,COMMA  as soon as was declared .PERIOD  But ,COMMA  in the case of sum ,COMMA  you would use s to maintain the sum ,COMMA  as you read numbers .PERIOD  So ,COMMA  it is important that ,COMMA  you start with s = 0 .PERIOD  So ,COMMA  the initialization step marked by this arrow is quite important .PERIOD  If you do not initialize it properly ,COMMA  then the sum may not be correct ,COMMA  as we will see soon .PERIOD  So ,COMMA  we keep a variable s ,COMMA  which is supposed to hold the sum of n numbers ,COMMA  sum of these numbers and initialize the sum to 0 .PERIOD  Then ,COMMA  the difference from the loop that ,COMMA  we have seen so far is highlighted in red .PERIOD  So ,COMMA  earlier recall that ,COMMA  we were reading the number .PERIOD  And just testing ,COMMA  whether the number is 1 ,COMMA  if it was not -1 ,COMMA  you read one more number so ,COMMA  that was the loop .PERIOD  Now ,COMMA  inside the loop ,COMMA  what we will do is ,COMMA  we will keep up ,COMMA  running sum of the numbers that we have seen so far .PERIOD  So ,COMMA  initially s sum is initialized to 0 .PERIOD  Then ,COMMA  if the first number is not -1 ,COMMA  you add the first number to s .PERIOD  So ,COMMA  s will now be the first number .PERIOD  Now ,COMMA  read the second number .PERIOD  If the second number is not -1 ,COMMA  you will enter the loop again .PERIOD  So ,COMMA  you will add the second number to s .PERIOD  So ,COMMA  s is now first number plus second number .PERIOD  And this keeps on going until you hit -1 ,COMMA  in the input .PERIOD  So ,COMMA  let us continue with this .PERIOD  Let us try to trace the execution of this program ,COMMA  on a sample input and try to understand ,COMMA  how it works .PERIOD  Let us say that ,COMMA  I compile the program successfully and run the program .PERIOD  So ,COMMA  I run a dot out and let us as before ,COMMA  let us the first number be 4 .PERIOD  So ,COMMA  after initialization ,COMMA  when you declare the variable a is undefined and s is also undefined .PERIOD  After the initial statement ,COMMA  s = 0 ,COMMA  s is now 0 .PERIOD  And then ,COMMA  you scan the variable a .PERIOD  So ,COMMA  a becomes 4 ,COMMA  because 4 was the input .PERIOD  And sum is still 0 .PERIOD  You enter the loop and you say ,COMMA  s = s + a .PERIOD  So ,COMMA  sum becomes 0 plus 4 ,COMMA  which is 4 .PERIOD  And you read the next number .PERIOD  Let us say the next number was 15 .PERIOD  So ,COMMA  a becomes 15 ,COMMA  a is not -1 .PERIOD  Therefore ,COMMA  you enter the loop again .PERIOD  And sum is now 4 plus 15 ,COMMA  which is 19 .PERIOD  So ,COMMA  sum at any point of time is the sum of the number that ,COMMA  we have read so far .PERIOD  So ,COMMA  we have read 4 and 15 .PERIOD  So ,COMMA  the sum is 19 .PERIOD  Now ,COMMA  you read the next number .PERIOD  Let us say ,COMMA  the next number was -5 .PERIOD  -5 is not -1 .PERIOD  Therefore ,COMMA  you enter the loop again s equal to s plus -5 .PERIOD  So ,COMMA  s becomes 14 .PERIOD  Then ,COMMA  you read the next number .PERIOD  And let us say ,COMMA  the next number was -1 .PERIOD  So ,COMMA  since the number read is -1 .PERIOD  You go back to the loop .PERIOD  And this condition becomes false .PERIOD  So ,COMMA  you exit out of the loop .PERIOD  And then print that ,COMMA  the sum is let us say 14 .PERIOD  So ,COMMA  when you verify it by hand ,COMMA  you would see 4 plus 15 plus -5 is 14 .PERIOD  So ,COMMA  you have ,COMMA  the program has executed correctly .PERIOD  The important thing to note is ,COMMA  the final -1 is not summed up .PERIOD  So ,COMMA  that is ,COMMA  it is used as the end of the input and you should not compute the sum of the numbers ,COMMA  including -1 .PERIOD  -1 is excluded .PERIOD  Then ,COMMA  the program executed ,COMMA  correctly .PERIOD   We will introduce a few terminology associated with the notion of a loop .PERIOD  Each execution of a loop is known as an iteration .PERIOD  So ,COMMA  in the above loop ,COMMA  when the input was 4 ,COMMA  15 -5 -1 ,COMMA  the loop runs for three iterations ,COMMA  corresponding to the inputs 4 ,COMMA  15 and -5 .PERIOD  So ,COMMA  for input -1 ,COMMA  the loop is broken .PERIOD  So ,COMMA  you do not enter the loop .PERIOD  So ,COMMA  you do not count an iteration corresponding to -1 .PERIOD  So ,COMMA  you entered four numbers including the -1 and the loop executed three times .PERIOD  So ,COMMA  you say that ,COMMA  the loop had three iterations .PERIOD  So ,COMMA  this is a technical term associated with the loops .PERIOD  And here is a concept that ,COMMA  I will introduce to help you argue about the correctness of a loop .PERIOD  So ,COMMA  there is a notion known as a loop invariant .PERIOD  Now ,COMMA  a loop invariant is a property relating values of the variable that holds at the beginning of each loop .PERIOD  So ,COMMA  thus bit abstract let me just illustrate with the example ,COMMA  that we just saw .PERIOD  So ,COMMA  loop invariants are a good way of thinking about the correctness of loops that ,COMMA  you have to do .PERIOD  So ,COMMA  in our program what will be the loop in invariant ?QUESTIONMARK  Let us look at the property of that ,COMMA  we are interested in .PERIOD  There are two variables in the program ,COMMA  s and a .PERIOD  And both of those variables are involved in the loop .PERIOD  But ,COMMA  the interesting property that we have relates to s .PERIOD  What is the property that ,COMMA  s holds with respect to the loop .PERIOD  So ,COMMA  we can see that ,COMMA  s holds the sum of all values read so far ,COMMA  except the last value is that true ,COMMA  the first time that we enter the loop ?QUESTIONMARK  Yes ,COMMA  because s was initialized to 0 .PERIOD  And you had actually read the number .PERIOD   So ,COMMA  it is true that ,COMMA  s holds the sum of all values ,COMMA  except the first one .PERIOD  So ,COMMA  that is true ,COMMA  when you first enter the loop .PERIOD  And that ,COMMA  any point when you enter the loop ,COMMA  you sum the last value that was the read .PERIOD  And read one more number .PERIOD  So ,COMMA  you will see that ,COMMA  s still holds the sum of all values read so far ,COMMA  except the last one .PERIOD  So ,COMMA  this is the loop invariant in the program .PERIOD  And loop invariants help you ,COMMA  argue about the correctness of the loops .PERIOD  So ,COMMA  if the loop invariant is correct and the program maintains loop invariant ,COMMA  then the value of s when the program stops ,COMMA  will be correct .PERIOD  Why is that ?QUESTIONMARK  Because ,COMMA  the loop terminates ,COMMA  because the last value read was a -1 .PERIOD  And the invariants says that ,COMMA  s holds the sum of all values ,COMMA  except the last value .PERIOD  So ,COMMA  this means that s holds the sum of all numbers ,COMMA  except the -1 .PERIOD  Therefore ,COMMA  when the program ends that is ,COMMA  you exit out of the loop ,COMMA  s holds the sum of all number that you were supposed to add .PERIOD  So ,COMMA  here is how arguing about loop invariant and seeing ,COMMA  whether loop invariant holds in the loop that you have written ,COMMA  helps you argue that the program is correct .PERIOD  We will see a few more examples ,COMMA  because loops are really important .PERIOD  Let us go back to the first problem that we discussed ,COMMA  which was the problem of computing the greatest common divisor of two positive numbers .PERIOD  So ,COMMA  the problem is to read the two numbers ,COMMA  find their GCD and compute the output .PERIOD  Now ,COMMA  we had a flowchart of the problem based on the fact that ,COMMA  if a >= b ,COMMA  then GCD(a ,COMMA 0) if b is 0 ,COMMA  then GCD(a ,COMMA 0) is a .PERIOD  Otherwise ,COMMA  GCD(a ,COMMA b) is the same as GCD(b ,COMMA  a%b) ,COMMA  with a % b is a % b is the remainder ,COMMA  when a / b .PERIOD  So ,COMMA  let us now try to write the program in C using a while loop .PERIOD  So ,COMMA  we have to do a few preliminary things .PERIOD  So ,COMMA  let us call up the first half of the program .PERIOD  In the first half I declare three variables ,COMMA  a ,COMMA  b and there is another variable t ,COMMA  whose need we will see right now .PERIOD  But ,COMMA  let us say that I need an extra variable for now ,COMMA  let us just take it on faith .PERIOD  So ,COMMA  what I will do is scan two variables a and b .PERIOD  Now ,COMMA  recall in the GCD equation that we saw right now ,COMMA  we assume that a >=b .PERIOD  Now ,COMMA  what if the user is unaware of his condition and enter the lesser number first .PERIOD  So ,COMMA  he just entered the numbers in such a way that ,COMMA  a < b .PERIOD  So ,COMMA  we need to correct that ,COMMA  we need to make sure that a is the greater number .PERIOD  So ,COMMA  we need to exchange the values of a and b ,COMMA  if it is true that a is less then b .PERIOD  Now ,COMMA  how do we do this ?QUESTIONMARK  So ,COMMA  the first thing to note to try will be to say that for example ,COMMA  if I say that let us say a was 3 and b was 4 .PERIOD  And suppose ,COMMA  I just said a = b I want to exchange the values of a and b .PERIOD  I just said a = b and b = a .PERIOD  What will be the effect of this ?QUESTIONMARK  Note that ,COMMA  this is the assignment statement .PERIOD  So ,COMMA  after I execute this line ,COMMA  b is 4 so ,COMMA  a will be 4 ,COMMA  a = b results in a equal to 4 .PERIOD  After the execution of this line .PERIOD  So ,COMMA  what this situation that we will have is that b equal to 4 and a equal to 4 .PERIOD  And we will have no memory of ,COMMA  what was the original value of a ?QUESTIONMARK  That is lost .PERIOD  So ,COMMA  it is just simply lost .PERIOD  So ,COMMA  this idea that we can exchange two values by just writing a equal b ,COMMA  b = a does not work .PERIOD  So ,COMMA  what is the correct way to do it ?QUESTIONMARK  So ,COMMA  we have an idea known as the cyclic exchange and this is a really neat idea .PERIOD  The idea is that… So ,COMMA  how can I motivate it ?QUESTIONMARK  Let us say that you have two rooms and these two rooms are full of steps .PERIOD  And I want to change the contents of the first room to the second and the second room to the third .PERIOD  One way I can do it is that I will move the contents of the first room to a different room .PERIOD  So ,COMMA  have a temporary room and then copy the contents of the second room to the first and copy the contents of the third room to the second .PERIOD  So ,COMMA  this is a very nice intuition and it almost is similar to what we need to do .PERIOD  So ,COMMA  we have two variables a and b that we need to swap .PERIOD  So ,COMMA  one thing we can do is ,COMMA  I will keep a third variable t .PERIOD  First what I will do is ,COMMA  I will copy the value of a to t .PERIOD  So ,COMMA  now I have a backup copy .PERIOD  Now ,COMMA  then I will say a = b ,COMMA  .PERIOD  So ,COMMA  at this point the value of b will be copy to the a ,COMMA  So ,COMMA  now ,COMMA  a is 6 ,COMMA  b is 6 .PERIOD  But ,COMMA  still we have a memory of what was a before ?QUESTIONMARK  Because ,COMMA  the old value of a was told in t .PERIOD  So ,COMMA  in order to complete the routine ,COMMA  all you need to do is to copy the value of t to b and that can be a complete by the equation by the assignment statement b equal to t .PERIOD  So ,COMMA  this idea is known as cyclic exchange .PERIOD  So ,COMMA  recall the physical intuition of swapping the contents of two rooms which are almost full .PERIOD  You have a third room and you move the contents of the first room to the third room ,COMMA  move the contents of the second to the first and move the contents to the third to the second .PERIOD  So ,COMMA  this is similar to what we did .PERIOD  In the case of physical contents ,COMMA  we cannot copy ,COMMA  in the case of variables ,COMMA  we can copy .PERIOD  So ,COMMA  now let us complete the GCD program .PERIOD  We have just done the first part of the program which is to ensure that a is actually the greater number .PERIOD  If it was not the greater number ,COMMA  you swap or exchange .PERIOD  Now ,COMMA  So ,COMMA  after exchange we have ensure that a >=b .PERIOD  Now ,COMMA  we have to write the main loop for the GCD function .PERIOD  So ,COMMA  just by translating the flowchart ,COMMA  what we will do is while b is not 0 .PERIOD  What you do is ,COMMA  you say that store the value of a and t .PERIOD  Assign a to b ,COMMA  a = b and b becomes t % b .PERIOD  Recall the equation was written as follows that .PERIOD  So ,COMMA  recall that the equation was GCD(a ,COMMA  b) is the same as GCD(b ,COMMA  a % b) .PERIOD  So ,COMMA  when you assign a to b ,COMMA  the old value of a is lost and we can no longer do a % b .PERIOD  So ,COMMA  the way to do that is ,COMMA  you use the idea of temporary variable ,COMMA  store the old value of a and t ,COMMA  before you do a = b .PERIOD  So ,COMMA  that finally ,COMMA  a % b can be done by t % b .PERIOD  I do not want the new value of a ,COMMA  I want the old value of a .PERIOD  So ,COMMA  let us just trace the execution of this program .PERIOD  Let us say that I scan two numbers a and b and the user was correct in entering it .PERIOD  So ,COMMA  he actually enter the greater number first .PERIOD  So ,COMMA  we have 16 and 9 ,COMMA  a equal to 16 and b equal to 9 and t is undefined .PERIOD  So ,COMMA  after you read the numbers ,COMMA  you just say GCD of… After these you enter a message which is printed message which is the GCD of a and b is ,COMMA  .PERIOD  So ,COMMA  GCD of 16 and 9 is and then you enter the loop .PERIOD  So ,COMMA  in the initial execution of the loop you have t equal to a ,COMMA  which will store t equal to 16 ,COMMA  a = b ,COMMA  which is a will become 9 .PERIOD  And then ,COMMA  but you want to compute the modulo 16 % 9 ,COMMA  but 16 was lost in a ,COMMA  because a is not 9 .PERIOD  So ,COMMA  you have do t % b ,COMMA  .PERIOD  So ,COMMA  16 % 9 which is 7 .PERIOD  So ,COMMA  you go back to the while loop and then you see that b is not 0 ,COMMA  b is 7 .PERIOD  So ,COMMA  you enter the loop again .PERIOD  T is equal to a ,COMMA  .PERIOD  So ,COMMA  t is 9 ,COMMA  a = b ,COMMA  .PERIOD  So ,COMMA  a become 7 ,COMMA  b becomes 2 .PERIOD  Again b is not 0 ,COMMA  So ,COMMA  you enter the loop again .PERIOD  So ,COMMA  t is 7 ,COMMA  a equal to 2 and b equal to 1 .PERIOD  Again you enter the loop ,COMMA  b is not 0 ,COMMA  t is 2 ,COMMA  a becomes 1 and b becomes 0 at this point ,COMMA  you exit the loop and at this point a that we ended with is the GCD of these numbers .PERIOD  So ,COMMA  16 and 9 are relatively prime .PERIOD  Therefore ,COMMA  their GCD is 1 .PERIOD  Now ,COMMA  let us think a minute about what is the loop invariant in this program ?QUESTIONMARK  What is it that ?QUESTIONMARK  We have a central while loop which computes the GCD .PERIOD  What was the invariant in that loop ?QUESTIONMARK  So ,COMMA  for this I will just introduce a slight notation which makes it easier to discuss this invariant .PERIOD  So ,COMMA  let capital A and capital B be the original numbers that I input .PERIOD  And little a and little b represent the numbers which are involved in the loop .PERIOD  So ,COMMA  capital A and capital B are the original input and the invariant that I have is that at every stage ,COMMA  the GCD of the original inputs are the same as the GCD of little a and b .PERIOD  We call that little a and b are the loop variables involved in the loop .PERIOD  So ,COMMA  little a and b keep changing through the loop ,COMMA  whereas ,COMMA  capital A and B are fixed ,COMMA  they are the input .PERIOD  So ,COMMA  the invariant that I have is that every time you enter the loop ,COMMA  the GCD of the input where the same as the GCD of the variable .PERIOD  Now ,COMMA  this guarantees the correctness .PERIOD  Because ,COMMA  when you exit out of the loop ,COMMA  you will correctly compute .PERIOD  You exit out of the loop ,COMMA  because b equal to 0 ,COMMA  and by the original equation ,COMMA  you know that when b is equal to 0 ,COMMA  a is the GCD of a and b .PERIOD  So ,COMMA  this guarantee is correctness .PERIOD  Now ,COMMA  you could also ask other questions like ,COMMA  how many times has the loop run ?QUESTIONMARK  And this question is big complicated ,COMMA  because you have to compute it based on the input numbers .PERIOD  So ,COMMA  such questions are of interest to computer science .PERIOD  But ,COMMA  we will not going to computing the efficiency or the performance of this code .PERIOD  But ,COMMA  it is also a very crucial question .PERIOD  So ,COMMA  we will see one more example for writing loops ,COMMA  we see as slightly trickier example and will cover this over multiple sessions .PERIOD  So ,COMMA  the problem is the following .PERIOD  We have to read as sequence of numbers until a -1 is read ,COMMA  -1 indicates that then the sequence of sent it .PERIOD  And the question is we have to output the length of the longest contiguous increasing subsequence .PERIOD  So ,COMMA  that is a lot of words let us illustrate it with an example .PERIOD  Let us say that the input is of the following numbers - 9 2 4 0 3 4 6 9 2 ,COMMA  and then finally a -1 .PERIOD  And we have to output the length of the longest contiguous increasing subsequence .PERIOD  So ,COMMA  let us say what do I mean by a contiguous increasing subsequence ?QUESTIONMARK  So ,COMMA  I say that 9 is an increasing subsequence ,COMMA  then the next number is 2 ;SEMICOLON  2 is less than 9 .PERIOD  So ,COMMA  9 and 2 cannot be part of a subsequence ,COMMA  where the numbers keep on increasing .PERIOD   So ,COMMA  2 is the start of a new sequence ,COMMA  again the next number is 4 .PERIOD  So ,COMMA  2 and 4 form an increasing sequence .PERIOD  So ,COMMA  you can continue increasing a sequence .PERIOD  The next number is 0 ,COMMA  0 is less than 4 ,COMMA  so break the sequence there .PERIOD  Then when you look at then succeeding numbers 0 3 4 6 9 ;SEMICOLON  they form an increasing sequence .PERIOD  And the last number is 2 ,COMMA  which is lesser than 9 .PERIOD  So ,COMMA  the increasing sequence stops here .PERIOD  So ,COMMA  these are the increasing contiguous subsequences ;SEMICOLON  contiguous means together occurring adjacent to each other .PERIOD  So ,COMMA  the largest of the longest contiguous subsequence is obviously ,COMMA  0 3 4 6 9 ,COMMA  and the length of that sequence is 5 .PERIOD  Let us take another example 11 9 7 8 11 12 15 15 and -1 .PERIOD  So ,COMMA  just to illustrate the point 11 is greater than 9 .PERIOD  So ,COMMA  that cannot be an increasing sequence ,COMMA  9 is greater than 7 ,COMMA  so that is another the increasing sequence is just 9 ,COMMA  but then 7 8 11 12 15 ;SEMICOLON  these are increasing .PERIOD  And I decided to stop here even though the next number was 15 ,COMMA  because I am interested in and increasing subsequence .PERIOD  So ,COMMA  15 and 15 are equal numbers .PERIOD  So ,COMMA  we break it .PERIOD  So ,COMMA  the longest increasing subsequence is 7 8 11 12 15 and its length is 5 .PERIOD  So ,COMMA  this the longest contiguous increasing subsequence .PERIOD  So ,COMMA  here is a basic property given any sequence of numbers ,COMMA  we can break it into a collection of increasing contiguous subsequences .PERIOD  For example the numbers that the sequence that we have seen .PERIOD  So ,COMMA  9 2 4 0 3 4 6 4 6 9 2 ,COMMA  and that the length of the increasing ,COMMA  the longest increasing contiguous subsequence is 5 .PERIOD  So ,COMMA  we have to write a program to do this ,COMMA  given a sequence of numbers find the length of the longest increasing subsequence .PERIOD  So ,COMMA  how do we do it ?QUESTIONMARK  We do it in the way that we have been writing loops so far ,COMMA  like adding n numbers and finding this sum and so on .PERIOD  The idea was that you start from the first number and keep on adding the numbers until you hit -1 at which point you have this sum .PERIOD  So ,COMMA  the idea of this algorithm was that you start from the first ,COMMA  and you keep reading ,COMMA  until certain condition happens .PERIOD  We will adopt that idea to solve our current problem .PERIOD  So ,COMMA  what we need to do is to keep track of the current increasing subsequence .PERIOD  Let us say that it is denoted by s .PERIOD  So ,COMMA  before we get into the code ,COMMA  let see how we will do it by hand .PERIOD  So ,COMMA  initially the increasing subsequence is s ,COMMA  and let say that it is empty .PERIOD  After you read 9 ,COMMA  you have an increasing subsequence which consist of exactly 1 number .PERIOD  So ,COMMA  s is 9 .PERIOD  Now ,COMMA  the next number is 10 ;SEMICOLON  10 is greater than 9 .PERIOD  So ,COMMA  you extend this .PERIOD  Read the next number 4 ;SEMICOLON  4 is less than 10 .PERIOD  So ,COMMA  9 10 4 cannot be an increasing subsequence ,COMMA  therefore you say that you break the subsequence there ,COMMA  so 9 10 is a different subsequence .PERIOD   Now you start a new subsequence which is 4 .PERIOD  So ,COMMA  the current subsequence is just 4 .PERIOD  So ,COMMA  0 is less than 4 ,COMMA  so you break it there ,COMMA  the current increasing subsequence become 0 .PERIOD  Read the next number 3 ,COMMA  3 is greater than 0 .PERIOD  See you extend the subsequence s is now 0 3 4 ,COMMA  4 is greater than 3 .PERIOD  So ,COMMA  the sequence becomes 0 3 4 and so on .PERIOD  So ,COMMA  what are we doing here ?QUESTIONMARK  We are reading the read ,COMMA  we are reading the numbers integer by integer ,COMMA  and we are keeping track of the current increasing subsequence .PERIOD  So ,COMMA  this is part of what we want to do ?QUESTIONMARK  Now ,COMMA  in order to decided whether we should increase the subsequence extend it or break the subsequence ,COMMA  and start a new sequence what we need to do is we should remember what was the previous number we saw ,COMMA  and what is the current number that we have seen .PERIOD  So ,COMMA  with two variables we can say whether the subsequence should be extended or should be broken at this point .PERIOD  So ,COMMA  if the previous number is less than the current number ,COMMA  then we should increase the we should extend the subsequence .PERIOD  If the previous number is greater than or equal to the current number then we should break the subsequence and start a new sequence .PERIOD  So ,COMMA  extend the sequence means add 1 to the length of the current increasing subsequence ,COMMA  and add that number to the subsequence .PERIOD  Reset means you start a new sequence of length 1 .PERIOD   So ,COMMA  from the current from the description that we have seen so far ,COMMA  we need the following variables ,COMMA  we need C which is for the current rate c number ,COMMA  p which is the previous number that we have seen ,COMMA  and length which is the length of the current increasing sequence .PERIOD  So ,COMMA  we store the previous number into p ,COMMA  store the current length of the increasing subsequence into length ,COMMA  and read the next number into c .PERIOD   So ,COMMA  if the previous number is less than the current number .PERIOD  So ,COMMA  we take the true branch in which case we extend the sequence .PERIOD  So ,COMMA  the new number that we have read is part of the of the currently increasing subsequence .PERIOD  So ,COMMA  increase the length of the sequence by 1 and now we move lockstep .PERIOD  So ,COMMA  what we do is ?QUESTIONMARK  So ,COMMA  we are a stage where suppose we have numbers 1 2 and 3 ,COMMA  suppose p was pointing to 1 ,COMMA  c was pointing to 2 .PERIOD  So ,COMMA  since 2 was greater than 1 ,COMMA  we extend the sequence .PERIOD  After extending the sequence ,COMMA  we have to proceed and see what will happen with the next number .PERIOD  So ,COMMA  when you do that you can do the following ,COMMA  I will extend the current sequence by doing the following ,COMMA  I will now set p equal to 2 ,COMMA  and c equal to 3 .PERIOD   So ,COMMA  this is the idea that we will advance both the variables by 1 number each .PERIOD  So ,COMMA  that it is always true that previous is 1 number behind current .PERIOD  So ,COMMA  I hope this idea is clear that in order to ensure that p is 1 number behind current ,COMMA  you have to advance both p and c .PERIOD  So ,COMMA  assign p to c ,COMMA  this will advance p and then read the next number .PERIOD  So ,COMMA  that will become c .PERIOD  Now what happens if c >= p ,COMMA  then the new number is not part of the current increasing subsequence .PERIOD  So ,COMMA  you start a new sequence which is of length 1 and again do the same assign p to c ,COMMA  which is advancing the pointer and read the next number .PERIOD  So ,COMMA  here is the method that we will follow in order to keep track of the current increasing subsequence .PERIOD  Now what is left is to find the longest of all the increasing subsequences that we find .PERIOD  In this session we will try to code up the C code for finding the length of the longest increasing contiguous sub sequence .PERIOD  So ,COMMA  let us first examine what we need to do ,COMMA  we will write a code ,COMMA  and from the previous discussion we saw that we need at least three variables ;SEMICOLON  one for a storing the previous number ,COMMA  one for storing the current number ,COMMA  and the third for storing the length of the current decreasing sub sequence .PERIOD  So ,COMMA  we start by declaring all those three variables and initializing length to 0 .PERIOD  So ,COMMA  here is a new construct that we are seeing for the first time ,COMMA  which is that when you declare a variable ,COMMA  you can also initialize it immediately by saying len equal to 0 .PERIOD  So ,COMMA  this is a very intuitive notation .PERIOD  So ,COMMA  this will declare a variable and immediately initialized it to 0 .PERIOD  Once we declare these three variables ,COMMA  let say that we scan the first variable into previous .PERIOD  Now ,COMMA  let us focus on ,COMMA  on the main body of the program .PERIOD  If the currently read number is if the currently read number is ! = -1 ,COMMA  then you say that you start with length 1 .PERIOD  So ,COMMA  the length of the current increasing sub sequences 1 ,COMMA  and then you scan the next number into curr .PERIOD  So ,COMMA  here is current number .PERIOD  So ,COMMA  this part of the code is just to initialize .PERIOD  So ,COMMA  if the current ,COMMA  if the first number is -1 ,COMMA  then there is no point in getting into the program ,COMMA  because the its equivalent to the empty inputs .PERIOD  So ,COMMA  there is no increasing sub sequence to be found .PERIOD  So ,COMMA  you just exit out of the program .PERIOD  So ,COMMA  initially we just check to see whether the first number is -1 or not .PERIOD  If the first number is ! = -1 ,COMMA  you scan the next number ,COMMA  so current will be the second number .PERIOD  And if current is ! = -1 while the currently read number is ! = -1 .PERIOD  What you do is exactly the logic that we were discussing before .PERIOD  If the previous number is less than the current number then you extend the length by 1 .PERIOD   So ,COMMA  length equal to length plus 1 says that I am continuing the current increasing sub sequence by increasing its length .PERIOD  Otherwise that is current is less than or equal to previous ,COMMA  you break the sequence and say length equal to 1 .PERIOD  Then we have this step previous equal to current ,COMMA  which is the advancing both variables by 1 .PERIOD  So ,COMMA  previous becomes the currently read number ,COMMA  and current becomes the next number to be .PERIOD  So ,COMMA  recall from the diagram that previous and current were at some position ,COMMA  and we will advance both of them by 1 .PERIOD  And when the loop condition is check the next time we will check whether the currently seen number is -1 .PERIOD  So ,COMMA  so far we have coded up part of the logic ,COMMA  which is the part of the logic dealing with when the current when the next number is read do we extend the sequence or do we break the sequence and start a new sequence .PERIOD  So ,COMMA  this is just part of the work that we need to do to solve the problem .PERIOD  So ,COMMA  lets continue with the logic .PERIOD  So ,COMMA  let us start with a few boundary cases ,COMMA  and let see that whether these works .PERIOD  If it works we can try or logic on other cases .PERIOD  So ,COMMA  let us say that by boundary cases I mean may be very long inputs or very short inputs .PERIOD  So ,COMMA  these are cases where your code normally breaks .PERIOD  So ,COMMA  when you test your code it is always a good idea to check boundary cases .PERIOD  And one thing that makes programming difficult is that in or when we do things by hand ,COMMA  we know how to handle the boundary cases elegantly ,COMMA  but in a program unless you say how to handle the boundary cases ,COMMA  the program might break .PERIOD  And the lot of testing and the lot of errors come from incorrectly handling the boundary cases .PERIOD  So ,COMMA  it is always good to handle the boundary cases ,COMMA  let us try test our code on very small inputs .PERIOD  So ,COMMA  let us say that I enter a sequence 5 - 1 .PERIOD  So ,COMMA  previous becomes ,COMMA  so length is 0 ;SEMICOLON  previous becomes 5 and then since prev ! = -1 ,COMMA  I have used an abbreviation here which is the not equal to operator ,COMMA  this is the same as saying not of previous equal to equal to 1 .PERIOD  So ,COMMA  previous not equal to 1 is the same as saying not of previous equal to equal to 1 ,COMMA  its an operator in C ,COMMA  then you say that the len equal to 1 ,COMMA  then you say that the length is 1 ,COMMA  because you have seen 1 ,COMMA  1 number and scan the next number .PERIOD  The next number is -1 .PERIOD  So ,COMMA  you scan the next number ,COMMA  and the next number is -1 ,COMMA  so you break the sequence .PERIOD  So ,COMMA  immediately exit out of the sequence ,COMMA  and the length of the increasing sub sequence that we saw ,COMMA  so 5 is the only increasing sub sequence .PERIOD  And when we exited the length was 1 .PERIOD  So ,COMMA  we handle the boundary case of an extremely small sequence ,COMMA  a sequence with exactly 1 element correctly .PERIOD  This gives us confidence that the code could be correct ,COMMA  of course we have handle only the boundary case .PERIOD  Now ,COMMA  we see need to test it for other cases as well .PERIOD   So far the program is not doing any anything useful ,COMMA  because we are just extending the sequence and breaking the sequence .PERIOD  What recall that the what we was suppose to do was to fine the length of the longest increasing sub sequence .PERIOD  So ,COMMA  this is the main ,COMMA  this the main thing that we have to do in the logic .PERIOD  So ,COMMA  to do this what we do is something simple .PERIOD  We keep track of the maximum length sequence that we have seen so far ,COMMA  keep track of the length of the longest sequence that we have seen so far .PERIOD  Also we have the current sequence .PERIOD  Now all we need to do is whether to check whether the current sequence is longer than the previously known longest one .PERIOD  So ,COMMA  for this what we do is keep track of the maximum length that we have seen so far .PERIOD  So ,COMMA  this is a standard technique in program .PERIOD  And how do I do that .PERIOD  So ,COMMA  let us modify the program a little bit .PERIOD  So ,COMMA  earlier we resend out that we need at least three variables .PERIOD  Now in order to keep track of the length the maximum length that we have seen so far ,COMMA  I need a new variable .PERIOD  So ,COMMA  this part we have already done before .PERIOD  And here is the maxlen = 0 .PERIOD  So ,COMMA  that is the new variable which is the maximum length that we have seen so far .PERIOD  When we start the program we have not seen any increasing sub sequence ,COMMA  and therefore the length of the longest increasing sequence ,COMMA  the current increasing sequence is 0 ;SEMICOLON  that is len equal to 0 .PERIOD  And the length of the maximum length that we have seen so far is also 0 .PERIOD   Then you scan the new number ;SEMICOLON  if the new number is not -1 you continue .PERIOD  So ,COMMA  length equal to 1 ,COMMA  now max length equal to 1 ,COMMA  because currently the longest sequence that we have seen so far is 1 1 long .PERIOD  You scan the num next number .PERIOD  If you… So ,COMMA  here is the main body of the loop ,COMMA  and what we need to do is the following ,COMMA  if the currently read number is greater than the previous number ,COMMA  we extend the sequence .PERIOD  So ,COMMA  this logic is the same as before .PERIOD  Otherwise which means that current number is that less than or equal to previous .PERIOD  So ,COMMA  we are starting the new sequence .PERIOD  So ,COMMA  the situation is the following we have some maxlen sequence somewhere in the past .PERIOD  So ,COMMA  maxlen is the length of the sequence that we have seen somewhere in the past .PERIOD   Now we are scanning in the sequence we have a current sequence .PERIOD  And we have decided to break this sequence .PERIOD  So ,COMMA  we have we are now starting a new sequence starting at current .PERIOD  So ,COMMA  we are a this part of the logic .PERIOD  So ,COMMA  we have decided to start a new sequence ,COMMA  that is because the current sequences last number is greater than or equal to the current number .PERIOD  So ,COMMA  here is previous ,COMMA  and this is current .PERIOD  So ,COMMA  we are deciding to start a new sequence what we need to see is whether this sequence is longer than the previously known maximum length .PERIOD  If the sequence that we just stopped is longer than the previously known maximum length sequence .PERIOD  So ,COMMA  if maxlen < len notice that length is then sequence that length of the sequence that we just stopped .PERIOD  Then we say that maxlen = len .PERIOD  So ,COMMA  if the current sequence is longer than the previously known maxlen ,COMMA  what we do is that maxlen becomes the length of this sequence .PERIOD  Otherwise if the current sequence was shorter than the previously known maximum length ,COMMA  we do not do anything ,COMMA  so maximum length is the same…  So ,COMMA  when we extent the sequence we don’t have to do anything special when we  break a sequence ,COMMA  and we start a new sequence ,COMMA  then all we have to do is you check whether the currently say the sequence that you just saw was longer than the previously known longest sequence .PERIOD  If that is the case then the sequence that just ended is becoming the longer sequence we have seen so far .PERIOD  Otherwise you maintain the max length .PERIOD  So ,COMMA  just forget about the currently stop sequence .PERIOD  Now there is a .PERIOD  .PERIOD  .PERIOD  So ,COMMA  that this loop ,COMMA  and at the end we have to do slight tricky logic ,COMMA  it could so happen that the sequence ends with a longest sequence increasing sub sequence .PERIOD  In that case ,COMMA  we will never reset the max length .PERIOD  So ,COMMA  if the last sequence is the longest ,COMMA  you also have to handle the case separately .PERIOD  So ,COMMA  we will see an example where ,COMMA  if you exit out of the loop that is you have already seen a -1 ,COMMA  you just have to check whether the last increasing sequence that you saw was in fact the longest .PERIOD  So ,COMMA  there is a small if block at the end to do that .PERIOD   In this part we will just see ,COMMA  small tracing of this program on a sample input .PERIOD  So ,COMMA  that the logic of the program become slightly more clear .PERIOD  So ,COMMA  I have picked a particular input 3 2 1 3 5 -1 ,COMMA  and you will see that the longest increasing sequences are 3 .PERIOD  So ,COMMA  the increasing sequences are 3 ,COMMA  then 2 ,COMMA  then 1 3 5 .PERIOD  So ,COMMA  1 3 5 is going to with a longest increasing sub sequence ,COMMA  and let us see how our program will find that out .PERIOD  So ,COMMA  initially you have a bunch of variables which should be declare .PERIOD  So ,COMMA  len = 0 ,COMMA  maxlen = 0 ,COMMA  and previous and current are undefined .PERIOD  Then you first read previous .PERIOD  So ,COMMA  previous becomes 3 ,COMMA  it is not -1 ,COMMA  so you enter the if condition ,COMMA  at which point you set length and max length to 1 .PERIOD    Now you scan the current number .PERIOD  So ,COMMA  current becomes 2 .PERIOD  So ,COMMA  remember that previous is now 3 ,COMMA  and current is 2 .PERIOD  So ,COMMA  current is not -1 ,COMMA  therefore you enter the while loop .PERIOD  Prev < curr is false ,COMMA  because previous is 3 and current is 2 .PERIOD  Therefore ,COMMA  you enter the else part ,COMMA  maxlen < len is false ;SEMICOLON  both are 1 .PERIOD  Therefore ,COMMA  you start a new sequence with length equal to 1 .PERIOD  Now you continue the loop with previous becoming current .PERIOD    So ,COMMA  previous is now 2 and current you read the next number which is 1 .PERIOD  So ,COMMA  previous and current have both more 1 step .PERIOD  So ,COMMA  current is not -1 ,COMMA  prev < curr is again false ,COMMA  because 2 is greater than 1 .PERIOD  So ,COMMA  you enter the else part .PERIOD  Max length and length there is no change .PERIOD  So ,COMMA  you reset the length to 1 ,COMMA  previous is current .PERIOD  So ,COMMA  current previous becomes 1 ,COMMA  and you scan the next number which is 3 .PERIOD  Now at this point previous is 1 ,COMMA  and current is 3 .PERIOD  So ,COMMA  the if condition is true .PERIOD  So ,COMMA  you extend the length ;SEMICOLON  length increases by 1 .PERIOD  Again you advance previous and current .PERIOD  So ,COMMA  previous becomes 3 ,COMMA  current becomes 5 .PERIOD  Again 3 is less than 5 ,COMMA  so increase the length we are extending the sequence .PERIOD  So ,COMMA  the length becomes 3 .PERIOD  Advance ,COMMA  so previous becomes 5 ,COMMA  and current becomes -1 at this point you exit the loop .PERIOD   And now you encounter the situation that max length ,COMMA  which is the length that we have seen so far ,COMMA  recall that it is one ,COMMA  but the length of the sequence that we just stop the see the input with is 3 ;SEMICOLON  that is that happen ,COMMA  because the longest increasing contiguous sub sequence ,COMMA  well was at the end of the input .PERIOD  So ,COMMA  it happen right at the end .PERIOD  So ,COMMA  when we exit the loop we have to do 1 additional check ,COMMA  we cannot simply say that the maximum length that we have seen in the sequence is 1 ,COMMA  because max length is the length of the longest sequence we have seen before the current 1 .PERIOD  The current 1 was the 1 that we just stop to with it had a length of 3 .PERIOD  So ,COMMA  we just check ,COMMA  if max length equal to length is less than the length ,COMMA  then we set max length to be the length .PERIOD  So ,COMMA  once you do that max length becomes 3 .PERIOD  This is just to handle the case when the longest increasing sub sequence is the last .PERIOD  Now you can exit out of the exit out of the if condition ,COMMA  and then print that the maximum length that you have seen is 3 .PERIOD   So far we have been using while loops in C ,COMMA  now C programming language also provides you other kinds of loops .PERIOD   Let’s look at some of them .PERIOD  The first alternative loop mechanism in C that we will look at is what is known as a do-while loop ?QUESTIONMARK  And so it is a variant of a while loop ,COMMA  I am the general form is what you see here ,COMMA  you have do statement followed by while expression .PERIOD  And here is an important syntactic difference which causes some syntax errors ,COMMA  when you code .PERIOD  The do while terminates within semicolon ,COMMA  where is the while loop does ?QUESTIONMARK  So ,COMMA  the while loop has the following a form which is while expression ,COMMA  and then statement ;SEMICOLON  the difference is that here the statement is occurring before the while the test expression .PERIOD  So ,COMMA  the way it execute is the following .PERIOD  We first execute the statement ,COMMA  then evaluate the expression .PERIOD  If the expression is true ,COMMA  you go back to step 1 ;SEMICOLON  that is execute this statement .PERIOD  If the expression is false ,COMMA  then you get out .PERIOD   So ,COMMA  you execute the x statement then test whether the expression is true or not ,COMMA  if it is true you go back and the execute the statement again ,COMMA  so you loop .PERIOD  If the statement is false ,COMMA  you get out of the loop .PERIOD  The difference from while loop and do while loop is the following ,COMMA  you have statement that will be executed without testing the expression even once .PERIOD  So ,COMMA  when you start executing the loop ,COMMA  you will first execute the statement without testing the expression ,COMMA  and after testing the expression you will go back and test the loop expression ,COMMA  if it is true and you start executing the loop again .PERIOD  So ,COMMA  the first execution of the statement there is no test done for that .PERIOD  So ,COMMA  let us see the comparison between a loop while loop and do while loop .PERIOD  So ,COMMA  we will look at the following problem ,COMMA  you have to read numbers and output in integer until a -1 is seen .PERIOD  Now the difference is that in this problem you have to include the -1 .PERIOD  So ,COMMA  read all the numbers up to an including -1 ,COMMA  and print all the numbers .PERIOD  So ,COMMA  we will have the following programs using while loop and do while loop .PERIOD  Now the important thing to notice is that the while construct and the do while construct are equally expressive .PERIOD  So ,COMMA  you cannot right any more new programs using the do while construct ,COMMA  then you could using the while construct ,COMMA  but certain kinds of programs or easier using or shorted using the do while construct .PERIOD  For example let us all this problem using the while construct .PERIOD  So ,COMMA  what you do initially is ,COMMA  you declare a variable then scan the variable ;SEMICOLON  if the variable is -1 ,COMMA  you immediately exit out of the loop ,COMMA  and print -1 and finish the program .PERIOD  If the number is not -1 ,COMMA  you print the value and scan the next number .PERIOD  If the number you scan this not -1 ,COMMA  you just print it and repeat the loop .PERIOD  If it is -1 ,COMMA  you exit out of the loop and print the -1 that you show .PERIOD  So ,COMMA  here is the logic using the do while loop ,COMMA  in using the while loop .PERIOD  And notice that when we existed out of the loop we needed a printf statement ,COMMA  and before you yes ,COMMA  enter the loop you needed a scanf statement .PERIOD  So ,COMMA  this was the structure of the program .PERIOD  This problem can be elegantly solved using the do while loop .PERIOD  What you initially need to do is to declare a variable ,COMMA  then scan the variable and print it any way .PERIOD  Either the number is -1 or it is not .PERIOD  In any case we need to print it .PERIOD   So ,COMMA  go ahead and print it then test whether the number was -1 .PERIOD  If it is -1 ,COMMA  your done and you exit out of the program .PERIOD  If it is not -1 ,COMMA  you go back and scan the next number and print it .PERIOD  So ,COMMA  this is a program that we have seen where you could do this same think with the while loop .PERIOD  The only difference is that the do while program is shorter .PERIOD  And please be careful about the syntactic difference between the while loop and the do while loop ,COMMA  notice the semicolon at the end this causes a lot of confusion when you compile the program it is easy to miss this .PERIOD  If you are new to C programming ,COMMA  you can strict to one particular loop .PERIOD  As I said before you cannot write any new programs that you can do is using the do while loop ,COMMA  then you could previously do using the while loop .PERIOD  So ,COMMA  you can write the same logic ,COMMA  you can write the same number of programs using the while loop ,COMMA  and the do while loop it gives you no further power .PERIOD  So ,COMMA  it is recommended that you stick to one loop pick while or pick do while whatever you do ,COMMA  but stick to that loop in when you right the program .PERIOD  When you are comfortable with one of the loops programming using the other loop becomes easy .PERIOD  So ,COMMA  let us try to solve a problem that we have already seen ,COMMA  which is to find the length of the longest contiguous increasing subsequence ending in -1 .PERIOD  The difference that we have is that earlier we did not include -1 in the sequence when you computed the length of the sequence ,COMMA  now we will include -1 .PERIOD  So ,COMMA  here is the program to do that and the logic - the core logic ,COMMA  so here is the initialization ,COMMA  and here is the loop logic ,COMMA  and the final check .PERIOD   So ,COMMA  if you recall from the lecture which covered the problem solving the longest increasing subsequence ,COMMA  then you will see that the main structures in the code .PERIOD  The main lines of logic in the code are pretty much the same .PERIOD  All I have done is to change the while logic to the do while logic .PERIOD  And let see what that is accomplish for us .PERIOD  So ,COMMA  what this does is that you will scan a particular number ,COMMA  if the particular number is bigger than the previous number ,COMMA  then you extend the sequence .PERIOD  If it is less than or equal to the previous number ,COMMA  then you stop this sequence and started new sequence ,COMMA  this was the logic .PERIOD   And when you start a new sequence the length is new start with 1 .PERIOD  Then you say current equal to the next number ,COMMA  and previous equal to the number that was just red .PERIOD  So ,COMMA  the logic here is that the testing for whether the currently rate number is -1 is done at the end of the loop .PERIOD  So ,COMMA  is the first number is -1 ,COMMA  you just do all this and then say that the length of the increasing subsequence is 1 ,COMMA  then you test if the currently read number is -1 or not .PERIOD  If the currently read number is -1 ,COMMA  then you are already done and you exit out of the loop .PERIOD  Then you check whether max length is less then length as before .PERIOD  difference between this logic ,COMMA  and the logic that we have seen before is that we do this execution without testing whether the currently read number is -1 .PERIOD  So ,COMMA  automatically what happens is that if the number is -1 ,COMMA  all these steps will be performed before we test that the sequence has ended .PERIOD  So ,COMMA  automatically we ensure that -1 is also included when we calculate the increasing subsequence .PERIOD  In this session ,COMMA  let us look at a matrix problem and the problem is given as follows .PERIOD  You have a bunch of lines of input .PERIOD  The first line of the input consists of two numbers ,COMMA  m and n .PERIOD  This line is followed by m lines ,COMMA  each containing n integers .PERIOD  So ,COMMA  this is supposed to represent the matrix of size m time m cross n .PERIOD  We have to calculate the sum of the squares of the sum of numbers in each row ,COMMA  that is quite a mouthful ,COMMA  let us look at the formula .PERIOD  So ,COMMA  what I want to do is ,COMMA   .PERIOD  So ,COMMA  once you do this sum ,COMMA  you square that and then do the   .PERIOD  So ,COMMA  i is an index which goes over the rows .PERIOD  In C ,COMMA  we adopt the convention that the first row is starting with 0 and so ,COMMA  it goes from 0 to m minus 1 .PERIOD  Similarly ,COMMA  the first column starts with index 0 ,COMMA  so it goes on till n minus 1 .PERIOD  So ,COMMA  the input will be given as follows .PERIOD  The first number m represents that there are 3 rows ,COMMA  the second number represents the number of columns in each row and then this is followed by a matrix of size 3 cross 4 .PERIOD  Now ,COMMA  the numbering is given as follows .PERIOD  For example ,COMMA  if you have  ,COMMA  this means second row zeroth column .PERIOD  Note that ,COMMA  second row means we start with row 0 ,COMMA  then row 1 ,COMMA  then row 2 and zeroth column is this ,COMMA  the first column .PERIOD  So ,COMMA   is this number which is 2 .PERIOD  Similarly ,COMMA   is first row ,COMMA  row number 1 column number 2 ,COMMA  which is also 2 .PERIOD  So ,COMMA  the desired output that we have is  and so on .PERIOD  So ,COMMA  how do we do this by hand ?QUESTIONMARK  Let us just look at the calculation .PERIOD    So ,COMMA  we have 4 7 11 2 1 1 2 4 and 2 9 0 minus 1 .PERIOD  Notice that the formula that we have to calculate is i going from 0 to 2 ,COMMA  j going from 0 to 3 squared .PERIOD  So ,COMMA  how do we do this ?QUESTIONMARK  First ,COMMA  we sum the numbers in each column so ,COMMA  I will name that as j going from 0 to 3  and then square .PERIOD  So ,COMMA  if you sum all this ,COMMA  you see 11 22 242 which is 576 and similarly ,COMMA  this is 64 82 and this is 102 ,COMMA  which is 100 .PERIOD  So ,COMMA  what I have tallied on the right hand side is ,COMMA  for each row you sum the numbers take that sum and square it .PERIOD  And then finally in order to compute what we want ,COMMA  which is  .PERIOD  In order to calculate this ,COMMA  all we need to do is to sum these numbers up and this turns out to be 740 .PERIOD  So ,COMMA  notice when we did by hand ,COMMA  we did the following ,COMMA  we first calculated row wise ,COMMA  we summed over all the numbers in that row .PERIOD  Take the sums ,COMMA  square it .PERIOD  Then ,COMMA  you repeated the same operation for the next row and then for the third row .PERIOD  So ,COMMA  we have three numbers and then we added them in sequence .PERIOD  So ,COMMA  we will see how we will code this up ?QUESTIONMARK   So ,COMMA  what we need here is something called an inner loop or a double loop ,COMMA  we need a loop inside a loop .PERIOD  Now ,COMMA  the inner loop is doing what we did first ?QUESTIONMARK  It is taking a row and adding all the numbers in that row ,COMMA  then squaring it .PERIOD  So ,COMMA  we need one loop to do the rowsum of each row .PERIOD  Once a row is finished ,COMMA  we square the rowsum .PERIOD  Once that is done ,COMMA  remember that once we tallied numbers on the right hand side and squared them .PERIOD  We have to add those numbers up .PERIOD  So ,COMMA  we need another loop ,COMMA  an outer loop to add these squares of rows sums .PERIOD  So ,COMMA  let us do this program in stages .PERIOD  First ,COMMA  let us write the inner loop ,COMMA  this is the loop ,COMMA  so that for a given row you sum up all the numbers in that row .PERIOD  Now ,COMMA  let us assume that we are at the beginning of a row and we have not read any numbers yet .PERIOD  Now ,COMMA  what we have to do is to start reading the numbers .PERIOD  So ,COMMA  we write a while loop .PERIOD  We declare four variables a ,COMMA  column index ,COMMA  then we need something for the rowsum and some integer variable for rowsumsquare .PERIOD  Now ,COMMA  what you do is you go along the row and add the numbers in each column .PERIOD  So ,COMMA  while the column index is less than n ,COMMA  recall that the matrix size was m cross n .PERIOD  You scan the next number ,COMMA  the next number is added to the rowsum and then increment the column index .PERIOD  Until you hit n ,COMMA  recall that the last column is n minus 1 ,COMMA  because we start the column numbers from 0 .PERIOD  Now ,COMMA  once you have done you have the sum of the numbers in that row and what you need to do is to square that number .PERIOD  So ,COMMA  we have rowsum times rowsum will be rowsumsquare .PERIOD  That completes the inner loop ,COMMA  which is what we did ,COMMA  when we added the numbers along a given row and then finally ,COMMA  squared the sum .PERIOD  Now ,COMMA  what we need is an outer loop structure over these .PERIOD  So ,COMMA  we have a code that reads the next n integers from the terminal and sums them .PERIOD  Now ,COMMA  what we need is some further code ,COMMA  that takes the output of the previous code and then sums all those numbers up .PERIOD  Remember ,COMMA  when we did this by hand ,COMMA  this was the second operation we did ,COMMA  we went over the right most column and added all those numbers up and that was the result that we wanted .PERIOD  So ,COMMA  how do we modify the code ?QUESTIONMARK  So ,COMMA  let us what we need is something like this .PERIOD  Assume that we have the output available from the previous code in some variable called rowsumsquare .PERIOD  And we need a loop over that ,COMMA  which is going from rowindex 0 to m minus 1 and tallying up all the numbers in rowsumsquare .PERIOD  So ,COMMA  for each row you will end up with a rowsumsquare and you have to add all those rowsumsquare to get in .PERIOD  So ,COMMA  in this the rowsumsquare comes from the previous code .PERIOD  So ,COMMA  this is how we will visualize the outer loop .PERIOD  Now ,COMMA  note that this is not completely specified code .PERIOD  This is just a very intuitive picture ,COMMA  that instead of rowsumsquare ,COMMA  it should come from some inner loop which actually calculates it .PERIOD  So ,COMMA  we should plugin the output from the previous inner loop and this is the outer loop over it .PERIOD   So ,COMMA  here is how we put these two loops together ,COMMA  we have a while loop inside the while loop .PERIOD  Remember that ,COMMA  this was the previous loop that we had written .PERIOD  So ,COMMA  this was the inner loop that we have written ,COMMA  where at the end of the inner loop you have the rowsumsquare .PERIOD  Now ,COMMA  at the end of the code what you will end up is the exact rowsumsquare of a particular column .PERIOD  So ,COMMA  you can imagine that after this inner loop finishes execution ,COMMA  the rowsumsquare is the correct rowsum is the correct square of the sum of the elements in the row .PERIOD  Now ,COMMA  the outer index does the following ,COMMA  you start from rowindex 0 and sum the rowsumsquare over all columns .PERIOD  So ,COMMA  this is the structure of the code .PERIOD  Let us look at the code in slightly more detail .PERIOD  We have a rowindex ,COMMA  a column index ,COMMA  a column sum ,COMMA  a rowsum and the rowsumsquare ,COMMA  a is supposed to be the current number that we are read in .PERIOD  Suppose ,COMMA  we know that the size of the matrix is m cross n .PERIOD  So ,COMMA  rowindex can go from 0 to m minus 1 .PERIOD  So ,COMMA  the termination condition of this while loop is rowindex equal to m .PERIOD  Now ,COMMA  for all that you are currently at a particular row .PERIOD  So ,COMMA  you have to initialize the rowsum to 0 and the column index to 0 .PERIOD  Because ,COMMA  for a given row you have to start from row 0 for a given row you have to start from column 0 and you go on ,COMMA  until column n minus 1 .PERIOD  Also this previous rowsum should not influence the next row .PERIOD  So  ,COMMA  for every row you have to initialize the rowsum variable .PERIOD  Once that is done ,COMMA  you go over the columns of that given row and you scan the numbers add the number to the rowsum and increment the column index ,COMMA  until you hit n columns ,COMMA  column 0 through n minus 1 .PERIOD  When you read all the columns in that row ,COMMA  you have the correct rowsum .PERIOD  So ,COMMA  that rowsumsquare can now be calculated .PERIOD  Once rowsumsquare is calculated ,COMMA  you have the rowsumsquare for that particular row .PERIOD  So ,COMMA  add the rowsumsquare to the previously computed columns .PERIOD  So ,COMMA  If you go back and think about how you did this by hand ,COMMA  you can convince yourself that this is exactly the coding of the logic that we had earlier .PERIOD  So ,COMMA  let us try this on a small example to see exactly ,COMMA  how the code works ?QUESTIONMARK  Suppose ,COMMA  the input is 2 3 followed by two rows of three numbers each .PERIOD  So ,COMMA  the input matrix size is 2 cross 3 and the entries are 1 0 minus 1 and 0 1 1 .PERIOD  Let us see ,COMMA  how the code executes on this ?QUESTIONMARK  So ,COMMA  the output should be 4 ,COMMA  if you do it by hand and let us see ,COMMA  the variables are m ,COMMA  n ,COMMA  a ,COMMA  rowindex ,COMMA  column index ,COMMA  rowsum and square sum .PERIOD  Finally ,COMMA  the result should be in square sum .PERIOD  You start with rowindex equal to 0 ,COMMA  column index equal to 0 and you scan m and n .PERIOD  So ,COMMA  you already know the size of the matrix ,COMMA  when you scanned m and n .PERIOD  So ,COMMA  m becomes 2 and n becomes 3 .PERIOD  Now ,COMMA  rowindex is 0 which is less than 2 .PERIOD  So ,COMMA  it starts the loop which reads the row 0 .PERIOD  So ,COMMA  notice the arrow here ,COMMA  you are starting to read this particular row ,COMMA  the first row ,COMMA  which is row 0 .PERIOD  Or you initialize rowsum equal to 0 ,COMMA  column index equal to 0 and while column index is less than n ,COMMA  you scan the next number which is 1 .PERIOD  Add a to the rowsum .PERIOD  So ,COMMA  rowsum becomes 1 ,COMMA  increment the column index .PERIOD  So ,COMMA  it reach column 1 row 0 read that number .PERIOD  Add it to the rowsum ,COMMA  go to the second column and read the number and add in to the rowsum .PERIOD  So ,COMMA  once you are done ,COMMA  now column index is 3 .PERIOD  So ,COMMA  just means that we have read all the entries in the row 0 .PERIOD  So ,COMMA  we have got the correct rowsum .PERIOD  What we will do is ,COMMA  add the rowsumsquare to the square sum .PERIOD  So ,COMMA  rowsum is 0 ,COMMA  0 square to square sum ,COMMA  so square sum remains 0 .PERIOD  Now ,COMMA  you go to the second row .PERIOD  So ,COMMA  increment rowindex .PERIOD  Now ,COMMA  rowindex is less than 2 rowindex is 1 .PERIOD  So ,COMMA  it is less than 2 we are reading row 1 and you repeat the same execution .PERIOD  We reinitialize the rowsum to 0 ,COMMA  column index to 0 .PERIOD  and then ,COMMA  scan the next number which is 0 .PERIOD  Add it to the rowsum ,COMMA  increment the column index ,COMMA  scan the next number which is 1 and so on ,COMMA  until you finish reading the second row as well .PERIOD  So ,COMMA  once you read the second row ,COMMA  you will find that the rowsum is 2 and square sum would be square sum plus 2 square which is 4 .PERIOD  After you do that ,COMMA  you increment rowindex and rowindex becomes 3 ,COMMA  which is greater than the given rowindex .PERIOD  So ,COMMA  you exit the loop .PERIOD  So ,COMMA  we have correctly computed the sum that we wanted .PERIOD  In this session we will see a very popular loop construct in C .PERIOD  We have already seen while loops and do while loops ,COMMA  will see that do while loops are not all that common in C code ,COMMA  when C programmers code .PERIOD  Among the most popular loop construction C is this ,COMMA  for loop .PERIOD  So ,COMMA  let say what it stands for ?QUESTIONMARK  The expression for the general form of the for statement ,COMMA  the slightly more complex than that of a while loop .PERIOD  While loop was very simple ,COMMA  while as the certain expression was true ,COMMA  you execute the statement and when the expression becomes false ,COMMA  you exit out of the loop ,COMMA  for loop is slightly more complex .PERIOD  So ,COMMA  it has the following components ,COMMA  it has an initialization expression ,COMMA  then the test expression ,COMMA  this the expression corresponding to the expression inside the while loop and then there is an update expression ,COMMA  followed by the loop statement .PERIOD  This looks complex at first ,COMMA  ,COMMA  but it is quit intuitive once you start using it .PERIOD  The execution is as follows ,COMMA  first you execute the initialization expression ,COMMA  then you test whether the test expression is true or not .PERIOD  If the test expression is true ,COMMA  you execute the statement and then come back and execute the update expression .PERIOD  After you execute the update expression go back to step 2 ,COMMA  which is go to the test expression .PERIOD  So ,COMMA  init expression is the initialization expression ,COMMA  update expression is the update expression and test expression is the expression ,COMMA  that is evaluates to either true or false .PERIOD  So ,COMMA  if you look at the flow of how the code goes ,COMMA  then it is first you start from the initialization expression ,COMMA  then you go to first you start from the initialization expression ,COMMA  then you go to the test expression .PERIOD  If the test expression is true ,COMMA  you go to the statement ,COMMA  then you go to the update expression and you go to the test expression again .PERIOD  So ,COMMA  the loop is here you test the expression ,COMMA  execute the statement ,COMMA  update and test again ,COMMA  initialization is done only once .PERIOD  So ,COMMA  this is the first step and here is the loop ,COMMA  this sounds bit complex at first ,COMMA  ,COMMA  but it is quite simple to use ,COMMA  once you get the hang of it .PERIOD  So ,COMMA  the execution of the for loop can be understood in terms of the while loop .PERIOD  The execution of the for loop is almost equivalent to the following while loop ,COMMA  you have the initialization expression before the while loop ,COMMA  then the test expression ,COMMA  while test expression ,COMMA  then you have statement and then you have the update expression .PERIOD  So ,COMMA  if you have a for loop you can write the equivalent code using while loop .PERIOD  So ,COMMA  if you say that I do not want to use for loops ,COMMA  here is how you have a for loop and you can write the equivalent while loop in the following way .PERIOD  Or if you have a while loop ,COMMA  you can write a equivalent for loop by looking at the this form and how it is translate to the corresponding for loop ?QUESTIONMARK  Now ,COMMA  there why did I say execution is almost equivalent ,COMMA  we will see this later in the course .PERIOD  Whenever ,COMMA  there is a continues statement or a break statement ,COMMA  you will see that we need to modify this as equivalents between the for loop and the while loop .PERIOD  But ,COMMA  for now for with the features of see that we have seen so far .PERIOD  The for loop is equivalent to the while loop and we will have to modify this slightly later .PERIOD  So ,COMMA  the init expression maps to the first part of the for loop ,COMMA  the test expression maps to the second part and the update expression maps to the third part .PERIOD  One important thing to notices is that ,COMMA  the update expression is after the statement .PERIOD  So ,COMMA  we have the following first we execute the initialization expression ,COMMA  then we test whether the expression is true .PERIOD  If it is true ,COMMA  you execute the statement ,COMMA  update expression and then again go to the test expression ,COMMA  if it is true you execute statement ,COMMA  update and then test again .PERIOD  So ,COMMA  you initialize the expression then when the test the test expression if it is true ,COMMA  you execute the statement after the statement is true ,COMMA  after the statement is executed you update the expression and go back to the test expression .PERIOD  Because ,COMMA  that is how you execute it in the while loop ?QUESTIONMARK  You first initialize ,COMMA  then test whether it is true execute the statement ,COMMA  update and then go back to the test expression .PERIOD  So ,COMMA  this is how a while loop can be translated to a for loop and vice versa .PERIOD  So ,COMMA  let us do some examples very simple think ,COMMA  let us say that print the sum of reciprocals of the first 100 natural numbers .PERIOD  So ,COMMA  what do I want to do ?QUESTIONMARK  I want to do the following ,COMMA  I want to do  .PERIOD  So ,COMMA  how would I do it ?QUESTIONMARK  I would initialize a variable call sum ,COMMA  sum will be initialized 1 and then 2 sum I will add  ,COMMA  then to that I will add  and keep on going until  .PERIOD   So ,COMMA  let see how to code this in C using the for loop .PERIOD  So ,COMMA  I have a variable call reciprocal sum and even though I am summing over integers ,COMMA  we know that the reciprocal numbers will be real numbers .PERIOD  So ,COMMA  in order to keep the reciprocal sum I need a floating point number ,COMMA  floating point variable and then I have an integer variable ,COMMA  which goes from 1 to 100 .PERIOD  So ,COMMA  here is how I will do the loop ?QUESTIONMARK  First initialize i to 1 ,COMMA  if i <= 100 ,COMMA  you enter the loop and do reciprocal sum equal to the current reciprocal sum plus 1 over i .PERIOD  After doing that you update by saying i = i + 1 ,COMMA  .PERIOD  So ,COMMA  increment i .PERIOD  Once the increment is done ,COMMA  you test whether the new number is less than or equal to 100 ,COMMA  if it is less than or equal to 100 ,COMMA  you do the reciprocal sum come back update ,COMMA  until you reach 101 .PERIOD  At the point where you reach 101 you test whether i <= 100 that becomes false and you exit .PERIOD  So ,COMMA  you will see that when you exit out of the loop ,COMMA  the reciprocal sum will be the sum of reciprocals of numbers from 1 to 100 .PERIOD  So ,COMMA  here is how the for loop functions .PERIOD   So ,COMMA  instead of 100 let us try to executed on a particularly very small number to see how this for loop executes .PERIOD  So ,COMMA  let us instead of summing from 1 to 100 ,COMMA  let us sum from 1 to 4 .PERIOD  So ,COMMA  first you have the initialization expression .PERIOD  So ,COMMA  i is undefined before you enter the while loop ,COMMA  reciprocal sum is of course initialize to 0 .PERIOD  So ,COMMA  I can after initialization i will be 1 ,COMMA  as soon as it is initialized we will test whether it is less than or equal to 4 ,COMMA  1 is less than or equal to 4 that is true .PERIOD  So ,COMMA  you will enter the for  loop ,COMMA  then you add to the reciprocal sum 1 over i ,COMMA  i is 1 ,COMMA  .PERIOD  So ,COMMA  1 over 1 is 1 .PERIOD  So ,COMMA  reciprocal sum will be updated 2 reciprocal sum plus 1 .PERIOD  So ,COMMA  reciprocal sum would be 1 ,COMMA  then you go to the update expression ,COMMA  at this point you have i = i + 1 ,COMMA  So ,COMMA  i becomes 2 .PERIOD  Now ,COMMA  test whether i <= 4 yes it is and enter the loop .PERIOD  So ,COMMA  1 plus 0 .PERIOD 5 then go back to the update expression i becomes 3 now and test whether 3 is less than or equal to 4 it is ,COMMA  .PERIOD  So ,COMMA  enter the loop .PERIOD  So ,COMMA  you add 1 .PERIOD 5 plus  ,COMMA  1 .PERIOD 833 and .PERIOD  So ,COMMA  on ,COMMA  update again you have 4 ,COMMA  4 is less than or equal to 4 that is true .PERIOD  So ,COMMA  you enter the loop one more time and add 1 over 4 .PERIOD 25 to the current number .PERIOD  So ,COMMA  you get 2 .PERIOD 0833 and .PERIOD  So ,COMMA  on update again i becomes 5 ,COMMA  at this point 5 is not less than or equal to 4 ,COMMA  .PERIOD  So ,COMMA  you exit out of the for loop .PERIOD  Now ,COMMA  you say that print that the sum of reciprocals from 1 to 4 is reciprocal sum ,COMMA  which is 2 .PERIOD 0833 .PERIOD  So ,COMMA  even though the for loop looks complicated ,COMMA  once you start using it ,COMMA  it is very nice to right ,COMMA  you have a initialization expression ,COMMA  you have a test expression and then you have the update expression ,COMMA  that you should do after every execution of the loop ,COMMA  after every iteration you should have the update expression .PERIOD  As soon as the update is over ,COMMA  you test whether I can execute the loop one more time ,COMMA  if I can enter the loop update and test again and .PERIOD  So ,COMMA  on ,COMMA  until the loop condition is false .PERIOD  Let us take another example ,COMMA  you have two lines ,COMMA  the first line contains a single number m ,COMMA  which specifies how many numbers are there in the second line .PERIOD  The second line contains m integers and we have to just output the sum of the m numbers .PERIOD  Now ,COMMA  we know how to do this ,COMMA  we have already done this using a while loop ,COMMA  let us try to do it using a for loop .PERIOD  So ,COMMA  the sample input is let say the first line is 5 and then I have 5 integers on the second line .PERIOD  The strategy is very simple ,COMMA  you read the number on the first line into m and then have a variable called sum ,COMMA  which will start with the first number and keep on adding the subsequent numbers ,COMMA  until you have read m numbers initialize sum to 0 .PERIOD  So ,COMMA  run a for loop from the first number to the mth number and keep adding the numbers to sum .PERIOD  So ,COMMA  this loop will run for m times .PERIOD  So ,COMMA  let us code this up ,COMMA  you have m ,COMMA  i ,COMMA  sum and numbers which are all integers .PERIOD  First you scan the number m ,COMMA  initialize sum to 0 this is important .PERIOD  Because ,COMMA  if sum is not properly initialized it is sum garbage value and you keep adding numbers to it ,COMMA  you will get garbage value as the output .PERIOD  So ,COMMA  initialize the number sum properly to 0 and then here is the for loop ,COMMA  what the for loop does is ,COMMA  you start with i = 0 and go on until i less than m .PERIOD  Now ,COMMA  you could also do the following could start with i equal to 1 and go on until exactly m .PERIOD  So ,COMMA  if you start with i equal to 1 you will say i less than or equal to m ,COMMA  you can adapt either convention ,COMMA  in C it is more popular to start from 0 and go on until m minus 1 .PERIOD  So ,COMMA  you break the loop when i is equal to m .PERIOD  So ,COMMA  here is the test condition for the loop and then you have the loop body ,COMMA  which is you read the number and add the number to sum and after you have done that ,COMMA  you have the update expression which is i = i + 1 .PERIOD  So ,COMMA  here is the how the for loop looks you start from 0 and go on until i becomes m ,COMMA  you add the number and just increment i ,COMMA  which is i is the number of integers we have seen so far .PERIOD  Let us do trace of this execution ,COMMA  you start you have this integer variables and you first read m which is 5 ,COMMA  the number on the first line and then we do things in order ,COMMA  you have initialized sum to 0 ,COMMA  you start with i = 0 .PERIOD  Once you do the initialization expression i become 0 ,COMMA  i is less than m 0 less than 5 that is fine .PERIOD  So ,COMMA  you execute the loop ,COMMA  scan that next number ,COMMA  which is 2 add it to the sum .PERIOD  So ,COMMA  sum becomes 2 now update ,COMMA  update is increment i ,COMMA  .PERIOD  So ,COMMA  i becomes 1 and test whether 1 is less than 5 it is .PERIOD  So ,COMMA  you read the next number add it to the sum ,COMMA  .PERIOD  So ,COMMA  this sum becomes 1 update again and keep repeating this ,COMMA  until you have read all 5 numbers .PERIOD  So ,COMMA  when you read the 5th number i will be 4 ,COMMA  after that you add the 5th number to the summation .PERIOD  Once you done i will be incremented to 5 ,COMMA  5 is not less than 5 ,COMMA  5 is equal to 5 .PERIOD  So ,COMMA  you will exit out of the loop ,COMMA  at this point you will have the correct sum ,COMMA  .PERIOD  So ,COMMA  the correct sum will be 25 and you exit on .PERIOD  So ,COMMA  the printf will come out on one line ,COMMA  it will say that the sum of given 5 numbers is 25 .PERIOD  So ,COMMA  what I will recommend is ,COMMA  write the same program using a while loop and a for loop and see how you can easily go from while to for and for to while .PERIOD  The advantage of the for loop and the reason why for loop become ,COMMA  .PERIOD  So ,COMMA  popular among programmers is that ,COMMA  in comparison to the while loop ,COMMA  it is first of all it is easier to read .PERIOD  Because ,COMMA  you have all the initialization expression ,COMMA  the update expression and the test expression all on one line .PERIOD  So ,COMMA  you see what the loop is about .PERIOD  The second is that ,COMMA  it involves fewer lines of code ,COMMA  then the corresponding while loop .PERIOD  So ,COMMA  it is a very popular loop among programmers .PERIOD  Now ,COMMA  here is a syntactic convenient that C providers and let me make this remark as the final thing in this session .PERIOD  So ,COMMA  notices that we had to initialize two variables here .PERIOD  So ,COMMA  the first is sum was initialized to 0 and the second was that i was initialize to 0 .PERIOD  Now ,COMMA  would not be convenient ,COMMA  if I could do this together and that is what C provides us .PERIOD  So ,COMMA  I have something known as the comma operator .PERIOD  So ,COMMA  the normal comma that we have seen .PERIOD  So ,COMMA  in order to initialize multiple variables at the same time ,COMMA  I can say sum equal to 0 comma i = 0 .PERIOD  So ,COMMA  C will initialize the variables in the order ,COMMA  that it is given ,COMMA  first it in will initialize sum to 0 and then it will initialize the i = 0 .PERIOD  So ,COMMA  here is a very synthetically convenient notation that C provide for as the advantage again is that you end up with fewer lines of code .PERIOD   In this section ,COMMA  we will use the ,COMMA  for loop to code of the matrix problem .PERIOD  So ,COMMA  remember that we have seen while loop and we have seen a do while loop .PERIOD  Inside while loops we have written nested loops or double loops .PERIOD  So ,COMMA  let us look at a for loop which problem ,COMMA  where the solution involves a nested loop .PERIOD  So ,COMMA  the for loops are a good choice when the number of iterations is known in advance .PERIOD  So ,COMMA  a good example of such a condition is when you program for matrices ,COMMA  because the dimensions of a matrices are known in advance .PERIOD  So ,COMMA  let us consider a sample problem .PERIOD  So ,COMMA  the first line of the input has a number n now the matrix size is n X n and there are n floating point numbers in the matrix given row by row ,COMMA  each line contains a distinct row .PERIOD  Now ,COMMA  the problem is to compute the trace of the matrix ,COMMA  the trace of the matrix is the sum of the diagonal elements .PERIOD  So ,COMMA  it is defined as  .PERIOD  Notice that the matrix row indexing starts from 0 ,COMMA  similarly the matrix column indexing also starts from 0 .PERIOD  So ,COMMA  let us write a c program to solve this problem .PERIOD  Now ,COMMA  you should be familiar with how we compute the trace of a matrix .PERIOD  So ,COMMA  for example ,COMMA  if that matrix is given as let say 1 2 3 4 5 6 7 8 9 .PERIOD  So ,COMMA  the way we do it by hand is ,COMMA  look at the first row only this element goes into the trace .PERIOD  So ,COMMA  it is trace is 1 + ,COMMA  no other element of the row goes into the trace ,COMMA  in the second row the second element goes into the trace .PERIOD  So ,COMMA  it is 5 + and then no other remaining element goes into that trace and you go to the third row .PERIOD  And the third element goes in to the trace so ,COMMA  1 + 5 + 9 ,COMMA  this is how we do it by hand .PERIOD  You go row by row and then pick out for each row pick some element which goes into that trace only the diagonal element will go into the trace .PERIOD  Let us try to code this .PERIOD  So ,COMMA  in this we have two variables i and j which I will use to iterate over the row indices and the column indices n is the designator for the size of the matrix .PERIOD  For example ,COMMA  the dimension of the matrix is n X n .PERIOD  Now ,COMMA  a is the variable in to which I will read the current entry and then trace is the sum of the diagonal elements seen so far .PERIOD  I assume that it is an integer matrix ,COMMA  it is not general enough you can use a float variable as well .PERIOD  I will first scanf the size of the matrix n ,COMMA  the matrix is of dimension n X n .PERIOD  Once I have done that ,COMMA  here is what I was talking about in the previous slide ,COMMA  once you scan the number n you know that the matrix is n X n .PERIOD  So ,COMMA  the number of times that you are going to iterate is known in advance .PERIOD  So ,COMMA  the number of times that you have to iterate is known before you enter the for loop .PERIOD  In such cases the for loop is more convenient to write than the while loop .PERIOD  So ,COMMA  the outer loop is for each row from i = 0 ,COMMA  to i = n excluding i = n you increment the row .PERIOD  Similarly ,COMMA  for j = 0 to n you increment the column index so ,COMMA  j is supposed to be the column index .PERIOD  Now ,COMMA  you scan the number a now if i = j remember that we wanted to add the only the diagonal elements .PERIOD  So ,COMMA  the diagonal elements will be when the row index is the same as the column index .PERIOD  So ,COMMA  when the row index is the same as the column index ,COMMA  you should add the corresponding numbers to the trace .PERIOD  So ,COMMA  once j becomes n - 1 ,COMMA  you will fail the test j < n .PERIOD  So ,COMMA  we will exit out of the inner for loop ,COMMA  and you will go to the outer for loop .PERIOD  In the outer for loop you have i iterating over the row indices .PERIOD  So ,COMMA  you will go to the next row and do the same processing for the next row ,COMMA  until you hit row index n at which point you will exit out of the outer for loop .PERIOD  So ,COMMA  let us look at a sample input let say that you have 1 2 3 1 3 3 and -1 0 -1 .PERIOD  Here ,COMMA  is a particular convenience that c gives you which I have used in this code .PERIOD  So ,COMMA  notice that this if block I did not put the braces .PERIOD  So ,COMMA  it could have been necessary to put the braces according to the syntax that we have discussed so ,COMMA  far .PERIOD  But if there is only a single statement in the if block then ,COMMA  we do not need to put the braces and it is syntactically correct to do so .PERIOD  So ,COMMA  let us just run the program on a sample input .PERIOD  So ,COMMA  we have some sample array 2 0 -1 1 3 4 -1 0 1 .PERIOD  So ,COMMA  initially there is this number 3 .PERIOD  So ,COMMA  you know that it is a 3 X 3 matrix .PERIOD  So ,COMMA  once you do that you know that n is 3 so ,COMMA  representing that it is a 3 X 3 matrix .PERIOD  So ,COMMA  then you start with i = 0 and go on until i less than n incrementing i by 1 each time i is 0 i < n ,COMMA  because n is 3 .PERIOD  So ,COMMA  you enter the outer loop the first statement of the outer loop is itself a for loop ,COMMA  you start with j = 0 j < 3 .PERIOD  So ,COMMA  you enter the inner loop you scan a number a ,COMMA  which is a floating point number and if i = j .PERIOD  So ,COMMA  remember that we are looking for diagonal elements .PERIOD  So ,COMMA  we are currently at this point and i = 0 and j = 0 .PERIOD  So ,COMMA  we are entering we are scanning the zeroth element of the zeroth column of the zeroth row .PERIOD  So ,COMMA  that element has to go into the trace .PERIOD  So ,COMMA  i = j is true and then you say that trace = trace + a trace was initialize to 0 so ,COMMA  trace becomes now 2 .PERIOD  Once you do that ,COMMA  you iterate the inner for loop .PERIOD  So ,COMMA  you go to the updates statement in a inner for loop j becomes j + 1 .PERIOD  So ,COMMA  you go to the next column and the j < 3 .PERIOD  So ,COMMA  you scan the next number 0 if i = j that is false now ,COMMA  because i is 0 and j =1 .PERIOD  So ,COMMA  you do not execute the if statement and go to the update statement .PERIOD  So ,COMMA  j becomes 2 ,COMMA  2 < 3 .PERIOD  So ,COMMA  you scan 1 more number which is -1 ,COMMA  i is not j .PERIOD  So ,COMMA  you update again j becomes 3 ,COMMA  now 3 is not less than 3 ,COMMA  so ,COMMA  you exit out of the inner loop .PERIOD  When you exit out of the inner loop there are no more statements to execute .PERIOD  So ,COMMA  you go directly to the update statement in the outer loop which becomes i = i + 1 .PERIOD  So ,COMMA  you are reading the first row ,COMMA  row number 1 you are finished reading row number 0 .PERIOD  Again you scan the numbers when j = 1 that is the second number in the second row ,COMMA  you will see that i = j ,COMMA  because i is 1 and j =1 .PERIOD  So ,COMMA  you will add it to the trace .PERIOD  So ,COMMA  that is 2 + 3 which is 5 .PERIOD  So ,COMMA  trace gets updated and after you do that you scan the remaining entry in the same row ,COMMA  but it does not go to the trace ,COMMA  and then you have done with the row .PERIOD   After that again you go to the outer loop you update the row index of the row index is less is 2 which is less than 3 .PERIOD  So ,COMMA  you exit so ,COMMA  you enter the if condition and you execute the inner loop when i = 2 and j = 2 you will find an element which is -1 which will go in to the trace .PERIOD  So ,COMMA  the elements that will be added to that trace are when 2 3 and -1 .PERIOD  Once you are done you get out of the inner loop and then you go into the outer loop and update it ,COMMA  but then i becomes 3 it is no longer true that 3 is less than 3 .PERIOD  So ,COMMA  you have done reading all the rows .PERIOD  So ,COMMA  you exit the program when you exit the program you have the correct trace which is 4 .PERIOD   In this session we will see one more feature that is present in C associated with loops .PERIOD   So ,COMMA  we will in motivate these statements using the concept of an infinite loop .PERIOD  Here is a drawing that supposed to be a representation of an infinite loop .PERIOD    And a trivia ,COMMA  for example ,COMMA  the apple head quarters ;SEMICOLON  the address is one infinite loop .PERIOD    So ,COMMA  let us see what is an infinite loop ?QUESTIONMARK  So ,COMMA  the basic or the simplest kind of infinite loop is when you have a while statement .PERIOD  And the test condition ,COMMA  you can see that it will never be false .PERIOD  So ,COMMA  remember that 1 is true in c .PERIOD  So ,COMMA  this statement means that you will enter the while loop ,COMMA  you will test the condition .PERIOD  The test is true ,COMMA  so ,COMMA  you will execute the statement .PERIOD  You will go back and test the condition again ,COMMA  it is again true ,COMMA  does not changed ;SEMICOLON  it is 1 .PERIOD  Therefore ,COMMA  you will enter the statement again .PERIOD  So ,COMMA  you will have an infinity loop .PERIOD  If the test is executed then the control enters the body of the loop ,COMMA  and this happens without any change .PERIOD  So ,COMMA  let us look at this simple while loop which is while 1 .PERIOD  The statement is print f Hi! I am an infinite loop .PERIOD  So ,COMMA  if you will run this code ,COMMA  compile and run this code after you write the mean function and all that ,COMMA  then the program will keep on printing the same message over and over again .PERIOD  And you cannot exit out of the program .PERIOD  If you are running a Linux system you can press control c ,COMMA  and the program will exit immediately .PERIOD  But here is an infinite loop ;SEMICOLON  it executes an infinite number of times .PERIOD  So ,COMMA  is there a statement which helps us to exit from a loop ?QUESTIONMARK  Now ,COMMA  this is useful not just to handle infinite loops ,COMMA  even when you write normal loops it is important to have these constructs ;SEMICOLON  they make your programming easier .PERIOD  So ,COMMA  c allows a programmer to explicitly break out of a loop using a particular statement known as break .PERIOD  When the break statement is encountered ,COMMA  the execution breaks out of the inner most loop .PERIOD  So ,COMMA  what is a loop ?QUESTIONMARK  So far we have seen while loop ,COMMA  do-while loop ,COMMA  and for loop ;SEMICOLON  later we will see a construct called switch .PERIOD   So ,COMMA  whatever is the inner most loop ,COMMA  notice that we have talked about double loops ,COMMA  we have talked about the while loop within a while loop ,COMMA  we have talked about a for loop within a for loop ,COMMA  whatever is the inner most for loop within which a particular break occurs ,COMMA  it will exit out of that .PERIOD   So ,COMMA  let us write a very simple program which reads all numbers still -1 is seen and adds them up ;SEMICOLON  -1 is excluded .PERIOD  So ,COMMA  you will ,COMMA  you can write a while loop ;SEMICOLON  you have written this before where the while loops test condition was somewhat most sophisticated .PERIOD  Earlier we wrote something like while ,COMMA  if you recall ,COMMA  if you ,COMMA  we had written a loop saying ,COMMA  while (!(a == -1)) .PERIOD  So ,COMMA  this was the earlier loop that we had written .PERIOD   And in this case ,COMMA  let us write a similar program ,COMMA  but with a simpler test expression which is just while 1 .PERIOD  So ,COMMA  you always enter the loop ,COMMA  no matter what number you read .PERIOD  So ,COMMA  initialize the variable sum to 0 ,COMMA  declare the integer variable a ,COMMA  and then you enter the while loop because the test is true ;SEMICOLON  you scan a number ;SEMICOLON  and here is a use of the break statement .PERIOD   If the scanned number is -1 you break out of the loop ;SEMICOLON  if it is not -1 ,COMMA  you go to the next statement which is sum = sum + a .PERIOD  So ,COMMA  you add the number .PERIOD  Again you go back to the loop ;SEMICOLON  the test condition is always true ,COMMA  so ,COMMA  you enter and read the next number .PERIOD  So ,COMMA  the net effect of the loop is that whenever you see a -1 ,COMMA  it immediately exits out of a loop ;SEMICOLON  otherwise ,COMMA  it adds that number to the loop .PERIOD  So ,COMMA  let us look at using a sample input .PERIOD  Initially ,COMMA  a ,COMMA  is undefined ;SEMICOLON  it is just declared .PERIOD  So ,COMMA  it has some garbage value .PERIOD  And sum is initialized to 0 .PERIOD  Let us say that the input is 5 ,COMMA  3 ,COMMA  2 ,COMMA  -1 .PERIOD  While 1 ,COMMA  so ,COMMA  1 is true ;SEMICOLON  therefore ,COMMA  you enter the while loop ;SEMICOLON  you scan f ,COMMA  the first number .PERIOD  So ,COMMA  a ,COMMA  becomes 5 ;SEMICOLON  a ,COMMA  is not -1 .PERIOD  Therefore ,COMMA  you go to sum = sum + a .PERIOD  So ,COMMA  sum becomes 5 .PERIOD   And then you go back to the while loop ;SEMICOLON  the test condition is still true ,COMMA  while 1 .PERIOD  So ,COMMA  you read the next number 3 ;SEMICOLON  3 is not -1 .PERIOD  So ,COMMA  you add it to the sum ;SEMICOLON  sum becomes 8 .PERIOD  And you go back ;SEMICOLON  the same thing occurs .PERIOD  So ,COMMA  you have the third number read which is 2 ;SEMICOLON  add it to the sum ,COMMA  and sum becomes 10 .PERIOD  Then you read the next number ;SEMICOLON  and now ,COMMA  a ,COMMA  is -1 .PERIOD  So ,COMMA  what happens ?QUESTIONMARK  The ,COMMA  if condition ,COMMA  the expression within the if statement is true ;SEMICOLON  and you execute the statement inside the if condition ,COMMA  the statement is break .PERIOD   So ,COMMA  recall that the rule of break says that exit out of the inner most loop .PERIOD  So ,COMMA  in particular ,COMMA  what is the inner most loop ?QUESTIONMARK  You look ,COMMA  you starting from here ,COMMA  and imagine that you are going outwards towards the top of the program .PERIOD  The first loop that you will encounter on its way that is the loop that you will exit out of… In particular ,COMMA  break does not mean that exit out of the if condition ;SEMICOLON  break means that exit out of the first loop that you see when you start from the statement and work outwards .PERIOD  So ,COMMA  that is this while loop .PERIOD  Break means you will exit out of that while loop and print this statement .PERIOD  So ,COMMA  you will print that the output is 10 .PERIOD  So ,COMMA  let we have been dealing with integers for a long time .PERIOD  Let us write a small program using characters .PERIOD  So ,COMMA  here is a problem ,COMMA  and let us say that we are writing a very simple editor .PERIOD  Now ,COMMA  the editor has the following property .PERIOD  There are a particular number of maximum characters that you can read ;SEMICOLON  maybe it is 1000 .PERIOD  So ,COMMA  you can type in a bunch of characters until one of the two conditions occur ;SEMICOLON  either you enter a blank line by itself which is indicating that I am done entering the text or you enter more than the maximum number of characters available .PERIOD   So ,COMMA  recall ,COMMA  there are two conditions for exiting out of our so called editor ;SEMICOLON  you can type a lot of characters ,COMMA  if your limit was 1000 and you exit 1000 then you cannot type in any more characters ,COMMA  and you exit .PERIOD  Otherwise ,COMMA  if you are within 1000 characters but you entered a blank line that is indicating that you are done ,COMMA  you have nothing more to enter ,COMMA  then also you should exit .PERIOD  So ,COMMA  there are two conditions .PERIOD  Let us try to write this code .PERIOD   So ,COMMA  you have maximum characters .PERIOD  And let us say ,COMMA  I scan that .PERIOD  Then an ,COMMA  i ,COMMA  which counts how many characters I have read so far ;SEMICOLON  so ,COMMA  i should initialize to 0 .PERIOD  And then there is a current character ,COMMA  and then there is a previous character .PERIOD  So ,COMMA  I will initialize current to the new line character .PERIOD  Now ,COMMA  there is a particular reason for that which will become clear later .PERIOD  So ,COMMA  you should initialize current to a particular character .PERIOD   And then what I do is ,COMMA  use the getchar function .PERIOD  So ,COMMA  getchar function reads a particular character from the input and stores it in some variable if you need to .PERIOD  Instead you can also say something like scanf %c ,COMMA  and some ,COMMA  into some variable .PERIOD  So ,COMMA  you can do either of these two things .PERIOD  And they are almost equal .PERIOD  So ,COMMA  you read one more character .PERIOD  Now ,COMMA  what should you do ?QUESTIONMARK  You initialize by starting from 0 .PERIOD  So ,COMMA  you have read no characters until now .PERIOD  And until you read maximum member of characters ,COMMA  so you execute this loop .PERIOD  Remember that I said that for loop is good when you know the number of iterations in advance .PERIOD  So ,COMMA  we know that atmost we will execute maximum number of character times because that is the maximum number of characters we are allowed to field .PERIOD  So ,COMMA  for loop is slightly better than a while loop .PERIOD  You can also do it using a while loop if you want .PERIOD  So ,COMMA  you say for i = 0 ,COMMA  i less than maximum characters ,COMMA  i = i + 1 .PERIOD  Now ,COMMA  we will do this programming style that we should be familiar with right now .PERIOD  So ,COMMA  previous becomes current and current becomes the next character ;SEMICOLON  so ,COMMA  previous equal to current .PERIOD  So ,COMMA  this will store the current character into the variable previous .PERIOD  Then you read the next character using getchar .PERIOD  And as I said before ,COMMA  you can also write equivalently scanf (“%c” ,COMMA  & current) .PERIOD  So ,COMMA  both these are almost equivalent that is a slight difference ,COMMA  but we will it is not important as of now .PERIOD  Now ,COMMA  if current is new line and the previous was new line ,COMMA  so ,COMMA  when will that happen ?QUESTIONMARK  Suppose I write this is a sentence ,COMMA  I will explicitly represent the new line .PERIOD  So ,COMMA  when I press enter I will have a new line character here .PERIOD  And when will a blank line occur ?QUESTIONMARK  When the next character is also new line .PERIOD  So ,COMMA  by a blank line what I mean is that the current sentence is over ,COMMA  so I press a new line ;SEMICOLON  and the next character on the next line is also a new line ;SEMICOLON  that is what is actually meant by a blank line .PERIOD   So ,COMMA  when that happens then we know that an empty line has been encountered ;SEMICOLON  and here is the important thing break because one of the conditions to exit out of that loop was that either at maximum number of characters is encountered or a blank line is encountered .PERIOD  So ,COMMA  you may not have encountered maximum number of characters ,COMMA  but you have encountered a blank line .PERIOD  So ,COMMA  you should exit out of the proof ,COMMA  exit out of the loop .PERIOD  Again the rule is that break out of the inner most for loop ,COMMA  inner most loop ,COMMA  which in this case is just for loop .PERIOD  So ,COMMA  you get out of that loop and printf a new line .PERIOD   Now ,COMMA  as with many constructs in c ,COMMA  you can avoid break all together .PERIOD  You can write code if you have used break ,COMMA  you can right equivalent logic without using break .PERIOD  So ,COMMA  here is a standard way to do it .PERIOD  So ,COMMA  here is the code that we just dealt with .PERIOD  It had 2 exit conditions - one is that the number of characters that you read is greater than the maximum allowed ;SEMICOLON  another exit condition was that you had entered a blank line .PERIOD  So ,COMMA  here we used the break statement .PERIOD   And now I want to write an equivalent loop without using the break statement .PERIOD  And here is a very standard programmatic style .PERIOD  These are known as flags .PERIOD  So ,COMMA  flag is just a variable which indicates that a particular condition has occurred .PERIOD  Initialize flag to just 0 .PERIOD  In our code ,COMMA  what flag is supposed to do is that it will indicate whether a blank line has occurred or not .PERIOD  So ,COMMA  let us first look at the body of the loop ;SEMICOLON  without looking at the loop head first .PERIOD  Let us just look at the body of the loop .PERIOD  So ,COMMA  it is similar to what went before .PERIOD  Instead of the break statement ,COMMA  what I will do is ,COMMA  if I realize that an empty line has happened then I will set flag to 1 ;SEMICOLON  notice that flag was initially 0 .PERIOD   So ,COMMA  flag = 1 will indicate that an empty line has been seen .PERIOD  Now ,COMMA  I will modify the loop as follows .PERIOD  Remember that the test condition here is just that maximum number of characters has occurred .PERIOD  Instead ,COMMA  I will check for two conditions in the for loop .PERIOD  I will check that maximum number of characters have not occurred ,COMMA  and I will also check that flag is not 1 because flag is 1 means that a new line ,COMMA  a blank line has been encountered .PERIOD  So ,COMMA  I will check for both these conditions in the for loop itself .PERIOD  If either of them is true that is ;SEMICOLON  sorry ,COMMA  if either of them is false that is if i is greater than or equal to maximum characters ,COMMA  or flag = 1 ,COMMA  then the test condition will become false and you will exit out of the loop .PERIOD  So ,COMMA  here is a standard way to avoid a break .PERIOD  And notice that this condition is negated in the for loop because the condition in the for loop is the condition for entering the loop .PERIOD  So ,COMMA  to exit out of the loop you need flag = 1 .PERIOD  So ,COMMA  in summary ,COMMA  what I want to say is that if you want to write a code using break ,COMMA  you can also write it without using break .PERIOD  One of the standard way to do it is by using a flag variable for whatever condition that we want to check .PERIOD  You can pick either of this style whichever suits you more .PERIOD  So ,COMMA  how do we decide whether to use the break statement or not ?QUESTIONMARK  Sometimes the use of the break statement can simplify the exit condition .PERIOD  And on the other hand ,COMMA  it could also make the code a bit harder to read .PERIOD  What do I mean by harder to read ?QUESTIONMARK  When I see the for loop in the code on the right hand side ,COMMA  it is clear that there are two ways to exit out of the for loop - one is i greater than or equal to maximum characters ,COMMA  the other is flag = 1 .PERIOD  Just by looking at the for loop ,COMMA  I can say that ,COMMA  ok ,COMMA  here are the two conditions for which the loop will terminate - i greater than are equal to maxchar ,COMMA  or flag = 1 .PERIOD  On the other hand ,COMMA  if you look at this left hand side code ,COMMA  I actually have to look at the body of the code to realize what are the ways of exiting out of loop .PERIOD  So ,COMMA  you have to understand the body of the loop in order to see what are the conditions for the loop to exit .PERIOD  It is not just i greater than or equal to maxchar .PERIOD  So ,COMMA  in that sense ,COMMA  the code with break is harder to understand than the code without break .PERIOD  It still recommended to use break when you have two or more exit conditions out of a for loop .PERIOD  So ,COMMA  typically programmers do use break and it is just a matter of style whether you we will use break or not ;SEMICOLON  I myself prefer using a break .PERIOD  One final thing about the break statement ;SEMICOLON  when you use break statement initially ,COMMA  it is important to notice that break causes an exit immediately out of the loop .PERIOD  So ,COMMA  remember when you have a for loop ,COMMA  the normal execution order is you initialize ,COMMA  then you test .PERIOD  So ,COMMA  this is step 1 ,COMMA  this is step 2 ,COMMA  then you execute the body of the loop that step 3 ,COMMA  and then you update this is step 4 ,COMMA  and then go back to the test condition .PERIOD  So ,COMMA  this is the normal execution order of the loop .PERIOD  When you encounter a break ,COMMA  you exit immediately out of the loop .PERIOD  In particular ,COMMA  when you break you do not go back to the update statement .PERIOD  So ,COMMA  let us examine what this code will do ?QUESTIONMARK  You have ,COMMA  i = 0 ,COMMA  i<10 ;SEMICOLON  increment i .PERIOD  So ,COMMA  you start with i = 0 ;SEMICOLON  i%2 will be 0%2 which is 0 .PERIOD  So ,COMMA  it will say ,COMMA  ok fine ,COMMA  you need not get into the if condition .PERIOD   Then i = i + 1 ;SEMICOLON  so ,COMMA  i equal to 1 ;SEMICOLON  1 < 10 ;SEMICOLON  you enter the for loop ;SEMICOLON  1%2 is 1 ;SEMICOLON  so ,COMMA  you will break .PERIOD  When you break you immediately get out of a loop .PERIOD  So ,COMMA  when you print this then i will be 1 .PERIOD  So ,COMMA  in particular ,COMMA  i is not 2 ,COMMA  which is what will happen if you go back and update i = i + 1 ,COMMA  before exiting out of the loop .PERIOD  So ,COMMA  the important thing to notice is that it is not 2 ,COMMA  since i = i + 1 is not done when you break .PERIOD  When you break you get out the loop immediately without doing the update state .PERIOD   We have seen the break statement ,COMMA  which is a statement used when you are in the middle of a loop and you encounter a condition and you want to exit the inner most loop .PERIOD  There will also be occasions in a program ,COMMA  when you are in the middle of a loop and you encounter some condition and then ,COMMA  you realize that you do not need to execute this iteration ,COMMA  you just can go to the next iteration .PERIOD  So ,COMMA  skip the current iteration .PERIOD  The break statement was ,COMMA  you encounter a condition and you say ,COMMA  I am done ,COMMA  I will exit out of the inner most loop .PERIOD  Here ,COMMA  it is not exiting out of the inner most loop ,COMMA  it just skipping the current iteration .PERIOD  For this ,COMMA  we will see the continuous statement and let us motivate this by an example .PERIOD   So ,COMMA  continue the statement causes the next iteration of the closest enclosing for while or do while loop .PERIOD  Let us motivate it with a very simple example .PERIOD  Let us say that we are reading numbers coming in a stream and what we have to do is to skip the negative numbers .PERIOD  So ,COMMA  we have to read all the positive numbers and reading should be finally over ,COMMA  when you encounter some input which is not a number .PERIOD  How do we do this ?QUESTIONMARK  Let us imagine that you have the main and things like that written and the central part of the code can be analyzed as follows .PERIOD  So ,COMMA  you have integer variable a and let us examine the code in closer details .PERIOD  So ,COMMA  what we need to do is ,COMMA  we may have an input sequence that looks like this ,COMMA  1 ,COMMA  -1 ,COMMA  2 and then  .PERIOD  .PERIOD  So ,COMMA  let us say that the input sequence is something like this .PERIOD  What we will do is ,COMMA  we will do this scanf operation to get the numbers .PERIOD  So ,COMMA  scanf operation will read the first entry as 1 ,COMMA  it will read the second entry as 1 .PERIOD  The third entry as -1 and the third entry is 2 and so ,COMMA  on .PERIOD  So ,COMMA  that is what is scanf( “%d” ,COMMA  &a ) ,COMMA  we are already familiar with this .PERIOD  But ,COMMA  what does = 1 mean ?QUESTIONMARK  So ,COMMA  this is something that we have not uncounted .PERIOD  So ,COMMA  far the scanf statement has a return value ,COMMA  it gives you the number of inputs that was successfully read .PERIOD  For example ,COMMA  we are trying to read an integer in the %d specifier .PERIOD  So ,COMMA  when we try to read the first entry ,COMMA  it should succeed .PERIOD  So ,COMMA  this will succeed ,COMMA  when you try to read the second entry ,COMMA  it should succeed ,COMMA  when you try to read the third entry ,COMMA  it should succeed .PERIOD  In all these ,COMMA  the scanf %d will return a 1 .PERIOD  Because ,COMMA  one entry has been read correctly .PERIOD  Here ,COMMA  it will fail ,COMMA  because it tries to read a natural number here ,COMMA  but what it see is a  .PERIOD  ,COMMA  a full stop character and that is not a number .PERIOD  So ,COMMA  scanf %d will simply fail .PERIOD  So ,COMMA  this is what I said ,COMMA  it returns the number of conversions that have been successfully made .PERIOD  So ,COMMA  when you try to read an input like 1 ,COMMA  -1 ,COMMA  2 ,COMMA   .PERIOD  it was succeed in a first three scanf and the last scanf ,COMMA  it will fail .PERIOD  So ,COMMA  that is what the scanf is supposed to do .PERIOD  So ,COMMA  as long as you have read a number .PERIOD  So ,COMMA  while you have read a number ,COMMA  you examine whether it is a positive number .PERIOD  If it is a negative number that is ,COMMA  if a < 0 ,COMMA  then you say continue which is saying that ,COMMA  I do not need to execute the remaining part of the loop .PERIOD  So ,COMMA  this part of the loop will be skipped ,COMMA  if a < 0 .PERIOD  Continue means ,COMMA  go from here and start executing the next iteration of the loop .PERIOD  Let us go head and complete the code .PERIOD  So ,COMMA  let us modify the problem as a little bit ,COMMA  read the integers until a non digit is found .PERIOD  And let us do something with the positive integers .PERIOD  Let us say that we have to find the largest of the positive integers .PERIOD  So ,COMMA  what should we do ?QUESTIONMARK  Again ,COMMA  let us try to do it by hand to get a feel for ,COMMA  what I will be doing ?QUESTIONMARK  So ,COMMA  I have 1 -1 2  .PERIOD  .PERIOD  Let us say that I initialize the maximum to some reasonable value .PERIOD  Since ,COMMA  we are looking at the largest of the positive integers I can initialize maximum to 0 .PERIOD  Then ,COMMA  I look at the first one ,COMMA  the maximum read .PERIOD  So ,COMMA  for .PERIOD  So ,COMMA  it is a positive entry ,COMMA  .PERIOD  So ,COMMA  I will update max = 1 .PERIOD  Then ,COMMA  I read the next number and it is a negative numbers ,COMMA  .PERIOD  So ,COMMA  skip it .PERIOD  Then ,COMMA  I read the third number which is a positive number .PERIOD  So ,COMMA  I will update the maximum to 2 .PERIOD  So ,COMMA  this is the part that we want to focus ,COMMA  if it is a negative number ,COMMA  skip .PERIOD  So ,COMMA  here is the code for doing that ,COMMA  while the currently read input is a number ,COMMA  that is why the %d succeeded and one entry was correctly read .PERIOD  So ,COMMA  if the number was read ,COMMA  check whether the number is negative .PERIOD  If the number is negative ,COMMA  continue .PERIOD  Continue means go to the next iteration of the loop .PERIOD  Do not do ,COMMA  what is remaining in the loop .PERIOD  So ,COMMA  if the currently read number is non negative ,COMMA  what you will check whether their current maximum is less than the new number .PERIOD  If it is less than the new number ,COMMA  you reset the maximum to the new number .PERIOD  So ,COMMA  this is the code that we have written similar to other codes that we have seen .PERIOD  So ,COMMA  you update the maximum number and go and read the next number .PERIOD  If the currently read number is negative ,COMMA  then we will say continue .PERIOD  So ,COMMA  we will not update the maximum .PERIOD  This is what the continue is supposed to be .PERIOD  Now ,COMMA  as in break you can also write equivalent code without using the continuous statement .PERIOD  So ,COMMA  let us try to do that and for doing that all we have do is ,COMMA  make sure that the maximum is updated only if it is a non-negative number .PERIOD  So ,COMMA  this says if it is a negative number ,COMMA  do not do the next statement .PERIOD  This says ,COMMA  if it is a non-negative number ,COMMA  then update maximum if necessary .PERIOD  So ,COMMA  it can be written with one more level of nested if .PERIOD  So ,COMMA  this is that if a is non-negative ,COMMA  then execute the next statement .PERIOD  Here .PERIOD  it says that if a is negative ,COMMA  then continue which means skip to the next statement .PERIOD  So ,COMMA  notice that these two conditions are the negations of each other .PERIOD  The long and short of it is that continue is not really necessary .PERIOD  But ,COMMA  if you have it ,COMMA  then it is useful and it makes the code clearer in certain occasions .PERIOD  What happens to continue in a for loop ?QUESTIONMARK  Noticed that ,COMMA  for loop has the following form ,COMMA  you have for ,COMMA  then there is an initialization expression .PERIOD  Then ,COMMA  there was a test and finally ,COMMA  there was update and then ,COMMA  you have the body of the loop .PERIOD  What happens if you encounter a continue in the middle of the loop ?QUESTIONMARK  In the case of a while loop ,COMMA  it is very clear ,COMMA  you go to the test expression ,COMMA  you go to the next iteration .PERIOD  The only contention is ,COMMA  in the case of a for loop ,COMMA  do you go to the update statement ?QUESTIONMARK  And the answer is yes ,COMMA  then you skip the remaining part of the loop .PERIOD  So ,COMMA  this is the remaining part of the loop that you would skipped .PERIOD  When you skip that you go directly to the update statement .PERIOD  Notice that ,COMMA  when you do the break .PERIOD  So ,COMMA  if the statement has a break ,COMMA  you break immediately out of the loop without doing the update .PERIOD  In the case of a continue ,COMMA  you have to do the update .PERIOD  And as with the break statement ,COMMA  the continue statement is also redundant ,COMMA  you can program without using the continue statement as well .PERIOD  But ,COMMA  it is useful if whereas ,COMMA  already a few levels of nesting of the if statements inside it .PERIOD  We saw in the previous slide that ,COMMA  you could avoid continue statement by using an extra level of nested if statement .PERIOD  Now ,COMMA  if you do not want to complicate the code in that way ,COMMA  you can use a continues statements .PERIOD  Otherwise ,COMMA  in other cases you may want to exit out of the loop ,COMMA  in that case you can use the break statement .PERIOD  So ,COMMA  they are extra feature that the C language provides ,COMMA  they are not really necessary ,COMMA  but they are used with .PERIOD  Let us do a sample program using continue statements ,COMMA  I will introduce the problem initially ,COMMA  the problem is that of finding Pythagorean triples .PERIOD  By the way Pythagorean triples are numbers like are triplets of numbers like 3 ,COMMA  4 and 5 .PERIOD  Because ,COMMA  you know that  .PERIOD  So ,COMMA  the Pythagorean triples because there can be a right triangle ,COMMA  where let say the base 3 ,COMMA  the altitudes is 4 and the hypotenuse is 5 .PERIOD  So ,COMMA  3 ,COMMA  4 and 5 could be the sides of right triangle ,COMMA  because they satisfy the Pythagorean identity .PERIOD  So ,COMMA  here is a problem we a given a stream of numbers and let us say there are n numbers .PERIOD  So ,COMMA  the initial number says how many other numbers there are .PERIOD  So ,COMMA  8 says that there are 8 numbers to process ,COMMA  after you read n ,COMMA n >=2 ,COMMA  you have to read n integers and then you have to identify Pythagorean triplets occurring consecutively .PERIOD  By consecutively we will say that consecutive positive integers .PERIOD  Because ,COMMA  in the middle there could be negative numbers sees you have to just ignore them .PERIOD  For example ,COMMA  you have that 3 ,COMMA  4 and 5 are consecutive ,COMMA  positive entries in this data .PERIOD  Because ,COMMA  -3 ,COMMA  -4 and -5 are negative numbers .PERIOD  So ,COMMA  consecutive in this context need not mean that they occur together ,COMMA  it just means that ,COMMA  if we ignore the negative numbers and between then they are together .PERIOD  So ,COMMA  we have to identify all such Pythagorean triples .PERIOD  So ,COMMA  in this case the Pythagorean triple in the input sequence is 3 ,COMMA  4 and 5 .PERIOD  So ,COMMA  let us try to code it .PERIOD  I hope you see how it can be done ?QUESTIONMARK  So ,COMMA  let us try to do it my hand .PERIOD  So ,COMMA  let us say that I have and then some negative numbers in between and so on .PERIOD  So ,COMMA  some positive numbers ,COMMA  some negative numbers in between till I find the .PERIOD  .PERIOD  .PERIOD  So ,COMMA  I have let us if four ,COMMA  six numbers .PERIOD  So ,COMMA  the input is of the following for what I need to do is ,COMMA  at any point I may have to remember some triple .PERIOD  So for example ,COMMA  the first triple that I will find is the following .PERIOD  So ,COMMA  this is the first number ,COMMA  this is the second number and this is the third number and what I have to do is to check whether ,COMMA   .PERIOD  So ,COMMA  this is what I have to check ?QUESTIONMARK  Now ,COMMA  suppose that 1 ,COMMA  3 and 4 are not a Pythagorean triple ,COMMA  they are not .PERIOD  Because ,COMMA   is not  .PERIOD  Then ,COMMA  what do you have to do ?QUESTIONMARK  You have to advance all these first ,COMMA  second and third variables .PERIOD  So ,COMMA  let us try to advance the third variable ,COMMA  the next interesting number is 5 ,COMMA  because that is the next positive number .PERIOD  So ,COMMA  the next iteration should check for the following ,COMMA  this should be the third number ,COMMA  4 should be the second number and 3 should be the first number .PERIOD  If you do that ,COMMA  then you know that  and you will indentify a Pythagorean triple .PERIOD  So ,COMMA  what we do is ,COMMA  that we have to shift all these variables ,COMMA  first ,COMMA  second and third by one positive entry .PERIOD  So ,COMMA  this is what we have to do ,COMMA  we have to remember three numbers ,COMMA  the current number that we have seen ,COMMA  the previous positive number that we have seen and the previous to previous positive number that we have seen .PERIOD  So ,COMMA  this is one situation where you need to remember three variables .PERIOD  And once you check whether the current triplets satisfy it ,COMMA  if you satisfy it fine .PERIOD  If you do not satisfy it ,COMMA  you have to advance the variables by one .PERIOD  So ,COMMA  first will take over second ,COMMA  second will take over third and third will go to the next positive number .PERIOD  So ,COMMA  this is the method of programming this ,COMMA  let us try to code this out .PERIOD  So ,COMMA  we will write the code as follows ,COMMA  we need three variables ,COMMA  the current number ,COMMA  the previous number and the previous to previous number .PERIOD  Currently will leave all of them undefined ,COMMA  n is the number of integers to read ,COMMA  i is we will eventually try to do .PERIOD  So ,COMMA  for the for loop we need a counter .PERIOD  So ,COMMA  I will basically count from 1 to n to ensure that n numbers have been read .PERIOD  I will also have an extra variable call count ,COMMA  i is suppose to count the numbers seen so for and count will count the positive numbers seen ,COMMA  so for .PERIOD  So ,COMMA  I need two half them in this code I mean in that .PERIOD  Now ,COMMA  after you do that you scan the n ,COMMA  which tells you how many numbers are there in the input ?QUESTIONMARK  Now ,COMMA  a for loop has to go here which will do most of the work in the code .PERIOD  So ,COMMA  let us see what that loop looks like ?QUESTIONMARK  So ,COMMA  recall what we did by hand ,COMMA  you will look at the current number which is the next number to read ,COMMA  if the next number is 0 or less than 0 you say continue .PERIOD  So ,COMMA  this is the application of the continue statement here .PERIOD  So ,COMMA  if says if the current number is not positive ,COMMA  you just go onto the next iteration of the loop .PERIOD  Now ,COMMA  here is some logic which is not easy to read ,COMMA  but we can motivate it the following ,COMMA  if the current number that I have seen is the first positive number .PERIOD  When obviously ,COMMA  then this was the first number that I have read .PERIOD  Therefore ,COMMA  there was no previous number and there was no previous to previous number .PERIOD  So ,COMMA  I will because this the first positive number that I am reading ,COMMA  then I will just set there the previous to previous number is the current number ,COMMA  also I have seen one positive number .PERIOD  So ,COMMA  I will say increment count ,COMMA  count = 1 .PERIOD  So ,COMMA  if the current number that I have seen is positive and it is not the first positive number .PERIOD  That means ,COMMA  if count = 1 I already seen one positive number ,COMMA  then what to you do is ,COMMA  you know that there is a previous to previous number ,COMMA  you set the previous number to the current number and you continue the loop setting that count = 2 ,COMMA  which says that I have seen two positive numbers .PERIOD  So ,COMMA  I have a previous to previous number and I have a previous number ,COMMA  now I will read the next number .PERIOD  This is because in order to identify a triple ,COMMA  you need at least three numbers .PERIOD  So ,COMMA  previous to previous and previous should already been to some positive values in the input ,COMMA  this is why we initially said that ,COMMA  we need at least two inputs .PERIOD  So ,COMMA  we will go back to the loop if count = 1 ,COMMA  otherwise let us say that count is at least 2 ,COMMA  so it is 2 or more .PERIOD  So ,COMMA  in this case we will just say that as for as count is consent I do not need to keep track of how many positive numbers are needed ?QUESTIONMARK  It was used only to see that I have at least two positive numbers to begin with .PERIOD  So ,COMMA  that I can add the next number as the possible third number in the triple .PERIOD  So ,COMMA  I will not update count from now one ,COMMA  you can also do that ,COMMA  but count after words serves no purpose .PERIOD  So ,COMMA  I will say that count is 2 and I will just adopt the convention that it will remain to .PERIOD  So ,COMMA  I will seen at least two positive numbers ,COMMA  now I have also a third number in the current .PERIOD  So ,COMMA  you have previous to previous ,COMMA  you have previous and you have current .PERIOD  So ,COMMA  these are the three numbers that you have .PERIOD  So ,COMMA  what you have to check is ,COMMA  whether .PERIOD  So ,COMMA  that is what we will check ,COMMA  we will check whether previous to previous square plus previous square is equal to current square ,COMMA  if that is true then you have found the Pythagorean triple .PERIOD  So ,COMMA  you will just say that I will printf that I have found the Pythagorean triple ,COMMA  which is found by previous to previous ,COMMA  previous and current .PERIOD  Now ,COMMA  what I will do if the Pythagorean triple is found is that I will advance previous to previous by one .PERIOD  So ,COMMA  previous to previous will become previous ,COMMA  previous will become current .PERIOD  So ,COMMA  recall that figure that I first true and then we will go back to the loop .PERIOD  So ,COMMA  this is the code for kind identifying the Pythagorean triples and the encodes exactly the logic that we did by hand .PERIOD  In this session ,COMMA  we will learn about one more fundamental data type in C .PERIOD  So ,COMMA  far we have seen ints and floats .PERIOD  Ints are supposed to represent integers and floats are supposed to represent real numbers .PERIOD  We will see the third most important data type which is character .PERIOD  So ,COMMA  it is called char in c or char .PERIOD  C allows a character data type to be 1 byte that is 8 bits wide ,COMMA  and 1 byte can hold exactly one character .PERIOD  For example ,COMMA  a character may be a digit like 0 so ,COMMA  on up to 9 .PERIOD  It can be lower case letter like a up to z ,COMMA  it can be upper case letter like capital A through capital Z and so ,COMMA  on .PERIOD  Similarly ,COMMA  there are other characters question marks and sharp and so ,COMMA  on .PERIOD  So ,COMMA  how do you declare a character variable ,COMMA  how do you assign it and how do you print or scan it .PERIOD  So ,COMMA  these are the basic operations that you can do with any data type .PERIOD  So ,COMMA  you declare a character variable using the data type char ch will declare variable of name ch and of data type char .PERIOD  In order to assign it to any particular constant ,COMMA  any particular character ,COMMA  what you have to do is ,COMMA  you write ch = ‘A’ .PERIOD  So ,COMMA  this is how you would assign any character in constants .PERIOD  All the character in constants are supposed to be enclosed in this single code .PERIOD  For example ,COMMA  ‘0’ stands for the character 0 and not the number 0 and similarly ,COMMA  a within single code stands for character a .PERIOD  Now ,COMMA  how do you prints print a characters you can use the format specifier %c .PERIOD  So ,COMMA  recall that %d prints an integer and %f prints of float ,COMMA  we have the third fundamental data type which is character which can be printed using a %c .PERIOD  So ,COMMA  if you say print f %c ch ,COMMA  it will print a .PERIOD  There is also an abbreviator notation where as soon as you declare the variable ,COMMA  you can initialize it using character ch equal to a .PERIOD  This is similar to saying int I equal to zero .PERIOD  It is the same concept .PERIOD  Now ,COMMA  what can we do with a character data type ?QUESTIONMARK  For example ,COMMA  we can assign character constants to those characters variables .PERIOD  Now ,COMMA  what does a character variable mean ?QUESTIONMARK  Here is the first surprise .PERIOD  The value of a character constant is an integer that the machines represent ,COMMA  machine stores which is usually the ASCII set .PERIOD  What does this mean ?QUESTIONMARK  The machine deals with fundamentally bits .PERIOD  So ,COMMA  you have a data field which is 8 bits wide and this is sequence of bits say 1 0 1 1 0 1 1 1 .PERIOD  Now ,COMMA  here is the bit pattern and if you see that this bit pattern is a char ,COMMA  then the machine takes this integer ,COMMA  takes this bit pattern as an integer and looks up a table known as the ASCII set table and sees which character it is .PERIOD  So ,COMMA  the value of the character constant is actually an integer .PERIOD  What does that integer represents ?QUESTIONMARK  The integer represents a particular entry in an ASCII character table and what entry is in that particular location ,COMMA  that is the character constant .PERIOD  So ,COMMA  think of it like the following .PERIOD  The character is just an uninterpreted sequence of bites .PERIOD  If you tell the machine ,COMMA  please read this as an integer ,COMMA  it will read this as an integer .PERIOD  If you read this ,COMMA  if you tell the machine please read this as a character ,COMMA  it will take that integer ,COMMA  go look up the ASCII table and see that this integer stands for the character c and prints that .PERIOD  So ,COMMA  by itself the bit pattern can be interpreted in multiple ways .PERIOD  So ,COMMA  here is a surprising thing which is different from natural language .PERIOD  There are certain natural languages where this does not typically happen with Indian languages ,COMMA  but there are certain languages where you have a character and how you read it depends on where you saw it .PERIOD  So ,COMMA  if it was in the middle of a text ,COMMA  then this is an alphabet .PERIOD  If you saw this in the middle of a numbers sequence ,COMMA  then it is a number .PERIOD  What happens in the machine is somewhat similar .PERIOD  You have a bit sequence and this thing is interpreted as a character by looking up the ASCII set .PERIOD  ASCII stands for American Standard Code for Information Interchange ,COMMA  and it is one of the popular encodings for characters used in computers .PERIOD  So ,COMMA  the code chart looks something like this .PERIOD  You have 256 characters and characters can be looked up in a table .PERIOD  The table entries are in hexadecimal so ,COMMA  base 16 .PERIOD  We will come to that little in the course why basic 16 is convenient ,COMMA  ,COMMA  but there are 8 rows and 16 columns in the table .PERIOD  So ,COMMA  in base 16 notation ,COMMA  a stands for 10 ,COMMA  b stands for 11 ,COMMA  c for 12 so ,COMMA  on up to f for 15 .PERIOD  So ,COMMA  this is what is meant by base 16 notation .PERIOD  So ,COMMA  let us look at what does the number 7 a represent .PERIOD  7 a is row 7 column number 10 .PERIOD  So ,COMMA  that is the number that I am interested in .PERIOD  What does 7 a represents ?QUESTIONMARK  It means 7 times 16 plus 10 .PERIOD  So ,COMMA  in base 10 notations ,COMMA  the number 76 let us say so ,COMMA  if I have this number 7 in base 10 notation ,COMMA  this ;SEMICOLON  obviously ,COMMA  stands for the numerical values 7 into 10 plus 6 .PERIOD  Similarly ,COMMA  in base 16 notation ,COMMA  7 a stand for 7 into 16 plus 10 .PERIOD  Remember that a is 10 .PERIOD  So ,COMMA  you have 112 and similarly ,COMMA  hexadecimal 2 3 .PERIOD  So ,COMMA  row 2 column 3 for example ,COMMA  hexadecimal 2 3 means look up 2 time 16 plus 3 ,COMMA  the 35th entry in the table .PERIOD  Now ,COMMA  here is the structure of the ASCII code set that you use in c ,COMMA  the first 32 characters basically from 0 0 hexadecimal to 1 f hexadecimal .PERIOD  So ,COMMA  these 32 characters which are shaded ,COMMA  are what are known as special characters ,COMMA  and they are not printable .PERIOD  They are required by the computer for certain special purposes .PERIOD  Code 2 0 that is decimal 32 ,COMMA  2 0 is 2 times 16 plus 0 .PERIOD  So ,COMMA  this particular entry corresponds to the space characters .PERIOD  So ,COMMA  this is just a blank space .PERIOD  Code 21 corresponds to the exclamation character and so ,COMMA  on .PERIOD  So ,COMMA  the printable characters in the ASCII code are hexadecimal 20 ,COMMA  that is decimal 32 until 126 .PERIOD  So ,COMMA  what is enclosed in the green parenthesis ,COMMA  these are all printable characters .PERIOD  Now ,COMMA  out of this ,COMMA  the capital letters start from x 41 which is 65 in decimal and go on up till decimal 90 .PERIOD  Small letters start from 97 and go on till 122 and so ,COMMA  on digits 0 to 9 occur before any character .PERIOD  So ,COMMA  why we need this information ?QUESTIONMARK  This is how the characters are stored in the computer and do we really need to know it ?QUESTIONMARK   The point is not that you have to memorize this table .PERIOD  You do not need to memorize the table ,COMMA  but you need to remember certain abstract properties of the table .PERIOD  We will make that precise in a moment .PERIOD  We do not have to say that the ASCII code for a is 65 or 42 that is a waste of our memory .PERIOD  So ,COMMA  let us just see what we can do with this table without really remembering what that table looks like .PERIOD  So ,COMMA  there are some ideas behind the design of the table ,COMMA  how the table is structured which c programmers can use .PERIOD  There is no need to remember that a particular character has a particular ASCII value .PERIOD  So ,COMMA  let us just recall .PERIOD  A character constant is an integer ,COMMA  namely the ASCII code for that character now which means that I will emphasize this with a very strange code .PERIOD  I can declare character ch and say char ch =‘A’ that ;SEMICOLON  obviously ,COMMA  initializes the character to a .PERIOD  It assigns the value a to the variable ch ,COMMA  but I could also do the following characters ch = 65 .PERIOD  Why 65 ?QUESTIONMARK  The ASCII value for a was 65 .PERIOD  So ,COMMA  instead of writing it as a within single code ,COMMA  I can write ch = 65 ,COMMA  and it will be the correct ASCII character anyway .PERIOD  Now ,COMMA  this means that the same character can also be interpreted as an integer if you really want to think of it that way .PERIOD  So ,COMMA  for example ,COMMA  I can say %f %c ch if I do it in print f ,COMMA  it will print it as .PERIOD  So ,COMMA  the first print f will print a ,COMMA  but I could also take a character variable and ask c to print it as an integer using %d ,COMMA  it will print 65 .PERIOD  So ,COMMA  remember that the external form that we see in some sense is the letter a .PERIOD  The internal representation is the number 65 because 65 is the entry in the ASCII table corresponding to the character a .PERIOD  Now ,COMMA  one more thing is that you can print arbitrary numbers ,COMMA  even non-printable characters you can sort of print them using c and one way to do that is I can print any 8 bit character with a hexadecimal representation like \s ,COMMA  \x followed by the hexadecimal to digit .PERIOD  For example ,COMMA  \x followed by 7 is the bell character .PERIOD  So ,COMMA  let me go back a couple of times ,COMMA  couple of slides .PERIOD  So ,COMMA  if you look at the 7th entry in the ASCII table ,COMMA  it is represented as bell .PERIOD  It is a small bell in your system .PERIOD  So ,COMMA  if you ask the system to print the 7th character in the ASCII table ,COMMA  what will happen is that your computer will make a small beep sound .PERIOD  So ,COMMA  there are certain non-printable characters which can also be printed directly using… ok .PERIOD  Similarly ,COMMA  let say \xb is the 11th number in the ASCII table ,COMMA  it is a vertical space .PERIOD  So ,COMMA  if you print that character ,COMMA  it prints a vertical space .PERIOD  Similarly ,COMMA  if I ask it to print hexadecimal 41 using \x41 so ,COMMA  x 41 is 4*16 + 1 which is 64 + 1=65 and we just saw that ASCII value 65 was the character a .PERIOD  So ,COMMA  if I ask it to print ch which is hexadecimal 41 as a character ,COMMA  then it will print the value a .PERIOD  So ,COMMA  when you run this program ,COMMA  what it will do is ,COMMA  first because you ask it to print a bell character ,COMMA  it will beep once ,COMMA  it will ring the bell and then ,COMMA  it will print the second character which is a vertical space .PERIOD  So ,COMMA  it will print a vertical space and then ,COMMA  the third character was a printable character a ,COMMA  it will print a .PERIOD  So ,COMMA  you can ask the system to print arbitrary entries in the ASCII table .PERIOD  If it is a printable character ,COMMA  it will print that corresponding character .PERIOD  If it is non-printable character ,COMMA  it might take a suitable action .PERIOD  So ,COMMA  just for information sake ,COMMA  instead of printing it as \x followed by the x code ,COMMA  c provides certain escape characters ,COMMA  some special sequences as well in order to print these non-printable characters .PERIOD  First of all until now we have seen one such number which is \n .PERIOD  So ,COMMA  \n is the new line character .PERIOD  It is a non-printable character ,COMMA  but it corresponds to some ASCII corrected .PERIOD  Similarly ,COMMA  for the other non-printable characters ,COMMA  c has some escape characters .PERIOD  For example ,COMMA  back slash a is the bell character and so ,COMMA  on .PERIOD  In the previous session ,COMMA  we were talking about ASCII character set .PERIOD  And I said that ,COMMA   we do not need to remember the ASCII table .PERIOD  But ,COMMA  we need to remember some general properties of the ASCII table .PERIOD  So ,COMMA  what are those general properties ?QUESTIONMARK  First ,COMMA  we know that the initial 32 characters of the ASCII table are non printable characters .PERIOD  Then ,COMMA  the remaining or rather from ASCII value 32 to ASCII value 126 are printable values .PERIOD  Among them ,COMMA  you know that the integers ,COMMA  the digits are occurring together .PERIOD  Similarly ,COMMA  the capital letters occur consecutively ,COMMA  one after the other .PERIOD  And the small letters occur consecutively ,COMMA  one after the other .PERIOD  So ,COMMA  this is an abstract property of the ASCII code chart that ,COMMA  helps us in writing some useful code .PERIOD  We will see in a minute ,COMMA  what kind of use we can obtain using these general properties .PERIOD  Rather ,COMMA  than knowing the specific things like ,COMMA  the character value of A is hex value 41 or decimal value 65 .PERIOD  This kind of information ,COMMA  we need not remember this .PERIOD  For example ,COMMA  let us write a small program that prints… In our previous session ,COMMA  we had said that ,COMMA  we do not need to remember the exact ASCII code of certain characters .PERIOD  We just need to remember some abstract properties of the ASCII table .PERIOD  For example ,COMMA  abstract properties like all the digits occur together from 0 to 9 .PERIOD  All the capital letters from A to Z occur together in the table ,COMMA  in the alphabetical order .PERIOD  Similarly ,COMMA  all the small letters occur together in consecutive locations in the ASCII table .PERIOD  Also ,COMMA  another property that you can observe is that ,COMMA  the small letters occur after all the capital letters .PERIOD  Let us see ,COMMA  how we can write some interesting code using these properties .PERIOD  And not by remembering the exact ASCII code of certain letters .PERIOD  So ,COMMA  let us write a simple program ,COMMA  to print the alphabet .PERIOD  The ASCII codes of the upper case letters are consecutive and the ASCII codes of the lower case letters are consecutive .PERIOD  This is the property that ,COMMA  we will exploit in order to print the alphabet .PERIOD  So ,COMMA  for example ,COMMA  let us say that ,COMMA  we are going to print the letters of the alphabet in capital letters .PERIOD  So ,COMMA  for that we can use the following program using a for loop .PERIOD  So ,COMMA  what you have to do is ,COMMA  to initialize a particular character variable to capital letter A so ,COMMA  the ASCII character A .PERIOD  So ,COMMA  note that A within single codes stands for the character constant A .PERIOD  If you look at the integer value ,COMMA  then it is the ASCII code for A .PERIOD  We are not particularly interested to know ,COMMA  what exactly the number is .PERIOD  Now ,COMMA  we can write the for loop in an interesting way .PERIOD  We can say that ,COMMA  start from capital A and then ,COMMA  print the characters until you hit capital Z .PERIOD  And the update statement is ,COMMA  after printing go to the next ASCII letter .PERIOD  So ,COMMA  what this is doing is ,COMMA  starting from A and then ,COMMA  it will go to A + 1 ,COMMA  which is the ASCII code for B .PERIOD  Then ,COMMA  it will go to B + 1 ,COMMA  which is the ASCII code for C ,COMMA  so on up till Z .PERIOD  So ,COMMA  once you reach Z ,COMMA  it will print that character .PERIOD  It will update once more ,COMMA  where it is the ASCII character one more than ,COMMA  the ASCII character next to Z in the ASCII table .PERIOD  We do not really need to know ,COMMA  what it is .PERIOD  But ,COMMA  certainly it will be greater than the ASCII value of Z and at that point ,COMMA  we will exit the code .PERIOD  So ,COMMA  the output of it will be consecutively A to Z .PERIOD  Let us look at ,COMMA  what is happening here in greater detail .PERIOD  All the characters are stored as 8 bit integers .PERIOD  Now ,COMMA  they can be assigned as integers ,COMMA  incremented ,COMMA  decremented ,COMMA  etcetera because ,COMMA  essentially they behave like integers .PERIOD  So ,COMMA  suppose A has ASCII code 65 ,COMMA  but we are not concerned about that .PERIOD  Now ,COMMA  so ch equal to character constant A ,COMMA  sets c h equal to 65 .PERIOD  Now ,COMMA  ch + 1 is the number 66 ,COMMA  which corresponds to the ASCII code of B .PERIOD  So ,COMMA  addition ,COMMA  subtraction all these can be performed on character values because ,COMMA  internally they are represented as 8 bit integers .PERIOD  Similarly ,COMMA  relational operations like less than ,COMMA  greater than ,COMMA  <= ,COMMA  >= ,COMMA  all of these also make sense .PERIOD  So ,COMMA  for example ,COMMA  if we use the relational expression capital letter A ,COMMA  ASCII constant A less than character constant B .PERIOD  Then ,COMMA  notice that A is the ASCII value 65 and B is the ASCII value 66 .PERIOD So ,COMMA  A less than B is correct .PERIOD   Now ,COMMA  for realizing that A less than B is correct ,COMMA  we do not need to know that ,COMMA  A is 65 and B is 66 .PERIOD  All we know is that ,COMMA  the abstractly in the ASCII table ,COMMA  the character code for A is less than the character the code for 6 because ,COMMA  B occurs after A .PERIOD  So ,COMMA  if it is 65 and 66 or it is 0 and 1 ,COMMA  the answer is still the same .PERIOD  Now ,COMMA  let us write a few more interesting programs ,COMMA  where the spirit is that ,COMMA  we do not need to understand what the exact ASCII code of a letter is .PERIOD  But ,COMMA  just we want to remember the layout of the ASCII table .PERIOD  For example ,COMMA  suppose I want to write a conditional expression an if condition ,COMMA  which says that ,COMMA  if the given character is capital letter ,COMMA  then print that ,COMMA  it is in upper case .PERIOD  So ,COMMA  all I need to do is ,COMMA  if the character value is >= the character constant A and <= the character constant Z .PERIOD  Then ,COMMA  you print that ,COMMA  the given letter is in upper case .PERIOD  Again ,COMMA  please remember that we did not need to know that ,COMMA  this was 65 and this was ,COMMA  whatever it is 90 .PERIOD  It could as well have been 0 and 25 .PERIOD  It would still have worked because ,COMMA  all we are need to remember in the ASCII table is that ,COMMA  A through Z occurs in consecutive locations in the standard alphabetical order .PERIOD  From that we can understand that ,COMMA  if I write this if expression ,COMMA  it will print up the message upper case ,COMMA  only if the given character ch is an upper case letter .PERIOD  Similarly ,COMMA  let us say that ,COMMA  if you want to check whether a character is in lower case .PERIOD  You can analogously write ,COMMA  character is >= ‘A’  ,COMMA  ‘a’ .PERIOD  And it is <= little z ,COMMA  in single quotes .PERIOD  If that is true ,COMMA  then you print that ,COMMA  it is in a lower case .PERIOD  Now ,COMMA  if you want to check whether a given character is a digit ,COMMA  similarly you can say that ,COMMA  it is >= the character 0 .PERIOD  And this is <= the character 9 .PERIOD  Now ,COMMA  here is a suttle point which I hope ,COMMA  you notice .PERIOD  The character 0 is the ASCII constant ,COMMA  ASCII character constant 0 .PERIOD  So ,COMMA  it corresponds to some particular ASCII value .PERIOD  It is different from the number 0 .PERIOD  So ,COMMA  this is something that .PERIOD  .PERIOD  .PERIOD  So ,COMMA  we are looking for the ASCII value corresponding to 0 it is >= that and <= the character value corresponding to that character 9 .PERIOD  So ,COMMA  if that is true ,COMMA  then the given character is a digit .PERIOD  Now ,COMMA  here is a snippet that ,COMMA  I would advise you to take a look at it .PERIOD  And tell me ,COMMA  what it actually does .PERIOD  So ,COMMA  take a moment yourself and try to figure it out .PERIOD  So ,COMMA  what it does is ,COMMA  the given character ch ,COMMA  if it is a lower case letter .PERIOD  Remember ,COMMA  this is the example that we just saw .PERIOD  This condition checks ,COMMA  whether the given character is a lower case letter ,COMMA  a small letter between a and z ,COMMA  little a and little z .PERIOD  If it is true ,COMMA  then what you do is ,COMMA  add capital A - a ,COMMA  to the character .PERIOD  So ,COMMA  what does it accomplish ?QUESTIONMARK  So ,COMMA  let us say that ,COMMA  we actually had c h equal to little a .PERIOD  Now ,COMMA  for the purpose of illustration let us say that little a ,COMMA  was ASCII value 100 .PERIOD  I do not know ,COMMA  whether that is true .PERIOD  But ,COMMA  it is not important .PERIOD  That is ,COMMA  what I want to illustrate .PERIOD  Now ,COMMA  what does capital A represent .PERIOD  It represents some ASCII value let us say 65 .PERIOD  So ,COMMA  if the given character was little a ,COMMA  what I would do is ,COMMA  I would say character = ch - 100 +65 Similarly ,COMMA  if ch was character constant b ,COMMA  I would still add ch = ch - 100 +65 So ,COMMA  it is adding a constant difference to the given character regardless of what ,COMMA  whether it was a or b .PERIOD  The additive constant that we are adding is still the same .PERIOD  And if you think about ,COMMA  what is happening it is adding ,COMMA  exactly the difference between little a and capital A .PERIOD  Notice ,COMMA  that the difference between little b and capital B is the same as little a and capital A .PERIOD  Why ?QUESTIONMARK  Because ,COMMA  all the capital letters occur consecutively and all the small letters occur consecutively .PERIOD  So ,COMMA  suppose a minus z ,COMMA  little a minus capital A is… Let us say 35 ,COMMA  then little b minus capital B will also be 35 ,COMMA  because you advance one in each case .PERIOD  So ,COMMA  if you think for a minute ,COMMA  you will see that what this code does is… Take the ASCII code corresponding to the small letter .PERIOD  And add a constant difference .PERIOD  What is that difference ?QUESTIONMARK  That difference is ,COMMA  what will take you to the capital letter ,COMMA  corresponding capital letter .PERIOD   So ,COMMA  in short what this does is ,COMMA  to convert the given character in lower case letter to an upper case letter .PERIOD  So ,COMMA  if it is a lower case letter ,COMMA  it will convert it to an upper case letter .PERIOD  Otherwise ,COMMA  it does nothing .PERIOD  Now ,COMMA  let us think about ,COMMA  what we mean by scanning a character verses scanning an integer .PERIOD  So ,COMMA  let us say that I have two variables ,COMMA  in number and character letter .PERIOD  So ,COMMA  let us say that I am scanning now n ,COMMA  which is a number and the input was 12 .PERIOD  So ,COMMA  when I say scanf( "%d" ,COMMA  &n) ,COMMA  I am trying to read 12 into an integer variable .PERIOD  Now ,COMMA  on a typical machine an integer variable may occupy 32 bits .PERIOD  or 4 bytes .PERIOD  So ,COMMA  it has 32 bits in it .PERIOD  And if you know the binary notation ,COMMA  you will see that 1100 in binary is the number 12 .PERIOD  So ,COMMA  this is 8 + 4 ,COMMA  which is 12 .PERIOD  So ,COMMA  when you see that ,COMMA  the input is 12 .PERIOD  And then ,COMMA  I ask in the c program ,COMMA  I am doing scanf( “%d” ,COMMA  &n) .PERIOD  What will happen is that ,COMMA  n is an integer with 32 bits wide .PERIOD  And it will have the following pattern encoded into it .PERIOD  This is what ,COMMA  it means by scanning an integer .PERIOD  And if you try to print it out ,COMMA  it will try to interpret n as a decimal number .PERIOD  And it will print and the digit 12 ,COMMA  here the number 12 .PERIOD  On the other hand ,COMMA  for the same input ,COMMA  here is the difference I want to emphasize .PERIOD  If the code was saying ,COMMA  %c and letter ,COMMA  so scan the input 12 using the scanf statement ,COMMA  scanf %c and letter .PERIOD  What will happen is that ,COMMA  the c program is looking at the first character ,COMMA  which is the digit 1 and scanning it in .PERIOD  Now ,COMMA  character 1 is ASCII 49 it is not important ,COMMA  you remember that .PERIOD  But ,COMMA  it has some ASCII value ,COMMA  and that ASCII value 49 is 31 in hexadecimal because ,COMMA  it is 3 * 16 + 1 ,COMMA  which is 48 + 1= 49 .PERIOD  So ,COMMA  that character 1 is 31 in hexadecimal .PERIOD  And hence ,COMMA  what will be stored ?QUESTIONMARK  Remember ,COMMA  that a character ASCII character is 8 bits wide .PERIOD  So ,COMMA  it will store 31 in hexadecimal .PERIOD  So ,COMMA  it will be 3 .PERIOD  This is the number 3 and this is the number 1 .PERIOD  So ,COMMA  when you scan the input into a character variable called letter .PERIOD  What will happen is that ,COMMA  letter will have the number ,COMMA  hexadecimal 31 or ASCII value 49 ,COMMA  which corresponds to the number ,COMMA  which corresponds to the character constant 1 .PERIOD   So ,COMMA  this is the difference between scanning a given input as a number and scanning a given input using a character .PERIOD  So ,COMMA  when you scan it using a number ,COMMA  this entire thing will be scanned .PERIOD  It will be converted into binary and you will store it in an integer variable .PERIOD  When you scan it as a letter ,COMMA  it will scan the first digit only because ,COMMA  that is the character and then store the ASCII value ,COMMA  inside the letter variable ,COMMA  inside the character variable .PERIOD  So ,COMMA  this corresponds to the letter variable 1 within a single quote ,COMMA  the character constantIn the session ,COMMA  we will discuss operators and expressions .PERIOD  So ,COMMA  we have already used C expressions in our programs before .PERIOD  And expressions in c are similar to expressions in mathematics and they follows tools ,COMMA  similar to what mathematical expressions also follow .PERIOD  They are a basic unit of evaluation and each expression has a value .PERIOD  Say ,COMMA  that an expression returns a value of a particular type .PERIOD  So ,COMMA  let us consider a few example expressions .PERIOD  For example ,COMMA  I have the following ,COMMA  a is 3 ,COMMA  b is 4 and I have a variable c ,COMMA  which is just declared to be of type A .PERIOD  And then ,COMMA  say that c = (a * a) + (b * b) .PERIOD  So ,COMMA  the right hand side of the assignment operator ,COMMA  this is a assignment operator .PERIOD  And the right hand side is an expression and that expression has sub expressions ,COMMA  a * a and b * b within parenthesis .PERIOD  So ,COMMA  an expression can be made up of variables ,COMMA  it can be made up of constants .PERIOD  These are the atoms or the basic components of an expression .PERIOD  And sub expressions can be combined into bigger expressions ,COMMA  using operators .PERIOD  Now ,COMMA  operators can be unary that is ,COMMA  they take one argument operation .PERIOD  For example ,COMMA  on unary operators the examples can be  ,COMMA  which is the unary - .PERIOD  For example ,COMMA  -3 is a negative number .PERIOD  Similarly ,COMMA  NOT operator that we have seen in connection with logical operations so ,COMMA  NOT of zero ,COMMA  for example ,COMMA  the logical negation operator .PERIOD  Both of these operations take one argument .PERIOD  Now ,COMMA  there is also the binary operations like + ,COMMA  - ,COMMA  * ,COMMA  etcetera .PERIOD  So ,COMMA  + takes two arguments .PERIOD  For example ,COMMA  an expression like 2 + 3 and here is the binary - .PERIOD  So ,COMMA  if I say 2 -3 ,COMMA  this is actually a binary operator which takes two arguments ,COMMA  which are 2 and 3 .PERIOD  Similarly ,COMMA  the binary multiplication 2 * 3 would be the product of 2 and 3 .PERIOD  So ,COMMA  notice the difference between… It is the same sign for the unary - and the binary - .PERIOD  But ,COMMA  the unary - takes only one argument and the binary - takes two arguments .PERIOD  We have used the assignment operation many times and let us understand that in ,COMMA  somewhat more detail .PERIOD  For example ,COMMA  if you consider the expression b = b + 1 .PERIOD  Now ,COMMA  if you remove the semicolon at the end .PERIOD  So ,COMMA  the statement is b = b + 1 semicolon .PERIOD  And if you omit the semicolon ,COMMA  what you get is an assignment expression ,COMMA  b = b + 1 without the semicolon .PERIOD   So ,COMMA  how does the assignment operation work ?QUESTIONMARK  For example ,COMMA  consider an expression like a = (b = 10) .PERIOD  What does this do ?QUESTIONMARK  So ,COMMA  assume that a and b are integer variables .PERIOD  Now ,COMMA  assignment assigns to the left hand variable ,COMMA  left hand operand ,COMMA  the value of the expression on the right hand side .PERIOD  For example ,COMMA  in this assignment operation there are two assignment expressions .PERIOD  One is the expression b = 10 .PERIOD  And the second is the expression a = b = 10 .PERIOD  So ,COMMA  the first assignment expression is supposed to do the following ,COMMA  assign 10 to b .PERIOD  So ,COMMA  what it does is ,COMMA  it assigns the value of the right expression which is 10 in this case to the left hand side operand that is one thing ,COMMA  it does .PERIOD  And also ,COMMA  it returns the value after the assignments .PERIOD  So ,COMMA  10 has been assigned to b .PERIOD  And the return value of this expression is 10 .PERIOD  So ,COMMA  we can now analyze a = b = 10 ,COMMA  as follows .PERIOD  First ,COMMA  evaluate the expression in parenthesis .PERIOD  The expression b = 10 has an assignment operator .PERIOD  So ,COMMA  evaluate the expression on the right hand side and then assign it to b .PERIOD  Now ,COMMA  that operation returns .PERIOD  So ,COMMA  that expression returns a particular value ,COMMA  which is 10 .PERIOD  Now ,COMMA  the original expression can be thought of as ,COMMA  just a = 10 .PERIOD  This is evaluated as usual .PERIOD  So ,COMMA  you take 10 and assign it to a .PERIOD  And the return value of the whole expression becomes 10 .PERIOD  So ,COMMA  when executing this expression ,COMMA  when evaluating this expression ,COMMA  two variables are assigns their values .PERIOD  One is b ,COMMA  which is assigned the value 10 and the second is a ,COMMA  which is also assigned the value 10 .PERIOD  The assignment operation can be used to initialize a number of variables ,COMMA  in one shot .PERIOD  For example ,COMMA  if I write a statement like a = (b= (c = (d= (e=0)))) .PERIOD  What does this mean ?QUESTIONMARK  Now ,COMMA  here there is some ambiguity here ,COMMA  because we do not know which order to evaluate this .PERIOD  Should ,COMMA  we evaluate from left to right .PERIOD  Should ,COMMA  we evaluate from right to left .PERIOD  Does it matter ?QUESTIONMARK  So ,COMMA  should the assignment be treated as the following ,COMMA  where a = b is done first ,COMMA  then ,COMMA  = c ,COMMA  then ,COMMA  = d and .PERIOD  So ,COMMA  on .PERIOD  Or should it be the opposite way right to left ,COMMA  where e = 0 is first done .PERIOD  Then ,COMMA  d = that ,COMMA  then c = that ,COMMA  .PERIOD  So ,COMMA  on until a .PERIOD  So ,COMMA  the expression is evaluated from right to left ,COMMA  in the case of the assignment operation .PERIOD  For example ,COMMA  the above expression that we just saw will be done as ,COMMA  a =… So ,COMMA  e = 0 ,COMMA   first and then backward ,COMMA  until a is assigned .PERIOD  Now ,COMMA  this is also the standard mathematical convention .PERIOD  We are not introducing a new strange rule ,COMMA  here .PERIOD  Why is this ?QUESTIONMARK  First ,COMMA  we will evaluate the inner most expression ,COMMA  which is e = 0 .PERIOD  So ,COMMA  e will be assigned 0 ,COMMA  then the return value of this sub expression .PERIOD  So ,COMMA  this sub expression will return the value 0 .PERIOD  So ,COMMA  this becomes d = 0 ,COMMA  d is assigned the value 0 .PERIOD  And the return value of this sub expression becomes 0 .PERIOD  So ,COMMA  then we have c = 0 and .PERIOD  So ,COMMA  on .PERIOD  So ,COMMA  finally ,COMMA  every variable here will be assigned the value 0 .PERIOD  So ,COMMA  the reason for doing this is that ,COMMA  if you try to do it in the opposite way ,COMMA  you will see that uninitialized variables are initialized to other uninitialized variable .PERIOD  For example ,COMMA  if you go from left to right ,COMMA  in the previous .PERIOD  This simply does not make any sense ,COMMA  because you have just declared a b c and .PERIOD  So ,COMMA  on .PERIOD  And when you say a = b ,COMMA  a and b are not initialized yet .PERIOD  So ,COMMA  this assignment hardly makes any sense .PERIOD  The basic rule of assignment is that ,COMMA  left hand side = right hand side .PERIOD  So ,COMMA  the left hand side is some value that can be assigned to .PERIOD  For example ,COMMA  this is a variable .PERIOD  The right hand side can be anything ,COMMA  variable ,COMMA  constant or it can be an expression .PERIOD  So ,COMMA  all these are valid assignment .PERIOD  So ,COMMA  what is an invalid assignment ?QUESTIONMARK  So ,COMMA  a = 0 can be a valid assignment but ,COMMA  0 = a .PERIOD  So ,COMMA  the assignment operation is evaluated ,COMMA  right to left .PERIOD  Now ,COMMA  we have the concept of associativity of operators .PERIOD  So ,COMMA  what does associativity mean ?QUESTIONMARK  It is ,COMMA  we have just argued that ,COMMA  a = b = c = d = 0 .PERIOD  An expression like that will be evaluated from right to left .PERIOD  So ,COMMA  it is as though ,COMMA  we have parenthesized the expression as d = 0 ,COMMA  inner most .PERIOD  Then ,COMMA  c = that ,COMMA  then b = that and .PERIOD  So ,COMMA  on .PERIOD  So ,COMMA  on the other hand ,COMMA  if you take an operator like binary + the addition symbol ,COMMA  then the usual custom is that you parenthesis from left to right .PERIOD  So ,COMMA  the evaluation is done ,COMMA  a + b first .PERIOD  Then ,COMMA  that sum is added to c .PERIOD  Then ,COMMA  that is added to d .PERIOD  So ,COMMA  the assignment operation goes right to left .PERIOD  The addition symbol operates left to right .PERIOD  So ,COMMA  this concept of associativity of an operator tells us ,COMMA  the order in which we evaluate the operations ,COMMA  if there are multiple occurrences of the same operator .PERIOD  So ,COMMA  the first there are multiple occurrences of the = sign .PERIOD  In the second ,COMMA  there are multiple occurrences of the addition symbol .PERIOD So ,COMMA  associativity rules tells you that ,COMMA  if there are identical operators in an expression ,COMMA  in which order do you evaluate them ?QUESTIONMARK  Do you evaluate them from left to right ?QUESTIONMARK  If you do ,COMMA  then it is called a left associative operator .PERIOD  If you evaluate from right to left ,COMMA  in the case of ,COMMA  for example ,COMMA  the assignment ,COMMA  then it is called a right associative operator .PERIOD  Binary - is also left associative .PERIOD  For example ,COMMA  a - b - c - d is evaluated as a - b ,COMMA  then c then - c ,COMMA  then - d .PERIOD  So ,COMMA  for example ,COMMA  if you say 10 - 5 - 15 ,COMMA  what will be done is 10 - 5 and then - 15 .PERIOD  So ,COMMA  this is 5 - 15 ,COMMA  which is - 10 .PERIOD  Whereas ,COMMA  if the parenthesis had been in the opposite way ,COMMA  it would be 10 - 5 - 15 ,COMMA  which case it could be 10 - ,COMMA  this is - 10 which is 20 .PERIOD  Notice that ,COMMA  this is not how you are supposed to do it ,COMMA  even in mathematics .PERIOD  So ,COMMA  the way that c does handles the associativity of the binary operation ,COMMA  is correct .PERIOD  So ,COMMA  the correct parenthesis is 10 - 5 and then - 15 .PERIOD  In general ,COMMA  for every operator c defines an associativity .PERIOD  So ,COMMA  let us see the part of the associativity of operations in c .PERIOD  There are several operations that we have seen ,COMMA  .PERIOD  So ,COMMA  far .PERIOD  The parenthesis ,COMMA  the Boolean naught ,COMMA  the logical naught and the unary - ,COMMA  the binary multiplication ,COMMA  division and .PERIOD  So ,COMMA  on .PERIOD  Addition symbol ,COMMA  comparison less than ,COMMA  less than or = and .PERIOD  So ,COMMA  on .PERIOD  Equality ,COMMA  logical AND ,COMMA  logical OR and then the assignment operator .PERIOD  We have seen ,COMMA  all these operations ,COMMA  .PERIOD  So ,COMMA  far .PERIOD  And of this ,COMMA  the typical associativity is left to right .PERIOD  There are couple of exceptions ,COMMA  one we have already seen .PERIOD  Assignment operation is right to left .PERIOD  The unary operations are also right to left .PERIOD  Most of the other operations are left to right .PERIOD  So ,COMMA  if you think for a little bit ,COMMA  you can see that the associativity for unary operations is also easily seen to be right to left .PERIOD  That makes more sense .PERIOD  So ,COMMA  the idea is not that you should memorize this table but ,COMMA  you should understand .PERIOD  Given the table ,COMMA  can I understand ,COMMA  what will happen with an expression ?QUESTIONMARK  How c will evaluate it ?QUESTIONMARK  It is not that ,COMMA  you should remember this .PERIOD  But ,COMMA  rather if you are given the table and an expression ,COMMA  can you correctly calculate what the value of the expression will be .PERIOD  This one more concept that we have to understand ,COMMA  before we really understand how c evaluates expressions ,COMMA  that is the concept of precedence .PERIOD  So ,COMMA  what do we mean by a precedence ?QUESTIONMARK  Let us pick a expression which involves multiple operators .PERIOD  Like for example ,COMMA  in this expression you have two operations ,COMMA  the assignment operation and the addition operation .PERIOD  Now ,COMMA  how do we know ,COMMA  how to evaluate this expressions .PERIOD  So ,COMMA  what are the two ways in which the above expression can be interpreted ,COMMA  the first way is you could say a = b and then say + c or you can say a = b + c .PERIOD  To decide which of the above possibilities to really do ,COMMA  c also defines what is known as a precedence between operators .PERIOD  So ,COMMA  we have already seen in the notion of associativity which is what happens ,COMMA  when the many occurrences of the same operator occur in an expression .PERIOD  Precedence on the other hand is to mediate between two different or multiple different operations in the same expression .PERIOD  So ,COMMA  let us see what is an example of using precedence .PERIOD  So ,COMMA  in c the + operation is given more precedence than the = operation .PERIOD  So ,COMMA  I really want to interpret this expression as a = b + c .PERIOD  So ,COMMA  this is how I want to interpret their operation and not as a = b + c .PERIOD  So ,COMMA  I want to avoid this and I want to do it in this way .PERIOD  So ,COMMA  one way I can ensure that is by saying that ,COMMA  please do b + c first ,COMMA  then take that result and assign it to it .PERIOD  So ,COMMA  one way of doing that is to say ,COMMA  whenever = and + appear together give more importance to + ,COMMA  do that first .PERIOD  So ,COMMA  proceed means going first .PERIOD  So ,COMMA  + has a greater precedence over assignment + and - have the same precedence and both have the same associativity we have seen this ,COMMA  addition and subtraction have the same precedence ,COMMA  ,COMMA  but multiplication and division have a higher precedence .PERIOD  So ,COMMA  if I want to evaluate a complicated expression ,COMMA  let us say that a + b - c * d % e / f .PERIOD  So ,COMMA  suppose I have a fairly complicated expression ,COMMA  what I can do is ,COMMA  what are the operations here ?QUESTIONMARK  So ,COMMA  the operations are + ,COMMA  - ,COMMA  * ,COMMA  % and / .PERIOD  Now ,COMMA  according to the precedence I know that * ,COMMA  % and / have equal precedence about + and - .PERIOD  So ,COMMA  I know that these operations have to be done before + and - .PERIOD  So ,COMMA  they have a lower precedence .PERIOD  So ,COMMA  these have to be done first ,COMMA  ,COMMA  but among them how do you know which to do first ,COMMA  for that we use the left to right associativity of these operations .PERIOD  So ,COMMA  as for as with in the same precedence is concerns ,COMMA  let us just simplify this situation in a little bit and think of them as the same operation ,COMMA  their different operations of the same precedence .PERIOD  But ,COMMA  I will just the thing a little bit to say that ,COMMA  let say that they are the same operation ,COMMA  all of them have left or right associativity .PERIOD  Therefore ,COMMA  I will according to the associativity rule I will do c * d first ,COMMA  then that % e and then that / f ,COMMA  because that is what the left to right associativity it says .PERIOD  So ,COMMA  by precedence we will know that these three operations have to be done first ,COMMA  among them how do you do this ,COMMA  * occurs first when you scan from left to right .PERIOD  So ,COMMA  c * d has to be done first and then the % operation and then the / operation .PERIOD  So ,COMMA  and once you done there then you come to + and - .PERIOD  So ,COMMA  currently once we have finished with this ,COMMA  you will have some situation like this ,COMMA  c * d % e / f and then on the remaining side you have a + b - this .PERIOD  And now you have to decide ,COMMA  which may you will do the + and - ,COMMA  again we know that they have the same precedence .PERIOD  So ,COMMA  let us found a little bit and think of them as the same operator ,COMMA  both of them have the left or right associativity .PERIOD  So ,COMMA  I do a + b first and then the - .PERIOD  So ,COMMA  with in the same precedence level ,COMMA  you will decide which operation to do first purely based on the left to right associativity .PERIOD  So ,COMMA  let us take a look at the precedence of associativity table .PERIOD  Again I want to emphasis is not to memorise ,COMMA  it is just that if you are given this table ,COMMA  you should be able to understand how an expression is going to be evaluated ?QUESTIONMARK  So ,COMMA  parenthesis is above all because once a parenthesis an expression ,COMMA  then you really saying this is the order that I want .PERIOD  So ,COMMA  it over writes any other precedence or associativity rule .PERIOD  Then ,COMMA  you have the unary operations which have the second higher precedence ,COMMA  then the arithmetic operations ,COMMA  then the comparison operation ,COMMA  logical operators ,COMMA  assignment and so ,COMMA  on .PERIOD  The comma is an operation we will see later .PERIOD  So ,COMMA  with in the arithmetic operations multiply ,COMMA  divide and % operator have higher precedence over + and - .PERIOD  + and - have higher precedence over relational operations ,COMMA  like < ,COMMA  < or = and so ,COMMA  on .PERIOD  So ,COMMA  we will see a few examples of how to use this table to understand what will happen with an expression ?QUESTIONMARK So ,COMMA  let us take 10 + 5 * 4 % 2 and assign to a ,COMMA  let us examine what will happen here .PERIOD  So ,COMMA  what I will do is I will make a list of operations .PERIOD  So ,COMMA  they are = ,COMMA  + ,COMMA  * ,COMMA  % and then precedence I know that multiplication and % have very high precedence .PERIOD  Then ,COMMA  the next level is + and then assignment has the least precedence .PERIOD  Now ,COMMA  both of these occurring in this expression * and % ,COMMA  how do we decide which goes first ,COMMA  both of them have left to right associativity .PERIOD  So ,COMMA  whatever happens first in the looking from left to right ,COMMA  we will do that first .PERIOD  So ,COMMA  among all these operations we know that 5 * 4 will happen first ,COMMA  then this will be followed by % 2 and then this will be followed by 10 + .PERIOD  And finally ,COMMA  the last which is that you do all these operations get the value and assign it way .PERIOD  So ,COMMA  this is the way in which the above expression will be evaluated .PERIOD  So ,COMMA  the above expression corresponds to giving the parentheses in the wave that we have done .PERIOD  So ,COMMA  once you do that a will get the value 10 .PERIOD  Let us see a few more examples of expression evaluation in C ;SEMICOLON  what kinds of expressions are allowed ,COMMA  what kind of errors do people usually make ,COMMA  and so on .PERIOD  Let us say that we have given an expression a = 1 ,COMMA  b = 1 ,COMMA  c = 2 .PERIOD  And then we have an expression a < b and then b >= c .PERIOD  So ,COMMA  this is the expression that we want to see how it will be evaluated .PERIOD  So ,COMMA  let us just go through it systematically .PERIOD  The operations on are <= ,COMMA  then we have the logical AND operation the >= symbol .PERIOD  Of these ,COMMA  the relational comparison operations <= and >= – have greater precedence over the logical AND .PERIOD  So ,COMMA  the precedence will be AND .PERIOD  And among operations of the same precedence level ,COMMA  we have left to right .PERIOD  So ,COMMA  whatever happens first when looking from left to right will be evaluated first .PERIOD  So ,COMMA  these two operations have the same precedence .PERIOD  So ,COMMA  we will have (a <= b) ;SEMICOLON  then (b >= c) ;SEMICOLON  these have to be done first and then AND .PERIOD  So ,COMMA  this will be done first ,COMMA  this will be done second ,COMMA  and this is the third operation .PERIOD  Conceptually ,COMMA  using just precedence and associativity rules ,COMMA  this is how the expression should be evaluated .PERIOD  So ,COMMA  when we evaluate it ,COMMA  a < are = b is 1 < are = 1 .PERIOD  So ,COMMA  that is 1 .PERIOD  b >= c is 1 >= 2 .PERIOD  So ,COMMA  that is 0 .PERIOD  So ,COMMA  this becomes 1 and 0 ;SEMICOLON  in which case ,COMMA  it is 0 .PERIOD  Now ,COMMA  let us look at a few tricky examples .PERIOD  So ,COMMA  if you have an expression of the following form ,COMMA  if a = b > 1 ;SEMICOLON  then c = 1 .PERIOD  So ,COMMA  let us see what happens here .PERIOD  We will do the same thing ;SEMICOLON  operations sorted by precedence is… There is greater-than symbol ,COMMA  which has a higher precedence over the equal-to symbol .PERIOD  So ,COMMA  the expression a = b > 1 will be evaluated as b > 1 ,COMMA  because that has higher precedence .PERIOD  So ,COMMA  this goes first .PERIOD  And then a = b > 1 .PERIOD  Now ,COMMA  b is 2 .PERIOD  So ,COMMA  b > 1 is 1 .PERIOD  So ,COMMA  you have a = 1 .PERIOD  And a = 1 is an assignment expression .PERIOD  It assigns the value 1 to a .PERIOD  And the return value is 1 because a is assigned to 1 .PERIOD  So ,COMMA  then this whole if expression becomes if 1 – c = 1 ;SEMICOLON  in which case ,COMMA  we know that ,COMMA  c = 1 ;SEMICOLON  that statement will be executed .PERIOD  Now ,COMMA  typically ,COMMA  what is expected… The typical programming style is to say something like a assigned to b ;SEMICOLON  and if that result is > 1 .PERIOD  So ,COMMA  we may want to deliberately violate the precedence .PERIOD  How do you do that ?QUESTIONMARK  So ,COMMA  C does it some way ;SEMICOLON  if you do not parenthesize it ,COMMA  you can always change the order of evaluation in C by introducing parenthesis ,COMMA  so that the meaning is very clear .PERIOD  So ,COMMA  if you do not parenthesize it ,COMMA  then a = b > 1 is the same as a = b > 1 .PERIOD  But ,COMMA  what if you really want to do a = b and then that > 1 ?QUESTIONMARK  So ,COMMA  that case ,COMMA  you parenthesize it .PERIOD  Why ?QUESTIONMARK  Because parenthesis has the highest precedence .PERIOD  So ,COMMA  whatever is within parenthesis will be evaluated first .PERIOD  So ,COMMA  = b will be evaluated first and b is 2 .PERIOD  So ,COMMA  a will get the value 2 .PERIOD  So ,COMMA  the assignment a = b will have returned the value 2 .PERIOD  And 2 is > 1 .PERIOD  So ,COMMA  it will execute ((Refer Time: 05:17)) One particular way in which such an expression can be seen ;SEMICOLON  we have already seen such an example is – you read all integers from the terminal until a -1 is read .PERIOD  So ,COMMA  suppose the input is of the form 3 2 -1 ;SEMICOLON  and then let us say dot or something of that sort .PERIOD  So ,COMMA  what this expression does is scanf returns a value ,COMMA  which is the number of tokens that – number of inputs that ,COMMA  it was successfully able to read .PERIOD  So ,COMMA  if you try to read a character as an integer ,COMMA  it may not succeed .PERIOD  And so ,COMMA  as long as you have correctly written the integer and the integer is not -1 ,COMMA  then you do a particular ((Refer Time: 06:19)) So ,COMMA  this is the kind of expression that is often used ;SEMICOLON  where ,COMMA  you assign some value to a using the assignment statement .PERIOD  Or ,COMMA  maybe you want to check the return value of a function whether it is positive or not .PERIOD  And based on that ,COMMA  you want to write a condition .PERIOD  So ,COMMA  the logical and operation does operates in the following way .PERIOD  It evaluates the left operand first .PERIOD  If this condition is false ,COMMA  then you know that ,COMMA  the whole expression is going to be false .PERIOD  If at least one of the terms is false ,COMMA  then you know that ,COMMA  the whole thing is false .PERIOD  So ,COMMA  it will not even evaluate the second operand .PERIOD  On the other hand ,COMMA  if the operation is true ,COMMA  then it will check whether the second operand is true .PERIOD  If the second operand is also true ,COMMA  then the whole expression is true .PERIOD  If the second operand is false ,COMMA  then the whole expression is false .PERIOD  This method of evaluation is also called short-circuiting because it may not evaluate the whole expression in order to get the result .PERIOD  So ,COMMA  if I know that ,COMMA  this expression is false ;SEMICOLON  then there is no need to evaluate this ,COMMA  because I know that ,COMMA  the whole expression is going to be false .PERIOD  Here is a common mistake that people do ,COMMA  because this is similar to mathematical notation .PERIOD  When you want to check a condition that a is between 1 and 5 ;SEMICOLON  what happens if you right 1 < a < 5 ?QUESTIONMARK  Because this is the way we do it in mathematics .PERIOD  C will apply the precedence and the associativity .PERIOD  In this case ,COMMA  it is the same operation .PERIOD  So ,COMMA  only associativity applies .PERIOD  And according to associativity ,COMMA  it is left to right .PERIOD  So ,COMMA  this will be evaluated as 1 < a < 5 .PERIOD  Now ,COMMA  a is 2 .PERIOD  So ,COMMA  1 < a is false .PERIOD  So ,COMMA  this becomes 0 .PERIOD  So ,COMMA  the whole thing is 0 < 5 .PERIOD  So ,COMMA  it is true .PERIOD  So ,COMMA  if you execute this code ,COMMA  it will eventually become an infinite loop ,COMMA  because this is an expression that always evaluates to true .PERIOD  Now ,COMMA  what you probably mean is that ,COMMA  I want to check that ,COMMA  a is between 1 and 5 ;SEMICOLON  a is 2 .PERIOD  So ,COMMA  the correct way to write such an expression would be 1 < a and a < 5 ;SEMICOLON  that will check the betweenness condition .PERIOD  So ,COMMA  notice that ,COMMA  this is different from the way we normally write in mathematics .PERIOD  This is how we would write such a test in mathematics .PERIOD  But ,COMMA  that will cause an infinite loop .PERIOD  This is because C will apply the precedence and the associativity rules and not what you think it should do .PERIOD  Now ,COMMA  let us look at can there be expressions ,COMMA  which make no sense ?QUESTIONMARK  We have seen several examples ,COMMA  where you can always make sense out of it .PERIOD  So ,COMMA  let us take this expression .PERIOD  Again ,COMMA  list out the operations ;SEMICOLON  see you have = = ;SEMICOLON  then you have the % operation ,COMMA  which is highest precedence ;SEMICOLON  then you have minus ;SEMICOLON  then you again have an = ;SEMICOLON  and then you have a + .PERIOD  So ,COMMA  these are the operations in the expression .PERIOD  So ,COMMA  what needs to be done first ?QUESTIONMARK  b % c .PERIOD  And then you have -a ;SEMICOLON  and then you have a + 1 .PERIOD  This is by following precedence and associativity rules .PERIOD  Now ,COMMA  we come to the assignment statement .PERIOD  Assignment statements are done right to left .PERIOD  So ,COMMA  the first thing that you would try to do is the following .PERIOD  So ,COMMA  you try to do the… So ,COMMA  here is a sub expression ;SEMICOLON  here is a sub expression ;SEMICOLON  here is a sub expression ;SEMICOLON  and here is a sub expression .PERIOD  So ,COMMA  it is like assigning four terms .PERIOD  And the innermost thing will be done first ;SEMICOLON  the rightmost thing will be done first .PERIOD  So ,COMMA  the rightmost assignment is b % c -a is assigned to a + 1 .PERIOD  Now ,COMMA  this is a syntax error .PERIOD  So ,COMMA  what happen is as we just discussed if you work out the whole assignment ;SEMICOLON  if you workout the whole expression ,COMMA  it becomes something like this .PERIOD  And somewhere when you work out the assignment from right to left ,COMMA  you will see that ,COMMA  it is trying to assign a number -3 to -7 .PERIOD  That does not make any sense .PERIOD  The left-hand side of an assignment statement should be an assignable value ,COMMA  which is essentially a variable .PERIOD  And in this case ,COMMA  you are trying to assign a number to another number ,COMMA  which does make sense .PERIOD  So ,COMMA  here is a syntax error .PERIOD  We will conclude the discussion on operations with one more operation ,COMMA  which is quite common in C ;SEMICOLON  which is the  ;SEMICOLON  operator .PERIOD  Now ,COMMA  this is not very common in mathematics .PERIOD  But ,COMMA  let us just discuss what does it mean in C .PERIOD  So ,COMMA  let us say that ,COMMA  we have two expressions: expression 1 and expression 2 separated by a  ;SEMICOLON  .PERIOD  Now ,COMMA  think of the  ;SEMICOLON  as an operation just like any other operation like + or minus .PERIOD  So ,COMMA  it must have a precedence it must have an associativity and so on .PERIOD  So ,COMMA  what will happen when we have an expression like i + 2  ;SEMICOLON  sum = sum -1 .PERIOD  So ,COMMA  how does it follows ?QUESTIONMARK  First ,COMMA  you evaluate the expression 1 .PERIOD  So ,COMMA  first ,COMMA  in this case ,COMMA  you evaluate i + 2 ;SEMICOLON  then you evaluate sum = sum -1 ;SEMICOLON  and return the value of the lost expression .PERIOD  So ,COMMA  the whole – the  ;SEMICOLON  operation is involved in an expression called the  ;SEMICOLON  expression .PERIOD  Every expression has a value and the value of the  ;SEMICOLON  expression will be expression 2 .PERIOD  So ,COMMA  what if you have multiple expressions ?QUESTIONMARK  You figure out what is the associativity of the  ;SEMICOLON  expression .PERIOD  The  ;SEMICOLON  expression associates left to right .PERIOD  So ,COMMA  this expression will become scanf and so on ;SEMICOLON  sum = 0 ;SEMICOLON  i = 0 .PERIOD  So ,COMMA  this… For the first  ;SEMICOLON  ,COMMA  this is expression 1 and this is expression 2 .PERIOD  So ,COMMA  this expression evaluates to the result of sum = 0 ;SEMICOLON  which is 0 as we know .PERIOD  Now ,COMMA  the second level is you have 0  ;SEMICOLON  i = 0 .PERIOD  So ,COMMA  the first  ;SEMICOLON  expression is evaluated and its result is expression 2 of that expression ,COMMA  which is a value of sum = 0 ,COMMA  which is 0 .PERIOD  So ,COMMA  the outer expression becomes 0  ;SEMICOLON  i = 0 .PERIOD  The value of that expression is the value of expression 2 in that bigger expression ,COMMA  which is the value of i = 0 .PERIOD  So ,COMMA  here is how you will apply the rule that ,COMMA  it is the value of the second expression for a more general expression involving multiple commas .PERIOD  So ,COMMA  what you do is – first ,COMMA  evaluate the first expression and it has some value .PERIOD  For example ,COMMA  in this case ,COMMA  it is an assignment expression .PERIOD  So ,COMMA  it will have value 0 .PERIOD  And then the second expression is evaluated .PERIOD  And the value of  ;SEMICOLON  expression is the value of the second expression .PERIOD  Note that ,COMMA  you may… At first sight ,COMMA  you may see multiple commas in the same expression ;SEMICOLON  but the way you do it is that ,COMMA  you group them using associativity rules into a sequence of  ;SEMICOLON  expressions ,COMMA  where each  ;SEMICOLON  expression has exactly two terms .PERIOD  This is what we did in the previous example .PERIOD  Now ,COMMA   ;SEMICOLON  expression is very convenient ,COMMA  because you can do things like when you want to initialize multiple variables in a for loop for example ,COMMA  you can just say sum = 0 ,COMMA   ;SEMICOLON  i = 0 .PERIOD  It will initialize both values at the same time ;SEMICOLON  both variables at the same time .PERIOD  So ,COMMA   ;SEMICOLON  are evaluated left to right .PERIOD  This is what I just worked out an example of the following form .PERIOD  So ,COMMA  if you have multiple sub expressions in a  ;SEMICOLON  expression ;SEMICOLON  if we have multiple  ;SEMICOLON  ,COMMA  what you do is you associate them just like you did with + and star ;SEMICOLON  you have multiple  ;SEMICOLON  expressions .PERIOD  And then group them two at a time .PERIOD  So ,COMMA  it becomes two  ;SEMICOLON  expressions .PERIOD  And then evaluate them .PERIOD  Now ,COMMA  the  ;SEMICOLON  expression has the lowest precedence of any operator in C .PERIOD  So ,COMMA  if you have an operation like a = a + 5  ;SEMICOLON  sum = sum + a ,COMMA  what will happen is you do this expression a = a + 5 ;SEMICOLON  then do this expression sum = sum + a .PERIOD  And then evaluate the  ;SEMICOLON  expression .PERIOD  And therefore ,COMMA  when you have a  ;SEMICOLON  expression ,COMMA  you do not need explicit parenthesis ,COMMA  because the precedence takes care of it ;SEMICOLON  it has the lowest precedence .PERIOD  So ,COMMA  it will never get swallowed into a bigger expression ,COMMA  which involves other operations .PERIOD  So ,COMMA  it will always be evaluated at the end .PERIOD  So ,COMMA  just to remind you ,COMMA  here is the table once again .PERIOD  And notice that ,COMMA  as we discussed the  ;SEMICOLON  operation is the lowest precedence and the associates left to right .PERIOD  This is also a slightly different meaning of the  ;SEMICOLON  in C .PERIOD  We will just mention that in passing .PERIOD  There is also the normal separator .PERIOD  So ,COMMA  the separator can be seen in multiple occasions in C .PERIOD  When you initialize an expression ;SEMICOLON  when you say sum = 0 ,COMMA   ;SEMICOLON  = zero ,COMMA   ;SEMICOLON  j = 0 ;SEMICOLON  this is not the  ;SEMICOLON  expression ;SEMICOLON  it is just a separator as in English .PERIOD  So ,COMMA  similarly ,COMMA  when you call a function ,COMMA  you have  ;SEMICOLON  to separate out the arguments .PERIOD  That does not mean that ,COMMA  the arguments are inside a  ;SEMICOLON  expression .PERIOD  Here  ;SEMICOLON  is just a separator as in English .PERIOD  And it is always clear from the context whether a  ;SEMICOLON  is a separator or an operator .PERIOD  As an operator ,COMMA  it has a particular value ;SEMICOLON  as a separator ,COMMA  it does not do anything other than saying that ,COMMA  this first and then this .PERIOD  So ,COMMA  we have seen several operators in C and discussed the concepts of precedence and associativity .PERIOD  And what is important is – given the precedence and the associativity tables ,COMMA  can you understand an expression ;SEMICOLON  see whether it is a valid expression ,COMMA  and if it is a valid expression ,COMMA  what will be its value .PERIOD  In this session we are going to introduce a new concept of programming in C called functions .PERIOD  So ,COMMA  initially ,COMMA  let us just try to motivate why we need functions ,COMMA  and then we will try to see whether programming becomes easier ,COMMA  if we have functions .PERIOD  So ,COMMA  let us say that ,COMMA  why do we need functions ?QUESTIONMARK  There are essentially two different reasons for it .PERIOD  And I will mention these reasons one after the other .PERIOD  The first reason is to break up a complex problem into simple sub problems .PERIOD  All of us ,COMMA  for example ,COMMA  like to drop to do less saying that these are the things I wish to accomplish today .PERIOD  So ,COMMA  step 1 ,COMMA  you know ,COMMA  get to college ,COMMA  step 2 - attend classes ,COMMA  step 3 - finish home work or something like that .PERIOD  And then each of those main task will have several sub task .PERIOD  In order to get to college ,COMMA  maybe you need to renew the ticket subscription ,COMMA  get on the bus ,COMMA  get to college ,COMMA  and so on .PERIOD   So ,COMMA  each of those higher level task involves several search smaller sub task .PERIOD  And conceptually ,COMMA  it is cleaner to say that these are the big level things that I want to do .PERIOD  Each of those big level task have several sub tasks ,COMMA  so that I can think of it ,COMMA  what I want to accomplish in a layer wise manner .PERIOD  So ,COMMA  this is something that we do intuitively .PERIOD  We always break up complex problem into simpler sub problems so that we can analyze the simpler sub problem and perform it completely ,COMMA  and then come back to the bigger problem .PERIOD  So ,COMMA  we need to solve it each separately .PERIOD   And the main tool for this programming in C which allows you to accomplish breaking up a complex sub problem into simpler sub problems is what is known as functions .PERIOD  So ,COMMA  this enables you to do what is known as modular programming in c .PERIOD  And functions are not new .PERIOD  We have already seen three functions in particular - main was a function that we always wrote ,COMMA  and then we have printf and scanf which we use for outputting and inputting respectively .PERIOD  So ,COMMA  let us just motivate the notion of functions by using the second motivation that I was talking about .PERIOD   So ,COMMA  suppose ,COMMA  you have ,COMMA  you want to say ,COMMA  I want to compute  ,COMMA  which is  ,COMMA  correct ?QUESTIONMARK  So ,COMMA  this is the definition of n choose k for  as it is known .PERIOD  Now ,COMMA  suppose I want to write this ,COMMA  n code this into C program ,COMMA  so I will have ,COMMA  let us say ,COMMA  a main function .PERIOD  And then inside the main function I will have ,COMMA  let us say ,COMMA  three variables – a ,COMMA  b ,COMMA  c ,COMMA  and then float result because the result of a division will be a float .PERIOD  So ,COMMA  I will have ,COMMA  what should I do intuitively ,COMMA  one way to do it is I will have a block of code which says it will calculate n! which is the numerator ,COMMA  then I will say that a = n! ;SEMICOLON  at end of this ,COMMA  let us say ,COMMA  that a stores n! .PERIOD   Then ,COMMA  I will have another block of code which says that I will calculate k! .PERIOD  And then this will say ,COMMA  let us say ,COMMA  b = k! .PERIOD  And the third block of code will calculate n - k! ;SEMICOLON  let us say ,COMMA  I will store this in c .PERIOD  And then I will say ,COMMA  ok result =  ,COMMA  some code that looks like this .PERIOD  And you would notice what is inconvenient about it ;SEMICOLON  all these three blocks of code ,COMMA  once we complete it ,COMMA  will look very similar .PERIOD  They are all calculating the! of a particular number .PERIOD  But ,COMMA  there is nothing in c ,COMMA  which will ,COMMA  that using the features that we have seen so far ,COMMA  which will tell us that this code ,COMMA  this code and this code are essentially the same ,COMMA  and I need to write that similar code only once .PERIOD  So ,COMMA  there is no simple way to use loops to accomplish these .PERIOD  So ,COMMA  it seems like this redundant business of writing similar code again and again can be avoided .PERIOD  So ,COMMA  this is the second motivation for introducing the notion of functions which is basically to avoid duplication of code .PERIOD  So ,COMMA  here is a side benefit of functions ,COMMA  avoid code replication .PERIOD  We have already seen loops to some extend avoid code replication .PERIOD  But ,COMMA  here is a newer method to avoid code replication in a greater unit .PERIOD  So ,COMMA  the second reason why we write functions is to avoid writing similar code again and again .PERIOD   So ,COMMA  let us try to write functions by motivating it with the help of an example .PERIOD  This example will show the benefit of how we can avoid code duplication using functions ,COMMA  and also how we can breakup a complex problem into simpler sub problems .PERIOD  So ,COMMA  in this I will introduce the problems similar to what have we seen before .PERIOD  We have a sequence of numbers .PERIOD  The first number tells you how many inputs there are .PERIOD  And then what we need to do is to pick out the numbers which are relatively prime in these sequences .PERIOD  So ,COMMA  two numbers are relatively prime if there gcd is 1 .PERIOD  So ,COMMA  16 and 7 are relatively prime ;SEMICOLON  4 and 6 are not because they have a common factor of 2 ;SEMICOLON  6 and 16 are not ,COMMA  they have a common factor of 2 ;SEMICOLON  16 and 7 do not have a common factor other than 1 ;SEMICOLON  7 and 8 are similarly relatively prime ;SEMICOLON  8 and 9 are relatively prime ;SEMICOLON  9 and 10 are relatively prime ;SEMICOLON  and 10 and 11 are relatively prime .PERIOD   So ,COMMA  these are the relatively prime pairs .PERIOD  And we need to write a function which given a sequence of these numbers count how many pairs ,COMMA  how many successively occurring numbers are relatively prime to each other .PERIOD  In this case there are 5 such pairs .PERIOD  So ,COMMA  in this problem we can clearly see that there is a sub problem which is ,COMMA  given two numbers are they relatively prime ?QUESTIONMARK  That is one sub problem .PERIOD  And if we have the solution to that sub problem then we can compose the solution to the whole problem as follows .PERIOD  Given two numbers ,COMMA  I check whether they are relatively prime .PERIOD  If they are relatively prime I will increment the count of the relatively prime pairs I had seen so far ,COMMA  otherwise I will skip to the next pair and see whether they are relatively prime .PERIOD  So ,COMMA  for each new pair of numbers I am seeing that is the sub task of checking whether they are relatively prime .PERIOD   So ,COMMA  let us say that suppose we have a function ;SEMICOLON  a function is something that we will see in a minute .PERIOD  Suppose we have a small component which will perform the task of testing iscoprime a ,COMMA  b .PERIOD  So ,COMMA  iscoprime a ,COMMA  b ,COMMA  that function will take two numbers a and b and check whether they are relatively prime or not .PERIOD  If a and b are relatively prime it evaluates to 1 .PERIOD  It is ,COMMA  we say that it returns 1 if they are relatively prime ;SEMICOLON  and if they are not co-prime to each other ,COMMA  if there not relatively prime ,COMMA  then it has to return as 0 .PERIOD  So ,COMMA  it has to evaluate to 0 .PERIOD  Now ,COMMA  associated with every function there are three concepts .PERIOD  We will see them one by one .PERIOD  There is this declaration of a function which says what does the function look like ,COMMA  what is the type of the function .PERIOD  So ,COMMA  the declaration of the function will be written in the following way .PERIOD  It will be written as int iscoprime ( int a ,COMMA  int b ) .PERIOD  This means that iscoprime is the function name ,COMMA  and then it takes two arguments - a and b which are of type int ;SEMICOLON  so int a and int b .PERIOD  If we had written another function which takes a float a and int b ,COMMA  we would say ,COMMA  function int ,COMMA  float a ,COMMA  int b .PERIOD   So ,COMMA  in this case we are taking two integers as arguments ,COMMA  so you have to say ,COMMA  int a ,COMMA  int b .PERIOD  A small syntactic point that you have to notice ,COMMA  that ,COMMA  you cannot abbreviate this as int a ,COMMA  b ;SEMICOLON  so that is not allowed .PERIOD  Each variable needs to have a separate type signature .PERIOD  So ,COMMA  these are called the input arguments .PERIOD  So ,COMMA  that is the second part of the declaration .PERIOD  The first part of the declaration ,COMMA  the first ,COMMA  which says that ,COMMA  it is an int ,COMMA  is actually the type of the return value .PERIOD  So ,COMMA  the return value is 1 if the pairs is co-prime ,COMMA  and it is 0 if the pair is not coprime .PERIOD  So ,COMMA  the return value is an integer .PERIOD  So ,COMMA  we need a function name ,COMMA  we need a declaration of the input arguments .PERIOD  The arguments need to be named ,COMMA  and the return value of the output .PERIOD   So ,COMMA  let us say how do we design the higher level function ?QUESTIONMARK  So ,COMMA  here is how you use functions when you program .PERIOD  You assume that the function is already available to you ,COMMA  and it does what it is supposed to do .PERIOD  Using that how do I build the solution to the whole program ?QUESTIONMARK  So ,COMMA  in this case ,COMMA  let us just assume that we have written int iscoprime ;SEMICOLON  we have written that function .PERIOD  And we are interested in ,COMMA  how do we build the solution to the entire problem using that ?QUESTIONMARK   So ,COMMA  how do you do that ?QUESTIONMARK  Use ,COMMA  have a flow chart which reach numbers one by one .PERIOD  And count is the number of co-prime pairs that you have seen so far .PERIOD  So ,COMMA  you check whether you have seen n numbers .PERIOD  If you have not seen n numbers then you read the next number and check whether the previous number and the current number form a co-prime pair .PERIOD  So ,COMMA  you give iscoprime prev current ;SEMICOLON  it will return 1 ,COMMA  if they are co-prime .PERIOD  So ,COMMA  that will get added to the count .PERIOD  If there not co-prime ,COMMA  they will ,COMMA  it will return a 0 .PERIOD  So ,COMMA  count will remain as it is .PERIOD   Once you do that you say prev is = current ,COMMA  and indicate that you are going to read the next number .PERIOD  This is similar to other problems where we scanned this bunch of numbers and did some function based on that .PERIOD  The new think here is the iscoprime function which we just assumed that it is correctly written ,COMMA  and it does what it is supposed do .PERIOD  So ,COMMA  this is the function declaration .PERIOD  Now ,COMMA  how do you code this up ?QUESTIONMARK  You basically code this up in c ,COMMA  just as you did it with other program ,COMMA  other functions like scan f .PERIOD  You just say ,COMMA  count + iscoprime previous current .PERIOD  So ,COMMA  this is how you can encode the flowchart including the function called as a C program .PERIOD  Now ,COMMA  let us come to the interesting part which is ,COMMA  how do we design the int iscoprime function ?QUESTIONMARK  So ,COMMA  the top is the declaration part of the function where I say that what is its type .PERIOD  So ,COMMA  the function name is iscoprime .PERIOD  It takes two variables a and b ;SEMICOLON  a is of type int ,COMMA  b is of type int .PERIOD  And it is supposed to written in integer value .PERIOD  So ,COMMA  that much is clear from the type declaration the type signature so called of iscoprime .PERIOD   Now ,COMMA  what you do with it ?QUESTIONMARK  You say that ,COMMA  so this is the classic gcd code ;SEMICOLON  you declare a t variable ;SEMICOLON  if a is less than b ,COMMA  you swap a and b .PERIOD  And this part of the code is just calculating the gcd .PERIOD  This is code that we have seen before .PERIOD  And at the end of that ,COMMA  a ,COMMA  will become the gcd .PERIOD  If a and b are co-prime then a ,COMMA  will be 1 .PERIOD  If ,COMMA  a ,COMMA  is any number greater than 1 ,COMMA  then they are not co-prime .PERIOD  So ,COMMA  if ,COMMA  a is = 1 ,COMMA  you return 1 .PERIOD  And for returning ,COMMA  you use the keyword return .PERIOD  So ,COMMA  you return the value 1 ;SEMICOLON  otherwise you return the value 0 .PERIOD  So ,COMMA  this is how you write the function iscoprime .PERIOD  So ,COMMA  now we have to put both these go together .PERIOD  So ,COMMA  I will say ,COMMA  include <stdio .PERIOD h> ;SEMICOLON  this is the first line of the code .PERIOD  Then I will have the source code for iscoprime .PERIOD  So ,COMMA  I will write that .PERIOD  And afterwards write name function ,COMMA  so that ,COMMA  when main calls iscoprime function ,COMMA  then we already have the code for iscoprime available .PERIOD  First this line ,COMMA  then the iscoprime function ,COMMA  and then the main function .PERIOD  So ,COMMA  let us look at the function in somewhat greater detail ;SEMICOLON  a and b are what are called the formal parameters of the function .PERIOD  They are viewed as variables .PERIOD  Now ,COMMA  the formal parameters are visible only within the function .PERIOD  So ,COMMA  we say that their scope is inside the function .PERIOD   Now ,COMMA  there is ,COMMA  this is what is known as the declared definition of the function .PERIOD  Every function can be called .PERIOD  Notice that we have already called the functions like print f and scan f .PERIOD  So ,COMMA  once you define a function you can call a function ;SEMICOLON  calling a function will be evaluating that function with particular arguments ;SEMICOLON  you can do that .PERIOD  So ,COMMA  when you call a function you execute the function with the given arguments .PERIOD  So ,COMMA  5 becomes a ,COMMA  and 6 become b .PERIOD  Once a function call is encountered what happens is that formal parameters are mapped to actual parameters .PERIOD  So ,COMMA  a becomes ;SEMICOLON  so the value 5 is copied to a ,COMMA  and the value 6 is copied to b .PERIOD  This process of copying values is known as parameter passing .PERIOD  Then what you do is ,COMMA  you store the return address of the call .PERIOD  The return address is the line of the main function where the function was called .PERIOD  So ,COMMA  let us say that it was called in the second line of main .PERIOD  Once the function finishes it has to come back to this point .PERIOD   Now ,COMMA  in addition ,COMMA  we also create a box for storing the return value .PERIOD  At the end of function either 1 or 0 will be returned .PERIOD  So ,COMMA  we also need some space in memory to store that return value .PERIOD  So ,COMMA  to look at it in slightly greater detail ,COMMA  so let us say that iscoprime 9 ,COMMA  4 is called in step 20 a .PERIOD  So ,COMMA  this is the address ;SEMICOLON  20 a by which I mean it is line 20 and some location a .PERIOD  So ,COMMA  now ,COMMA  you have to allocate the space for the return value ;SEMICOLON  store the return address and pass the parameters .PERIOD  Now ,COMMA  at ,COMMA  when you pass the inputs ,COMMA  9 and 4 ,COMMA  the space is allocated for ,COMMA  a = 9 ,COMMA  and b = 4 .PERIOD  This is the process of parameter passing .PERIOD  So ,COMMA  we visualize the memory as a stack .PERIOD  So ,COMMA  when you start the programs you start executing from line 1 of many ;SEMICOLON  so x is initialized to - 1 .PERIOD  And then you come to the function called iscoprime 9 ,COMMA  4 .PERIOD  So ,COMMA  when you execute this you do the following: you allocate the space for the return value ,COMMA  you pass the parameters and then execute the function ,COMMA  and finally pass back the return value .PERIOD   So ,COMMA  when you execute the function you imagine that the stack is now divided into a separate space .PERIOD  So ,COMMA  here is a clean separation between the memory that is required for main .PERIOD  So ,COMMA  above here is main ,COMMA  and below here is the memory required for iscoprime .PERIOD  So ,COMMA  in that I have stored a box for return value .PERIOD  I have stored the return address which is 20 a .PERIOD  And then I have ,COMMA  a = 9 ,COMMA  and b = 4 .PERIOD  Now ,COMMA  I will execute the function as though memory is limited to here .PERIOD  So ,COMMA  I will declare t ,COMMA  and then execute the gcd algorithm .PERIOD  So ,COMMA  this is stuff that we have seen before .PERIOD  And finally ,COMMA  a is the gcd which is 1 .PERIOD  If a is 1 we have to return 1 .PERIOD  So ,COMMA  the value 1 will be copied to the return value ,COMMA  and that is the value that will be passed back ;SEMICOLON  so x will be 1 .PERIOD  So ,COMMA  the return value will be copied back to the main function .PERIOD   When comes to C functions ,COMMA  we have seen the following concepts .PERIOD  One is the declaration in the definition of the function by which I mean the declaration is what type is the function ?QUESTIONMARK  What are the input arguments ?QUESTIONMARK  What types are the input arguments ?QUESTIONMARK  And what is the result return type ?QUESTIONMARK  So ,COMMA  these form the declaration .PERIOD  Definition is the logic of a function .PERIOD  So ,COMMA  this is what is known as the declaration and the definition of the function and we do it only once .PERIOD  So ,COMMA  function is defined only once .PERIOD  Once we define a function we can of course ,COMMA  call the function multiple times .PERIOD  So ,COMMA  definition is done only once and calling can be done any number of times .PERIOD  Now ,COMMA  we refer to a stack which is ,COMMA  what is the central concept in executing a function .PERIOD  Stack is just a part of the memory ,COMMA  that goes only in one direction .PERIOD  So ,COMMA  that is what it is supposed to mean .PERIOD  Basically ,COMMA  you can think of it as a stack of boxes or a stack of paper on a table or a stack of a plates .PERIOD  So ,COMMA  it grows in one direction .PERIOD  So ,COMMA  the stack grows as the main calls of a particular function ,COMMA  that function calls a different function and so ,COMMA  on .PERIOD  And you can imagine the stack is growing upwards or growing downwards .PERIOD  It does not matter .PERIOD  As functions get called it either grow keeps growing upwards or keeps going downwards .PERIOD  We will usually represent it us keeping growing downward .PERIOD  So ,COMMA  let us look at this function that we were talking about earlier .PERIOD  So ,COMMA  n choose k is n factorial upon k factorial times n minus k factorial and let us try to code this up .PERIOD  We know that factorial is something that we will need over and over in this program .PERIOD  So ,COMMA  let us say that I write factorial as a function .PERIOD  So ,COMMA  factorial takes an integer and returns an integers .PERIOD  So ,COMMA  the declaration is int fact int r ,COMMA  r is a input argument and the return type is int .PERIOD  Now ,COMMA  inside that we will write the code for factorial .PERIOD  All variables declared inside the factorial or local or private to the factorial function ,COMMA  they cannot be seen outside .PERIOD  So ,COMMA  the input argument as well as any variables declared inside factorial or private or local to the factorial function .PERIOD  So ,COMMA  I have i and this encodes the logic of factorial that we have seen earlier .PERIOD  So ,COMMA  you start with the product equal to 1 and keep on multiplying the numbers ,COMMA  till you reach r factorial .PERIOD  So ,COMMA  once you reach r you return the r factorial .PERIOD  This logic is something that we have seen before .PERIOD  Now ,COMMA  we will see how do we put this together in order to produce the function .PERIOD  So ,COMMA  what we need to do is ?QUESTIONMARK  We will just encode this solution that we have .PERIOD  So ,COMMA  it is (fact(n)/fact(k))/fact(n-k)  .PERIOD  So ,COMMA  here are the encoded just a logic .PERIOD   So ,COMMA  I will add slightly larger code ,COMMA  this is not proper c code .PERIOD  I let us say that I have three extra variables which have declared of int t1 ,COMMA  t2 and t3 .PERIOD  Now ,COMMA  t1 will be factorial of n ,COMMA  t2 will be factorial of k and t3 will be fact(n-k)  ,COMMA  have separated this out .PERIOD  So ,COMMA  that ,COMMA  I can clearly explain what happens when the code executes .PERIOD  Let us say that I want to calculate 4 c 2 .PERIOD  Now ,COMMA  first when the program starts executing ,COMMA  you start with code on the first line of the main .PERIOD  So ,COMMA  you scanf n and k .PERIOD  So ,COMMA  n is 4 and k is 2 .PERIOD  Now ,COMMA  use do t1 = fact(n)  .PERIOD  So ,COMMA  when t1 = fact(n)  is called ,COMMA  what you do is ,COMMA  you set up the return value and return address .PERIOD  So ,COMMA  return value is not yet decided to return address is 5 ,COMMA  because ,COMMA  you have to go back to line 5 of the code .PERIOD  So ,COMMA  that is why the return value is 5 .PERIOD  Also what you need to do ,COMMA  you need to copy the parameter value which is 4 .PERIOD  So ,COMMA  this is the actual parameter 4 and you have to copy it to the input argument r .PERIOD  So ,COMMA  r is the input argument ,COMMA  r should be assign to the value n here ,COMMA  n is 4 .PERIOD  So ,COMMA  that is known as passing the argument .PERIOD  Now ,COMMA  once that is done the code can be seen us jumping to factorial .PERIOD  So ,COMMA  as soon as the function is called ,COMMA  you actually pass the execution to the factorial function .PERIOD  Now ,COMMA  inside the factorial function you have two in local variables i and ans which is answered .PERIOD  And we start executing the factorial function .PERIOD  So ,COMMA  let us see what happens ,COMMA  when we execute the factorial function .PERIOD  So ,COMMA  far we have passed the arguments and so ,COMMA  on .PERIOD  Now ,COMMA  I have just hidden the part of the stack that was used for name .PERIOD  And let us focus just on the factorial function .PERIOD  This computes the factorial function ,COMMA  that we are familiar with this nothing new here .PERIOD  So ,COMMA  it has a variable I which keep track of how many times it has loop has executed and r is notice 4 .PERIOD  So ,COMMA  you compute the factorial of 4 .PERIOD  Finally ,COMMA  when r = 4  ;SEMICOLON  ans = 24  now ,COMMA  this 24 value we say return the answer value .PERIOD  So ,COMMA  answer value is 24 .PERIOD  So ,COMMA  this will be copied to the return value location .PERIOD  So ,COMMA  the return value will get the value 24 and now jump back to return address .PERIOD  So ,COMMA  return address is line 5 .PERIOD  So ,COMMA  will jump back to line 5 and there we will say that t1 = 24  .PERIOD  Only the return value is copied back to the main program all other things are irrelevant .PERIOD  So ,COMMA  the correct way to imagine what happens .PERIOD  When the function has returned is that ,COMMA  the stack that was allocated to main to the execution of fact is completely erased .PERIOD  So ,COMMA  once we go back to main as soon as the function returns back to the main .PERIOD  You should imagine that the entire stack is deleted ,COMMA  and only the memory that was originally allocated to main remains .PERIOD   So ,COMMA  the correct way to think about a function executing ,COMMA  you can imagine that ,COMMA  you are main and you have a friend ,COMMA  who can calculate factorial for you .PERIOD  Now ,COMMA  you can ask your friend to calculate factorial for you and things are done in a very hygienic manner .PERIOD  So ,COMMA  what you do is ,COMMA  you write on a piece of paper the number 4 and give it your friend .PERIOD  Now ,COMMA  your friend is another room .PERIOD  So ,COMMA  he has at his disposal some black board .PERIOD  So ,COMMA  he looks at the number 4 and using the private local variables that he has ,COMMA  which is i and a result or answer ,COMMA  he calculates the factorial of these numbers .PERIOD  Once see does that ,COMMA  he copies the result back on to a piece of paper .PERIOD  So ,COMMA  4 factorial is 24 and brings it back to you .PERIOD  Before he does that ,COMMA  he erases the black board and he will bring back the number 24 on a piece of paper .PERIOD  Now ,COMMA  you can imagine that the space that your friend used to compute 24 has now been wipe clean .PERIOD  And all that remains is the value 24 which you can copy back on to your note book .PERIOD  So ,COMMA  this allegory tells you exactly what happens in the case of function execution .PERIOD  You write down what you want the factorial of on a piece of paper ,COMMA  pass it your friend ,COMMA  he will go to a separate room .PERIOD  And he will calculate whatever he wants .PERIOD  Once he does that ,COMMA  he will clean his black board ,COMMA  right down the result on a piece of paper and bring that paper back to you .PERIOD  So ,COMMA  as far as you are concerned you are least bothered with how he is computing the factorial function .PERIOD  All you want as the result .PERIOD  And this is the basic way to thing about functions .PERIOD  You should be able to reason out a bigger program by saying ,COMMA  what does as a smaller program ,COMMA  what does as a smaller function do regardless of how that function does it .PERIOD  Now ,COMMA  let us get on with the remaining execution .PERIOD  We have just computed factorial of 4 .PERIOD  Now ,COMMA  we need to calculate factorial of 2 and factorial of 4 minus 2 .PERIOD  So ,COMMA  we go to the next line ,COMMA  the next line also involves the call to factorial of k .PERIOD  So ,COMMA  we do the same things again ,COMMA  we save the return address .PERIOD  Now ,COMMA  the return address is 6 .PERIOD  Because ,COMMA  we are executing line 6 ,COMMA  then we create a box for the return value and pass the parameters ,COMMA  and finally ,COMMA  jump to the called function .PERIOD  So ,COMMA  we do all that we have some memory for main .PERIOD  But ,COMMA  we allocate a new space in the stack for executing factorial .PERIOD  At this point return address is 6 .PERIOD  Because ,COMMA  it is a second factorial that is being called ,COMMA  r is 2 ,COMMA  because ,COMMA  k is 2 and you execute the factorial function .PERIOD  So ,COMMA  you again go to the factorial function and calculate 2 factorial ,COMMA  2 factorial is 2 .PERIOD  So ,COMMA  that will be transferred back to the return value And now you can imagine that ,COMMA  you will get back to the address 6 ,COMMA  where t2 will have the value 2 .PERIOD  So ,COMMA  once you do that again the thing to imagine is that ,COMMA  this slate is wiped clean .PERIOD  And all the memory that you allocated to the stack is now free .PERIOD  So ,COMMA  all once you are back in main all you have as the memory for me .PERIOD  Now ,COMMA  there is the third call to factorial .PERIOD  Fact(n-k)  and it is done in exactly the same manner without much elaboration .PERIOD  So ,COMMA  it will create n - k is 4 - 2 which is also 2 and the return address is 7 equation n .PERIOD  And once you do that ,COMMA  it will execute the factorial code again ,COMMA  and calculate the factorial of 2 which is again 2 and return to line 7 .PERIOD  So ,COMMA  2 will be copied as the return value and once the execution finishes ,COMMA  you return to line 7 of main program .PERIOD  At this point ,COMMA  you say that t3 = 2 .PERIOD  And you can imagine that the stack allocated to factorial is now erased .PERIOD  So ,COMMA  at this point main has t1 = 24  ,COMMA  t2 = 2 and t3 = 2 .PERIOD  You have all the information that you need in order to calculate your result .PERIOD  So ,COMMA  you calculate (24/2)/2 and the answer is 6 which is 4 choose two .PERIOD  So ,COMMA  this illustrates how do you write a function ?QUESTIONMARK  How do you define a function ?QUESTIONMARK  And how do you call it ?QUESTIONMARK  And what actually happens when you execute a main function ?QUESTIONMARK  So ,COMMA  the execution of a function can be visualized as a stack .PERIOD  A stack is a part of memory ,COMMA  that is allocated as private to a new function that is being called .PERIOD  Once that function finishes execution ,COMMA  the stack is erased and you go back to the previous function .PERIOD  And you go back to the calling function .PERIOD  We have been talking about designing programs using functions .PERIOD  And the general  philosophy is that ,COMMA  you have a large task that you want to accomplish and you break it in to sub task ,COMMA  may be each of those sub task are split it in to smallest sub task  and so on .PERIOD  So ,COMMA  break them until some sub task can be easily solved by single function .PERIOD  And then ,COMMA  you put all these function together in order to solve the whole problem .PERIOD  So ,COMMA  design your program from top down ,COMMA  big task decomposing into small task and so on .PERIOD  And debug your program or make sure that they are free of errors from the bottom up .PERIOD  So ,COMMA  test each functions thoroughly and then test the overall program .PERIOD  In this ,COMMA  we will discuss a few technical details about how C executes its functions .PERIOD  In particular we will see how C passes arguments to it is functions ,COMMA  and also how does a return values .PERIOD  When passing arguments will talk about issues like evaluation order ,COMMA  in what order are arguments evaluated ,COMMA  if there are multiple arguments .PERIOD  And we will discuss what are known as side effects .PERIOD  So ,COMMA  let us start by considering a very simple example .PERIOD  I have very simple function called sum which just adds up two variables x and y which are integers .PERIOD  Therefore ,COMMA  the return value is also an integer .PERIOD  Now ,COMMA  inside the main program I will call a = sum(a ,COMMA b) .PERIOD  A is 1 and b is 2 .PERIOD  And then ,COMMA  you will sum this up and the return value is assigned to a .PERIOD  So ,COMMA  this is suppose to do 1 plus 2 3 and a is assigned the value 3 .PERIOD  So ,COMMA  after passing the parameters sum is called with x as a ,COMMA  which is 1 and y as b which is 2 .PERIOD  So ,COMMA  sum returns 3 .PERIOD  So ,COMMA  the return value is 3 and the 3 is assigned back to a .PERIOD  So ,COMMA  when you print it ,COMMA  the output will be 3 followed by 2 .PERIOD  So ,COMMA  this is simple enough .PERIOD  Now ,COMMA  let us try ,COMMA  slightly more tricky example .PERIOD  So ,COMMA  here is the novelty in this example .PERIOD  Some instead of being declared with x and y are now being declared with two variables called a and b .PERIOD  The main program also has two variables ,COMMA  named a and b .PERIOD  So ,COMMA  what will happen here ?QUESTIONMARK  The output is the same as before .PERIOD  So ,COMMA  3 2 if you compile the program and execute it ,COMMA  it will be same as before .PERIOD  So ,COMMA  what really happened here ?QUESTIONMARK  After passing the parameters sum is call with a as 1 and b as 2 .PERIOD  And so it returns a value 3 assigned to the a of mean .PERIOD  Now ,COMMA  these variables are called a and b in main and they are called a and b in sum as well .PERIOD  Now ,COMMA  the variables a and b inside sum are different from the variables a and b inside main .PERIOD  So ,COMMA  the scope of these variable is mean and the scope of these variables a and b is the sum function .PERIOD  So ,COMMA  in other words the a and b inside sum has scope just this function ,COMMA  they are not visible or addressable outside especially in main .PERIOD  So ,COMMA  if you want to think of it ,COMMA  you can think of them as sum .PERIOD a ,COMMA  sum .PERIOD b .PERIOD  So ,COMMA  they are the a variable belonging to sum and the b variable belonging to sum .PERIOD  So ,COMMA  even though you would think that this a and this a may get confused they are actually different variables .PERIOD  One is the a variable belonging to main ,COMMA  and the other is the a variable inside sum and they are different ,COMMA  even though they have a common name .PERIOD   So ,COMMA  now let us a try a slightly more elaborate program ,COMMA  what happens if you have sum(sum(a ,COMMA b) ,COMMA b) ,COMMA  this is the program .PERIOD  In this case what will happen ?QUESTIONMARK  So ,COMMA  first evaluate the in a program ,COMMA  in a function sum of a b .PERIOD  So ,COMMA  a is 1 and b is 2 .PERIOD  So ,COMMA  that will return 3 ,COMMA  then you add b again to it b is 2 ,COMMA  you have 5 as the total sum .PERIOD  So ,COMMA  the total the complete output is a will be assigned 5 and b is still 2 .PERIOD  So ,COMMA  this is similar to evaluating a normal mathematical expression .PERIOD  One thing that we need to take care of is to handle expression with side effects .PERIOD  Now ,COMMA  what are expression with side effects ?QUESTIONMARK  So ,COMMA  let us classify expression into two kinds ,COMMA  one is what are known as pure expressions .PERIOD  So ,COMMA  they are the normal mathematical expression ,COMMA  like a- b * c/d and so on .PERIOD  Similarly evaluating function ,COMMA  these normally do not have any effect other then returning you the value .PERIOD  So ,COMMA  they will they will be correctly evaluated and they will return some value ,COMMA  other than that ,COMMA  they have no effect .PERIOD  Now ,COMMA  expressions with side effects change the state of the program .PERIOD  For example ,COMMA  when I execute an expression a = a +1 .PERIOD  Now ,COMMA  this is an expression ,COMMA  it has a value .PERIOD  So ,COMMA  let us say that a was 1 before a = a +1 .PERIOD  A plus 1 has value 2 and a is assign the value 2 .PERIOD  The state of the program involves ,COMMA  for example ,COMMA  what values are stored in the variables .PERIOD  When you execute the expression a = a +1 ,COMMA  the value of the variable a changes .PERIOD  Contrast this with previous expression ,COMMA  like a minus b star c slash d .PERIOD  You can see that ,COMMA  unless you assign to something no variables value is changing ,COMMA  it will just evaluated and the value will be return .PERIOD  Here ,COMMA  the value will be returned also variable a is changing .PERIOD  Here ,COMMA  in this second function you have two arguments ,COMMA  two function f .PERIOD  The first is the expression a = b +1 ,COMMA  the second is an expression b = a + 1 .PERIOD  This might sound like a very strange way to code .PERIOD  But ,COMMA  you know that any expression can be given as arguments .PERIOD  So ,COMMA  in particular assignment expressions can be given as arguments .PERIOD  For example ,COMMA  a = b +1 is an assignment expression ,COMMA  which is given as an argument to the function .PERIOD  Now ,COMMA  such expressions are called expressions with side effects ,COMMA  because ,COMMA  the change the state of the program .PERIOD  When you have side effects you should be careful .PERIOD  For example ,COMMA  what will happen in the following program ?QUESTIONMARK  You have function int minus(int a ,COMMA  int b) and it returns b - a .PERIOD  Now ,COMMA  in this program main calls the minus function with two expressions as arguments a = b +1 and b = a + 1 .PERIOD  They are expressions with side effects ,COMMA  because ,COMMA  once evaluate these arguments ,COMMA  you know that the variable a will change in the first expression and the variable b will change the second expression .PERIOD  So ,COMMA  what will happen in this program ?QUESTIONMARK  So ,COMMA  how should we evaluate it ?QUESTIONMARK  The general rule is that all arguments are evaluated before the function call is made .PERIOD  So ,COMMA  before the function is executing ,COMMA  we know that a = b +1 and b = a + 1 both will be executed .PERIOD  But ,COMMA  and here is the major problem ,COMMA  we know that both have to be executed .PERIOD  But ,COMMA  C does not specify in which order they have to be executed ,COMMA  so ,COMMA  it was the left to the compiler .PERIOD  So ,COMMA  let is evaluate it in first in left right order .PERIOD  So ,COMMA  this expression first and then b = a + 1 .PERIOD  So ,COMMA  what will happen then ?QUESTIONMARK  a = b +1 b is 1 .PERIOD  So ,COMMA  a will get the value 2 ,COMMA  b = a + 1 will be executed after that a is now 2 .PERIOD   So ,COMMA  b will get the value 3 .PERIOD  Now ,COMMA  you execute minus .PERIOD  So ,COMMA  you will return 3 - 2 which is 1 and b has value 3 .PERIOD  So ,COMMA  this is the expected output .PERIOD  But ,COMMA  when you run it on some machines ,COMMA  you may get the output -1 3 .PERIOD  So ,COMMA  what happened here ?QUESTIONMARK  Now ,COMMA  this happens for example ,COMMA  when the compiler would evaluate it right to left .PERIOD  So ,COMMA  when you evaluate it right to left what will happen is that b = a + 1 will be executed first .PERIOD  So ,COMMA  b = a + 1 ,COMMA  b gets the value 2 plus 1 3 .PERIOD  And then ,COMMA  you will execute a = b +1 ,COMMA  b is now 3 .PERIOD  So ,COMMA  a gets the value 4 .PERIOD  So ,COMMA  when you call minus of 4 comma 3 minus will return 3 -4 which is -1 .PERIOD  So ,COMMA  in this case you know that b gets the value 3 ,COMMA  a gets the value 4 and the result will be -1 .PERIOD  So ,COMMA  what was the mistake ?QUESTIONMARK  The mistake was that we assume that both arguments will be evaluated before the function is called .PERIOD  But ,COMMA  we assume that it will be evaluated left to right .PERIOD  And the first expression will be evaluated before the second expression ,COMMA  that is the reasonable assumption to make .PERIOD  But ,COMMA  c does not guarantee you that ,COMMA  c leaves this decision to the compiler .PERIOD  Now ,COMMA  compilers may evaluate arguments in different orders .PERIOD  For example ,COMMA  a very common order is right to left .PERIOD  So ,COMMA  both answers like 1 and 3 and -1 and 3 are both consistent with the c specification .PERIOD  Now ,COMMA  this is the very troubling is scenario ,COMMA  what should we do ?QUESTIONMARK  So ,COMMA  we should write this function in such a way that ,COMMA  they do not depend on whether the arguments are evaluated left to right or whether they are evaluated right to left .PERIOD  So ,COMMA  write expressions in such way ,COMMA  that they are free of side effects ,COMMA  when you pass them into functions .PERIOD  So ,COMMA  how do we do that ?QUESTIONMARK  We can do the following .PERIOD  For example ,COMMA  if we really wanted the left to right order ,COMMA  that is if you want a = b +1 to happen first and then b = a + 1 .PERIOD  Why not write them explicitly that order in the main function .PERIOD  So ,COMMA  first this will be executed then b = a + 1 will executed .PERIOD  So ,COMMA  a will get the value 2 and then b will get the value 3 .PERIOD  So ,COMMA  minus ( a ,COMMA  b) will execute as 3 - 2 in which case you will get 1 .PERIOD  So ,COMMA  the important thing to note is that ,COMMA  in this particular function called ,COMMA  the arguments do not have any side effects .PERIOD  Because ,COMMA  we explicitly coded them up before to specify that ,COMMA  this is the order in which I want .PERIOD  If put it here ,COMMA  then it is up to the compiler ,COMMA  the compiler can do whatever is best in for several criteria .PERIOD  So ,COMMA  now let us come back to what the  function ,COMMA  we have the function definition which is the entire function .PERIOD  The logic of the function is what is known as the function body .PERIOD  And the heading is what we call the type signature .PERIOD  The type signature has for example ,COMMA  two arguments a and b these are call the formal parameters .PERIOD  Now ,COMMA  we focus on the return expression .PERIOD  So ,COMMA  return followed by some expression is the only mechanism for returning the value from a function .PERIOD  If the type of return expression does not match the declare type of the return .PERIOD  So ,COMMA  if for example ,COMMA  a is of a variable which is different from int .PERIOD  In this case they are the same ,COMMA  then it is fine .PERIOD  But ,COMMA  otherwise the return expression is converted to this type and then returned .PERIOD  So ,COMMA  it might lead to some undesirable variable .PERIOD  Now ,COMMA  we have discussed parameter passing’s in when passing parameters in c ,COMMA  the values from the calling function are copied to formal parameters in the called function .PERIOD  So ,COMMA  the actual parameters are converted to the formal parameter type and separate copies made .PERIOD  So ,COMMA  this is known as call by value .PERIOD  So ,COMMA  formal parameters and local variables are the function are accessible only within the function ,COMMA  we have already see in this .PERIOD  And memory for the formal parameters and the local variables of the called function will be erased as soon as function returns .PERIOD  So ,COMMA  executing return any where inside the function will immediately return from the function .PERIOD  And transfer control back to the calling function at the specified return address So ,COMMA  when you execute there are few things keep in mind .PERIOD  Whenever ,COMMA  you execute any return expression ,COMMA  it will cause the function to immediately return .PERIOD  Now ,COMMA  main is a function so ,COMMA  we can use return statement inside main what ;SEMICOLON  that means ,COMMA  the main will immediately stop execution .PERIOD  That is the whole program will stop execution .PERIOD  Now ,COMMA  when you return a particular value ,COMMA  the calling function may choose to ignore the value .PERIOD  For example ,COMMA  let us say that I write some dummy function int f and it takes two argument float a and int b and we some code here .PERIOD  And then ,COMMA  I have the main function in which I have two variable int x and float y .PERIOD  Then ,COMMA  I have some code and here is the interesting thing ,COMMA  I call f(y ,COMMA x) ,COMMA  y is an float x is an int .PERIOD  So ,COMMA  I am find ,COMMA  but this function returns an integer value .PERIOD  But ,COMMA  I am not assigning it to anything .PERIOD  So ,COMMA  I am not saying something like x = f(y ,COMMA x) .PERIOD  So ,COMMA  this is not required .PERIOD  So ,COMMA  if this is the case ,COMMA  then why call the function in the first place ?QUESTIONMARK  This is ,COMMA  because the function also may have side effects .PERIOD  So ,COMMA  remember that side effects are something some expressions ,COMMA  we change the state of the program .PERIOD  So ,COMMA  functions may have side effects ,COMMA  your already seen one such function which has the side effect for examples ,COMMA  scanf .PERIOD  So ,COMMA  the side effect of calling scanf is that the input from the keyboard is copied into some variable .PERIOD  So ,COMMA  function may have side effect ,COMMA  this is why you can call the function and choose to ignore the output or the return value .PERIOD  Now ,COMMA  just for curiosity sake executing return will calls the function to immediately return to the return address .PERIOD  Now ,COMMA  the return value if you omit it ,COMMA  then the return value is unpredictable .PERIOD  So ,COMMA  here is a example ,COMMA  you should in general avoid doing things like this .PERIOD  But ,COMMA  just for completeness ,COMMA  I am supposed to return a float value instead if I just say a return ,COMMA  the program will compile .PERIOD  But ,COMMA  when you execute some unpredictable behavior may result .PERIOD  So ,COMMA  the printed value in this case can in general will not predictable .PERIOD  With the concepts we have seen so far ,COMMA  let us design a sample program .PERIOD  So ,COMMA  the… What we … The problem that we want to solve is we want to write a program that reads the input line-by-line ,COMMA  and counts how many lines has the user input .PERIOD  Program should terminate when the end-of-file character is encountered .PERIOD  So ,COMMA  we will try to solve this problem .PERIOD  By the way ,COMMA  the end of file is a character ,COMMA  which you can enter using control-D if you are running Linux .PERIOD  So ,COMMA  the flowchart at the very top level can be envisioned as follows .PERIOD  So ,COMMA  we will just check has the end-of-file been reached .PERIOD  If the end-of-file has not been reached ,COMMA  you read the next line .PERIOD  If it is has been and check again .PERIOD  If the end-of-file has been reached ,COMMA  then you halt ;SEMICOLON  otherwise you read another line .PERIOD  So ,COMMA  here is the very toplevel picture of what we want to do .PERIOD  So ,COMMA  this design is just meant to read the input lineby-line .PERIOD  So ,COMMA  it is a very vague flowchart ,COMMA  but at the top level ,COMMA  this is what we want to do .PERIOD  So ,COMMA  let us say more details about how we are going to accomplish this .PERIOD  In particular ,COMMA  we want to see how we can read and put line-by-line .PERIOD  So ,COMMA  here is the top-level design .PERIOD  And now we are going to essentially expand this box .PERIOD  We want to say how do we read the next line .PERIOD  So ,COMMA  let us design the read next line box .PERIOD  So ,COMMA  the read next line box ,COMMA  first you read a character and then you check whether the character read is new line character ;SEMICOLON  that means that the user has pressed an enter .PERIOD  So ,COMMA  the line is ended at that point or the user can enter a bunch of characters ;SEMICOLON  and instead of pressing enter ,COMMA  press control D .PERIOD  So ,COMMA  the user can enter end-of-file .PERIOD  If either of these are true ,COMMA  then the line has ended .PERIOD  So ,COMMA  you halt .PERIOD  Otherwise ,COMMA  if the character is neither new line nor end-of-file ,COMMA  then you read the next character .PERIOD  So ,COMMA  here is the design for the function to read the next character – next line .PERIOD  So ,COMMA  you read character-by-character ;SEMICOLON  after every character ,COMMA  you check whether a new line or an end-of-file has been encountered .PERIOD  If either of them happen ,COMMA  then the line has ended ;SEMICOLON  otherwise ,COMMA  you go back and read another character .PERIOD   So ,COMMA  let us start by writing the top-level function .PERIOD  So ,COMMA  let us translate the top-level function into code .PERIOD  So ,COMMA  here we will introduce a new concept called what is known as a forward declaration .PERIOD  So ,COMMA  when you define a function ,COMMA  you can either give the logic – the full function body when you define the function or you can just say that ,COMMA  here is what the function will look like ;SEMICOLON  here is the type signature ;SEMICOLON  basically ,COMMA  it is taking no arguments and it will return an integer value .PERIOD  And I will terminate that statement by using a semicolon ;SEMICOLON  which says that ,COMMA  this function… I will currently just say the type of the function ;SEMICOLON  I will define the function later .PERIOD  This is done ,COMMA  so that we can write a function ,COMMA  which uses this particular function .PERIOD  So ,COMMA  when we write a function ,COMMA  which uses that function ,COMMA  the type of the function should be known .PERIOD  For that we can just declare the type of the function .PERIOD  This is what is known as a declaration of a function .PERIOD  Unless you define the function ,COMMA  you cannot use it ;SEMICOLON  but in order for another function to just see what the function looks likes ,COMMA  declaration is sufficient .PERIOD  So ,COMMA  let us design the top-level function .PERIOD  So ,COMMA  we declare this function that ,COMMA  we will use in this function that we are about to write .PERIOD  So ,COMMA  this user function will be called read all lines .PERIOD  Now ,COMMA  in that ,COMMA  we will keep a line count initialized to 0 ;SEMICOLON  and then I will keep a flag called isline .PERIOD  Now ,COMMA  what this will do is we have to check for whether an end-of-file has been reached or not .PERIOD  For that ,COMMA  I will use the function feofstdin .PERIOD  We will see that in a minute .PERIOD  While the end-of-file has not been encountered ,COMMA  you say that ,COMMA  read next line ;SEMICOLON  read next line will return a 1 if a line has been encountered ;SEMICOLON  otherwise ,COMMA  it will return a 0 .PERIOD  So ,COMMA  line count will be incremented by 1 if I read another line ;SEMICOLON  otherwise ,COMMA  it will remain as it is .PERIOD  Finally ,COMMA  you return the number of lines read .PERIOD  So ,COMMA  this is a realization of the flowchart on the left .PERIOD  Now ,COMMA  there are a couple of things that require explanation .PERIOD  First is that even though the read next line function has not yet been defined ,COMMA  just based on the declaration ,COMMA  I can say that ,COMMA  it is going to return an integer and I can use the integer here .PERIOD   The other thing is what do we mean by feofstdin ?QUESTIONMARK  So ,COMMA  what do we mean by the function feof ?QUESTIONMARK  So ,COMMA  feofstdin is a function that is part of the stdio library .PERIOD  We have already used other functions from that library .PERIOD  For example ,COMMA  printf and scanf .PERIOD  Now ,COMMA  the feof function – what it does is – it returns a function ;SEMICOLON  it returns a value 1 if the end-of-file has been encountered in the input argument .PERIOD  So ,COMMA  stdin means that ,COMMA  I am using the standard input ,COMMA  which is the keyboard input .PERIOD  So ,COMMA  if and end-of-file has been entered via the keyboard ,COMMA  then feofstdin will return 1 .PERIOD  So ,COMMA  stdin is usually the keyboard input .PERIOD  And usually ,COMMA  if the user enters the control D character ,COMMA  then feof will say 1 ,COMMA  because end-of-file has been entered .PERIOD   Now ,COMMA  let us design the function to read a line .PERIOD  We earlier wrote a function ,COMMA  which assumed that ,COMMA  there is a function ,COMMA  which will read the next line ;SEMICOLON  and based on that ,COMMA  I will keep on reading lines until the end-of-file is encountered .PERIOD  So ,COMMA  we are now about to write the bottom function .PERIOD  So ,COMMA  we want to read a line .PERIOD  So ,COMMA  we have already drawn the flowchart for that .PERIOD  Now ,COMMA  let us try to make it into code .PERIOD  So ,COMMA  we have to design a few variables ;SEMICOLON  we will have int ch for reading a character ;SEMICOLON  we will come to that in a minute ;SEMICOLON  then we will keep a count of how many characters have been read .PERIOD  And let us write the basic loop .PERIOD  So ,COMMA  we will just write the loop corresponding to the flowchart ;SEMICOLON  ch will be getchar .PERIOD  So ,COMMA  get the next character .PERIOD  And while ch is… While the read character is neither end-of-file nor new line ,COMMA  you should keep reading characters .PERIOD  So ,COMMA  if neither of this is true ,COMMA  then you should read the next character ,COMMA  which is what the flowchart says .PERIOD  A slight… a small point here is that ,COMMA  getchar returns an integer .PERIOD  This is a technicality because end-of-file is negative 1 .PERIOD  ASCII characters if you remember ,COMMA  go from 0 until 127 or something like that ;SEMICOLON  whereas ,COMMA  end-of-file is defined to be -1 .PERIOD  So ,COMMA  because of this -1 ,COMMA  you cannot keep the return value of getchar as a character ;SEMICOLON  it technically has to be an integer .PERIOD  Now ,COMMA  this is a technicality .PERIOD  So ,COMMA  keep that in mind .PERIOD  Now ,COMMA  we need to do something further in the loop .PERIOD  So ,COMMA  we will complete this in a minute .PERIOD  So ,COMMA  what should we do inside the loop ?QUESTIONMARK  This should be character .PERIOD  So ,COMMA  what is this function supposed to do overall ?QUESTIONMARK  We have to return a 1 ,COMMA  if the number of characters in the current line that we have read is at least 1 .PERIOD  So ,COMMA  if the current line contains at least a character ,COMMA  then we have to return 1 .PERIOD  For example ,COMMA  if the user just entered a new line ,COMMA  which is just press the enter key ,COMMA  there is a blank line .PERIOD  In that case ,COMMA  we would not say that ,COMMA  we have read a line ,COMMA  because it was a blank line .PERIOD  So ,COMMA  if there is at least one character ,COMMA  which is neither new line nor end-of-file in that line ,COMMA  we have to return a 1 ;SEMICOLON  otherwise ,COMMA  let us say we return a 0 .PERIOD  So ,COMMA  one way to do that is to keep a count of the number of the characters we have read .PERIOD  So ,COMMA  for every character read ,COMMA  we will keep a count of every character ,COMMA  which is neither end-of-file nor a new line ;SEMICOLON  we will keep a count of characters .PERIOD  So ,COMMA  notice the way that ,COMMA  the loop has been return .PERIOD  So ,COMMA  if the first character is a new line ,COMMA  it will not enter the loop .PERIOD  Hence ,COMMA  count remains 0 .PERIOD  At the same time ,COMMA  the way the loop is returned ;SEMICOLON  count will count exactly those characters ,COMMA  which are neither new line nor end-of-file .PERIOD   So ,COMMA  now ,COMMA  let us decide what should be the return value .PERIOD  We have to return a 1 if the number of characters in the current line including new line is at least 1 .PERIOD  So ,COMMA  if count is greater than 0 ,COMMA  we can return a 1 .PERIOD  If exactly 1 ;SEMICOLON  if the last character was end-of-file without having any other characters ,COMMA  then will return a 0 .PERIOD  So ,COMMA  how we do that ?QUESTIONMARK  We can check whether at least a character has been read by just checking the value of count .PERIOD   So ,COMMA  if count is greater than 0 ,COMMA  then at least one character has been entered ;SEMICOLON  otherwise ,COMMA  for example ,COMMA  we can also say that ,COMMA  if the user has just entered a blank line ,COMMA  then also we can say that ,COMMA  one more line has been entered .PERIOD  So ,COMMA  that is up to the way you want to do it ;SEMICOLON  you can also take the stance that ,COMMA  maybe a blank line does not count as a line .PERIOD  If that is the case ,COMMA  then you do not have to do it ;SEMICOLON  but in this case ,COMMA  let us just assume that ,COMMA  if at least a character has been entered ,COMMA  which is either a normal character on a new line ,COMMA  we will say that ,COMMA  return 1 .PERIOD  If the only character entered in that line is end-of-file ,COMMA  we will say that ,COMMA  there is no more new line .PERIOD  So ,COMMA  what we have to do is return count greater than 0 ;SEMICOLON  this tells you how many non-new-line ,COMMA  non-end-of-file characters have been entered .PERIOD  So ,COMMA  this should be at least 1 ;SEMICOLON  or ,COMMA  there is exactly one character entered ,COMMA  which is a new line .PERIOD  So ,COMMA  neither these cases we will return a 1 ;SEMICOLON  otherwise ,COMMA  we will return a 0 .PERIOD   So ,COMMA  we can put these programs together by concatenating all the code that we have written .PERIOD  Notice one thing that declare the function first ;SEMICOLON  we use the function here .PERIOD  So ,COMMA  here is a top-level function ,COMMA  which will use read next line .PERIOD  When read all lines uses read next line ;SEMICOLON  read next line has not been defined yet .PERIOD  So ,COMMA  you can go here after read all lines has been defined ,COMMA  you can define read next line .PERIOD  So ,COMMA  here is a function here .PERIOD  So ,COMMA  this is function 1 ,COMMA  this is function 2 ,COMMA  and finally you have made .PERIOD  Read all lines does not need any forward declaration ,COMMA  because when main uses read all lines ,COMMA  it has already been defined .PERIOD  That was not the case here .PERIOD  When read all lines used to read next line ,COMMA  read next line was not defined yet .PERIOD  That is why we needed a forward declaration .PERIOD  In this program ,COMMA  you can reorder the code such that read next line code can be written before in which case you do not need the forward declaration .PERIOD  But the concept of forward declaration is useful for later discussion .PERIOD  So ,COMMA  I have just introduced that .PERIOD     This session will learn about arrays in C .PERIOD  Now ,COMMA  what is the word array mean ,COMMA  it means a grouping or a collection of objects .PERIOD  So ,COMMA  for example ,COMMA  you could say that he could not dismiss the array of facts .PERIOD  So ,COMMA  that means ,COMMA  a collection of facts and it also implies a regular order or arrangement that is in the case of a series .PERIOD  So ,COMMA  what do we mean by an array ?QUESTIONMARK  And why do we need it ?QUESTIONMARK   So ,COMMA  let us consider that I have a bunch of numbers say 1 ,COMMA 2 ,COMMA 3 ,COMMA 4 and I want to consider them as being part of the sequence .PERIOD  Let us say 1  ,COMMA  2  ,COMMA  3  ,COMMA  4 .PERIOD  So ,COMMA  the first element is 1 and so on .PERIOD  Now ,COMMA  I want them to be stored and one way I can do it is that ,COMMA  I can store them in to separate variables .PERIOD  For example ,COMMA  I can say that a is 1 ,COMMA  b is 2 and c is 3 and d is 4 .PERIOD  But ,COMMA  when I do it in that way ,COMMA  they are separate variables and the relationship between those variables ,COMMA  the fact that b comes after a and things like that is something that the programmer knows ,COMMA  but it is hard for somebody else looking at the code to figure out .PERIOD  Often we need to store sequence as a sequence itself .PERIOD   So ,COMMA  an array has the following properties ,COMMA  one it is a collection of objects of the same type .PERIOD  Second ,COMMA  is that it has some size ,COMMA  some finite size say n there are n elements in the array and the third is that ,COMMA  I should be able to selectively update only a single element in the array .PERIOD  By which I mean ,COMMA  suppose I have four elements in the array I should be able to say that ,COMMA  I want to replace the third element by 5 .PERIOD  So ,COMMA  3 will be replaced by 5 without touching the other elements ,COMMA  that is what the third thing is about The first thing says that I want a collection such that it is a collection of objects of all of type integer and not of any other type .PERIOD  And the second says that ,COMMA  it has a some finite size so ,COMMA  it is not an infinite collection ,COMMA  so ,COMMA  that is what an array is supposed to do .PERIOD  Now ,COMMA  let us see how we can define arrays ,COMMA  will try to motivate why arrays are needed by introducing certain problems .PERIOD  And I will try to convince you that it is easy to do using arrays and whereas ,COMMA  it was difficult to do without using arrays ,COMMA  using only the facilities in c that we have seen so ,COMMA  far .PERIOD   So ,COMMA  an array is defined in c ,COMMA  similar to how we define a variable .PERIOD  If we had an integer variable we would say int a semicolon instead of that when we declare an array we have int a 5 .PERIOD  So ,COMMA  this would declare that it is an array containing 5 integers .PERIOD  Now ,COMMA  one thing that is certain about arrays in c is that ,COMMA  the five integers which makeup the array will be allocated consecutively in memories so ,COMMA  they will happen one after the other .PERIOD  Also one think to note is that ,COMMA  arrays in c start with index 0 so ,COMMA  the first element is a 0 .PERIOD  So ,COMMA  if we have an array of five elements it will go from a 0 to a 4 .PERIOD  So ,COMMA  have we seen arrays and mathematics for example ,COMMA  you can think of vectors similarly matrices these are all arrays and c arrays will have similarities to mathematical vectors and mathematical arrays .PERIOD  But ,COMMA  note that in mathematics ,COMMA  it is customary to start from index 1 ,COMMA  here it is from index 0 .PERIOD  So ,COMMA  the boxes are addressed as a 0 to a 4 these are called the elements of array .PERIOD  The array is the whole collection of boxes and each box in it will be called an element of array .PERIOD   Now ,COMMA  let us consider a simple program using an array .PERIOD  So ,COMMA  I mentioned that the third requirement that I want for in array is that… So ,COMMA  that first requirement was that all elements of the array are of the same type .PERIOD  Second requirement was that ,COMMA  it has a finite size and that the third requirement is that I should be able to selectively update only one element of the array without touching the other elements .PERIOD  So ,COMMA  let us see a program where we can do all that .PERIOD  So ,COMMA  here is a simple program it declares an integer I and integer array a five and then a for loop .PERIOD  So ,COMMA  let see what the for loop is supposed to do .PERIOD  So ,COMMA  the for loop starts from i qual to 0 and then goes from i = 0 to 5 ,COMMA  filling in the elements by sing the statement a[i] equal to i .PERIOD  So ,COMMA  let us  see what that is supposed to do .PERIOD   So ,COMMA  this is the notation a i is the notation used to address the elements of the array .PERIOD  So ,COMMA  notice the similarity here a 5 when you declare it say's that it is an array of size 5 .PERIOD  a[i] is saying that I want the I th element in the array .PERIOD  So ,COMMA  when i = 0 it will refer to the 0th element in the array until i = 4 .PERIOD  It will go on and till the fourth element of the array .PERIOD  So ,COMMA  a of 5 similar to a of 5 the way we row declare the array say's I want the ith element of the array .PERIOD  So ,COMMA  the variable I is being used as an index for a ,COMMA  that means ,COMMA  if I say a[i] will pick the ith cell ,COMMA  in the ith element in the array .PERIOD  Now ,COMMA  this is similar to the mathematical notation a subscript i ,COMMA  which is what we normally use for vector and matrices .PERIOD   So ,COMMA  let us run through the program once to see what is doing .PERIOD  So ,COMMA  first we declare a 5 ,COMMA  which is five consecutively allocated integers in the memory .PERIOD  And we also have a variable i ,COMMA  i starts with 0 and for this 0th iteration a[i] is allocated let say i + 1 ,COMMA  so ,COMMA  a 0 will be 1 then we update i .PERIOD  So ,COMMA  this statement becomes  a[1] = 1 + 1which is 2 .PERIOD  So ,COMMA  and then execute it a 2 becomes 3 ,COMMA  a 3 becomes 4 and a 4 becomes 5 .PERIOD  So ,COMMA  notice that because we have indices ,COMMA  and indices can be numbers ,COMMA  they can also be replaced by integer expressions ,COMMA  ,COMMA  this is the trick that we have used here .PERIOD  So ,COMMA  a a[i] goes from a 0 all the way up to a 4 .PERIOD    So ,COMMA  one thing is ,COMMA  we have to take care of the size of the array .PERIOD  For example ,COMMA  if we have an integer array of size 5x this means that 5 integer variables named x0 to x4 are allocated .PERIOD  Now ,COMMA  the variables x0 to x4 are integers and they can be assigned and also they can be operated on ,COMMA  they can be part of other expressions and so ,COMMA  on .PERIOD  Now ,COMMA  what about arbitrary integers ,COMMA  we know that 0 to 4 are valid integers what about 5 and so ,COMMA  on .PERIOD  What happens to x5 ,COMMA  x66 something like that .PERIOD  Similarly ,COMMA  what happens what will happen if I right x[-1] what are these valid .PERIOD  So ,COMMA  the answer is no ,COMMA  you cannot in general assume that indices other then 0 to 4 make any sense .PERIOD  Your program may crash and this is the most important thing in c programing when we use the array it is the main part of it ,COMMA  because it is not even guaranteed that a program will crash .PERIOD  So ,COMMA  you may run the program once with x of 5 let us say and the program will work fine .PERIOD  And you will be under the false impression that everything is correct in our program ,COMMA  but the next time you run it ,COMMA  may be your program will crash .PERIOD  So ,COMMA  it is not even guaranteed that it will crash ,COMMA  if it is guaranteed that it will crash ,COMMA  then of course you can know that there is an error ,COMMA  and you can go back to the code .PERIOD  In this case you just you have to be careful when you write the code .PERIOD  So ,COMMA  x 5 x 6 and so ,COMMA  on are undefined ,COMMA  these are names ,COMMA  but there are no storage location that they correspond to ,COMMA  so ,COMMA  you should not access them .PERIOD   So ,COMMA  if you ask a very specific question ,COMMA  shouldn’t I access them are can’t I access them .PERIOD  So ,COMMA  what will happen if I write a code like this where I declare an integer array of size 5 then I know that x0 to x4 are valid location they are the first five locations .PERIOD  But the problem comes with statements like x[5] = 5 x of 6 equal 6 5 and 6 do not refer to valid locations in the array so ,COMMA  what will happen .PERIOD  So ,COMMA  the initial statements up to x[4] are all fine ,COMMA  but the last two statements x[5] = 5 x[6] = 6 lead to arrays will it compile ?QUESTIONMARK  Yes ,COMMA  if you just give the source code ,COMMA  with these erroneous locations it will compile ,COMMA  but c compiler does not check that the indices are within the proper range .PERIOD  So ,COMMA  it will compile and the compile will not tell you that there is anything wrong with there ,COMMA  but when you run a program the program will give something called a segmentation fault it may are may not give that .PERIOD  So ,COMMA  this is one of the most notorious errors when you program in c .PERIOD  So ,COMMA  we will see this error in greater detail when we understand something called pointers .PERIOD  But in general when you exceed the bounce of the array ,COMMA  when you go beyond the locations permissible in the array ,COMMA  your code may crash and the code will crash usually with the error segmentation fault .PERIOD  So ,COMMA  if you run the program and if you see a segmentation fault this is a good indication that may be you are referring to locations in your array that do not exist .PERIOD  So ,COMMA  you should go back and rectify the code ,COMMA  but the danger is that ,COMMA  it may not always crash .PERIOD  So ,COMMA  the only way to be really sure is to go through your source code and examine it .PERIOD   Your program may crash ,COMMA  so ,COMMA  we have seen certain aspects of arrays in c so far .PERIOD   So ,COMMA  for example ,COMMA  let say that I declare a character array str of size 5 ,COMMA  so ,COMMA  it has five characters inside it .PERIOD  And let us say that I use the variable I as an index into the array .PERIOD  So ,COMMA  str[0] to str[4] can be addressed using the index i .PERIOD  So ,COMMA  if I have the index ,COMMA  I know that I can set particular values as str[i] = ‘a’ .PERIOD  Since ,COMMA  i is 0 this will set the 0th element in the array to character a .PERIOD  Similarly ,COMMA  if I say ch equal to str[i + 1] it will take whatever is in the first cell in str[1] and assign it to the variable ch .PERIOD  So ,COMMA  we can set particular element in an array like this .PERIOD  Similarly ,COMMA  we can also read the value in an element and then assign it to something else .PERIOD  So ,COMMA  these are possible with the help of an array now let us consider a particular example ,COMMA  which is the problem is as follows .PERIOD  We want a character array let say a size 100 and then we have to read input which is from the key board and store them in the array ,COMMA  After we have stored it we should stop ,COMMA  once at least hundred character have been written ,COMMA  because that is array size or when the user first end a file .PERIOD  Remember that you can press <Ctrl-D> to enter the end of file .PERIOD   Now ,COMMA  what we have to do is take the error ,COMMA  take the array and print it in the reverse order .PERIOD  Now ,COMMA  if you think for a little bit you can see that it is difficult to do this without an array .PERIOD  Instead of an array ,COMMA  if you are storing it in a single character ,COMMA  there is no way to store hundred characters in one variable and then print them in the reverse order right .PERIOD  Because the first character has to be printed at the end and last character entered has to be printed first .PERIOD  So ,COMMA  you need to remember all the characters ,COMMA  this is an intuitive reason why arrays are important for this problem .PERIOD  So ,COMMA  what is an example problem let say that we have m e or then new line then Moo <Ctrl-D> .PERIOD  So ,COMMA  when you reverse it ,COMMA  you will have oom then the new line then or emn and so ,COMMA  on .PERIOD  So ,COMMA  you have to reverse everything input .PERIOD  Similarly ,COMMA  if you have a string what you have to output is the exact reverse of the string including the spaces .PERIOD     So ,COMMA  this is what we just mentioned ,COMMA  the end of file character is usually -1 .PERIOD  So ,COMMA  it is not a valid as key value .PERIOD  So ,COMMA  the code at the top level looks like this ,COMMA  we have the logic to read a next character into the ch using getchar ,COMMA  and then we have a let us say while loop which says that ,COMMA  while the character is not the end of file ant the number of characters read count is less than 100 .PERIOD  You store the character into the array increment count and then read the next character .PERIOD  So ,COMMA  please look at the structure of the loop very carefully the s is a character array .PERIOD  So ,COMMA  technically it cannot hold end of file ,COMMA  but then if you think about it little bit you will see that we will never encounter the situation where ,COMMA  you will store end of file into the s array ,COMMA  because suppose first character is end of file then we will not even enter the loop .PERIOD  Now ,COMMA  at any point when we enter end of file ,COMMA  it will be at this point right we will read the character only here ,COMMA  before storing it into the array we will actually check whether it is end of file .PERIOD  So ,COMMA  we will not accidentally set the array to -1 at any point ,COMMA  so ,COMMA  character array suffices .PERIOD  So ,COMMA  think carefully about the way this loop has been interpreted .PERIOD   In particular ,COMMA  if I had just done this as the last line before the loop ended then ,COMMA  you would run into problems because you could store the end of files character into the s array by mistake so ,COMMA  just think about that issue .PERIOD  Now ,COMMA  here is an initial design and so ,COMMA  the overall design is that first you have to read into the array and then you have print it in reverse .PERIOD  So ,COMMA  let us make the read into array little bit more precise .PERIOD  So ,COMMA  we have ch = getchar() and because you are using the getchar function we have int ch ,COMMA  because it could also be an end of file .PERIOD  Now ,COMMA  the while loop says that while the ch is not end of file and the number of characters read is strictly less than hundred increment .PERIOD  So ,COMMA  you first set s[count] equal to the character read ,COMMA  ,COMMA  the increment count and then get the next character .PERIOD  So ,COMMA  this loop keeps on filing characters into the character array until you see either end of file or you have enter 100 characters .PERIOD    So ,COMMA  this is the array that we were doing and so ,COMMA  here is the code for printing the characters in reverse .PERIOD  So ,COMMA  here is the pseudo code where we said print s of I instead of that in c we have a particular function which will print the character which is put char .PERIOD  So ,COMMA  due to this the dual function of getchar .PERIOD  So ,COMMA  put char takes an character as an argument and prints it on to the standard output .PERIOD  So ,COMMA  you have int i i is set to be count -1 because that way we will get the last index of the character in the array and then you start counting down until use print the first character and till the end of the array ok .PERIOD   So ,COMMA  putting these two together ,COMMA  you have the read into array part and then you have the reverse part print in reverse part .PERIOD  So ,COMMA  when you put these two together the first thing you do is ,COMMA  bring all the declarations together .PERIOD   So ,COMMA  this is the declarations for read into array as well as print to put together .PERIOD  Similarly ,COMMA  first you have to print ,COMMA  you have to put the code for the read into array part and then the code for the print in reverse part ok .PERIOD   So ,COMMA  let us trace the execution for a small sample input .PERIOD  So ,COMMA  then we have the input is hello and then the user presses <Ctrl-D> for end of file ,COMMA  let see what will happen .PERIOD  So ,COMMA  you start reading into the array .PERIOD  So ,COMMA  s[count] with count equal to 0 starts setting the array .PERIOD  So ,COMMA  s 0 will be h and then h s 1 will be e and so ,COMMA  on .PERIOD  So ,COMMA  once ch becomes <Ctrl-D> the end of file character you will exit the loop .PERIOD  So ,COMMA  the character array is hello .PERIOD     In this lecture will just talk about how to initialize arrays .PERIOD  So ,COMMA  recall that we have  defined arrays as follows ,COMMA  if you declare an array float w[100] ,COMMA  it will declare an array of floats 100 floats consecutively allocated in memory .PERIOD  And we have also mention the fact that there is a separate box w ,COMMA  which will point to the first location in the array .PERIOD  So ,COMMA  it contains the address of the first location .PERIOD  In num[10] will declare and integer array of 10 integers plus one box which will hold the address of the first location ,COMMA  and so on .PERIOD  So ,COMMA  the arrays names ,COMMA  the cells of the array or the elements of the array are index from w[0] through w[99] the indices start from 0 .PERIOD  And we also mentioned that conceptually there is a separate variable called w ,COMMA  the name of the array which stores the address of w[0] .PERIOD    Now ,COMMA  it is not important that we use numbers as the size of the arrays ,COMMA  we can also use constant expression ;SEMICOLON  for example ,COMMA  we can say float w[10 * 10] .PERIOD  So ,COMMA  instead of saying 100 ,COMMA  we can give an arithmetic expression which evaluates 200 ,COMMA  and this has the same effect it will evaluate an array of 100 elements staring from w[0] to w[99] .PERIOD  And there is a separate box called w which move to the address of the first location ,COMMA  but what about using variables or variables size arrays ,COMMA  this is feature that we often which we had .PERIOD  So ,COMMA  what do I mean by that ?QUESTIONMARK  I could declare the following code int size ,COMMA  and then float w size and I could say scanf ( “%d” .PERIOD  &size ) ;SEMICOLON  .PERIOD  So ,COMMA  user enters the size of the array ,COMMA  and then I can enter 10 elements in to the array for example ,COMMA  but here the size of the array itself is a variable which depends on the user input .PERIOD  And we often wish that we would we would be able to allocate variable size arrays ,COMMA  but this is not allowed in Ansi C ,COMMA  it is allowed in the latest versions of C 99 C 11 and so on .PERIOD  We will avoid this feature for the purposes of this course ,COMMA  let us assume that array means they are declared to be of constant size .PERIOD  By constant size you can give the size as a particular number or you can give it as a constant expression ,COMMA  that is an arithmetic expression involving constants ,COMMA  but not general expressions .PERIOD   Now ,COMMA  let us just look at how can we create an integer array num and also initialize it to particular values ;SEMICOLON  for example ,COMMA  I want the num array to look like the following ,COMMA  it contains 7 cells having the values - 2 ,COMMA  3 ,COMMA  5 ,COMMA  - 7 ,COMMA  and so ,COMMA  on .PERIOD  Now I know that if C did not allow me to initialize arrays when I declared it ,COMMA  I could declare the array as int num 7 and then I will just write num[0] = - 2 ,COMMA  num[1] = 3 ,COMMA  and so on until num[6] = 11 .PERIOD  So ,COMMA  here is a way that I can create an array and ensured that this state is reached ,COMMA  but is there more convenient way of doing it .PERIOD  Can I start of the array with these contents .PERIOD  So ,COMMA  C allows you two ways do it .PERIOD  The first is I declare an int num[] and then specify what are the initial values ,COMMA  so - 2 so on up to - 11 within {} .PERIOD   So ,COMMA  this is one way to that C allows you to do this .PERIOD  The initial values are placed within curly braces and separated by  ,COMMA  ,COMMA  the size of the array need not be specified .PERIOD  So ,COMMA  I need not say that num[] has size 7 ,COMMA  it will allocate an array with enough space to hold 7 integers .PERIOD  Array elements are assigned in the order that you specified .PERIOD  So ,COMMA  num[0] will be - 2 ,COMMA  num[1] will be 3 ,COMMA  and so on .PERIOD  So ,COMMA  it is done in a reasonable manner .PERIOD  This also another way to do it ,COMMA  which is slightly different from way above ,COMMA  I can declare the size of an array .PERIOD  So ,COMMA  I declare an array of size 10 ,COMMA  and then give this initial value .PERIOD  What will happen in this case ,COMMA  is that it will make sure that the size of the array is at least equal to the size of list that I have given .PERIOD  So ,COMMA  I have given 7 elements ,COMMA  and I have declared an array of size 10 ,COMMA  7 is less than 10 .PERIOD  So ,COMMA  it is fine .PERIOD  So ,COMMA  I can declare an array of size 10 ,COMMA  I should give a value ,COMMA  I should give values at most 10 in number .PERIOD  So I can give a 10 or below .PERIOD  In this case ,COMMA  I give 7 numbers .PERIOD  So ,COMMA  what happens is that ,COMMA  array is initialized in the order elements given num[0] will be - 2 ,COMMA  num[1] will be three and so on ,COMMA  until num[6] will be 11 .PERIOD  7 elements are filled ;SEMICOLON  the remaining 7 elements are unspecified .PERIOD  So ,COMMA  they will be initialized to 0 .PERIOD   Now let me just remained you that if I had just declared an array int num[10] ,COMMA  and then put a semicolon .PERIOD  So ,COMMA  I had just declare an array without saying any initialization at all ,COMMA  then you should assume that the array contains or arbitrary values ,COMMA  you should assume that array contain Junk values ,COMMA  but if you initializes an array of size 10 ,COMMA  and give only 7 initialization values ,COMMA  then the C standard gives you the guarantee that the remaining elements are initializes to 0 .PERIOD  So ,COMMA  they are not junk .PERIOD   The recommended method to initialize an array is to give the list of initial values ,COMMA  and let the compiler decide what the size of the array it should be .PERIOD  So ,COMMA  if you give 7 initial values ,COMMA  it will decide that the array is of size 7 .PERIOD  Now is the following code correct ,COMMA  if I declare an array of size 100 num and give four initial values .PERIOD  So ,COMMA  this is correct ,COMMA  it creates num as an array of size 100 ,COMMA  the first four entries will be initialized as given .PERIOD  So ,COMMA  num[0] will be 0 ,COMMA  num[1] will be - 1 ,COMMA  num[2] will be 1 ,COMMA  num[3] will be - 1 ,COMMA  and then num[4] until num[99] ,COMMA  they are all set to 0 .PERIOD  So ,COMMA  after the initializations the array will look as follows ;SEMICOLON  the first four values are what we given and the remaining value are 0’s .PERIOD  Now is the following code correct ,COMMA  num[6] = and then you give a list of 7 values to initialize ,COMMA  is this correct ?QUESTIONMARK  The answer is no ,COMMA  it will not compile .PERIOD  So ,COMMA  if you right this code ,COMMA  and compile it using gcc ,COMMA  it you will get a completion error .PERIOD  Why is that ?QUESTIONMARK  We have declared an array of size 6 ,COMMA  but we have given 7 initial values .PERIOD  So ,COMMA  there is no way to do this .PERIOD  So ,COMMA  the rule of thumb is that either give no size for the array ,COMMA  and let the compiler figure out or if you do give a size it has to be at latest 7 ,COMMA  which is the number of values that you give ,COMMA  it can be 10 ,COMMA  it can be 100 ,COMMA  but it cannot be less than 7 .PERIOD  Now just like size can be not just numbers it can also be constant expressions ,COMMA  we can also have constant expressions as initialization values ok .PERIOD   So ,COMMA  for example ,COMMA  I can give num[] = 109 ,COMMA  then the character value A ,COMMA  character value A means it will take the ASCII value of A ,COMMA  65 or whatever it is .PERIOD  So ,COMMA  the first number will be 109 ,COMMA  the second number will be 65 ,COMMA  let us say if the ASCII value A is 65 ,COMMA  and the third value will be 7 * 25 * 1023 + ‘1’ .PERIOD  So ,COMMA  whatever the ASCII value of the character one is let say 90 or something .PERIOD  So ,COMMA  it will be added two this ,COMMA  constant expression ,COMMA  and it will be initialize to that value ;SEMICOLON  num[] two will be the result of evaluating this expression .PERIOD  So ,COMMA  the type of each initialization constant should be promotable or demotable to the array element type .PERIOD  So ,COMMA  the each value in the initialization list should be compatible with let us say integer ,COMMA  because we have declared the array of size of type integer .PERIOD  So ,COMMA  what do I mean by that ,COMMA  for example I can initialize an array num[] with initialization list 1 .PERIOD 09 ,COMMA  then  ,COMMA  A  ,COMMA  25 .PERIOD 25 .PERIOD  So ,COMMA  this is ok ,COMMA  because the floating point values can be downgraded to integers .PERIOD  So ,COMMA  may be this will be initialize to one then whatever the ASCII value ,COMMA  A is let us say 65 ,COMMA  and then 25 .PERIOD  Now ,COMMA  these are about constant expression .PERIOD  What about expression involving variables when we initialize an array .PERIOD  So ,COMMA  can we do something like this .PERIOD  int curr = 5 ,COMMA  and then the num[] array is initialize with {2  ,COMMA  curr*curr+5} ,COMMA  will this work .PERIOD  The answer surprisingly is yes that it will work on most compilers .PERIOD  So ,COMMA  the ANSI C allows constants expressions ,COMMA  and simple expressions for initialization values .PERIOD  Now simple is of course dependent on which compiler we are using .PERIOD  So ,COMMA  if you write a code ,COMMA  and compile using gcc with such an initialization may be or code will compile ,COMMA  and the movement you compile your code with a different compiler it may not compile .PERIOD   So ,COMMA  earlier I had said that the size of the array cannot be initialized using variable expressions .PERIOD  In ANSI C that is forbidden ,COMMA  but the initialization value ,COMMA  so the value that goes in to the array can involve variable expressions ,COMMA  this may or may not be supported .PERIOD  So ,COMMA  it is safe to assume that both the size of the array ,COMMA  and the initialization value can be done only using constant expressions ,COMMA  even though some compilers allow simple initialization values using variable expressions .PERIOD    Now how do we initialize character arrays ?QUESTIONMARK  Character arrays can be initialize like arrays of any other type ,COMMA  suppose we want the following array .PERIOD  s[] = ‘I’  ,COMMA  ‘ ’ ,COMMA ’a’ ,COMMA  ’m’ ,COMMA ’ ‘ ,COMMA  etcetera .PERIOD  So ,COMMA  I can initialize it just like a initialize the other array ,COMMA  I will not specify their size of s and then give this characters ,COMMA  I am DON .PERIOD  So ,COMMA  this is another way to specified and the last character is a null character ,COMMA  but C ‘also allows you to define what are known as string constants .PERIOD  So ,COMMA  we can also write s[] = “I am DON” ,COMMA  but now with in double quotes .PERIOD  So ,COMMA  this is known as a string constant ,COMMA  the null character is an implicit ending character inside a string constant .PERIOD  So ,COMMA  it is automatically added to the int .PERIOD  Now the string constants in C are specified by enclosing it in double quotes .PERIOD   In this video ,COMMA  will talk about initializing character arrays which are a special kind of arrays and has more features then ,COMMA  when it comes to initialization as compared to arrays of other type .PERIOD  So ,COMMA  they may be initialized just like any other array and suppose I want to initialize an array to the following values ,COMMA  the first is I second is a space character then a then m and so on .PERIOD  And the final character is a null character which will be given as ‘\0’ now we can write s .PERIOD  So ,COMMA  character s = [ ] without specifying a size and then followed by the list of characters .PERIOD  Notice that each character is enclosed in single quotes right .PERIOD  So ,COMMA  the space character is a ‘ ‘ and so on until the last which is a null character ,COMMA  which is ‘\0’ .PERIOD  But C also allows us to define what are known as string constants .PERIOD  So ,COMMA  in order to initialize an array a character array I can also write character s[] = “I am DON” .PERIOD  So ,COMMA  I am DON is a string constant in a every string constant that is a string enclosed in double quotes the null character is automatically added to the end .PERIOD  So ,COMMA  I want you to note this difference that ,COMMA  here we explicitly gave a null character at the end here we do not have to give that .PERIOD  Now C ;SEMICOLON  C string constant are specified by enclosing some text with in double quotes for a example ,COMMA  “I am a string”  Now ,COMMA  we will talk about how do we prints strings we have used sting constants many times .PERIOD  So ,COMMA  just take a moment to think back to see whether you can figure out where we have used string constants .PERIOD  So ,COMMA  we have used for them for example ,COMMA  in printf and scanf the first argument of a printf or a scanf was always a string constant ,COMMA  because if you recall we had some text in which involved special characters like new line .PERIOD  It involves formats specifiers as like %d ,COMMA  but whatever it was ,COMMA  it was a bunch of characters .PERIOD  So ,COMMA  it was a text inside a pair of double quotes that is a string constant .PERIOD  So ,COMMA  the first argument is the string constant followed by what all arguments we want to print .PERIOD  Similarly ,COMMA  even for scanf we had some say formats specifier enclosed in double brac double quotes ,COMMA  so ,COMMA  that is a string constant and then you say and value .PERIOD  So ,COMMA  strings are printed using the %s option .PERIOD  So ,COMMA  any of the basic data types in C can be easily printed using the printf statement if you give the correct format specifier .PERIOD  So ,COMMA  if you have a string constant you can print it using the %s option .PERIOD  For example ,COMMA  if I want to print the string “I am DON” then what I can do is I can say printf(“%s” ,COMMA  ”I am DON”) .PERIOD  And this will print I am DON which is exactly what I wanted to print .PERIOD  Now ,COMMA  what if I initialize a character array character str[ ] without specifying the size .PERIOD  I initialize it using a string constant I am great DON within double quotes .PERIOD  Then I print it using printf( “%s” ,COMMA  str) ,COMMA  will this work ?QUESTIONMARK  And the answer is yes it will work ,COMMA  because C will consider this as a string constant and it will print it using %s and you will get the correct output .PERIOD  So ,COMMA  state of memory after definition of this string in example two is that ,COMMA  it has a list of all these characters ‘I’ ,COMMA   ‘ ‘ ,COMMA  ‘a’ ,COMMA  ‘m’ ,COMMA ’ ‘ and so on and note the implicit null at the end .PERIOD  So ,COMMA  even though the double quotes ended just after n when you stored it in an array there is an implicit null that is inserted at the end of the array .PERIOD  So ,COMMA  when you print it will print until the null character .PERIOD  So ,COMMA  null character itself at the end of the string is not printed when you print it using %s .PERIOD    Now ,COMMA  let us look at the following fragment to understand slightly in a deeper way what %s thus when you print it using printf .PERIOD  So ,COMMA  suppose I declare an character array using character str[ ]= “I am GR8DON” .PERIOD  So ,COMMA  this is initialized using the string constant which means that after the last end ,COMMA  there will be a null character in the array .PERIOD  Now ,COMMA  I initialize i I said str[4] = ‘\0’ note that there are 11 non-null characters in the string constant .PERIOD  So ,COMMA  this goes from str[0] to str[10] followed by str[11] which is a null character .PERIOD  So ,COMMA  now ,COMMA  I said str[4] = ‘\0’ .PERIOD  So ,COMMA  somewhere in the middle of the string I put a null character .PERIOD  What will happen if I print it using printf %s ?QUESTIONMARK  So ,COMMA  let us see what happens here I declare the array and initialize it using a string constant .PERIOD  So ,COMMA  it has all these letters followed by a null at the end .PERIOD  Then when I said str[4] = ‘\0’ what it does is it goes to the fourth location in the array and changes that to null .PERIOD  So ,COMMA  what that does is there was a space there before ,COMMA  but now you insert a null character there .PERIOD  After the null character there are other non-null characters and then there is a second one .PERIOD  What will happen when you print ?QUESTIONMARK  It will just print I am and stop that it will not print the remaining characters and why does that happen ?QUESTIONMARK  So ,COMMA  string of C as for as C is concerned is a sequence of characters terminated by a null ,COMMA  this null is not part of the string .PERIOD  So ,COMMA  they may be non-null characters after the first occurrence of null in str ,COMMA  but they are not consider part of the string str their part of the character array .PERIOD  But when you look at str as a string it is just till the first null character .PERIOD  So ,COMMA  when you print it using %s only the part until the first null is printed .PERIOD  So ,COMMA  that is considered the string the character array is bigger .PERIOD    So ,COMMA  it will just print I am and stop there .PERIOD  So ,COMMA  do I lose the characters after the first null and where do they go ?QUESTIONMARK  Well ,COMMA  of course they do not go anywhere they remain where they were .PERIOD  So ,COMMA  what is the new state of the array ?QUESTIONMARK  The new state of the array is I am and then there is a null and then there are some other characters .PERIOD  So ,COMMA  if I print it using %s it will only come up to I am and then stop there .PERIOD  So ,COMMA  is there any way to print the remaining characters ?QUESTIONMARK  Of course ,COMMA  there is a way right .PERIOD  So ,COMMA  if I print that using %s I will get I am ,COMMA  but I could easily write a loop like this .PERIOD  I will say int i and then for i = 0 ,COMMA  until 11 ,COMMA  i++ and then putchar(str[i]) .PERIOD  So ,COMMA  this will print the character str[0] str 1 and so on up to str[11] ,COMMA  regardless of whether that character is null or not if it is null it will do something ,COMMA  but it will still go on to the next character .PERIOD  If you run this what you will see is ,COMMA  it will print the first character which is I ,COMMA  then it will print the second character which is space ,COMMA  then it will print the third character which is a .PERIOD  So ,COMMA  these three are printed as they are and then m and the fifth is a null character .PERIOD  What do you mean by printing a null character ?QUESTIONMARK  It may not print anything .PERIOD  So ,COMMA  it may be just kept ,COMMA  but then it goes on to the next character GR8DON and there it stops ,COMMA  because it does not print the eleventh character .PERIOD  So ,COMMA  the null character in this example is not printed .PERIOD  Now ,COMMA  the way the null character is treated on different terminals may be different .PERIOD  So ,COMMA  on some Linux terminals if you ask to print null character it will just not print anything ,COMMA  but other character terminals may print them in different ways .PERIOD     In this video ,COMMA  we will *t with a topic that is considered one of the trickiest concepts in C .PERIOD  These are what are known as pointers .PERIOD  We will just recap what we know about arrays ,COMMA  because arrays and pointers are very closely related in C .PERIOD   The memory allocated to any array has two components .PERIOD  First is there are a bunch of consecutively allocated boxes of the same type .PERIOD  And the second component is there is a box with the same name as the array .PERIOD  And this box contains the address of the first element of the array .PERIOD  So ,COMMA  that let us be clear with the help of concrete example .PERIOD  So ,COMMA  let us consider a particular array of size 10 declared as int num[10] .PERIOD  Conceptually ,COMMA  there are 10 boxes from num[0] through num[9] .PERIOD  These are all containing integers .PERIOD  Plus there is an additional eleventh box – num .PERIOD  So ,COMMA  it has the same name as the name of the array .PERIOD  And it contains the address of the first location of the array .PERIOD  So ,COMMA  it contains the address of num[0] .PERIOD  These are num[0] through num[9] are located somewhere in memory .PERIOD  So ,COMMA  maybe this is memory location 1000 .PERIOD  So ,COMMA  num contains the number 1000 ,COMMA  which is supposed to indicate that ,COMMA  the address of the first location in the array is 1000 or num points to the memory location 1000 .PERIOD  So ,COMMA  conceptually ,COMMA  this gives 11 boxes ,COMMA  which are 10 integer boxes plus 1 box ,COMMA  which holds the address of the first box .PERIOD  Now ,COMMA  we represent the address of a box x by an arrow to the box x .PERIOD  So ,COMMA  addresses are referred to as pointers .PERIOD  And this is all there is to C pointers .PERIOD  Pointers in some sense are variables ,COMMA  which hold the addresses of other variables .PERIOD  That is an exact description of the concept of pointers .PERIOD  Now ,COMMA  we will see now what that means and what can we do with pointers .PERIOD   Let us just step back a minute and say what can we do with a particular box or particular variable in memory ,COMMA  which is an integer .PERIOD  So ,COMMA  that is very simple .PERIOD  For example ,COMMA  you can scanf into that box ;SEMICOLON  you can print the value in that box ;SEMICOLON  you can do arithmetic operations on that box like plus ,COMMA  division ,COMMA  % ,COMMA  and so on .PERIOD  And you can do this for each of the boxes from num[0] through num[9] ,COMMA  because each of them by itself is in integer .PERIOD  But ,COMMA  we will also see a new operation ,COMMA  which is that ,COMMA  you can take the address of a box .PERIOD  So ,COMMA  we have already done this when we did scanf .PERIOD  So ,COMMA  we mentioned & of a variable .PERIOD  So ,COMMA  we will see these & operator in somewhat more detail .PERIOD  So ,COMMA  suppose I want to take the address of num[1] and store it in an address variable ptr .PERIOD  So ,COMMA  what I am essentially saying is that ,COMMA  you can say ptr = &num[1] .PERIOD  So ,COMMA  num[1] is an integer box ;SEMICOLON  it is an integer variable ;SEMICOLON  & of num[1] is the address of that integer in memory .PERIOD  So ,COMMA  you assign it to the variable ptr .PERIOD  But ,COMMA  every variable in C needs to have a type .PERIOD  What is the type of ptr ?QUESTIONMARK  And how do you declare or define such a type – such a variable ?QUESTIONMARK  Now ,COMMA  ptr holds the address of an integer .PERIOD  In C ,COMMA  you denote that by saying that ,COMMA  the type of ptr is int * .PERIOD  So ,COMMA  here is a new type that we are seeing for the first time .PERIOD  We are saying ptr is of type int * .PERIOD  Just like you can say that ,COMMA  if I have int a ,COMMA  you can say that ,COMMA  a is of type int .PERIOD  In this case ,COMMA  we can say ptr = &num[1] .PERIOD   We have discussed right now we have int num[10] ,COMMA  int *ptr ,COMMA  and ptr = &num[1] .PERIOD  So ,COMMA  ptr is the pointer to an integer .PERIOD  But ,COMMA  what does ptr = &num[1] really mean ?QUESTIONMARK  So ,COMMA  let us look at the memory status once we declare this array .PERIOD  So ,COMMA  we have num ,COMMA  which is the address of the first location .PERIOD  And then we have somewhere in memory ,COMMA  we have 10 consecutive locations corresponding to the array – num[0] through num[9] .PERIOD  Now ,COMMA  I declare int *ptr .PERIOD  So ,COMMA  I create a box .PERIOD  Now ,COMMA  this box is supposed to hold the address of some integer variable .PERIOD  So ,COMMA  ptr is of type address of an integer box or more commonly referred to as pointer to integer .PERIOD  The statement ptr = &num[1] says that ,COMMA  now ,COMMA  points to num[1] or ptr contains the address of num[1] .PERIOD  And pictorially ,COMMA  we denote an arrow from ptr to num[1] just like I denoted an arrow going from num to num[0] ,COMMA  because the name of the array is a pointer to the first location of the array .PERIOD  The name of the array is a box ,COMMA  which holds the address of the first location of the array .PERIOD  Similarly ,COMMA  ptr is a box ,COMMA  which holds the address of num[1] .PERIOD  So ,COMMA  we say that ,COMMA  ptr points to num[1] .PERIOD  And we denote it pictorially by an arrow .PERIOD   The program status is like this – state is like this .PERIOD  Now ,COMMA  suppose I add one more statement after all these three statements ;SEMICOLON  I say scanf(“%d” ,COMMA ptr) .PERIOD  Now ,COMMA  earlier when we declared an array and we read into an array directly ,COMMA  I said that ,COMMA  you can do the following .PERIOD  I can write scanf(“%d” ,COMMA &num[1]) .PERIOD  So ,COMMA  this will value whatever the user input into the first array using the & operator .PERIOD  Now ,COMMA  ptr = &num[1] .PERIOD  So ,COMMA  it is a reasonable thing to ask – can I say scanf(“%d” ,COMMA ptr) ?QUESTIONMARK  There is no & operator here because ptr is &num[1] .PERIOD  This was our original statement and this is our new statement .PERIOD   And the answer is yes ,COMMA  you can do it .PERIOD  Suppose the input is 5 ,COMMA  does num[1] become 5 ?QUESTIONMARK  So ,COMMA  scanf(“%d” ,COMMA ptr) really does work like scanf(“%d” ,COMMA &num[1]) .PERIOD  So ,COMMA  it reads the value input by the user and it looks up ptr .PERIOD  So ,COMMA  it is an address .PERIOD  So ,COMMA  it goes to that address and stores it there .PERIOD  So ,COMMA  now ,COMMA  we can clarify a long standing mystery ,COMMA  which is the & operator in the case of scanf .PERIOD  So ,COMMA  we can say that ,COMMA  scanf second argument is a pointer ;SEMICOLON  which says where should I put the input by the user ?QUESTIONMARK  For example ,COMMA  if I have float variable and I scanf as %f and then sum address of a float variable ,COMMA  it is done similar to reading an integer into an integer variable .PERIOD  What scanf takes is an address of int variable or float variable as it may be .PERIOD  If you have a %d ,COMMA  then it takes a pointer to an integer variable and takes the input value by the user and puts it into that address .PERIOD  So ,COMMA  as far as scan f is concerned ,COMMA  it does not matter whether you gave it as &num[1] or whether you initialized ptr to &num[1] and then gave ptr .PERIOD  It is an address and it will put the integer input by the user into that location .PERIOD  So ,COMMA  num[1] indeed does become 5 .PERIOD   So ,COMMA  the location of the num[1] is now containing the value 5 .PERIOD  Now ,COMMA  what else can you do with a pointer ?QUESTIONMARK  Num is an array ;SEMICOLON  it is of type int [ ] – pair of square brackets .PERIOD  And in C ,COMMA  the box num contains the address of the first location of the array ,COMMA  which is num[0] .PERIOD  So ,COMMA  internally ,COMMA  as far as C is concerned ,COMMA  the address of num[0] is just like address of any other integer location .PERIOD  So ,COMMA  the type int * can be interchanged with int [ ] .PERIOD  So ,COMMA  you can think of num itself as just a pointer to an integer ;SEMICOLON  or ,COMMA  you can say that ,COMMA  it is a pointer to an array ;SEMICOLON  which gives you the additional information that ,COMMA  the next 10 values are also integers .PERIOD  If you just say pointer to an integer ,COMMA  the next location may be something else .PERIOD  But ,COMMA  internally as far as C is concerned ,COMMA  an array name num can also be treated as pointer to an integer .PERIOD  Now ,COMMA  here are some other interesting things that you can do with pointers .PERIOD  Whenever you declare a data type ,COMMA  you also define what all operations can you do with a date type .PERIOD  So ,COMMA  2 and 3 are fairly simple ;SEMICOLON  we have already seen it with integers ,COMMA  floating points and so on .PERIOD  You can do simple arithmetic + and - with pointers .PERIOD  You cannot do * and / .PERIOD  You cannot do that .PERIOD  But ,COMMA  you can do + and - .PERIOD  Similarly ,COMMA  if you have two pointers ,COMMA  you can test for = = ,COMMA  you can test for < ,COMMA  you can test for > and so on as though you are comparing ordinary integers .PERIOD  So ,COMMA  2 and 3 are what we have seen before ;SEMICOLON  except that ,COMMA  in 2 ,COMMA  you cannot do multiply and / and % .PERIOD  All these things are not done with pointers .PERIOD  But ,COMMA  addition and subtraction can be done .PERIOD  But ,COMMA  there is a new operation ,COMMA  which is dereferencing a pointer .PERIOD  We have not seen this operation before with earlier data types .PERIOD  (Refer slide Time: 11:10)  What is dereferencing ?QUESTIONMARK  Let me pictorially represent what it does .PERIOD  Suppose you have int *ptr and int a .PERIOD  So ,COMMA  a is an integer variable and ptr is a pointer to int .PERIOD  If I want to store the address of a int ptr ,COMMA  I do it as follows: ptr = &a .PERIOD  So ,COMMA  this means that ,COMMA  take the address of a and store it in ptr .PERIOD  So ,COMMA  now ,COMMA  you can say that ,COMMA  ptr points to a .PERIOD  Now ,COMMA  I can also think of a reverse operation ;SEMICOLON  which is ptr contains some address .PERIOD  Go look up that address ;SEMICOLON  so that will be an int .PERIOD  And store that value in int .PERIOD   So ,COMMA  that is what is known as the * operator – a = *ptr .PERIOD  This means that ,COMMA  ptr is an integer pointer .PERIOD  So ,COMMA  ptr will point to a location ,COMMA  which contains an integer .PERIOD  *ptr will take the contents of that location and store it in a .PERIOD  So ,COMMA  this is known as the dereferencing operator .PERIOD  So ,COMMA  the address operator takes an integer variable and stores the address in a pointer .PERIOD  The dereferencing operation takes a pointer ;SEMICOLON  looks up that address ;SEMICOLON  and stores the value in a .PERIOD  So ,COMMA  you can visualize the & operator and the * operator as sort of reverse operations of each other .PERIOD  & takes an integer and takes the address of that ;SEMICOLON  * takes a pointer and takes the value of the address pointed to that .PERIOD   Dereferencing a pointer therefore gives you the value contained in the box pointed to by the pointer .PERIOD  The dereferencing operator is * .PERIOD  So ,COMMA  if I say printf %d * pointer ,COMMA  what it will do is – look up the location pointed to by ptr .PERIOD  In this case ,COMMA  it is this integer box .PERIOD  The contents of that box is 5 and it will be printed .PERIOD  So ,COMMA  the output will be 5 .PERIOD  Not for example ,COMMA  the content of ptr .PERIOD  So ,COMMA  the content of ptr may be like 1004 ;SEMICOLON  it will not print 1004 ;SEMICOLON  but what it is supposed to do is look up the location 1004 ;SEMICOLON  it contains the value 5 ;SEMICOLON  print that value .PERIOD  So ,COMMA  *ptr is the box num[1] .PERIOD  And printing it gives you the output 5 .PERIOD  Now ,COMMA  can I consider a statement like *ptr = *ptr + 5 ?QUESTIONMARK  This is perfectly legal .PERIOD  What this will do is *ptr is an integer value .PERIOD  It is equal to 5 ,COMMA  because look up this location ptr ;SEMICOLON  that is an integer ;SEMICOLON  take that value ;SEMICOLON  which will be 5 .PERIOD  So ,COMMA  this will be 5 + 5 – 10 .PERIOD  And where do you store it ?QUESTIONMARK  You store it in the integer variable corresponding to *ptr .PERIOD  The integer variable corresponding to *ptr is num[1] .PERIOD  So ,COMMA  I would have normally said num[1] equal to *ptr + 5 ;SEMICOLON  but num[1] is the same as *ptr .PERIOD  So ,COMMA  I can say *ptr = *ptr + 5 .PERIOD  So ,COMMA  this will look up that location ;SEMICOLON  add 5 to its contents ;SEMICOLON  and store it in that location .PERIOD  So ,COMMA  num[1] will now become 10 .PERIOD   Similarly ,COMMA  you can consider other examples .PERIOD  For example ,COMMA  I can consider a statement like num of 2 equal to *num + *ptr .PERIOD  The novelty here is that .PERIOD  .PERIOD  .PERIOD   In this video let me ,COMMA  so some cool stuff which is pointer arithmetic which helps you to understand the relationship between pointers and arrays in C .PERIOD     So ,COMMA  let us consider in array declared as follows int num ,COMMA  and then it has 5 numbers in the initialization list .PERIOD  So ,COMMA  the array will be initialized as follows ;SEMICOLON  there are 5 consecutive integer locations in memory with the given elements + there is a 6th cell which points to the first location in the array .PERIOD  So ,COMMA  num points to the first location in the array .PERIOD  If num points to the first location ,COMMA  then you can do the following operator num + 1 .PERIOD  So ,COMMA  num + 1 with point to the integer box write mix to the integer box pointed 2 by num .PERIOD  And we also know that arrays are consecutively located .PERIOD  So ,COMMA  the integer box next to num is exactly num 1 .PERIOD  So ,COMMA  num + 1 points to num[1] .PERIOD  Similarly num of num+2 points to num[2] ,COMMA  and so on .PERIOD  Until num+4 = num[4] .PERIOD  So ,COMMA  this particular box ,COMMA  for example ,COMMA  num[4] can be accessed in two ways ;SEMICOLON  you can write num[4] or you can write *(num+4) .PERIOD  Can you tell me the output of the following printf statement .PERIOD  So ,COMMA  think about this for a minute ,COMMA  you have 3 integers to print using %d %d %d ,COMMA  and what are to be printed are *(num+1) *(num+2) and *(num+3) .PERIOD  So ,COMMA  think about it for a minute…  Now ,COMMA  let us look at the slightly different array .PERIOD  What happens if you have a character array .PERIOD  So ,COMMA  I have char str array which is initialize to let say given string BANTI is a nice girl ,COMMA  and then I have a character pointer .PERIOD  So ,COMMA  char *ptr and it is assigned str + 6 ,COMMA  it is initialize to str + 6 ,COMMA  what will happen here ?QUESTIONMARK  What is different about this example is that ,COMMA  earlier I said that in an integer array + 1 for example ,COMMA  would go to the next integer location in memory .PERIOD  So ,COMMA  wherever num was num+1 would go to the next integer location here ,COMMA  str is a character array .PERIOD  So ,COMMA  it has to go to the next character location ,COMMA  and that is exactly what it does .PERIOD  So ,COMMA  what is printed ?QUESTIONMARK  Lets first consider the state of the memory .PERIOD  So ,COMMA  you have an array which is a character array ,COMMA  it starts from str[0] ,COMMA  and goes on up to str[20] .PERIOD  So ,COMMA  there are 19 characters followed by the null character .PERIOD  Why is the null character there ,COMMA  because I initialize the two a string constant ;SEMICOLON  every string constant has a null character implicitly at the end .PERIOD  So ,COMMA  this is the straight of the str array .PERIOD  Now I say that I declare a pointer ,COMMA  the pointer is pointing to a char .PERIOD  So ,COMMA  it is a char * pointer and what is the location it points to it points to str + 6 .PERIOD  Str is a point out to the first location of the character array ,COMMA  and + 6 would jump 6 character locations away from str[0] .PERIOD  So ,COMMA  you would reach this character .PERIOD  The important difference between this example at the previous example is that ,COMMA  if you declared an integer array + 1 would jump 1 integer location + 6 would jump 6 integer locations .PERIOD  Here since such a character array str + 6 would jump 6 character locations .PERIOD  So ,COMMA  how the + operator is interpreted in the cases of pointer depends on what array am I pointing to right now ?QUESTIONMARK  Now what will happen with the printf statement ?QUESTIONMARK  So ,COMMA  if I say printf % as ptr what will happen ?QUESTIONMARK  So ,COMMA  ptr points to str 6 .PERIOD  So ,COMMA  printf will print whatever string is starting from that location until the first null character .PERIOD  So ,COMMA  it will start printing from this i ,COMMA  and then go on tip printing till it reaches the null characters .PERIOD  So ,COMMA  the output will be just is a nice girl .PERIOD  So ,COMMA  when you want to printf it is not important that you start from the absolute beginning of the array .PERIOD  We can start from arbitrary location in the character array ,COMMA  and if you say printf % ,COMMA  it will start from there and go on and print until the first null character .PERIOD   So ,COMMA  let us look at it once more .PERIOD  So ,COMMA  it was the code that you had ,COMMA  and let say that the onedimensional array for this seek of convenience ,COMMA  I will just… So ,COMMA  it like this .PERIOD  It is actually in a row ,COMMA  but here is the first part ,COMMA  here is the second part ,COMMA  and so on .PERIOD  So ,COMMA  when I say str ,COMMA  str is a character array ,COMMA  and ptr + 6 would goes 6 locations away from the first location .PERIOD  So ,COMMA  str is pointing to then first location in the array ,COMMA  it will go to the 6th location in the array ptr ,COMMA  and ptr is pointing to the 6 location .PERIOD   So ,COMMA  you can ask more expressions do the make sense ,COMMA  can I say str + 5 is the this location .PERIOD  Similarly can I say str + 10 is this location ,COMMA  and so on .PERIOD  So ,COMMA  these are all correct expressions .PERIOD  Now can you tell the output of printf % ptr -5 ,COMMA  we have talked about + operator on pointers .PERIOD  So ,COMMA  it will whatever the nature of array that the pointer is pointing to it will jump n locations away from it .PERIOD  So ,COMMA  if I say ptr + n ,COMMA  it will jump n locations of that type away from it .PERIOD  So ,COMMA  by the same logic can I argue that if I do -5 ptr -5 can I say that it will go 5 locations previous to what ptr is pointing to right now .PERIOD  And the answer is yes .PERIOD   So ,COMMA  it will behave exactly as you expect .PERIOD  So ,COMMA  ptr is pointing to this location ,COMMA  here is the previous location .PERIOD  So ,COMMA  it will jump to 5 locations before the location pointer 2 by ptr ,COMMA  I will happens to be A .PERIOD  So ,COMMA  the location which is str[1] ,COMMA  that is = ptr-5 .PERIOD  So ,COMMA  if you printf on that location ,COMMA  it will say BANTI is a nice girl ,COMMA  that is the output .PERIOD   Before I proceed this one thing that I want to emphasize ,COMMA  and it is often not emphasized when you see online material on pointer arithmetic .PERIOD  C pointer arithmetic is not suppose to be meant for navigating the array ,COMMA  meant for navigating arbitrary locations in the memory .PERIOD  So ,COMMA  you cannot take a pointer .PERIOD  Let say character pointer and just say pointer + 1000 .PERIOD  It will give you some location in the memory ,COMMA  but the behavior of the program will be undefined .PERIOD  So ,COMMA  the c pointers are well defined ,COMMA  pointer arithmetic using C pointers are well defined only when the pointers are pointing to locations within an array .PERIOD  So ,COMMA  within an array + n will take you n locations away from the given pointer ,COMMA  -n will give you -n away from the give behind the given pointer and so on .PERIOD  Whatever type the character of whatever type the given pointer is pointing 2 .PERIOD  So ,COMMA  the main point of lecture was that if you have let say for example ,COMMA  and integer array int num 10 ,COMMA  then num of 5 which is the array notation is exactly equivalent to *(num+i) .PERIOD  And I am not saying this that you can think of num of 5 as *(num+i) ,COMMA  it is not an analogy this is exactly what C actually does .PERIOD  So ,COMMA  num of 5 is translated to *(num+i) .PERIOD  So ,COMMA  arrays and pointers in c are very intimately related .PERIOD    So ,COMMA  here is the stuff that we have seen about pointers .PERIOD  First we have defined what is a pointer ?QUESTIONMARK  A pointer is just a variable that holds the &another variable .PERIOD  We say that pointer points to another variable .PERIOD  And depending on what variable it points to ,COMMA  the type of that target ,COMMA  we say it is an int pointer or a character pointer or a float pointer and so on .PERIOD  So ,COMMA  this is the first thing what is a pointer ?QUESTIONMARK  And then we have seen what all can you do with a pointer ;SEMICOLON  what are the operations that you can do in a pointer .PERIOD  So ,COMMA  if you have a normal variable ,COMMA  you can take the &that variable using the & operator .PERIOD  If you have a pointer ,COMMA  then you can dereference the pointer by using *(ptr) .PERIOD  That will go to the location pointer 2 by ptr and take the value of that target .PERIOD  Further we have seen pointer arithmetic involving + and - .PERIOD  And I have introduced you with the caution that they are meant to navigate within arrays ;SEMICOLON  they are not meant to navigate to arbitrary locations in the memory .PERIOD  If you do that ,COMMA  it may or may not work .PERIOD  And further we have touched up on the intimate relationship between arrays and pointers in C .PERIOD  As captured by the formula ,COMMA  array[i] is *(array+i) .PERIOD  A special case of this is to say that the name of the array is an &the first entry in the array .PERIOD  For example ,COMMA  array[0] is the same as *(array+0) .PERIOD  We have seen this and think about them once more to get comfortable with the notion .PERIOD   In this video ,COMMA  we will talk about how pointers interact with functions .PERIOD  When we introduced arrays ,COMMA  we first said here are arrays ;SEMICOLON  here is how you write programs with arrays .PERIOD  And then we introduced… Here is how you pass arrays into functions .PERIOD  Let us do that the same thing with pointers .PERIOD  So ,COMMA  here are pointers .PERIOD  And how do you pass them to pointers ?QUESTIONMARK  Before coming into how do you pass them to pointers ,COMMA  we will go into – why should you pass pointers to functions .PERIOD  So ,COMMA  let me introduce this with a very standard example .PERIOD  This is a classic example in C .PERIOD  How do you exchange two variables ?QUESTIONMARK  We have seen the three-way exchange ;SEMICOLON  where ,COMMA  I said that ,COMMA  if you have three rooms: A ,COMMA  B… I have two full rooms: A and B .PERIOD   And then I want to exchange the contents of these rooms ;SEMICOLON  then I can use a third room .PERIOD  First ,COMMA  move the contents of A to T ;SEMICOLON  that is your first move .PERIOD  Then move the contents of B to A ;SEMICOLON  that is your second move .PERIOD  And then afterwards ,COMMA  A now contains the contents of B ;SEMICOLON  and B is empty ;SEMICOLON  T is containing the contents of A .PERIOD  So ,COMMA  the third move is – move T to B .PERIOD  So ,COMMA  the net effect will be that ,COMMA  B contains the whole contents of A ;SEMICOLON  A contains the whole contents of B ;SEMICOLON  B contains the whole contents of A ;SEMICOLON  and T is empty .PERIOD  So ,COMMA  this was the threeway exchange ,COMMA  which we did within main function .PERIOD  This is long back when we discussed GCD algorithm .PERIOD   Now ,COMMA  let us try to do that using a function .PERIOD  So ,COMMA  I have a swap routine ,COMMA  which takes two integer arguments: a and b ;SEMICOLON  and it is meant to exchange the values of a and b .PERIOD  So ,COMMA  inside main ,COMMA  I have a = 1 ,COMMA  b = 2 .PERIOD  And I call swap a and b .PERIOD  And swap a and b – what it does is this three-way exchange that ,COMMA  we have discussed .PERIOD  Now ,COMMA  just to test whether things are working ,COMMA  I have a bunch of printf statements ,COMMA  which says what is the value of swap ,COMMA  what is the value of a and b after swap has executed .PERIOD  Similarly ,COMMA  when I come back ,COMMA  I will just print the values of a and b to see what has happened after swap .PERIOD  So ,COMMA  when you call swap and you output it within swap ,COMMA  it is very clear that ,COMMA  a = 2 ,COMMA  b = 1 .PERIOD  So ,COMMA  the three-way exchange would work as you expect .PERIOD  And you have whatever was passed ,COMMA  which is swap1 ,COMMA  2 .PERIOD  So ,COMMA  it will exchange those variables and it will print a = 2 and b = 1 .PERIOD  Now ,COMMA  within main ,COMMA  a was 1 and b is 2 .PERIOD  Now ,COMMA  when you print these statements inside main ,COMMA  surprisingly ,COMMA  you will find that ,COMMA  a = 1 and b = 2 .PERIOD  So ,COMMA  the effect of swap is completely absent when you come back to main .PERIOD  Within swap ,COMMA  they were exchanged .PERIOD  But ,COMMA  when you come back to main ,COMMA  they were not exchanged .PERIOD  Why does this happen ?QUESTIONMARK  This is because remember that ,COMMA  some space is allocated to a function ;SEMICOLON  and whatever space is allocated to the swap function ,COMMA  all the variables there is erased – are erased once you return from the swap function .PERIOD  So ,COMMA  within swap function ,COMMA  a and b are exchanged .PERIOD  But ,COMMA  all that is gone when you return to main .PERIOD  So ,COMMA  passing integer ,COMMA  float ,COMMA  character variables as parameters ,COMMA  does not allow passing back to the calling function ;SEMICOLON  you have only the return value to return back .PERIOD  Any changes made within the called function are lost once this function returns .PERIOD  So ,COMMA  the question is can we now make a new function such that work done within that function will be reflected back in main .PERIOD   Now ,COMMA  here is an intermediate solution .PERIOD  We know that ,COMMA  if we pass arrays ,COMMA  then work done in the called function will be reflected back in the calling function .PERIOD  So ,COMMA  you could think of the following intermediate function .PERIOD  So ,COMMA  if I have int num 2 and then I say that ,COMMA  num[0] is 1 ,COMMA  num[1] is 2 .PERIOD  This is in the main function .PERIOD  And then I call swap of num .PERIOD  Now ,COMMA  we will call it swap1(num) ;SEMICOLON  I have a new function .PERIOD  Now ,COMMA  what swap1 does is – so int swap1 int arr .PERIOD  So ,COMMA  suppose I have this function ;SEMICOLON  inside that ,COMMA  I will just say that ,COMMA  I will have an intermediate variable t ;SEMICOLON  and then have t = num or arr[0] .PERIOD  Then arr[0] = t ;SEMICOLON  arr[0] = arr[1] ;SEMICOLON  and arr[1] = t .PERIOD  Suppose I have this function .PERIOD  And now ,COMMA  you can sort of argue that ,COMMA  this will also swap the two cells in the num array .PERIOD  So ,COMMA  the dirty trick that I am doing is that ,COMMA  I want to swap two variables ;SEMICOLON  instead ,COMMA  I will say that ,COMMA  instead of these two variables ,COMMA  I will insert them into a array of size 2 ;SEMICOLON  and then call swap1 on that array .PERIOD  Now ,COMMA  what swap1 does is – it will exchange – it will do the three-way exchange on the array .PERIOD  Now ,COMMA  I know that because of the way arrays are passed in C ,COMMA  any change that happens to the array arr inside swap1 will be reflected back in main .PERIOD  So ,COMMA  when I print these num array back in main ,COMMA  I would see that ,COMMA  num[0] is now 2 and num[1] is 1 .PERIOD  So ,COMMA  this is an intermediate trick in order to write the correct swap function .PERIOD  But ,COMMA  you will agree that ,COMMA  this is a kind of a dirty trick ,COMMA  because in ordered to swap two variables ,COMMA  I created an array ;SEMICOLON  and then depended on the fact that ,COMMA  swap will change the array in such a way that ,COMMA  the change will reflected back in main .PERIOD  So ,COMMA  is there a nicer way to do it ?QUESTIONMARK  That is what we are interested in .PERIOD  And the answer is let us just think about that array trick .PERIOD  What we did was – when we passed an array ,COMMA  we were of passing the &the array .PERIOD   This is how arrays are passed to functions .PERIOD  So ,COMMA  now ,COMMA  let us just take that idea that ,COMMA  we are passing the address .PERIOD  So ,COMMA  let us try to write a swap function ,COMMA  where you are passing the &variables instead of the variables themselves .PERIOD  So ,COMMA  here is the correct swap function .PERIOD  And what I write is void swap .PERIOD  So ,COMMA  void is a new keyword that you will see ;SEMICOLON  but it is not a big deal ;SEMICOLON  it is just a function that does not return a value ;SEMICOLON  it just performs an action without returning a value .PERIOD  So ,COMMA  such functions you can write it as void – void swap int *ptra ,COMMA  int *ptrb .PERIOD  So ,COMMA  ptra and ptrb are pointers .PERIOD  Now ,COMMA  inside the code ,COMMA  you have something that looks like a three-way exchange .PERIOD  It is very carefully return ,COMMA  because the obvious way to quote the function is not right .PERIOD  So ,COMMA  you have to be slightly careful ;SEMICOLON  you have to declare an integer variable .PERIOD  Now ,COMMA  t contains *ptra ;SEMICOLON  *ptra = *ptrb ;SEMICOLON  and *ptrb = t .PERIOD  The obvious way to write it seems to be – you declare an integer *ptr t and then do this .PERIOD  It is not quite right ;SEMICOLON  we will come to that later .PERIOD  So ,COMMA  here is the swap function .PERIOD  And how do you call the function ?QUESTIONMARK  You declare two integer variables in main: a = 1 and b = 2 ;SEMICOLON  and then pass the addresses using &a and &b .PERIOD   So ,COMMA  let us just trace the function .PERIOD  You have two variables in main ;SEMICOLON  a = 1 ,COMMA  b = 2 ;SEMICOLON  and call swap(&a and &b) .PERIOD  Now ,COMMA  just to denote that ,COMMA  these are addresses ,COMMA  I will say that ,COMMA  these are… a is situated at location 1024 in hexadecimal .PERIOD  So ,COMMA  this is some location in memory – hexadecimal 1024 .PERIOD  And this is some other location in memory ;SEMICOLON  b is say at hexadecimal location 2000 .PERIOD  Now ,COMMA  do not be distracted by the hexadecimal notation if you are uncomfortable with it ;SEMICOLON  just write 1024 in an equivalent decimal notation ;SEMICOLON  and you can say that ,COMMA  it is at that location .PERIOD  So ,COMMA  it is at that location .PERIOD  And I am representing the location in hexadecimal ,COMMA  because it leads to shorter addresses .PERIOD  And this is also an address .PERIOD  So ,COMMA  when I will take &a ,COMMA  I will get 1024x in… When I take the &b ,COMMA  I will get 2000x .PERIOD  So ,COMMA  this is the &a .PERIOD  And it is located at memory location 1024 when represented in the hexadecimal notation .PERIOD   What happens when you call the swap function ?QUESTIONMARK  So ,COMMA  here is the state of main .PERIOD  And when you call the swap function ,COMMA  a new bunch of memory – a new block of memory is allocated on the stack .PERIOD  So ,COMMA  first ,COMMA  the formal parameters are copied their values from the actual parameters .PERIOD  So ,COMMA  ptra will get &a ,COMMA  which is 1024 ;SEMICOLON  ptrb will get &b ,COMMA  which is 2000 .PERIOD  Now ,COMMA  I declare a new variable t ;SEMICOLON  t = *ptra .PERIOD  So ,COMMA  what does that mean ?QUESTIONMARK  ptra is an address – dereference the address ;SEMICOLON  which means go look up that address .PERIOD  So ,COMMA  it will go to this location and get that value .PERIOD  So ,COMMA  t will now become 1 .PERIOD  And the next statement is somewhat mysteries ;SEMICOLON  please understand it very slowly .PERIOD  So ,COMMA  on the right-hand side ,COMMA  you have *ptrb .PERIOD  This means dereference ptrb .PERIOD  So ,COMMA  we are saying ptrb is address 2000 ;SEMICOLON  when you dereference it ,COMMA  you will get the value 2 .PERIOD  Now ,COMMA  where do I have to store that value 2 ?QUESTIONMARK  For that ,COMMA  dereference ptra .PERIOD  So ,COMMA  1024 – dereference it ;SEMICOLON  you will go to this box .PERIOD  That is where you have to store 2 .PERIOD   So ,COMMA  2 will go to that location .PERIOD  So ,COMMA  what has happened due to that is that ,COMMA  a in name has now changed .PERIOD  Why ?QUESTIONMARK  Because within the swap function ,COMMA  we were dealing with pointers .PERIOD  So ,COMMA  as a result of the statement *ptra = *ptrb ,COMMA  it has taken 2 from the main functions b and put it back into the main functions a .PERIOD  And that was accomplished through variables inside swap .PERIOD  So ,COMMA  think about it for a while .PERIOD  And the last statement of course is *ptrb = t .PERIOD  So ,COMMA  dereference ptrb and put the value 1 there .PERIOD  So ,COMMA  here is a three-way exchange that works through variables only in swap .PERIOD  But ,COMMA  since they were pointer variables ,COMMA  you ended up changing the locations in the main as well .PERIOD   And once you return ,COMMA  all the memory corresponding to swap will be erased .PERIOD  But then when you to main ,COMMA  a and b will have changed .PERIOD  a and b were 1 and 2 before .PERIOD  Now ,COMMA  a is 2 and b is 1 .PERIOD  So ,COMMA  it has correctly swapped .PERIOD  Now ,COMMA  as an exercise ,COMMA  I said that ,COMMA  the obvious way to write the swap function is as follows .PERIOD  Void swap a int *ptrb ;SEMICOLON  ptra and int *ptrb .PERIOD  And then I declare int *ptrt .PERIOD  And then I write these statements .PERIOD  This is a very obvious way to code swap .PERIOD  This does not work .PERIOD  So ,COMMA  try to draw these pictures as we have done with a swap function that actually worked .PERIOD  Try to draw the picture of what happens in main and what happens in the swap function .PERIOD  And understand why this particular swap function does not work .PERIOD  One final word about passing pointers to functions ;SEMICOLON  C has something called a call by value mechanism .PERIOD  What is meant by call by value is that ,COMMA  when you call a function ,COMMA  remember the original picture that ,COMMA  your friend came with his note book and copied down the numbers in your page .PERIOD  So ,COMMA  your friend created a separate copy of your arguments ;SEMICOLON  then computed what had to be computed and returned you a value .PERIOD  That picture is essentially still correct .PERIOD  Even though you are now dealing with functions ,COMMA  which can manipulate memory inside main ,COMMA  the passing mechanism is still call by value .PERIOD  It is just that ,COMMA  what is being copied are the addresses .PERIOD  So ,COMMA  when you manipulate the addresses through dereferencing ,COMMA  you end up changing the location inside main .PERIOD  So ,COMMA  even with pointers in C ,COMMA  what happens is call by value .PERIOD   Since pointer arithmetic is a tricky concept let us solve one more problem to try to get comfortable with that notion .PERIOD   So ,COMMA  the problem here is copying a sub array into another array .PERIOD  Now ,COMMA  let us explain what that means ?QUESTIONMARK   Suppose ,COMMA  I have written a function copy_array() which has three arguments an integer array a[ ] and integer array b[ ] and n which is the size ,COMMA  I want to copy n successive index elements from a and put it into b .PERIOD  So ,COMMA  a is 0 through a n - 1 have to be copied to b .PERIOD  I can easily write it in the following function has int copy_array int a ,COMMA  int b ,COMMA  int n and then I have one variable to keep track of the index and that variable goes from 0 to n ,COMMA  for i = 0 ,COMMA  i < n ,COMMA  i = i + 1 and then I simply say b[i] = a[i] within the loop .PERIOD  So ,COMMA  this would copy whatever a[i] is into the location b[i] .PERIOD  So ,COMMA  once the loop executes ,COMMA  I would have copied n elements from the array a to the array b .PERIOD  But ,COMMA  this is not general and I want to solve the following problem ,COMMA  I have two arrays let us name them from( ) and to( ) and I want to copy n numbers from the array from[ ] to to[ ] .PERIOD  But ,COMMA  I have an additional requirement ,COMMA  I want to copy n elements from index i .PERIOD  So ,COMMA  the earlier code solve the problem from index 0 in general I want to copy from index i of from[ ] in the elements into the locations starting at index j in to[ ] .PERIOD  So ,COMMA  the earlier function assume that i and j were both 0 .PERIOD  In the general function I want arbitrary i and arbitrary j .PERIOD  So ,COMMA  I need a declaration like the following ,COMMA  I have int copy_array_2 .PERIOD  So ,COMMA  this is the second function I am writing and I have from i to j and then n is the number of elements to copy .PERIOD  So ,COMMA  what I have to do is from i from i + 1 .PERIOD  So ,COMMA  on up to from i + n - 1 have to be copied to to[j] ,COMMA  to[j+1] so ,COMMA  on up to to[j + n - 1] .PERIOD  So ,COMMA  for the purposes of this lecture let us just assume that from[ ] and to[ ] are big enough .PERIOD  So ,COMMA  that you will never ever over suit the arrays by taking i + n -1 and j + n - 1 .PERIOD  Can you write this function ?QUESTIONMARK  Now ;SEMICOLON  obviously ,COMMA  you can write a separate function to solve this .PERIOD  Now ,COMMA  the trick is can you use the copy_array() function ,COMMA  the copy_array() functions copied n elements starting from index 0 of a to index n - 1 to the array b starting at index b [0] to b[n – 1] .PERIOD  So ,COMMA  that is what is it means .PERIOD  And this should be strange ,COMMA  because if you think about it in a mathematical way ,COMMA  you are saying that a general function is being solved in terms of s particular functions .PERIOD  So ,COMMA  you are reducing a general case to a special case at sounds a bit strange .PERIOD  But ,COMMA  we can do this with pointer arithmetic .PERIOD    So ,COMMA  here is a problem that I have and I want t[j] = f[i] ,COMMA  t[j + 1] = f [i + 1] so ,COMMA  on upto t[j + n – 1] = f [i + n -1] .PERIOD  So ,COMMA  let us try to see what happens in this function ?QUESTIONMARK  Suppose ,COMMA  I call copy_array_2() from name ,COMMA  using the arrays f ,COMMA  t ,COMMA  i ,COMMA  j ,COMMA  n and that function nearly calls the old copy_array() function ,COMMA  using f + i ,COMMA  t + j and n .PERIOD  So ,COMMA  this state of execution at the start of copy_array_2() ,COMMA  let say that f [ ] is an array with say 10 elements and t[ ] is an array with say 10 elements arbitrary and what I want is I also assume that i is 2 and j is 4 .PERIOD  So ,COMMA  I want to copy 5 elements starting from the second location or the third location in f f[2] onwards to the fifth location in t onwards .PERIOD  So ,COMMA  here is what I want to… So ,COMMA  I want to copy this - 1 ,COMMA  - 1 ,COMMA  - 1 ,COMMA  - 1 ,COMMA  - 1 ,COMMA  to t [4] onwards .PERIOD  So ,COMMA  I will copy them here ,COMMA  so ,COMMA  5 elements are to be copied .PERIOD   Let see ;SEMICOLON  how our ,COMMA  function is able to do this .PERIOD  So ,COMMA  t + 4 is this location f + 2 is just location .PERIOD  So ,COMMA  what I am calling is the old copy_array() function with f + i ,COMMA  .PERIOD  So ,COMMA  f is the address of the first location of the array .PERIOD  Therefore ,COMMA  f + 2 using pointer arithmetic is the second integer box after that .PERIOD  So ,COMMA  it is pointing to f[2] ,COMMA  similarly t + 4 ,COMMA  t + j in this case is pointing to the fourth location after the location pointer 2 by t ,COMMA  t is an array .PERIOD  So ,COMMA  t points to the first location in the array therefore ,COMMA  t + 4 will point to the fifth location in the array .PERIOD  So ,COMMA  when I say f + 2 f + 2 is a pointer 2 here and t + 4 is a pointer 2 here and I am calling copy_array() function with these as the arguments and n is the number of elements I want to copy .PERIOD   So ,COMMA  here is the state just before I call ,COMMA  copy_array() function .PERIOD  Now ,COMMA  for example ,COMMA  this particular box has several names ,COMMA  the most common name for it will be f[3] .PERIOD  But ,COMMA  I can also write it as *[f + 3] ,COMMA  this says jump 3 integer boxes after f and then dereference that address .PERIOD  Now ,COMMA  if you are comfortable with the notion that let us say f[i] is the same as *[f + i] .PERIOD  If you are comfortable with that notion ,COMMA  then you should be easy to see that (f + 2)[1] is just *[f + 2 + 1]  .PERIOD  It is the same formula that I am using and this happens to be f + 3 ,COMMA  which happens to be f [3] .PERIOD  So ,COMMA  *(f+3) would be f[3] and so ,COMMA  on .PERIOD  So ,COMMA  this formula that f[i] is the same as dereferencing the address f + i ,COMMA  f[i] = *(f + i) is applicable even for more strange looking expressions .PERIOD  (Refer Slide Time: 09:to6)  Now ,COMMA  here is a trivia about c ,COMMA  that because of the way it is defined .PERIOD  So ,COMMA  if you say that f[i] is the same as *(f+i) ,COMMA  then you could think that this is the same as *(i+f) .PERIOD  So ,COMMA  I can write this as i of f never do this ,COMMA  but it will actually work .PERIOD  So ,COMMA  f[i] you can also write it as i of f .PERIOD  For example ,COMMA  3 of f and it will also work ,COMMA  because internally c translates it to *(f+i) and we know that *(f+i) is a same as *(i+f) .PERIOD  So ,COMMA  never do this ,COMMA  but this helps you to understand that f[i] is being translated by c into this format .PERIOD    So ,COMMA  now ,COMMA  that we know this ,COMMA  similarly you can argue about *(t+4) and (t+4)[0] and .PERIOD  So ,COMMA  on all of them refer to the same box .PERIOD   Now ,COMMA  let us see what happens when we call copy_array() .PERIOD  So ,COMMA  we have the stack space for copy_array_2() and copy_array_2() calls copy_array() .PERIOD  The formal parameters are a and b ,COMMA  a copies the address it was passed to ,COMMA  it was passed the address f + i .PERIOD  So ,COMMA  a points to f + 2 ,COMMA  similarly b points to t + 4 ,COMMA  .PERIOD  So ,COMMA  b points to this .PERIOD  Now ,COMMA  as for as copy_arrays concerned it is not too bothered by the fact that ,COMMA  it was not passed the absolute first address of the array .PERIOD  It will think that whatever address it has been passed is the start of an array and it will work from there .PERIOD  So ,COMMA  copy_array() does not bother the fact that ,COMMA  I was given the second element of the array ,COMMA  rather than the first element of the array and so ,COMMA  on ,COMMA  it will work as though the array started from there .PERIOD  And here is where we are exploiting that fact so ,COMMA  you now copy n elements from this location to this array ,COMMA  so ,COMMA  n is 5 .PERIOD    And when you execute the loop ,COMMA  it will start from this location copied to t + j then f + i + 1 will be copied to t + j + 1 and so ,COMMA  on .PERIOD  So ,COMMA  it will copy these five locations to here in the t array .PERIOD   And after you do this copy_array() returns and every variable that was allocated to copy_array() is erased .PERIOD  But ,COMMA  then because of pointers it was actually working with the arrays in copy_array_2() .PERIOD  So ,COMMA  even when you erase all the memory allocated to copy_array() ,COMMA  once you return these arrays would have been changed .PERIOD  These five locations starting from f + 2 have been copied to these five locations starting from t + 4 .PERIOD  So ,COMMA  changes made to b[] by copy_array() ,COMMA  is still maintained after you returns to the calling function copy_array_2() .PERIOD   In this lecture will see some more pointer arithmetic operators ,COMMA  and we will introduce those by talking about them through a problem .PERIOD     So ,COMMA  the problem that I have is that of reversing an array .PERIOD  So ,COMMA  we have to write a function to reverse an array ,COMMA  and let say that the declaration of the function is void rev_array (int a[ ] ,COMMA  int n[ ]) .PERIOD  Now if you have to reverse an array ,COMMA  what is one way to do it you take the array copy to into another array ,COMMA  and then copy back in the reverse fashion .PERIOD  So ,COMMA  you have an array a[ ] copy all the values in to b[] ,COMMA  and now you copy those values back to a in the following way that the b ,COMMA  b is last value will go to a[0] ,COMMA  b is second value last value will go to a[1] and so on .PERIOD  Now ,COMMA  let us try to do it slightly more cleverly ,COMMA  we want to take an integer array and reverse the array in place .PERIOD  That means that essentially using no extra space .PERIOD  So ,COMMA  do not use and extra array in order to reverse it ,COMMA  reverse it within a itself .PERIOD  So ,COMMA  the array before calling reverse array will look like a[0] upto a[n-1] in this way .PERIOD  And after calling reverse array it should look like a[n-1] a[n-2] ,COMMA  etcetera up to a[0] ,COMMA  and we doing that we should not use an extra array .PERIOD     Let us try to code this up .PERIOD  So ,COMMA  how is the reverse array return first I need .PERIOD  .PERIOD  .PERIOD  So ,COMMA  remember how we did this by hand ,COMMA  we exchange the 0 th location with the last location ,COMMA  then we exchange the first location within second last location ,COMMA  and so on .PERIOD  So ,COMMA  it is easy to code ,COMMA  if you have two pointers ;SEMICOLON  initially one pointers starts to at the beginning of array ,COMMA  the second pointer is to the last of the array exchange those values ,COMMA  then the first pointer goes to the next location ,COMMA  and the second pointer goes to the previous location ,COMMA  that is how you did it by hand .PERIOD  So ,COMMA  let us try to code that up I will have a pointer *b ,COMMA  which points to the last element of array a + n - 1 .PERIOD  Now ,COMMA  the loop is as follows ,COMMA  I will discuss this in a minute while b < a .PERIOD  So ,COMMA  remember in the example by hand ,COMMA  we had to exchange till we reach the middle of the array .PERIOD  How do you find the middle of the array ,COMMA  I will just write it as b > a ,COMMA  and I will explain it in a minute .PERIOD  So ,COMMA  while this is true that you have not a ((Refer Time: 04:25) the middle of the array .PERIOD  You exchange swap a and b ,COMMA  here we use the swap function which we have seen in the previous lecture .PERIOD  So ,COMMA  for example ,COMMA  it will swap the 0 th element with the n - first element .PERIOD  After that is done you increment a and you decrement b .PERIOD  So ,COMMA  the design logic is that a initially points to that first element of the array - the left end of the array ,COMMA  and b points to the right end of the array .PERIOD   So ,COMMA  we are seeing a new concept which is relational comparison between two pointers .PERIOD  If a and b are pointers to variables of the same type like int *a ,COMMA  int *b .PERIOD  We can compare them ,COMMA  compare these pointers using = ,COMMA  and not = .PERIOD  This can be done for arbitrary locations a ,COMMA  and b as long as those locations are of the same type .PERIOD  So ,COMMA  a = b is true ,COMMA  if and only if a and b are pointing to the same location ;SEMICOLON  that is natural to expect .PERIOD  Otherwise if they are pointing to different locations a not equal to b is true .PERIOD  Now there is another case ,COMMA  if a is pointing to an integer let say ,COMMA  and b is pointing to a float then equal to and not equal to are undefined .PERIOD  So ,COMMA  notice that even though this behavior looks natural ,COMMA  it is natural only if there pointing to this same type .PERIOD  So ,COMMA  here are operations equal to and not equal to .PERIOD   What about less than less than or equal to greater than greater or equal to and so on .PERIOD  And this is surprising ,COMMA  because here is something that you do not expect .PERIOD  You cannot compare less than less than   equal to on arbitrary locations in the memory .PERIOD  We can compare a and b using less than for this they must be pointing to the same locations in the array .PERIOD  Earlier when we discussed + and - ,COMMA  we were saying that + and - are well behave the only when you are navigating within an array .PERIOD  Similarly ,COMMA  when we are comparing 2 pointers using greater than greater than or equal to less than less than or equal to ,COMMA  then they should all be point then a and b should be pointing to the same array ,COMMA  different locations in this same array .PERIOD  If that is true then a < b ,COMMA  if a is pointing to a location which is before b in the same array .PERIOD  Similarly a < or = b yes true if a is pointing to a location which is b or before b ,COMMA  and so on .PERIOD  So ,COMMA  for example ,COMMA  we can say that if you have an array int a[10] ,COMMA  then a + 1 < a + 2 ,COMMA  that is clearly true .PERIOD  Because a + 1 is pointing to the location one in array and a + 2 is pointing to location two in the array .PERIOD   So ,COMMA  if you have an array for an example let say a[0] through a[9] ,COMMA  and ptra is pointing to location one ,COMMA  and ptrb is pointing to location three .PERIOD  Then ptra < ptrb here the comparison is well defined and it is true .PERIOD    But on the other hand let say that ptra is pointing to a[1] ,COMMA  and ptrb is pointing to b[1] .PERIOD  In this case ptra < ptrb is undefined ,COMMA  because their pointing to two different arrays .PERIOD  So ,COMMA  may be in memory a is lead out before b and so on ,COMMA  but that is not what the < or = operation is supposed to do .PERIOD  It is suppose to compare pointers only within the same array .PERIOD    So ,COMMA  with this understanding let us understand how the reverse array works .PERIOD  So ,COMMA  in the first iteration ,COMMA  you have an array a[ ] ,COMMA  let say that array is 101 ,COMMA  21 ,COMMA  and so on ,COMMA  it has 6 locations .PERIOD  And we will run through that trace of the execution for an even length array ,COMMA  and I would encourage you to create and odd length array ,COMMA  and trace to the executions to ensure that the code works for odd length arrays as well .PERIOD  So ,COMMA  in this lecture will do it for an even length array .PERIOD  So ,COMMA  a is initially pointing to the beginning of the array ,COMMA  b is pointing to the end of the array ,COMMA  a + n - 1 will go to the end of the array .PERIOD  Now b < a that is true .PERIOD  So ,COMMA  we will enter the loop and in the first iteration we will swap a and b .PERIOD     So ,COMMA  it will go to the swap function ,COMMA  and this is the swap function that actually works from the previous video .PERIOD  So ,COMMA  you can assume that a[0] will be swapped with a[1] .PERIOD  So ,COMMA  they were initially 101 and 0 ,COMMA  and after swap they will be 0 and 101 .PERIOD  Come once that happens a advances by one integer location b goes back by one integer location .PERIOD  So ,COMMA  this the state after the first iteration .PERIOD  In the second iteration you start with a at 21 ,COMMA  and b at - 101 ,COMMA  again b < a ,COMMA  so is swap .PERIOD     So ,COMMA  21 - 101 becomes - 101 and 21 ,COMMA  so they are swapped .PERIOD  And you advance a by 1 and you take back b by 1 ,COMMA  again b < a .PERIOD    So ,COMMA  you go to the third iteration .PERIOD  In the third iteration this the state of the beginning of the iteration ,COMMA  and the swap these contents .PERIOD  So ,COMMA  you swap - 1 and 121 it becomes this becomes the state of the array ,COMMA  and once that is done b over suits .PERIOD  So ,COMMA  b b goes before a ,COMMA  and a go goes after b ,COMMA  swap denoted there with two colored arrows .PERIOD  So ,COMMA  here is the b arrow ,COMMA  it goes to location 121 ,COMMA  and a arrow goes to location - 1 .PERIOD  When this happens b is now < a .PERIOD  So ,COMMA  this means that you have cross the middle of the array .PERIOD  Therefore ,COMMA  you should stop now .PERIOD  So ,COMMA  now b < a ,COMMA  and the loop terminates ,COMMA  and we have seen that this correctly reverse the array .PERIOD  So ,COMMA  here is how the reverse array works ,COMMA  we have seen the concept of relational comparison operators using pointers .PERIOD  How do make sense when they are pointing to locations with them the same array ,COMMA  and how that can be used to write code to using arrays .PERIOD   In this video ,COMMA  we will see the sizeof operator ,COMMA  which is a slightly advanced topic ,COMMA  in relation to pointer arithmetic .PERIOD  This is explaining ,COMMA  how pointer arithmetic freely works .PERIOD  And it is also important to understand one topic that ,COMMA  we will see later on and called malloc .PERIOD   So ,COMMA  the sizeof operator and note that ,COMMA  it is an operator and that highlighted that in red ,COMMA  it looks like a function call ,COMMA  but it is not .PERIOD  The operator gives the number of bytes that any value with the given type occupies .PERIOD  So ,COMMA  sizeof is an operator which takes the name of a type of as an assigned argument ,COMMA  it can also take other kinds of arguments ,COMMA  we will see that .PERIOD  So ,COMMA  you could ask ,COMMA  what is the sizeof an int ?QUESTIONMARK  What is the sizeof a float ?QUESTIONMARK  What is the sizeof a character ?QUESTIONMARK  And the answer ,COMMA  the value that it will come out to be will depend on some particular machine .PERIOD  So ,COMMA  the reason why we use the sizeof operator is that ,COMMA  it helps you to write the code that is general enough for any machine ,COMMA  we will see ,COMMA  what that means ?QUESTIONMARK  So ,COMMA  right now you just returns you the size of any given data type .PERIOD   So ,COMMA  the sizeof operator has an effect on the way data is allocated and the way details allocated depends on the machine ,COMMA  we will see that .PERIOD  So ,COMMA  for an example if you have a character array ,COMMA  the cells are 1 byte apart .PERIOD  So ,COMMA  sizeof operator returns you the number of bytes that a data type occupies .PERIOD  So ,COMMA  in the case of a character ,COMMA  the character occupies 1 byte .PERIOD  So ,COMMA  if you have a character array declared as char s[8] ,COMMA  what you have are ,COMMA  8 cells and each of those cells occupy a width of 1 byte .PERIOD  So ,COMMA  let us say that the character arrays starts at hexadecimal address 1000 .PERIOD  So ,COMMA  the next cell will be at the next byte ,COMMA  which is byte address hexadecimal 1001 .PERIOD  And this goes on until the last cell which is hexadecimal 1007 .PERIOD  So ,COMMA  this contains a null terminator character array with the letters s u c c e s s and then followed by a null .PERIOD  What happens with an integer array ?QUESTIONMARK  So ,COMMA  in an integer array ,COMMA  sizeof an int is 4 bytes .PERIOD  So ,COMMA  the successive elements of an integer array are 4 bytes apart .PERIOD  So ,COMMA  let us say that I have declared an integer array as int a[4] .PERIOD  This means ,COMMA  that a 0 let us say ,COMMA  it starts at hexadecimal address 2000 .PERIOD  Then ,COMMA  a 1 will start 4 bytes away ,COMMA  because the size of an int is 4 bytes .PERIOD  So ,COMMA  it should start at address hexadecimal 2004 and I have sort of indicated it pictorially I want to say that a character is a narrower data type than an integer ,COMMA  an integer occupies 4 bytes .PERIOD  So ,COMMA  the next integer cell ,COMMA  the next integer element in the array will start at hexadecimal address 2004 .PERIOD  The third element will start at hexadecimal address 2008 and the last at hexadecimal address 200c .PERIOD  So ,COMMA  notice that I should have started it at 2012 .PERIOD  But ,COMMA  12 in hexadecimal addressing scheme is c .PERIOD  So ,COMMA  in base 16 ,COMMA  c is the same as decimal 12 .PERIOD  So ,COMMA  that is why I have written it as hexadecimal 200c .PERIOD   Now ,COMMA  let us look at pointer arithmetic in greater detail with our current understanding of the sizeof operator .PERIOD  So ,COMMA  suppose you have an int *pointer .PERIOD  If you have an int  *pointer and then you want to say that ptr + i is equal to ,COMMA  what it should ?QUESTIONMARK  So ,COMMA  notice that + make sense ,COMMA  when you are navigating within an array .PERIOD  So ,COMMA  ptr is let us say pointing to some cell within the array and ptr + i should go to the ith cell after ptr ,COMMA  that is what ,COMMA  it should do .PERIOD  Now ,COMMA  the i th cell after ptr means the i th integer after ptr .PERIOD  So ,COMMA  we should skip 4 i bytes in order to reach the i th integer cell after ptr .PERIOD  So ,COMMA  thus is what we have written here ptr + i is the byte number ,COMMA  ptr + i*sizeof(int) ,COMMA  the machine addressing goes in terms of bytes .PERIOD  So ,COMMA  in order to jump to the ith integer cell ,COMMA  we have to know ,COMMA  how many bytes to skip ?QUESTIONMARK  And the size of an integer is 4 bytes .PERIOD  So ,COMMA  this means we have to skip ahead 4 i bytes ,COMMA  in order to reach ptr + i .PERIOD  Now ,COMMA  if have we declared character *ptr ,COMMA  then ptr + i is supposed to jump to the i th character after ptr size of a character is 1 byte .PERIOD  So ,COMMA  ptr + i*sizeof(char) would be ptr + i*1 ,COMMA  it is the same as ptr + i .PERIOD  So ,COMMA  notice that let us say that ,COMMA  machine understands only byte addresses .PERIOD  So ,COMMA  in order to execute ptr + i correctly ,COMMA  we have to tell which byte should I go to ,COMMA  should the machine go to ?QUESTIONMARK  And in order to do that ,COMMA  you utilize the sizeof operator .PERIOD  So ,COMMA  since we have declared character *ptr ,COMMA  you know that it is sizeof character ,COMMA  i*sizeof character those many bytes I have to skip .PERIOD  In the previous case ,COMMA  I have declare int *ptr .PERIOD  So ,COMMA  in that case I have to skip i*sizeof (int) ,COMMA  in order to reach the correct cell .PERIOD  So ,COMMA  here is the actual reason why ptr + i would magically work correctly .PERIOD  Whether ,COMMA  it was an integer array or it was a character array ?QUESTIONMARK  This is because ,COMMA  at the back of it all ,COMMA  you translate everything to byte addresses using star sizeof whatever type .PERIOD  So ,COMMA  in general if you have type *ptr ,COMMA  then ptr + i is the byte number ptr + i*sizeof (type) .PERIOD  So ,COMMA  this type is the same as the declared type of pointer ,COMMA  ptr is a pointer to that type .PERIOD  Therefore ,COMMA  you multiply it with sizeof(type) and this is the general formula for pointer arithmetic .PERIOD  Now ,COMMA  one of the side effects of that or one of the consequences of this kind of addressing is that ,COMMA  array + i is *(array + i) and it will correctly jump to the i th location in that array ,COMMA  regardless of whatever type the array was .PERIOD  Why is that ?QUESTIONMARK  Because ,COMMA  array + i is then translated to array + i*sizeof whatever type the array has been declared to be .PERIOD  So ,COMMA  you will correctly jump to the byte address corresponding to the i th element in the array .PERIOD  So ,COMMA  here is how array arithmetic in c works ,COMMA  in full .PERIOD  What do we mean by this ?QUESTIONMARK  Let us see that with the help of an example .PERIOD   Suppose ,COMMA  you have an integer array declared as int a[10] and it starts at the address 2000 .PERIOD  And I want to know ,COMMA  how is it that you get this third element of the array a[2] .PERIOD  So ,COMMA  a[2] we know is *(a + 2) ,COMMA  a is a pointer to the first element of the array .PERIOD  And you have to now understand ,COMMA  how + 2 is executed ?QUESTIONMARK  So ,COMMA  + 2 should be the content located at byte address a + 2*sizeof(int) .PERIOD  Why is this ?QUESTIONMARK  A is been declared as integer array .PERIOD  And in c ,COMMA  integer array has the same type as int * .PERIOD  So ,COMMA  a is a pointer to int .PERIOD  Therefore ,COMMA  we know that ,COMMA  we have to do a + 2*sizeof (int) .PERIOD  Whatever the argument is ,COMMA  it will do 2*sizeof the type pointer 2 by that pointer .PERIOD  So ,COMMA  we will do a+2*4 ,COMMA  which is hexadecimal address 2008 ,COMMA  a was 2000 .PERIOD  So ,COMMA  if you have an array int a[4] ,COMMA  let say and it started at address 2000 ,COMMA  then you will jump to array address 2008 .PERIOD  And this is the reason ,COMMA  why c arrays start at index 0 ?QUESTIONMARK  Because ,COMMA  it is a very easy formula ,COMMA  a[0] would be *(a+0) ,COMMA  which is simply *a .PERIOD  In that case ,COMMA  you have the consistent explanation ,COMMA  that the name of the array is a pointer to the first element of the array ,COMMA  you do not need a special rule to do that .PERIOD  Think of what would have happen ,COMMA  if arrays started at 1 .PERIOD  Then ,COMMA  a[2] would be a+1*sizeof(int) .PERIOD  So ,COMMA  a[n] would be a + n - 1 times sizeof whatever and that is an uglier formula than what we have here .PERIOD  So ,COMMA  it is better for arrays to start at location 0 ,COMMA  because it makes the pointer arithmetic easier .PERIOD   So ,COMMA  in summary the sizeof() operator is used in pointer arithmetic and we will see one more common use of the sizeof() operator ,COMMA  very soon .PERIOD   So ,COMMA  the general usage is you can give size of an expression .PERIOD  What will it do is ,COMMA  it will take the type of that expression .PERIOD  So ,COMMA  if I say sizeof(10) ,COMMA  then 10 is an int ,COMMA  .PERIOD  So ,COMMA  it will execute sizeof int and let us say that ,COMMA  on a particular machine it is 4 bytes .PERIOD  Similarly ,COMMA  you could also say sizeof type name .PERIOD  So ,COMMA  for example ,COMMA  I could say sizeof(int) .PERIOD  Rather than giving an integer as an argument ,COMMA  I could also say sizeof(int) ,COMMA  where int is the name of the type and it will return 4 on some particular machine .PERIOD  A less common usage is ,COMMA  you could give sizeof array ,COMMA  if the array is some particular array and it will return you the size of the array in bytes and this is important .PERIOD  It will not return you exactly the number of elements in the array ,COMMA  it will return the total size of the array in bytes .PERIOD  What do I mean by that ?QUESTIONMARK  If I say ,COMMA  int num[10] and then I say sizeof(num) ,COMMA  it will return is 40 because ,COMMA  there are 10 integers ,COMMA  each integer occupying 4 bytes .PERIOD  So ,COMMA  in order to calculate the number of elements in the array ,COMMA  for example ,COMMA  you could do the following ,COMMA  you could say sizeof(num) / sizeof(num[0]) .PERIOD  So ,COMMA  this would evaluate to 40/4 which is 10 .PERIOD  So ,COMMA  size of the operator on the array does not exactly give you the number of elements in the array ,COMMA  it will give you the total number of bytes in the array .PERIOD  But ,COMMA  if you also know how many bytes ,COMMA  the particular element in the array occupies ,COMMA  then you can easily figure out the size of the array ,COMMA  in terms of the number of elements .PERIOD  So ,COMMA  also note that c does not say that ,COMMA  an integer is 4 bytes or float is 4 bytes and so ,COMMA  on .PERIOD  What it specifies is the relationship between the sizes of various types and we will not get in to it ,COMMA  right now .PERIOD  But ,COMMA  just keep in mind that the size of a particular type is depended on ,COMMA  which machine you are running the code on .PERIOD   In this video ,COMMA  we will discuss slightly advanced usage of pointers .PERIOD  Even though ,COMMA  the title of the first slide is ,COMMA  how to return pointers from a function ?QUESTIONMARK  That is just a motivation for introducing a slightly more advance topic in pointers .PERIOD   So ,COMMA  let us just see what is the problem with returning a pointer from a function ?QUESTIONMARK  We know that ,COMMA  any variable can be passed as argument to a function ,COMMA  can be declared as a local variable within a function ,COMMA  and can also be a return from a function .PERIOD  So ,COMMA  is there something and we have already seen that ,COMMA  in the case of the swap function how we pass pointers to a function and what new kinds of functions does this enable us to write ?QUESTIONMARK   Let us examine that in slightly greater detail .PERIOD  What happens when we call the increment function ?QUESTIONMARK  Inside the main function ,COMMA  we have an int pointer p and then it is declared ,COMMA  it is not pointing to anything and immediately ,COMMA  you will call increment(1) .PERIOD  So ,COMMA  you call increment(1) ,COMMA  n is a local variable in increment ,COMMA  it is the argument .PERIOD  So ,COMMA  n is 1 and then ,COMMA  you declare a temp and then ,COMMA  you declare a pointer to temp ,COMMA  .PERIOD  So ,COMMA  there is a ptr .PERIOD  Let us say that ,COMMA  temp is a address hexadecimal 1000 .PERIOD  So ,COMMA  ptr contains 1000 and it points to temp ,COMMA  temp is at address 1000 .PERIOD  Now ,COMMA  in the next statement you increment temp ,COMMA  you set temp to n + 1 ,COMMA  .PERIOD  So ,COMMA  n is 1 and temp is 2 .PERIOD  Now ,COMMA  ptr points to temp and now ,COMMA  I will return ptr .PERIOD  So ,COMMA  the return value is 1000 ,COMMA  which is the address of temp .PERIOD   Now ,COMMA  what happens when you return to main ?QUESTIONMARK  As soon as increment finishes and we have said this several times before ,COMMA  as soon as any function finishes ,COMMA  the memory with that is allocated to the function is erased .PERIOD  So ,COMMA  when you return to the main function ,COMMA  what happens is that ,COMMA  you have p and p will contain the address 1000 .PERIOD  So ,COMMA  it is meant to point to temp .PERIOD  But ,COMMA  the space meant for temp has already been erased .PERIOD  So ,COMMA  p is pointing to a junk value in memory ,COMMA  it is pointing to an arbitrary location in memory .PERIOD  So ,COMMA  this is known as a dangling pointer .PERIOD  Hopefully ,COMMA  the picture is a representative of a dangling pointer .PERIOD  The fact that ,COMMA  it points to a location ,COMMA  which is no longer meaningful .PERIOD  Notice that ,COMMA  what I am talking about is the ideal situation ,COMMA  when you code it in c and try to run it ,COMMA  may be p does point to the location with address two .PERIOD  This is because ,COMMA  c may not be aggressive in re cleaning the memory .PERIOD  But ,COMMA  you should always assume that ,COMMA  the safe thing is to assume every location that was allocated to increment is erased immediately after increment returns .PERIOD  In practice ,COMMA  it may not be the case ,COMMA  ,COMMA  but you should never assume that ,COMMA  you still have the temp variable .PERIOD  In general ,COMMA  what you will have is a dangling pointer .PERIOD  Because ,COMMA  p points to a location which no longer contains any relevant information .PERIOD  So ,COMMA  when you print p ,COMMA  you will have a danger .PERIOD  So ,COMMA  how do you return pointers from a function ?QUESTIONMARK  So ,COMMA  we have seen what a dangling pointer means ?QUESTIONMARK  And here is a very silly function ,COMMA  which will create a dangling pointer .PERIOD  Now ,COMMA  what is the problem with this function ,COMMA  it returns the address of a local variable temp .PERIOD  But ,COMMA  temp is erased as soon as increment n returns .PERIOD  So ,COMMA  the return value is not a meaningful address to the calling function ,COMMA  which is mean .PERIOD  Can we get around this ?QUESTIONMARK   So ,COMMA  the main problem here is that ,COMMA  anything that is allocated to the called function on the stack is erased as soon as it returns .PERIOD  Is there any way at all to meaningfully return pointers to new variables ?QUESTIONMARK  Then ,COMMA  use a new concept that is a globally accessible memory called heap ,COMMA  we have already seen a stack .PERIOD  Now ,COMMA  we will understand what a heap is .PERIOD  So ,COMMA  roughly the idea is that ,COMMA  if you allocate value on the global memory ,COMMA  it is not erased when the function returns .PERIOD   I will explain this with the help of a slightly a broad analogy .PERIOD  Hopefully ,COMMA  this is indicative of what actually happens with the heap ?QUESTIONMARK  So ,COMMA  think of executing a function as writing on a classroom blackboard ,COMMA  when a lecture is going on .PERIOD  Once the function finishes execution ,COMMA  which is like the class is over ,COMMA  everything on the blackboard is erased .PERIOD  Suppose ,COMMA  you want to retain a message after the class is over .PERIOD  Now ,COMMA  the solution could be that you can post things on a notice board ,COMMA  which is global to all class rooms .PERIOD  So ,COMMA  it is common to all class rooms .PERIOD  So ,COMMA  things on the notice board are not removed as soon as a class is over .PERIOD  If you write something on the blackboard ,COMMA  which is similar to storing something on the stack ,COMMA  as soon as the class is over ,COMMA  it will be erased .PERIOD  So ,COMMA  if you have something to communicate back to another class ,COMMA  may be you can post it on a notice board .PERIOD  Now ,COMMA  the notice board is globally accessible to all class rooms .PERIOD  The black board is like a stack and the global notice board is like a heap and contents on the heap is not erased ,COMMA  when the function finishes .PERIOD   So ,COMMA  how do you allocate things on the heap ?QUESTIONMARK  There is a standard library function called malloc ,COMMA  in the file stdlib .PERIOD h which can be used to allocate space on the heap .PERIOD  Roughly ,COMMA  this is what it does ,COMMA  if you ask for malloc(n) ,COMMA  there n is an positive integer ,COMMA  it will allocate n bytes of memory on the heap and it will return a pointer to the first location of the allocated space .PERIOD  Now ,COMMA  that pointer can be converted to pointer of any type ,COMMA  malloc just allocates n bytes .PERIOD  Now ,COMMA  you may want to interpret those bytes as n divided by 4 integers .PERIOD  In that case ,COMMA  it will return a pointer ,COMMA  .PERIOD  So ,COMMA  you convert that pointer to an int pointer .PERIOD  Let us see an example I may have an ints pointer for ptr and now ,COMMA  I want to allocate 10 integers on the heap .PERIOD  How do you I do that ?QUESTIONMARK  I will allocate 10 * sizeof(int) .PERIOD  So ,COMMA  this will allocate on some particular machine ,COMMA  let us say 40 bytes and it will return an address of the first location .PERIOD  Now ,COMMA  that address I want to treat it as an integer address .PERIOD  So ,COMMA  I will convert it to an int as int * and then malloc (10*sizeof(int)) ;SEMICOLON  .PERIOD  So ,COMMA  this style of writing code means the code portable .PERIOD  Because ,COMMA  suppose you write the code and on a machine ,COMMA  where integer was 4 bytes and you take your code and go to a bigger machine ,COMMA  which has 8 bytes as the size of an integer .PERIOD  Then ,COMMA  you compile the code on that machine and your code will still allocate 10 integers .PERIOD  Why ?QUESTIONMARK  Because ,COMMA  on the new machine sizeof(int) will be automatically 8 .PERIOD  So ,COMMA  it will allocate 80 bytes .PERIOD  So ,COMMA  in order to write portable code ,COMMA  you can use sizeof(int) ,COMMA  instead of assuming that ,COMMA  integer is 4 bytes .PERIOD  So ,COMMA  I want to allocate malloc (10*sizeof(int)) ;SEMICOLON  ,COMMA  this will allocate 10 integers no matter ,COMMA  which machine you do it all .PERIOD  So ,COMMA  and it will return you the address of the first byte in that allocated space ,COMMA  that address you convert to an integer array ,COMMA  integer pointer .PERIOD  Here is ,COMMA  how you allocate memory on the heap .PERIOD   So ,COMMA  when we think pictorially ,COMMA  think of heap has a separate space in the memory .PERIOD  In this case ,COMMA  ptr will be allocated some space on the heap .PERIOD  Let us say 10 integers on some particular machine ,COMMA  it will say 40 bytes and it will return the address of the first byte .PERIOD  Now ,COMMA  that first byte you treat it as a pointer to int ,COMMA  that is done through the conversion int * .PERIOD   Now ,COMMA  it is nice that you can allocates space on the heap .PERIOD  But ,COMMA  in order to be hygienic ,COMMA  you should also remove the allocated space ,COMMA  once you have done with it .PERIOD  There should be a reverse operation to allocate and that is free ,COMMA  it is in the same library ,COMMA  stdlib .PERIOD h .PERIOD  And if I just say free(ptr) and ptr was originally allocated using malloc .PERIOD  Then ,COMMA  it will correctly remove ,COMMA  ;SEMICOLON  however ,COMMA  many bytes were originally allocated .PERIOD  So ,COMMA  let us say that I have int *ptr and then ptr ,COMMA  I allocate 10 integers on the heap and ptr is the address of the first allocated location .PERIOD  Now ,COMMA  I may do a bunch of processing here and once I have done ,COMMA  it is just nicer me to de allocate things on the heap .PERIOD  This is like ,COMMA  saying that things on the notice board once some condition occurs ,COMMA  where you know that the notices no longer needed ,COMMA  you just remove that posting from the notice board for that ,COMMA  we use free of ptr .PERIOD  Now ,COMMA  notice the asymmetry here ,COMMA  malloc took the number of bytes to be allocated free just wanted to say ,COMMA  which pointer is to be free ?QUESTIONMARK  It does not ask for ,COMMA  how many bytes to free ?QUESTIONMARK  So ,COMMA  you can imagine that malloc does some kind of book keeping ,COMMA  where it says that I allocated 40 bytes and that was return to ptr .PERIOD  So ,COMMA  if I just say free(ptr) it automatically knows that ,COMMA  40 bytes are to be free ,COMMA  you do not have to give the extra argument saying ,COMMA  how many bytes to free ?QUESTIONMARK  Once you free the pointer ,COMMA  you just set it back to null ,COMMA  this is just a safe practice and it is not absolutely necessary ,COMMA  ,COMMA  but it is recommended .PERIOD   So ,COMMA  let us solve our earlier problem using malloc .PERIOD  Our earlier problem was that ,COMMA  ptr was pointing to some location within the stack .PERIOD  So ,COMMA  as soon as the function returned ,COMMA  the return address no longer meant any meaningful address .PERIOD  So ,COMMA  let us now solve this problem .PERIOD  I have included stdlib .PERIOD h ,COMMA  because I will allocate memory on the heap .PERIOD  So ,COMMA  the increment function is modified as follows strictly speaking ,COMMA  I do not need a temp variable any more .PERIOD  I have an int pointer and I will use the pointer to allocate one integer on the heap ,COMMA  this is a really wasteful practice but ,COMMA  it just illustrates a point .PERIOD  So ,COMMA  it will allocate one integer on the heap and then ,COMMA  return that address and treat that address as int * .PERIOD  Now ,COMMA  I will use * ptr = n + 1 to dereference that location on the heap and set the value to n + 1 .PERIOD  Once I am done ,COMMA  I will return the ptr I will return the address on the heap .PERIOD   What happens here is that ,COMMA  the increment function ptr points to some location on the heap ,COMMA  using malloc .PERIOD  So ,COMMA  one integer is allocated on the heap and when you say ,COMMA  *ptr = n + 1’s ,COMMA  then the location in the heap will contain 2 .PERIOD   And here is the catch ,COMMA  earlier p was just dangling ,COMMA  it was just pointing to an arbitrary location in the memory .PERIOD  But ,COMMA  increment allocated something on the heap and returned that address .PERIOD  As soon as increment returns ,COMMA  the stack is a waste .PERIOD  So ,COMMA  everything that was allocated on the stack for increment is erased ,COMMA  ,COMMA  but things that are allocated on the heap remain .PERIOD  So ,COMMA  p points to a meaningful address on the heap ,COMMA  then once you are done you can say free(p) and things will be erased ,COMMA  when you print it ,COMMA  the output will be 2 .PERIOD   Malloc and free are prone to a lot of errors and a lot of programming errors in c ,COMMA  can be trace back to incorrect use of malloc and free .PERIOD  So ,COMMA  there are some categories of errors for example ,COMMA  you may forget to malloc in the first place .PERIOD  So ,COMMA  you will lead to dangling references or dangling pointers ,COMMA  as we saw in the first example .PERIOD  Now ,COMMA  you could allocate some space .PERIOD  But ,COMMA  you may not allocate enough space ,COMMA  that is a very common error .PERIOD  Commonly ,COMMA  you could allocate of by one errors I wanted to allocate really len + 1 number of bytes .PERIOD  But ,COMMA  instead I allocated only len number of bytes .PERIOD  Another very common error is something known as a memory leak ,COMMA  which is that you allocate things on the heap ,COMMA  ,COMMA  but you forget to free memory after use ,COMMA  this is called a memory leak .PERIOD  Notice that ,COMMA  if you allocate space on the stack ,COMMA  it will always be cleaned up as soon as the function returns .PERIOD  So ,COMMA  memory leaks usually happen ,COMMA  when you malloc space on the heap .PERIOD  But ,COMMA  you forget to free them ,COMMA  once you have done and a lot of software ships with memory leaks and this is a major concern in the industry .PERIOD  This is also an obscure error ,COMMA  which is freeing the same memory more than once .PERIOD  This is uncommon when a single programmer is working on a code .PERIOD  But ,COMMA  when multiple programmers are working on the same piece of code ,COMMA  you may end up freeing the same memory twice ,COMMA  this will lead to some run time errors .PERIOD     In this lecture let us look at an application of malloc and free to solve some problem that we are interested in .PERIOD  So ,COMMA  the problem that I will define is to write a function to return the duplicate of a string ;SEMICOLON  a string is given us the argument and you have to return the duplicate of that string .PERIOD  So ,COMMA  we have to write a function to take a string as input and return the copy .PERIOD  Now let us assume that the input string is s ,COMMA  and it ends in a null character .PERIOD  Assume that we can find the number of null non null characters in the string .PERIOD  So ,COMMA  this is will be refer to us the length of the string .PERIOD  What we will do is allocate length + 1 characters .PERIOD  So ,COMMA  there are length non null characters ,COMMA  and then one more for storing the null characters .PERIOD  So ,COMMA  we will allocate len + 1 characters on the ,COMMA  heap using malloc ,COMMA  and we will copy the contents of s to that space on the heap .PERIOD  And finally ,COMMA  return the address of that location .PERIOD  So ,COMMA  that will be the t th the new array .PERIOD  So ,COMMA  notice that the original array may be on the stack ,COMMA  and the new array the duplicate array will be on the heap .PERIOD  Let us write this function .PERIOD        So ,COMMA  I will call it duplicate it takes one array which is the same as a pointer .PERIOD  So ,COMMA  I can declare it has char *s or char s with square brackets ,COMMA  it does not matter .PERIOD  So ,COMMA  I will just declare it has a character *s ,COMMA  and what will it return ?QUESTIONMARK  It will return another array ,COMMA  and array is the same as a pointer .PERIOD  So ,COMMA  I will return character star .PERIOD  So ,COMMA  the input argument is an array ,COMMA  and the output is also an array .PERIOD  I will declare 3 variables ;SEMICOLON  i which is for the loop ,COMMA  len which will store the number of non null characters in s .PERIOD  So ,COMMA  let us be very specific ,COMMA  I do not want to store the number of characters in s ,COMMA  because I want to say that I do not want to count null .PERIOD   Now if you want to count null as well in the length then you will modified the code ,COMMA  but typical convention is that when you mention the length of a string ,COMMA  you do not count the null character .PERIOD  I will also declare a char *t .PERIOD  Now the code proceeds and stages ;SEMICOLON  first I have to write a loop to find the length of the string ,COMMA  I can write a very simple loop to do that I can say for i = 0 as long as s of i is not null ,COMMA  do increment i .PERIOD  So ,COMMA  as soon as I see the first null in s ,COMMA  I will stop .PERIOD  When I exit out of the loop ,COMMA  I will be the number of non null characters in s .PERIOD  So ,COMMA  I can say len = i .PERIOD  So ,COMMA  in the first step of the function ,COMMA  we just find the length of the string excluding the null character at the end .PERIOD   Now comes the important thing ,COMMA  we have to copy that array to somewhere .PERIOD  If we copy that array to the stack itself that is if I copy that array to some space within the duplicate functions stack ,COMMA  it will be erased when I return .PERIOD  So ,COMMA  I should allocate the space on the heap .PERIOD  I can allocate space on the heap using the malloc function .PERIOD  So ,COMMA  let us look at the malloc function .PERIOD  I want to allocate a bunch of space on the heap ,COMMA  how much do I have to allocate ,COMMA  I have to allocate len + 1 number of characters .PERIOD  In other words ,COMMA  I have to allocate len + 1 times sizeof a single character ;SEMICOLON  these many bytes on the heap .PERIOD  Notice that it is not len times sizeof(char) ,COMMA  because if I allocate only that much then I will not have to space to copy the last null character .PERIOD  So ,COMMA  I should the input is a null terminated character ,COMMA  it is duplicate should also the null terminated .PERIOD  So ,COMMA  I should makes space for all characters including the null character on the heap .PERIOD  So ,COMMA  I will allocate (len+1) * sizeof(char) many bytes on the heap ,COMMA  it will return you the address of the first byte and that address I will convert to a char star .PERIOD  So ,COMMA  malloc returns a kind of an unsorted .PERIOD  So ,COMMA  here are these many bytes .PERIOD  Now it will return you the address of the first byte that was located ,COMMA  now I want to treat that as a character pointer .PERIOD  So ,COMMA  I will can do that using the casting operator .PERIOD  Why do I have to do that think about it for a minute ,COMMA  because you want pointer arithmetic to work .PERIOD  When I say t[i] ,COMMA  I should correctly execute star of t + i .PERIOD  So ,COMMA  go back to that lecture and understand why it is important that you know the it is not just a byte address ,COMMA  it is a character pointer .PERIOD  Once you do the allocation ,COMMA  you can copy s array into t array .PERIOD  We do not really care about the fact that t is not on the stack ,COMMA  t is on the heap ,COMMA  because copying is done exactly the same way .PERIOD  So ,COMMA  I can say i = 0 ,COMMA  i < len ,COMMA  i ++ t[i] = s[i] .PERIOD  And then finally ,COMMA  this will copy all the non null characters ,COMMA  and finally I will say t[i] = null ,COMMA  the last character will be the null character .PERIOD  Now ,COMMA  if you want to understand it in slightly greater detail understand why the character star cast was required in order for t[i] to work properly .PERIOD  Once I have done copying the array ,COMMA  I can just return t ,COMMA  and I will not leap it will not lead to a dangling pointer because t is allocated on the heap .PERIOD  So ,COMMA  let us pictorially understand what happens during the execution of this program .PERIOD  I have main function ,COMMA  and I allocate a char array .PERIOD  Now this is allocated on the stack .PERIOD  As soon as I declare a character array and initialized it with in main ,COMMA  it is allocated in the stack corresponding to main .PERIOD  So ,COMMA  s is a pointer to the first location in the array .PERIOD  And I declare another *t ,COMMA  and then I call t = duplicate(s) ,COMMA  I should return a separate copy of s .PERIOD  Let see what happens in the duplicate function ?QUESTIONMARK  We do allocation for all the local variables all that ,COMMA  but important thing is that we have s and t which are new pointers .PERIOD  Now s is the input argument to duplicate ,COMMA  and it will be pointing to the array in the main function ,COMMA  because I call duplicate(s) .PERIOD  So ,COMMA  duplicates s will point to the same array as the s of mean .PERIOD  So ,COMMA  it is pointing to the array on the stack ,COMMA  Now as soon as I allocate memory for t on the heap ,COMMA  which was step 3 of duplicate ,COMMA  I would say t = (char *)malloc( (len+1) * sizeof(char) ) .PERIOD  What is len here ?QUESTIONMARK  len is 6 ;SEMICOLON  there are 6 non null characters len + 1 is 7 .PERIOD  So ,COMMA  I allocate 7 characters on the heap ,COMMA  and its return address will be cost to a character pointer .PERIOD  So ,COMMA  t is now pointing to this space on the heap .PERIOD  Now ,COMMA  once I am done ((Refer Time: 08:33)) creating the space on the heap ,COMMA  what I can do is ,COMMA  I can copy the location the s array into the t array on the heap .PERIOD  So ,COMMA  once that loop executes it will look like this ,COMMA  here is the s array inside main ,COMMA  here is the heap the array allocated by duplicate ,COMMA  and you will just copy t[i] = s[i] for .PERIOD  So ,COMMA  you will copy ‘s’ ‘a’ ‘m’ ‘p’ ‘l’ ‘e’ ,COMMA  that is within the loop .PERIOD  And then finally ,COMMA  I will say that t[6] = ‘\0’ .PERIOD  So ,COMMA  here is an array of size 7 ,COMMA  it has a 6 non null characters and the last element is null .PERIOD    And then once I am done ,COMMA  I will return from duplicate .PERIOD  Again keep in mind what is erased is the stack .PERIOD  Everything that was allocated to duplicate on the stack is erased .PERIOD  Those s t and the local variables in duplicate no longer exist ,COMMA  but the work that was done by allocating on the heap that still remains .PERIOD  So ,COMMA  the return value t ,COMMA  that is return value which is the address of the array in heap will be assign to t .PERIOD  So ,COMMA  t now points to heap .PERIOD  Notice how it executed s was allocated on the stack ,COMMA  and the effect of the duplicate function will be that ,COMMA  the duplicate of the array will be created on the heap .PERIOD   So ,COMMA  notice what we understood about the sizeof operator .PERIOD  Sizeof operator was use to know the number of bytes need at the stored data type .PERIOD  It is used in pointer arithmetic ,COMMA  it is used in array index calculation ,COMMA  and it is also used when allocating memory on the heap ,COMMA  because malloc needed to know how many bytes to allocate .PERIOD  And suppose I have wanted to allocate 10 integers ,COMMA  instead of me saying that on this machine I know that and integer is 4 bytes .PERIOD  So ,COMMA  you go ahead in allocate 40 bytes .PERIOD  The problem with doing that is you take your code to another machine ,COMMA  and that machine integer is 8 bytes ;SEMICOLON  and your code will no longer allocate sufficient space .PERIOD  So ,COMMA  the real way to write portable code would be to say 10 times sizeof int ,COMMA  that code will work regardless of which machine you execute on .PERIOD   So ,COMMA  here is the use of sizeof operator when you call malloc ,COMMA  it helps you to write portable code which will execute on any machine .PERIOD  So ,COMMA  we have seen that allocating memory on the heap can be done using malloc ,COMMA  we have understood what it means to allocate memory on the heap the difference between stack and heap ;SEMICOLON  stack is erased as soon as a function returns ,COMMA  heap is not erased when a function returns you have to explicitly say that i ((Refer Time: 11:39)) now freeing that using free function .PERIOD  Again remember the asymmetry within malloc and free ;SEMICOLON  malloc needed to know how many bytes you allocate ,COMMA  free just needed to know which pointer to de allocate ,COMMA  which pointer to free .PERIOD  Did not want to know how many bytes to free ,COMMA  it does that automatically .PERIOD  And to repeat common errors using malloc you could forget to malloc .PERIOD  Now you could not allocate enough space in heap .PERIOD  For example ,COMMA  in the code that we have just seen ,COMMA  suppose you are allocated just len number of characters instead of len + 1 .PERIOD  Then you would not have enough space on the heap to copy the last null character .PERIOD  So ,COMMA  you will violet that t is an exact duplicate(s) .PERIOD  Now you could forget to free memory after use ,COMMA  this is called a memory leak ,COMMA  and you could have the sub square error of freeing the same memory twice ,COMMA  that leaves to run time errors .PERIOD    Now ,COMMA  recursion is usually something that is completely new .PERIOD  it is a new way of thinking about problems that might sound unfamiliar at first ,COMMA  but eventually it is a more natural way of solving problems than other techniques .PERIOD  So ,COMMA  we will carefully examine what recursion means .PERIOD  So ,COMMA  this is the video of a media player having a copy of itself inside the video and it goes on forever .PERIOD  We will see what does this have to do with recursion .PERIOD   So ,COMMA  recursion in English means roughly say again i am function defined in terms of itself are called recursive functions .PERIOD  Now ,COMMA  this is not completely accurate .PERIOD  We want to say that functions defined in terms of itself in a particular way ,COMMA  these are valid recursions .PERIOD  Recursion is a powerful tool for program construction and for thinking about and reasoning about functions in general .PERIOD  So ,COMMA  it is a general purpose technique of programming ,COMMA  and you can do any kind of program using only just recursion .PERIOD  We will not see such general types of recursion in this course ,COMMA  but we will see fairly common examples for recursions .PERIOD   So ,COMMA  for example ,COMMA  let us consider a very simple function which will search for a key within a given array and we know how to write this .PERIOD  What i will do is ,COMMA  i will take an integer ,COMMA  initialize it to 0 ,COMMA  for i = 0 to n .PERIOD  N is the size of the array .PERIOD  i will increment i and if at any i ,COMMA  i find the key ,COMMA  i will return 1 indicating that i have found the key .PERIOD  if i have not found the key and i have reached the end of theory ,COMMA  i will return-1 .PERIOD  This is a typical way to search for a key inside a given array .PERIOD  Now ,COMMA  we will approach the idea of recursion by looking at a recursive solution to this .PERIOD  Hopefully ,COMMA  while seeing this program ,COMMA  we will get an idea of what recursion means .PERIOD   So ,COMMA  what do we mean by a recursive solution to this ,COMMA  right .PERIOD  Rather than defining it and describing abstract properties of recursion ,COMMA  why not let write an actual program which is defined in the recursive manner and through these kinds of examples will eventually get the hang of recursion .PERIOD  So ,COMMA  we have to write a function search it will return whether a key is found or not .PERIOD  if the key is found ,COMMA  it returns 1 .PERIOD  if the key is the not found ,COMMA  it returns a-1 and you have to search an array a of size n for the key .PERIOD  Now ,COMMA  we have written this function just now using loops .PERIOD  Now ,COMMA  let us write this using recursion .PERIOD    So ,COMMA  let us say that i will in some unspecified syntax ,COMMA  this is not going to be valid c ,COMMA  but this is just so that we see the idea in a very clear manner .PERIOD  i have to search for an array of size a of size n for key .PERIOD  Now ,COMMA  if the array is empty that is n is equal to 0 ,COMMA  you can have more conditions here .PERIOD  N can be < 0 as well ,COMMA  but let say that empty array is n is equal to 0 ,COMMA  then you say that i have not found the key because it is an empty array .PERIOD  So ,COMMA  you give back the value-1 .PERIOD  So ,COMMA  n = 0 implies the value to be returned this-1 .PERIOD  That is what this notation is supposed to stand for .PERIOD  Suppose n is not 0 ,COMMA  so ,COMMA  this means that an array is non-empty .PERIOD  Now ,COMMA  how do we solve this ,COMMA  recursively right .PERIOD  So ,COMMA  this look for the first element whether it is the key or not .PERIOD  if the first element is the key ,COMMA  we do not have to do anything further .PERIOD  We know that the key is present in the arrays ,COMMA  so you return 1 .PERIOD  So ,COMMA  the key has been found and you return 1 ,COMMA  and now is the big step for recursion .PERIOD  How can we search for the key in an array of size smaller than n ?QUESTIONMARK  So ,COMMA  if a[0] is not equal to key ,COMMA  then this means that key can be somewhere in a 1 through a n-1 or it is absent in the array .PERIOD  in any case what we now have to do is search for the arrays starting at a 1 ,COMMA  so by a 1 this is not strictly c notation .PERIOD  What i mean is the sub arrays starting at a + 1 .PERIOD  So ,COMMA  search in the sub array starting at a + 1 .PERIOD  Now ,COMMA  the sub array has one element less because we already know if you are here that a 0 is not equal to key ,COMMA  so there are only n-1 element in the smaller sub problem .PERIOD  What do we have to search for ,COMMA  we have to search for the key .PERIOD  So ,COMMA  this says that either the key is present as the first element of the array or you have to solve the sub problem of searching in the sub array of size n-1 for the same key .PERIOD  So ,COMMA  here is the key to thinking about a problem in recursive terms .PERIOD  What you first do is ,COMMA  consider the case when you have the trivial array which is the empty array in this case .PERIOD  So ,COMMA  we have the base case and then ,COMMA  these are the recursive case .PERIOD  So ,COMMA  the recursive case consists of doing something at size n .PERIOD  So ,COMMA  in this case ,COMMA  it is search whether the first element is the key or not .PERIOD  if it is true ,COMMA  then we do not have to do anything further ,COMMA  we have found the key ,COMMA  otherwise solve the sub problem .PERIOD  Now ,COMMA  the sub problem is a smaller copy of the old problem .PERIOD  So ,COMMA  this is what is known as the inductive case or the recursive case .PERIOD  The reason i am calling it inductive case is that recursion has very tight connections to the idea of mathematical induction .PERIOD  if you know how to write a proof by mathematical induction ,COMMA  what you normally do is you consider a base case .PERIOD  So ,COMMA  you have a theorem and you want to prove this by mathematical induction .PERIOD  You consider the base case probably n = 1 or n = 0 .PERIOD  These will be the base cases for an association about natural numbers and then ,COMMA  if the base case is true ,COMMA  then you say that i assume that the problem is true for size n and now ,COMMA  i want to prove that the theorem is true for size n + 1 .PERIOD  This is how a mathematical induction proof looks like and in the case of a recursive program ,COMMA  there is a very tight analogy .PERIOD  Recursion in fact is just a mathematical induction in the context of writing programs .PERIOD  We have to solve a problem .PERIOD  First we will see what is a problem in the base case and the base case is a very trivial case usually ,COMMA  but it is important that you think about base case .PERIOD  You say that if the array is empty and then ,COMMA  i will return-1 because the key cannot be in the array .PERIOD  Then ,COMMA  you say that i will now define the problem of size n in terms of a sub problem of size n-1 for example .PERIOD  So ,COMMA  we will solve the same .PERIOD  We will solve the bigger problem in terms of a smaller copy of itself and this is the key to thinking about recursive programs .PERIOD   Let us code this in c .PERIOD  So ,COMMA  we code this in a very straight forward manner .PERIOD  i will write a int search ,COMMA  int a[] ,COMMA  int n which is the size of the array a ,COMMA  int key which is the key we are searching for .PERIOD  if n = 0 ,COMMA  then return-1 because the key is not found .PERIOD  This is the base case and otherwise n > 0 ,COMMA  so you can search for a 0 is equal to key or not .PERIOD  So ,COMMA  you can search for whether the first element is the key .PERIOD  if it is ,COMMA  then you have found the key ,COMMA  otherwise what you do is you call search a + 1 which is the sub arrays starting at size 1 .PERIOD  The sub array has size n-1 and key .PERIOD  So ,COMMA  when you search or write a recursive program ,COMMA  there are a few things that you want to check .PERIOD  The first is that the base case is properly handled .PERIOD  The second is that when you define the sub problem ,COMMA  you want to ensure that it really is a sub problem because if you solve the problem in terms of an equal size problem or even a bigger size problem ,COMMA  your program may not terminate .PERIOD  We will see this in a moment .PERIOD  So ,COMMA  this part which is highlighted in green which is calling search itself ,COMMA  but on a smaller sub problem is a + 1 n-1 .PERIOD  This is what is known as a recursive call to the same function .PERIOD  So ,COMMA  we have seen functions that can call other functions .PERIOD  Now ,COMMA  we have seen functions which can call themselves and this is what is known as recursion .PERIOD   Let’s see how this function behaves .PERIOD  Now ,COMMA  before we go into the execution trace of this function ,COMMA  i want to add a word of caution .PERIOD  The actual way to understand recursion is not to think about the stack and how functions are calling other functions .PERIOD  The real way to understand recursion is to think about this program as a problem defined in terms of sub instance .PERIOD  But in any case we will just see the execution of this function through the stack trace just to get comfortable with what happens at the back of all of this .PERIOD  So ,COMMA  let us do a quick trace .PERIOD  Suppose we have an array 31 4 10 35 59 .PERIOD  it is an array of size 5 named a ,COMMA  and we are searching for the key 3 .PERIOD  Now ,COMMA  we know that this key is not present in the array ,COMMA  but let see how the function executes .PERIOD  So ,COMMA  first we call search(a ,COMMA 5 ,COMMA 3) .PERIOD  A 0 is 31 which is not the key .PERIOD  So ,COMMA  it calls search a + 1 4 because now we are searching in the sub array of size 4 for the same key .PERIOD  So ,COMMA  that is in effect ,COMMA  the same as calling the same search function on this sub array highlighted in grey .PERIOD  This is because the answer to search in the whole array is now the same as answer to the search in the sub array .PERIOD  That is what the recursive statement is .PERIOD  Now ,COMMA  (a+1)[0] is 4 this is the first element of the sub array .PERIOD  A 4 is not 3 and a ,COMMA  and at this point you call the sub sub problem which is search a + 2 ,COMMA  the sub array of size 3 for the key 3 .PERIOD  Here is the sub array of size 3 and you are searching for 3 in this sub array .PERIOD  Again the first element of the array is 10 ,COMMA  which is not 3 .PERIOD  So ,COMMA  you call the sub problem of this which is a + 3 .PERIOD  Now ,COMMA  the array is of size 2 and you will search for 3 and this goes on until you find that you have exhausted the array .PERIOD  Finally ,COMMA  the array is of size 0 and you will finally say that since the array is of size 0 ,COMMA  i have not found the key .PERIOD  So ,COMMA  you return-1 .PERIOD   Let us just look at this stack of function cause and see how it looks like .PERIOD  Search(a ,COMMA 5 ,COMMA 3) is called by mean and let say that it has some return address .PERIOD  We do not care about it right now ,COMMA  but search(a ,COMMA 5 ,COMMA 3) calls search(a+1 ,COMMA 4 ,COMMA 3) and the place to return is some line in search function .PERIOD  This calls the sub sub problem a + 2 3 that calls a + 3 2 that calls a + 4 1 ,COMMA  and that calls a + 5 0 at which point you realize that the sub problem now is empty and then ,COMMA  you return a-1 .PERIOD  So ,COMMA  at this point you have reached the base case .PERIOD  if n = 0 ,COMMA  return-1 .PERIOD  So ,COMMA  that will return a-1 .PERIOD  Where will it return to ?QUESTIONMARK  it will return to the function which immediately called it which is search(a+4 ,COMMA 1 ,COMMA 3) .PERIOD  So ,COMMA  this guy gets a-1 .PERIOD  Therefore ,COMMA  it just returns that-1 ,COMMA  return the value of whatever is returned by the sub problem ,COMMA  ok .PERIOD  So ,COMMA  it is-1 and that-1 gets returned .PERIOD  So ,COMMA  it gets bubbled up all the way back to main ,COMMA  and main you can realize that the element is not present in the array because the return value of search(a ,COMMA 5 ,COMMA 3) was-1 .PERIOD  At this point ,COMMA  the call stack terminates .PERIOD   So ,COMMA  what was special about the recursion call stack ?QUESTIONMARK  it was just that most of the stack was involved by a function calling itself over and over ,COMMA  but each time the function called itself ,COMMA  it was calling on a smaller version of the problem .PERIOD  Here is how ,COMMA  you think about a very simple program in terms of recursion .PERIOD  Earlier ,COMMA  we saw how to solve this using iteration which was using a loop and we have seen the problem how to be solved using recursion .PERIOD  Now ,COMMA  a word of caution ,COMMA  we will see this in further examples .PERIOD  it is very important that you handle the base case properly .PERIOD  Now ,COMMA  this is something that we are not used to in normal way of thinking .PERIOD  When we think about solving a problem ,COMMA  we are thinking about solving substantial sizes of the problems .PERIOD  We are not concerned too much with what happens with an empty array ,COMMA  what happens when n is-1 and things like that ,COMMA  but even in this problem ,COMMA  we know that when we call search(a + 5 ,COMMA 0 ,COMMA 3) we know that the function terminated because we had a base case which said that if n equals to 0 ,COMMA  then return-1 .PERIOD  if we did not have this case ,COMMA  you could see that probably it will go on calling itself infinite number of times .PERIOD  So ,COMMA  just like when you are writing for loop or a while ,COMMA  loop you have the case of infinite loops .PERIOD  in the case of recursion ,COMMA  you can have an infinite recursion and you have to guard against that .PERIOD  The only way to guard against that is to get the base case correct .PERIOD  So ,COMMA  here is something in counter intuitive about programming recursive functions .PERIOD  You know almost half of your intellectual effort is in handling the base case properly ,COMMA  and only the remaining is involved in solving the recursive case .PERIOD    In this video will look at linear recursion in a bit more depth ,COMMA  while I describe what I mean by linear recursion .PERIOD  We have mentioned earlier that when designing recursive programs ,COMMA  think about the problem in recursive terms ,COMMA  do not think in terms after stack that is used in execution .PERIOD  When it is actually executed that will be a stack created and use for the execution ,COMMA  and that depth of recursion is a term which means the maximum size of the stack ,COMMA  while you execute the program on given input .PERIOD  The memory used by the programs includes the local memory of the function ,COMMA  + the depth of the stack .PERIOD    .PERIOD   Let see with an example .PERIOD  We will consider actually two examples ;SEMICOLON  one for even length array ,COMMA  and another for an odd length array .PERIOD  Let say that a is an even length array with six elements and we want to reverse it ,COMMA  using the function reverse a[6] ,COMMA  and we have to do it in a recursive way .PERIOD  So ,COMMA  what you do is first swap a[0] with a[5] .PERIOD  And now what is the sub problem left be solved .PERIOD  We have to solve reverse of this intermediate array ,COMMA  which starts from a[1] and contains four elements .PERIOD  So ,COMMA  we have to reverse the array with starts from a + 1 ,COMMA  and there are four elements to be reversed .PERIOD  So ,COMMA  in one step even though we have only a single call to a sub problem ,COMMA  we have actually reduced the size by 2 .PERIOD  Now use a reverse or rather swap a and a[1] and a[4] ,COMMA  and now the sub problem that remains is ,COMMA  to reverse this sub routine which is a + 3 ,COMMA  and you have two elements to reverse .PERIOD  So ,COMMA  you do this ,COMMA  and in this point you have a sub array which starts at a + 3 and has zero elements to reverse .PERIOD  At this point that is nothing but .PERIOD  Now ,COMMA  for in odd length array let us take a very small array which contains three elements ,COMMA  and we have to reverse it .PERIOD  What you do is ,COMMA  you reverse you swap b[0] with b[2] .PERIOD  At this point you have a sub problem which has exactly 1 element ,COMMA  and you do need to reverse that array ,COMMA  that arrays it is soon reverse .PERIOD  So ,COMMA  the problem just stops there .PERIOD  So ,COMMA  notice that difference between the even length array the odd length array .PERIOD  In the case of even length array ,COMMA  the step ,COMMA  just before the last step involved an array of size 2 ,COMMA  and you still had to reverse that is array .PERIOD  In the case of an odd length array this ,COMMA  the last of involves has a single length array ,COMMA  which is soon reversed .PERIOD  So ,COMMA  you do not have to do anything .PERIOD  So ,COMMA  there are two base cases to worry about ;SEMICOLON  one is where the sub array is of size zero ,COMMA  and another is where the sub array is of size 1 ,COMMA  0 corresponds to even length arrays ,COMMA  and one corresponds odd length arrays .PERIOD   Let us write this code now .PERIOD  So ,COMMA  we have reverse a containing n elements ,COMMA  and we have return type void ,COMMA  which means that this function is not going to return you value ,COMMA  but it is going to do something .PERIOD  So ,COMMA  if n=0 or n = 1 return ,COMMA  because in that case a is ,COMMA  it is on reverse ;SEMICOLON  otherwise you swap the first element with a last element ,COMMA  that is this operation a and a + n - 1 .PERIOD  So ,COMMA  notice that swap is a function that takes two pointers to int and exchanges them .PERIOD  Once you do that you call the sub problem ,COMMA  which is reverse(a + 1 ,COMMA  n – 2) .PERIOD  Notice that unlike the previous examples we have discussed ,COMMA  the sub problem reduces by 2 insides .PERIOD  Even though you have a only single call ,COMMA  the sub problem is not of size n - 1 ,COMMA  it is of size n - 2 .PERIOD  So ,COMMA  look at the case of the odd length array and the even length array that we have seen before .PERIOD  And you can notice that the sub problem reduces by 2 in size for every step .PERIOD  Now what is the depth of the stack .PERIOD  you know that ruffle n upon to calls will be done ,COMMA  because you start at a size n ,COMMA  the next call will be of size n - 2 and so on until you hit either one or zero .PERIOD  So ,COMMA  you can work out that there will be about n/2 steps ,COMMA  before you reach one or zero .PERIOD  The accurate expression is ,COMMA  ceiling of the expression n / 2 + 1 .PERIOD  So ,COMMA  many calls will be there ,COMMA  before you hit 1 or 0 .PERIOD  So ,COMMA  each function call will take ,COMMA  let us a constant among space and there are about n/2 function calls .PERIOD  So ,COMMA  the stack depth is n/2 ,COMMA  and therefore ,COMMA  the wholes space which is stack depth times the number of variables at each function that will be about n/2 .PERIOD   So ,COMMA  now let us consider a third example which is ,COMMA  computing the size ,COMMA  the maximum of a particular array .PERIOD  For concreteness let us consider in integer array ,COMMA  and we have to compute the following function int max array .PERIOD  It takes two arguments ;SEMICOLON  one is the array itself ,COMMA  and the second is m ,COMMA  which is the number of elements in the array .PERIOD  Again let us think about the problem recursively ,COMMA  we have return loops to solve the problem earlier ,COMMA  but now let us think about it in a recursive manner .PERIOD  If the array contains 0 elements ,COMMA  then what is the maximum .PERIOD  So ,COMMA  here it may be slightly counter intuitive if you are saying for the first time .PERIOD  The maximum of an empty array is some large a negative value .PERIOD  Think of it has minus infinity .PERIOD  Why do we do this this is ,COMMA  because let us take a concrete example 1 2 3 .PERIOD  We know that the maximum of this array is three .PERIOD  Now ,COMMA  what happens when you take a larger array or list of numbers .PERIOD  So ,COMMA  what happens if you take ,COMMA  let us keep this unspecified a is an int .PERIOD  You know that if a is less than 3 then the maximum of this array is going to be three .PERIOD  If a > 3 then the maximum of this the second one is going to be greater than that .PERIOD  So ,COMMA  in any case ,COMMA  whatever be the nature of a you can always say that maximum {1 2 3} a is going to be >= the maximum {1 2 3} .PERIOD  Now what ;SEMICOLON  that means is that ,COMMA  if you take a larger set ,COMMA  its maximum is always going to be >= the maximum of a sub set .PERIOD   Note that this is independent of a ,COMMA  because you can analysis my cases ,COMMA  if a <= 3 then this maximum will 3 itself and 3 >= 3 .PERIOD  If a > 3 ,COMMA  then this maximum is strictly greater than the previous maximum .PERIOD  So ,COMMA  maximum is always monotone according to the sub set relation .PERIOD  Now this means that what will be the maximum of the empty set .PERIOD  The empty set is a sub set of every set .PERIOD  So ,COMMA  no matter which s I pick ,COMMA  maximum s has to be >= maximum of the empty set .PERIOD  This means that a reasonable value for maximum of empty set is minus infinity .PERIOD  So ,COMMA  the set .PERIOD  .PERIOD  .PERIOD  So ,COMMA  this is a reasonable convention ;SEMICOLON  that is why when n is of size zero ,COMMA  we returns some really large negative value .PERIOD  By which I mean the absolute value of the number is really big ,COMMA  because we are trying to say that it essentially minus infinity .PERIOD  If n is of size 1 ,COMMA  then you just return a[0] ,COMMA  because the array contains only 1 element ,COMMA  it is maximum will be a zero .PERIOD  If n has size at least 2 .PERIOD  Now we are in business ,COMMA  we have to solve the problem in terms of a sub problem .PERIOD  So ,COMMA  here was an example where the base cases had to be really thought of ,COMMA  but now we are at the case where we are thinking about the recursion .PERIOD  So ,COMMA  what is the recursive step here .PERIOD   So ,COMMA  let us take a concrete array .PERIOD  We have array a ,COMMA  which contains the numbers 2 4 3 7 5 23 ,COMMA  - 3 and 9 ,COMMA  some concrete array .PERIOD  And I want to calculate the maximum of the array a in terms of some sub problem .PERIOD  The natural sub problem that we can think of ,COMMA  is the sub problem of finding the maximum of this sub array ,COMMA  which start from a[1] and goes on until the last element .PERIOD  So ,COMMA  recursive call should be something like max array a + 1 ,COMMA  and there are n - 1 elements in it ,COMMA  because we omit the first element .PERIOD  Now ,COMMA  maximum value ,COMMA  how can we solve the whole problem in terms of the sub problem .PERIOD  Suppose we note what is the maximum value in the tail ;SEMICOLON  a + 1 ,COMMA  2 containing n - 1 elements .PERIOD  The maximum of the whole array will be the greater of the two numbers ,COMMA  which two numbers ,COMMA  the maximum of this sub array and a[0] .PERIOD  So ,COMMA  maximum value is the large of a zero and the maximum of the tail sub array ,COMMA  which is a + 1 to a + n - 1 .PERIOD  Now in order to compute the sub problem we called a recursive call to the same function ,COMMA  looks for the max array from a + 1 containing n - 1 elements .PERIOD   So ,COMMA  in this example ,COMMA  the maximum of the tail sub array will be 23 .PERIOD  And let say that a zero is 25 .PERIOD  So ,COMMA  the maximum of the whole array will be the greater of the two numbers 25 and 23 .PERIOD  So ,COMMA  in this case ,COMMA  the maximum value will be 25 which is a[0] .PERIOD   So ,COMMA  now let us write this code .PERIOD  So ,COMMA  the recursive function is very simple ,COMMA  and this is one of the reasons why people like to write recursive functions ,COMMA  because from a recursive function it is very clear what the function is going to do .PERIOD  Usually recursive functions are shorter than their loop versions ,COMMA  and they are easier to understand when you read someone else code .PERIOD  So ,COMMA  let us solve max array using the recursive function in c .PERIOD  We have int max array ,COMMA  because it is finally ,COMMA  going to return in int value which is the greatest value in the array .PERIOD  Now you have an int array a ,COMMA  and n is the size of the array .PERIOD  Let say that we set some max val if n is 0 ,COMMA  then the maximum is simply something like minus infinity .PERIOD  Let us keep it a very large number - 9 9 9 9 9 .PERIOD  So ,COMMA  - 5 9 ,COMMA  some large value does not matter ,COMMA  and then if n = 1 then the array contains only one element and therefore ,COMMA  it is the maximum .PERIOD  So ,COMMA  you just return a[0] ;SEMICOLON  otherwise n is at least 2 .PERIOD  So ,COMMA  in this case ,COMMA  you say that the maximum value of the sub problem is max array a + 1 ,COMMA  n - 1 .PERIOD  So ,COMMA  this is the maximum of the tail array .PERIOD   Now once you have the maximum of the tail array ,COMMA  the maximum of the whole array is the grater of the two numbers which is a[0] and max val .PERIOD  So ,COMMA  we return max{a[0] ,COMMA   max val} .PERIOD  Now max is a function that is already there in the standard math library in c ,COMMA  but if you want to write it ,COMMA  it is not a difficult function to write it ,COMMA  you can take two integers and return the greater of the true integers .PERIOD  Now we can think about is a better then the loop version of the program .PERIOD  The advantage of the recursive program is that ,COMMA  it is easier and in some sense it contains fewer number of lines then the loop program .PERIOD  The disadvantage is that it takes subs more space while executing .PERIOD  So ,COMMA  the questions are how much time does the function take ,COMMA  how much space does the function take .PERIOD  So ,COMMA  these are things which are concrete and can be measured ,COMMA  there is also software question which is ,COMMA  how you see is set for programmer to look at this function and understand what it does .PERIOD  In the second criteria and it is the recursive function that is course .PERIOD  In the first criteria it is often the iterative function ,COMMA  the loop function that is course .PERIOD   So ,COMMA  please think about the questions ,COMMA  and you can work through it and say that in order to solve max_array of an array of size n .PERIOD  Let us take an array size 8 ,COMMA  you will see that these other recursive calls it will make (a + 2 ,COMMA 6) so on up to (a + 7 ,COMMA 1) ,COMMA  and when you hit an array of size 1 you get to one of the base cases ,COMMA  which is that when you have an array which contains a single element ,COMMA  the maximum is the only element in the array .PERIOD  So ,COMMA  once you hit here ,COMMA  you will start returning .PERIOD  So ,COMMA  the maximum depth of function calls in this will be the size of the array .PERIOD  So ,COMMA  you can say that stack depth is n .PERIOD   Now ,COMMA  recursive programs are general programs ,COMMA  just like look loop programs are general programs .PERIOD  You have return loops even before you saw what are arrays in C ?QUESTIONMARK  Similarly you can write recursive programs which deal with general data ,COMMA  not just array data .PERIOD  And in all of these questions ,COMMA  you can ask the following question how much time does the function take ,COMMA  and how much space does the function take .PERIOD   We will see an example for a recursive function ,COMMA  that will read n numbers and returns the maximum .PERIOD  Before we came to know of C arrays ,COMMA  this is the kind of loop functions that we used to write ,COMMA  we would take n numbers .PERIOD  So ,COMMA  first you will read how many numbers to read ,COMMA  then you will read exactly those many numbers and find their maximum using a loop .PERIOD  Now Let us try to do that using recursion .PERIOD  We are not going to use any arrays .PERIOD  So ,COMMA  what we have to do is ,COMMA  write a function to read_max ,COMMA  it takes n elements .PERIOD  And the logic is the same as finding the maximum of an array ,COMMA  but we will do it without using arrays .PERIOD  How do you do this .PERIOD  If you have zero numbers to read then you return minus infinity ,COMMA  or some approximation ,COMMA  some large negative value ;SEMICOLON  otherwise you read the first number .PERIOD  If n = 1 ;SEMICOLON  that is we have to read only one number ,COMMA  then you just say that x the maximum ;SEMICOLON  otherwise n >= 2 ,COMMA  and we have read one number .PERIOD   So ,COMMA  you say that return the maximum of the two values ,COMMA  which is x and what goes inside ,COMMA  inside you have to solve a sub problem ,COMMA  which is the sub problem of reading n - 1 numbers and returning the maximum .PERIOD  Go back and compare the program with finding the array maximum ,COMMA  and the recursion works exactly in the same way .PERIOD  So ,COMMA  we will read n - 1 numbers ,COMMA  and return the maximum of those ,COMMA  and then you compare maximum of the first number and the maximum of the sub problem .PERIOD  This is exactly as before except that we did not use any arrays .PERIOD  And how do you call this function ,COMMA  you just declare a main function with n ,COMMA  you scan it how many numbers to read ,COMMA  and call the function read max n .PERIOD  Finally ,COMMA  it will return the maximum of the n numbers read and you just print the value .PERIOD    Now ,COMMA  there are other functions which are typically return in a recursive manner .PERIOD  We just saw that you can use recursion with arrays .PERIOD 
 am storing the temp
and what is temp ?QUESTIONMARK  Temp is after I divide I get the remainder and that I am storing in temp
and that temp is coming in A all right it is being stored in a and that is also copied in B ,COMMA 
but in the next loop that is being divided by .PERIOD  So ,COMMA  here you are having 3 9 and here 3 .PERIOD  So ,COMMA 
look at this iteration 1 ,COMMA  here looking at this picture first temp will become 9 ,COMMA  B is 12 and
A is 9 .PERIOD 
Next time temp is becoming 3 ,COMMA  B is 9 this 9 and A is becoming 10 and whenever I find
that B divided by A this part is 0 remainder is 0 then that is my GCD A is my GCD ,COMMA  I get
the 3 there is another very interesting example of computing using this while loop and
repeatedly I am doing this till I find the remainder to be 0 .PERIOD  So ,COMMA  there are many such nice
examples and we will give you some more during for assignments ,COMMA  which we will have
to solve and get more you will get more confidence about it .PERIOD  So ,COMMA  next we look at we will
come to some of the pitfalls of loop ,COMMA  and then move to something more useful something
very useful that is the concept of arrays ok .PERIOD 
Thank you .PERIOD 

So ,COMMA  we have seen the application of the constructs of if then and if else as well as while ,COMMA 
do while and for constructs .PERIOD  Till now you have seen examples in of while and do while ,COMMA 
will see more examples for loops for example .PERIOD 

Let us also see another application for the application of for loop .PERIOD  Say for example ,COMMA  I
want to print I want to add 20 numbers I think we have seen such examples will see more
interesting examples a little later .PERIOD  But before that let us look at some common errors that
take place often unintentionally in writing loops and that gives rise to a number of logical
problems in a program .PERIOD 
For example ,COMMA  let us look at this .PERIOD  Here you can see the first line what will happen ,COMMA  the
intention was that while sum is less than equal to NUM ;SEMICOLON  that means ,COMMA  it is less than equal
to sum a particular value may be 20 we are adding sum plus 2 .PERIOD  What does this mean ?QUESTIONMARK  Let
us try to understand this example forget about this ,COMMA  forget about this part .PERIOD  What would
what is the intention of doing this ?QUESTIONMARK  That means ,COMMA  suppose NUM is 10 and sum is 0 .PERIOD  So ,COMMA 
while sum is less than NUM I will be adding sum and 2 .PERIOD  So ,COMMA  sum will be ,COMMA  sum will be 2

and then sum is still less than num so again it will be 4 ,COMMA  sum is still less than NUM it will
be 6 ,COMMA  still less than NUM it will be 8 ,COMMA  still less than equal to NUM it will be 10 ,COMMA  then still
less than equal to NUM it will be 12 and then when it goes there it will stop .PERIOD  So ,COMMA  what
will be the sum ?QUESTIONMARK  Sum will be 12 .PERIOD  But that was my intention of the program .PERIOD 
But unfortunately I have put a semicolon here .PERIOD  What does that imply ?QUESTIONMARK  That implies that
the entire while statement ends here ;SEMICOLON  that means ,COMMA  while sum equal to NUM do nothing all
right .PERIOD  So ,COMMA  that is the end of the statement .PERIOD  So ,COMMA  nothing has been specified there and
whatever some was there suppose sum was 0 sum will perpetually remain less than 10 or
NUM and will go on forever .PERIOD  So ,COMMA  this semicolon should not to be given because the
while statement is actually extending up to this point up to this point that is the whole
statement .PERIOD 
So ,COMMA  next example we take is this one ,COMMA  for i assign 0 ,COMMA  i less than equal to NUM plus plus i ,COMMA 
forget about ,COMMA  again about this .PERIOD 

What is the intention of this program ?QUESTIONMARK  What will it do ?QUESTIONMARK  i is 0 all right and NUM was say
something like 20 then sum will be added to i .PERIOD  So ,COMMA  sum will be 0 ,COMMA  then i will be
incremented ,COMMA  so i will become 1 less than NUM it will be added .PERIOD  So ,COMMA  sum will now be ,COMMA 
sum was 0 so sum will now be 1 ,COMMA  here was sum ,COMMA  sum was 0 ,COMMA  sum becomes 1 ,COMMA  then sum
becomes 2 ,COMMA  sum becomes 3 like that it will go on all right .PERIOD 

However ,COMMA  since I have put a semicolon here this part is not a part of this for statement .PERIOD 
Consequently this loop is a non loop nothing is being done here and for i equals 0 ,COMMA  iless
than equal to NUM i plus plus do nothing all right .PERIOD  So ,COMMA  nothing will happen here this
statement will not be executed .PERIOD 
Here is another type of pitfall where let us study this for i equal to 1 ,COMMA  i not equal to 10 ,COMMA  i
assigned i plus 2 .PERIOD  What will happen to this loop ?QUESTIONMARK  Can anyone guess ?QUESTIONMARK 

i is 1 ,COMMA  so sum has been computed sum is sum plus i sum was 0 .PERIOD  So ,COMMA  0 plus 1 sum is 1 ,COMMA 
then i is incremented to 3 ,COMMA  then sum equals sum plus i .PERIOD  So ,COMMA  sum becomes 4 then this is
incremented to 5 .PERIOD  After each incrementation I am checking with this condition ,COMMA  so i is 5
not equal to 10 fine .PERIOD  So ,COMMA  I will add 5 with this ,COMMA  it will become 9 ,COMMA  then becomes 7 i is
change to 7 ,COMMA  I check with this still not equal to 10 .PERIOD  So ,COMMA  7 is added to this 16 ,COMMA  this becomes
9 still not equal to 10 .PERIOD  So ,COMMA  then 9 plus ;SEMICOLON  16 plus 9 maybe 25 and then this is incremented to
11 because i plus 2 ,COMMA  still it is not equal to 10 .PERIOD  So ,COMMA  what will happen ?QUESTIONMARK  It will go on it will
never be equal to 10 .PERIOD  This means as long as i is not equal to 10 you will go on .PERIOD  So ,COMMA  this
will be a case of any another infinite loop all right .PERIOD 
Just as in this case this is a null statement this will be done and then this statement will
be done only once .PERIOD  Here it will be an infinite loop because this condition will never be
made .PERIOD  So ,COMMA  these are some points where we should be very careful about .PERIOD 

Now ,COMMA  let us have a very interesting program .PERIOD  We want to print we want to print ,COMMA  we want
to print a pattern like this .PERIOD  We want to print the pattern like this say 5 stars in a row and 3
such rows ,COMMA  this sort of pattern .PERIOD  How can I do that ?QUESTIONMARK  My algorithm will be ,COMMA  I want to print ,COMMA  I
want to print a row of stars .PERIOD  How many ?QUESTIONMARK  5 stars .PERIOD  So ,COMMA  how can I print 5 stars in a row ?QUESTIONMARK  If I
just write one statement printf ,COMMA  star I do not give a backslash n ;SEMICOLON  then what will be done ?QUESTIONMARK 
A star will be suppose this is my screen all right a star will be printed and if I put it in a
loop say for i assign 0 ,COMMA  i 5 I want to do ,COMMA  less than equal to 5 i plus plus and I do this then
what will happen ,COMMA  i 0 ,COMMA  so once it is printed then i 1 once it is printed ,COMMA  again in the same
line then again another one .PERIOD 
So ,COMMA  since I am giving a gap what I can do here I can keep a space here star and then a
space I show space by blank .PERIOD  So ,COMMA  exactly a star in the blank will be printed .PERIOD  So ,COMMA  i 0 ,COMMA  i is 1 ,COMMA 
i is 2 ,COMMA  i is 3 ,COMMA  i is 4 and then it is incremented and checked is 5 ,COMMA  so less than 5 it will not
happen then .PERIOD  So ,COMMA  this will be a loop after doing that .PERIOD  So ,COMMA  in a loop I will be printing one
row then I will give printf I have to come to the next line .PERIOD  So ,COMMA  I will simply give a
backslash n ;SEMICOLON  that means ,COMMA  I will come to the next line .PERIOD  And this again loop I will carry out
how many times ?QUESTIONMARK  3 times because I need 3 rows .PERIOD  So ,COMMA  what should I do ?QUESTIONMARK  I should do this
again loop this 3 times so how should I write it ,COMMA  how would that look like now .PERIOD 

It should be something like this for j ,COMMA  j is another variable assign 0 ,COMMA  j less than 3 ,COMMA  j plus
plus for i assign 0 ,COMMA  i less than 5 ,COMMA  i plus plus and then here printf star followed by a blank
and then the quote no backslash at the end of this .PERIOD  So ,COMMA  after this loop is done then I will
do printf backslash n backslash n .PERIOD  So ,COMMA  this part will be repeated 3 times and in this part it
will be this one will be done 5 times .PERIOD  So ,COMMA  star star star star star will be printed .PERIOD  Then we
will come to the next line and here this is my next for loop .PERIOD  So ,COMMA  I come to printf and
again do the same thing this part start start start start star 5 times ,COMMA  this printf by this loop .PERIOD 
This is printed row ,COMMA  printing a row by 5 times .PERIOD  And then again I will come and do a
backslash n ,COMMA  I come here and do the same thing 3 times and then come here backslash n
and then stop .PERIOD 
So ,COMMA  print a row of 5 stars and repeat therefore ,COMMA  I am repeating this print star 5 times in a
loop .PERIOD  So ,COMMA  that is a very nice interesting application of for loop .PERIOD  I hope you have
understood this .PERIOD 

So ,COMMA  here that is exactly what I have I was showing you .PERIOD  Look at this ,COMMA  here the number of
rows and columns have been made little flexible rows 3 columns 5 .PERIOD  Now ,COMMA  row equal to 1 ,COMMA 
while row is less than rows print a row or 5 stars .PERIOD  This I have done it is the for ,COMMA  here it is
shown using a while .PERIOD 
So ,COMMA  let us see while whether you can understand this also with the while .PERIOD  Row is 1 ,COMMA  now
row is less than rows ;SEMICOLON  how many rows we will do ,COMMA  row is less than rows that means ,COMMA  as
long as it is sorry as long as it is 3 rows will print a row of 5 .PERIOD  And how do I do a row of ?QUESTIONMARK 
I will that we have already shown that how we do it and then we increment the row all
right .PERIOD  So ,COMMA  here while row is less than rows print a row of 5 ,COMMA  printing a row of 5 is done
through in this manner .PERIOD  So ,COMMA  this is the outer loop ,COMMA  this is outer loop .PERIOD  Column is 1 ,COMMA  while
column is less than columns ,COMMA  so 5 columns 1 2 3 4 5 while column is less than column
printf star and blank and then column is incremented .PERIOD 
Now ,COMMA  since I am doing it in a while it is done in this way .PERIOD  I have already shown you in
the earlier this thing how we can do it with for .PERIOD  I can do the same thing with for right ,COMMA  the
same thing with for and here it is being shown how it can be done with a while .PERIOD  And then
I print of n and do this .PERIOD  You can try to understand this again yourself .PERIOD 

Next ,COMMA  say here this being done again in the way that I had written using for .PERIOD  Here only 3
and 5 these things are variable for row equals 1 to row less than equal to 3 ,COMMA  plus plus row .PERIOD 
Here it is plus plus row ;SEMICOLON  that means ,COMMA  first is incremented .PERIOD  Then column is less than equal
to columns .PERIOD  Why it is less than equal to ,COMMA  while if you remember when I was doing it here
when I was doing it I had less than 3 less than 5 ,COMMA  less than 3 less than 5 ,COMMA  but here it is
being less than equal to 3 less than equal to 5 why because I started my index with 0 and
here I am starting my index with 1 ,COMMA  all right .PERIOD  So ,COMMA  this you should be very careful and you
should always hand trace your program and see whether you have done it correctly if
there is a little bit of confusion because this is very ,COMMA  this very important and you should
be very careful about it .PERIOD 

So ,COMMA  same thing that I have shown is written again here .PERIOD  Another 2D figure this a little
more interesting .PERIOD  First row we print 1 star ,COMMA  second row we print 2 stars ,COMMA  third row we
print 3 stars ,COMMA  4th row we print 4 stars and then 5 stars .PERIOD  So ,COMMA  how many stars I will print that
is also variable .PERIOD  So ,COMMA  if we think about that how many times I will print in a row that is
also a variable .PERIOD  How many times I am doing this ?QUESTIONMARK 

So ,COMMA  for the first when a row is equal to 1 then I am printing 1 star ,COMMA  when row is equal to 2
I am printing 2 stars ,COMMA  when row is equal to 3 I am printing 3 stars .PERIOD  So ,COMMA  every time I can

also say that I am printing row stars ,COMMA  I am printing row stars ,COMMA  row number of stars
therefore ,COMMA  how many times I will do in a loop in the inner loop .PERIOD  You could see that when
I we had drawn this thrice or twice whatever there was here ,COMMA  there is an inner loop 5
times and an outer loop that was doing 2 times right .PERIOD  Now ,COMMA  here what will change it to is
inner loop row times outer loop maybe 3 times .PERIOD  So ,COMMA  this is variable .PERIOD 
Now ,COMMA  let us see how we can program it .PERIOD  Constant integer rows is 5 that I have not made
variable there are 2 integers row and column .PERIOD  For row equal to 1 ,COMMA  I start with rows row as
an index and row less than rows less than 5 plus plus row .PERIOD  What do I do ?QUESTIONMARK  Column equals
one I will do up 2 column less than equal to row .PERIOD  So ,COMMA  first row column 1 ,COMMA  column is less
than equal to the only ones I will print then plus plus column ,COMMA  so column becomes 2 ,COMMA  but
what is my row ?QUESTIONMARK  Row is 1 still I am pointing at this row ,COMMA  row is 1 .PERIOD  So ,COMMA  I will do printf .PERIOD 
Now ,COMMA  the value of row becomes 2 as I increment ,COMMA  but then the column this is a column
this is row the column will be less than row because row has become 2 .PERIOD  Now ,COMMA  it is
pointing to this row ,COMMA  this row .PERIOD  So ,COMMA  column being less than that I will come out of the first
row .PERIOD 
Second row ,COMMA  what will happen ?QUESTIONMARK  Column will start from one and row is 2 .PERIOD  So ,COMMA  column less
than row I will print once ,COMMA  I will go back here column is becoming 2 and column is still
equal less equal to row all right not less than ,COMMA  but equal to row therefore ,COMMA  I will again
print here then I will come back here and now column is 3 column is 3 ,COMMA  but row is 2
therefore ,COMMA  I will not print any longer will come out of this loop and go here .PERIOD  Then low
will be incremented here all right ,COMMA  row has been incremented here .PERIOD  And ,COMMA  now again
column is initialized to 1 for the third row first it is printed incremented column comes
here all right then columns column comes here ,COMMA  so column is 3 still less than equal to
row .PERIOD  So ,COMMA  I print the third one and then it is incremented ,COMMA  so the row becomes 4 ,COMMA  but my
column is sorry the column becomes 4 ,COMMA  but row is 3 therefore ,COMMA  the column is I go out of
the loop and again column is initialized to 1 and my row is incremented to this .PERIOD 
So ,COMMA  that is how it is done .PERIOD  You please look at it more carefully and you will have to
understand it and this will give you a very clear idea how a nested loop is working .PERIOD  So ,COMMA 
this is one example .PERIOD 

Here ,COMMA  what we are trying to do just think of this figure .PERIOD  First row is 5 .PERIOD  So ,COMMA  row is this ,COMMA 
column is here how long shall I print in the columns keeping the row fixed .PERIOD  What will be
my logic ?QUESTIONMARK  The logic will be well here I started row with 0 and less number of ,COMMA  less than
number of rows ,COMMA  rows is 5 that is not that important .PERIOD  Here let us look at this ,COMMA  first I will do
5 ,COMMA  then I will do 4 ,COMMA  but there is another one .PERIOD  For the second row I am shifting one space I
am shifting this should have been aligned and then I am shifting and giving a space and
then doing it .PERIOD  So ,COMMA  gradually it is being shifted .PERIOD 
So ,COMMA  let us see what is being done .PERIOD  Let us look at the first for loop here this is the outer for
loop ,COMMA  let us outer for loop is up to this ,COMMA  outer for loop is up to this and let us see what is
happening .PERIOD  Row is 0 to number of rows less than .PERIOD  So ,COMMA  I have started with 0 .PERIOD  So ,COMMA  I did not
make it less than equal to it is less than less than 5 I will do this number of times .PERIOD 
Internally what am I doing this doing here column is 1 and column is less than row
because less than equal to row because row is 0 ,COMMA  row is 0 and column is 1 .PERIOD  Look at the
trick here ,COMMA  the trick that has been applied is column has been in is starting with a value 1
and as long as column is less than row I am printing blank .PERIOD 
So ,COMMA  how many blanks should I print for the first column ?QUESTIONMARK  1 blank then column less than .PERIOD 
Now ,COMMA  here from the first column look at this point .PERIOD  Column equals 1 ,COMMA  1 column less than
equal to rows ,COMMA  rows is 5 as long as column is less than equal to rows minus row .PERIOD  What is
my row ?QUESTIONMARK  Initially my row is 0 ,COMMA  so rows minus row is 5 ,COMMA  it is 5 .PERIOD  So ,COMMA  column is one column

is less than equal to 5 plus plus ,COMMA  so I do printf ,COMMA  I do a printf and I go on doing this as long
as the column is ,COMMA  so column is now incremented to 2 3 4 how long will it come for the
first row it will come 5 times because rows minus rows 5 minus 0 .PERIOD  So ,COMMA  I will print this
and then I will come back this loop is over ,COMMA  this loop is over ,COMMA  I will a print a backslash n
up to this sorry I am sorry this for loop is actually extending up to this .PERIOD  So ,COMMA  from here I
go back .PERIOD  So ,COMMA  I come to the second row .PERIOD 

Now ,COMMA  row becomes 1 let us see ,COMMA  now row becomes 1 .PERIOD  Less than 5 for column equal to 1 ,COMMA 
column less than equal to row 1 still valid I give one blank here ,COMMA  one blank here for the
second row .PERIOD  My row pointer as come here ,COMMA  row is 1 .PERIOD  Then I will do column 1 ,COMMA  2 column
minus rows ones blank I have already given .PERIOD  So ,COMMA  I am .PERIOD  Now ,COMMA  my starting is here how
many ?QUESTIONMARK  Now ,COMMA  row is 1 ,COMMA  5 minus 1 so that means 4 ,COMMA  4 times this will loop and print star and
then printf n .PERIOD 
Next time I go back here and this becomes 2 .PERIOD  So ,COMMA  row 2 to less than 5 column is again
now 2 blanks ,COMMA  column is 1 2 less than equal to row and row is 2 ,COMMA  so 1 to 2 .PERIOD  So ,COMMA  there will
be 2 blanks here one blank here ,COMMA  one blank here .PERIOD  So ,COMMA  I am coming here and then I am
printing this is 2 ,COMMA  so 5 minus 2 3 stars .PERIOD  So ,COMMA  in this way I can go on and print this figure by
an intelligent way of applying the for loops or the nested loops and putting in the spaces
together spaces properly .PERIOD  I think this gives a very interesting example for you to look at .PERIOD 

So ,COMMA  these are some of the examples that we have seen .PERIOD  We will come to this for thing
again later ,COMMA  but let us just remind you a little bit about some things that we had
mentioned in passing .PERIOD 

For example ,COMMA  this operator plus equal to as for example ,COMMA  here a plus equal to b this means
a assigned a plus b these are some shortcuts all right ,COMMA  a minus equal to b that means ,COMMA  a is
assigned a minus b .PERIOD  Here a star b plus 10 ,COMMA  a as star assigned b plus 10 ;SEMICOLON  that means ,COMMA  a will
be assigned a times b plus 10 .PERIOD  So ,COMMA  in that way we have got this one also ,COMMA  say a assigned b

that means ,COMMA  a is assigned a divided by b these are some of the shortcuts .PERIOD  So ,COMMA  this is just to
wrap up some of the assignment operations that we are talked about .PERIOD  But these are as I
said that you can keep this for later use .PERIOD  Right now more fundamental thing that you need
to know is a use of if else for ,COMMA  while ,COMMA  do while etcetera .PERIOD 
In the next lecture we will start with a new concept called arrays and there you will find
that these loops are becoming so important and will have many interesting applications
using arrays that will be done from next lecture onwards .PERIOD 
Thank you .PERIOD 

Till now we have looked into ,COMMA  we have seen different programming constructs using
which we can implement repetition ;SEMICOLON  that means ,COMMA  a set of statements will be repeated in a
loop .PERIOD  And in C such contracts where while do while and for loop ,COMMA  right ?QUESTIONMARK  Now also we
have seen how we can branch out .PERIOD  Coming through a sequential one after another
execution of the instructions depending on the condition we can go out to one path or
another path through if else structures .PERIOD  And we have also seen some examples by in
which the combination of the ,COMMA  if else structure as well as the while structure are
combined together to give us more powerful and useful programs .PERIOD 
Today we will start discussing about a new form of representation of data that is very
useful and very fundamental that is called arrays ok .PERIOD  Arrays the word array simply means
arrangement of data .PERIOD  So ,COMMA  we can think of for example ,COMMA  an array of soldiers or array of
people standing in line .PERIOD 

So ,COMMA  people are standing in a line ,COMMA  this is an array ok .PERIOD  We can also have 2 rows of people
standing alright .PERIOD  This is a very regular structure we can have 3 rows also .PERIOD  So ,COMMA  these are
arrays of people .PERIOD 
Now ,COMMA  if I just have only one row ;SEMICOLON  in that case say for example ,COMMA  I consider one row then it
is a one-dimensional array .PERIOD  When I consider rows as well as columns then it is a 2-
dimensional array ;SEMICOLON  however ,COMMA  we will now initially concentrate on one dimensional array
like this ok .PERIOD  What is this ?QUESTIONMARK  This is an array of people similarly ,COMMA  we can have array of
numbers .PERIOD 

For example ,COMMA  1 7 0 5 3 that is again an arranging of data arrangement of data in a linear
near fashion ok ,COMMA  this is the first element and this is the last element of this arrangement .PERIOD 
So ,COMMA  this is also an array ,COMMA  array of some numbers .PERIOD  So ,COMMA  in an abstract way we can say that
an array can be drawn in this form it can be an array of integer or an array of real
numbers depending on what I want to store here ,COMMA  suppose this b and array of integers .PERIOD 
Then each of this places can have one integers stored in this 2 6 5 3 may be again 2 and 9
so this is an array .PERIOD 
Now ,COMMA  how any elements are there in the array ?QUESTIONMARK  Each of these are elements of the array
how many elements are there in the array 1 2 3 4 5 6 .PERIOD  So ,COMMA  this is the size of the array and
these are the elements of the array this all these are elements of the array .PERIOD  Also another
thing we need to know is how do I identify one element of the array ,COMMA  say this element 6

of the array this array how do I identify that what is it is identification ,COMMA  the identification
is the position .PERIOD  So ,COMMA  this is a second position alright this is the first position this is the third
position 4th position so and so forth .PERIOD 
Now ,COMMA  this positions in the array is known as index .PERIOD  Index is the position in the array ;SEMICOLON 
index determines position in the array position of what ?QUESTIONMARK  Position of an element in the
array so ,COMMA  for the time being we assume that arrays are linear structures linear arrangement
of data .PERIOD  Now one point to remember is one array can store data of the same type .PERIOD  For
example ,COMMA  it is not possible to have an array .PERIOD 

In which there will be some integers some real numbers and some again characters ok .PERIOD 
So ,COMMA  that is not possible that is not allowed .PERIOD 
So ,COMMA  an array will is allowed to store data of only one type .PERIOD  We now that int float ,COMMA  char all
these are defining different types of data or data type ,COMMA  right or data type .PERIOD  So ,COMMA  an array can
store data of only one data type whatever that is it can be all floating point numbers ,COMMA  it
can be all characters ,COMMA  it can be all integers whatever ,COMMA  alright ?QUESTIONMARK 
So ,COMMA  these are 2 words of cautions .PERIOD  So ,COMMA  what have we learnt ?QUESTIONMARK  We have learnt that array is
an arrangement of data of the same type and the array has a is identified as a whole by a
name and say for example ,COMMA  this array this is not a valid array so let us have a valid array .PERIOD 

Let us have a valid array of 4 elements say of real numbers may be ,COMMA  right ?QUESTIONMARK 
So ,COMMA  this array will have name let us say arbitrarily put a name A  ;SEMICOLON  that means ,COMMA  A is the
name to this array and this array has got a type ,COMMA  what is the type of this array ?QUESTIONMARK  The type is
float so array A is a float .PERIOD  So ,COMMA  A is a is an array of type float ;SEMICOLON  that means ,COMMA  it can store only
floating point data .PERIOD  Also ,COMMA  an array consists of different elements each of these are
elements and each element each element can be a floating-point number .PERIOD  And the
particular element is identified by the index of an array ,COMMA  alright ?QUESTIONMARK 
Now ,COMMA  and also ,COMMA  we have we know that an array has got a size ,COMMA  given this let us think of
why are we talking about all these things ,COMMA  why is this needed after all ?QUESTIONMARK  We have
encountered till now quite a few example problems for example ;SEMICOLON  let us again come back
to the old problem of finding the maximum of a set of integers .PERIOD 
Now ,COMMA  in that case what did you do ?QUESTIONMARK  We read one integer we initialized a variable .PERIOD 

So ,COMMA  first integer we read let me once again do it .PERIOD  So ,COMMA  if you recall we I am writing the
flow chart I am not writing the c program .PERIOD  Read a number you know how to read a
number by scanf then put that number to be max read again read number .PERIOD  And if number
is greater than max then I am writing pseudo code .PERIOD  So ,COMMA  I can write then max is getting the
number ,COMMA  again I read number and in that way I go on or you can say that ok ,COMMA  why should
I write in this way ?QUESTIONMARK  I shall simply implement a loop wile loop or for loop .PERIOD  So ,COMMA  that this
thing is carried on till I stop ,COMMA  say for n numbers or for ah .PERIOD  So ,COMMA  here I can use for I assigned
1 to I less than equal to n I plus plus to implement the loop here ,COMMA  but that is possible
when I know the total numbered of numbers .PERIOD 
If I didn’t know the number of numbers there are some other ways of doing it say for
example ,COMMA  I am reading integers and I say when I want to stop I will enter a 0 .PERIOD  So ,COMMA  here I
could have put in something like this while num is greater than 0 do so we do this as long
as num is greater than 0 I am going on doing this .PERIOD  And if num is 0 or num that we decide
or some negative number I know that my job is done .PERIOD  So ,COMMA  but in this case if I want to
remember what were the numbers already given to me suppose the numbers that were
given were 5 initially here then 2 .PERIOD  So ,COMMA  nothing was done next was 5 then 7 then here there
has been a interchange .PERIOD  So now ,COMMA  here max becomes 7 then again it was 3 .PERIOD  So ,COMMA  nothing
was done then it was 8 and max became 8 .PERIOD 

So ,COMMA  that will work for this sort of program ,COMMA  but if I want to know what where the numbers
he was saying max is 8 ,COMMA  but what where the numbers that where input by the user we
have not remembered them anywhere is not it ,COMMA  you have not remembered them
anywhere .PERIOD  So ,COMMA  here in my program ,COMMA  I will not be able to say what was the second number
entered ,COMMA  what was the first numbered entered ,COMMA  was there any 0 entered or was there any
anything greater than 3 entered ,COMMA  we cannot answer these questions because we read this
and we operated on this and we forgot them .PERIOD 
Now ,COMMA  if you can think of that if I had used an array .PERIOD 

This sort of thing and I had as the user give the numbers I stored them here 5 then 3 user
gave 3 .PERIOD  I stored 3 here then user gave 7 I stored 7 here ,COMMA  then the user gave something may
be again 4 I stored 4 here ,COMMA  and then the user gave 9 I stored 9 here .PERIOD  Then even after or 8
here I even after reporting the max that this is the max I have got these in my array .PERIOD  So ,COMMA 
my name of the array is still A which A is an array of integers .PERIOD  Then this is stored here I
have remembered them in the array .PERIOD 
So ,COMMA  I can now say what was my first element I go to the first element of the array using
the index value ok ,COMMA  and second ,COMMA  I go to the this value ok .PERIOD  What was the 4th value ?QUESTIONMARK  First
second third 4th I come to this point and I can say the 4th value was this .PERIOD  So ,COMMA  all these
things I can remember because I have been able to store them in the form of an array .PERIOD 

So ,COMMA  that is .PERIOD  So ,COMMA  array is again an arrangement in the memory alright .PERIOD 

So ,COMMA  an array when I .PERIOD  You know that every variable is stored in a memory location ,COMMA  right ?QUESTIONMARK 
So ,COMMA  when we had num and the program that I had written that num initially I sorry I
initially I read num .PERIOD  And then I do this and then again read num if num is greater than
max ,COMMA  max assign num when I do this thing in a loop or whatever ,COMMA  what is happening ?QUESTIONMARK 
Whenever I have got variable num is a variable one location in the memory .PERIOD  This is num
and max is another variable I have declared all of them here int num ,COMMA  int max I have
declared them .PERIOD 
So ,COMMA  here there is another location which is known as max .PERIOD  So ,COMMA  when I did this read num
and suppose some data 5 was read that 5 is stored here alright ,COMMA  5 is stored here when I
come here and I put max num assigned to max so it comes here .PERIOD  Now I read num again
so suppose num is 4 and no update in max next time I read it 7 .PERIOD  So ,COMMA  this is updated here
and this becomes 7 .PERIOD  So ,COMMA  this is the process that goes on alright .PERIOD 
Now ,COMMA  may so every time I am losing the old value of num and storing the current value
of num and similarly whenever there is an update required I take the current value the
max up to now ok .PERIOD  So ,COMMA  I am having 2 variables of integers ,COMMA  but if I had done it in the form
of an array then I could have thought of like this that I have got suppose the array size is
5 .PERIOD 

Suppose the array size is 5 .PERIOD  So ,COMMA  that means ,COMMA  conceptually I am talking of something like
this that there are 5 positions in this array .PERIOD  And as I am getting the data it is coming over
here 5 3 7 2 9 whatever .PERIOD  Now actually internally what it is happening internally this is
being stored in the memory the array size is 5 here .PERIOD  So ,COMMA  I have got 5 locations in my
memory 4 5 .PERIOD 
So ,COMMA  these 5 locations of the memory are being given to the array a suppose the name of
the array is array A .PERIOD  So ,COMMA  for the array A so ,COMMA  the first element is coming here when I am
actually writing it here it is coming here ,COMMA  second element is coming here ,COMMA  next element is
coming here ,COMMA  next here next here so these are the memory locations .PERIOD  So ,COMMA  an array is
actually a a representation in the memory which are contiguous and you know each
memory location has got an address .PERIOD 
So ,COMMA  suppose hypothetically the address of this is 1000 and each of them are integers and
integer if I say integer is requiring 2 bytes .PERIOD  Then if this is thousand location the next one
will be 1002 ,COMMA  next one will be 1004 ,COMMA  then 1006 ,COMMA  then 1008 ,COMMA  1008 to 1009 ,COMMA  right ?QUESTIONMARK 
So ,COMMA  1000 to 1001 is for the first element this one coming here 1002 to 1003 for this
element ,COMMA  1004 to 1005 is this element .PERIOD  6 to 7 is this element 1008 to 1009 will be this
element .PERIOD  So ,COMMA  1000 to 1009 ;SEMICOLON  that means 10 locations we are requiring for these 5 elements
of the array .PERIOD  Now since also in my program I have got 2 other variables one is the num or
one is the max ,COMMA  alright ?QUESTIONMARK  I can manage it with one more variable max is separate variable .PERIOD 

Suppose .PERIOD  So ,COMMA  that is here this variable is max let me delete this for you this is not
required ,COMMA  alright ?QUESTIONMARK  It is because this diagram has re-ductant because max is another
variable which I have here .PERIOD  Will write a program will show later how we can write a
program to deal with this .PERIOD 
So ,COMMA  everything .PERIOD  So ,COMMA  since I have computed I have red the numbers I have stored them in
the memory locations and since I am going through an array I am not written overwritten
one number by another therefore ,COMMA  I can remember all the numbers .PERIOD  So ,COMMA  this is one basic
reason of usage of array where I want to remember the numbers in the memory given
this let us quickly recapitulate what we have said till now .PERIOD 

So ,COMMA  many applications require multiple data items ,COMMA  but have a common characteristics ,COMMA 
what is that common characteristics ?QUESTIONMARK  Common characteristics like whether they are
integer or float or character whatever that is it can even more complex .PERIOD  So ,COMMA  we call say ;SEMICOLON 
so that numbers that we are showing say we can in mathematics we often represent them
as x 1 ,COMMA  x 2 ,COMMA  x 3 ,COMMA  x 4 say up to x n .PERIOD  And that hold thing I can represent as an array x where
x 1 is the first element ,COMMA  x 2 is the second element ,COMMA  x 3 is the second third element like that
Now ,COMMA  here is the example finding the minimum set of numbers minimum of a set of
numbers .PERIOD  How we can find a minimum of a set of numbers .PERIOD  So ,COMMA  .PERIOD  So ,COMMA  this is what I have
already discussed .PERIOD 

But just for the sake of revision let us look at it once again say for 3 numbers you know
we can this program must be familiar to you now ,COMMA  you should be able to understand it
quickly if a is less than b and a is less than equal to c then a is the minimum I was
showing the maximum here it is an example of the minimum else if b is less than c then
b is the minimum else c is the minimum .PERIOD 
So ,COMMA  first so fine as soon as I extend from 3 numbers to 4 numbers you see the program
becomes a little bigger .PERIOD  If a is less than equal to b and a is less than equal to c and a is
less than equal to d then minimum is a ,COMMA  otherwise if for you see if everywhere I have
brought in more number of comparisons and the program code has also been bigger
alright ?QUESTIONMARK  And I am not storing the numbers as yet I am not storing the numbers that is one
issue .PERIOD 

The problem is so from 3 to 4 we need needed so much extension .PERIOD 
Now ,COMMA  suppose we have got 10 numbers to handle that will be even bigger 20 numbers
even bigger 100 numbers .PERIOD  So ,COMMA  how do you do that ?QUESTIONMARK  The solution is the solution to the
problem is what is a solution ?QUESTIONMARK  The solution to the problem is use of arrays right using
arrays ,COMMA  right ?QUESTIONMARK 

Now as I said that all the data items constituting the group share the same name all these
data items that I had shown say integers like 5 7 6 3 2 all these can share the same name
x or may be let me give a meaning full name NUM .PERIOD 
Now ,COMMA  this one is NUM 1 ,COMMA  this one is NUM 2 ,COMMA  this one is NUM 5 ok .PERIOD  So ,COMMA  I have got just as
we had shown x 1 x 2 up to x n so here n is 5 so I have got this 5 .PERIOD  Individual elements are
accessed by specifying the index ;SEMICOLON  this is the index which is telling me in which position
which number in this array of numbers I am looking at ok .PERIOD  We will look at this further
the use of arrays and anymore things are to come .PERIOD 
So ,COMMA  we were looking at arrays and we have seen that all the data items constituting the
array shared the same name .PERIOD 

So ,COMMA  we can call an array to be A ,COMMA  an array A or a array num .PERIOD  If the array be A then the
elements are a 1 ,COMMA  a 2 like that up to a n ,COMMA  where n is the size of the array and each
individual elements are being accessed by this indices ,COMMA  these are the different indices .PERIOD 

So ,COMMA  for example ,COMMA  here when we declare here comes a new thing .PERIOD  Suppose we have an
array where the size is 10 ,COMMA  so there will be 10 elements of the array ,COMMA  10 elements of the
array .PERIOD  Just as and just like variables array as a whole is also a variable .PERIOD  So ,COMMA  suppose I
name this array to be x these are x 1 ,COMMA  x 2 ,COMMA  x 3 ,COMMA  x 4 ,COMMA  x 5 like that up to x 10 .PERIOD  Now ,COMMA  just like
we had to declare the variables like int float here ,COMMA  here also we need to declare the array
and the way we declare the array is shown here int x 10 what does it mean ;SEMICOLON  that means ,COMMA  x
is an array of now I am introducing a term of dimension 10 .PERIOD  Earlier I was talking calling
it size and here I am calling it dimension .PERIOD  For the time being assume that both these both
of these are the same thing ,COMMA  but actually there is a difference ,COMMA  we will explain that in the
course of discussion .PERIOD 
So ,COMMA  we declared it first of all the type of the array as I had said that an element all the
elements of an array has to be of the same type .PERIOD  So ,COMMA  either all of them will be integers or
all of them will be floats therefore ,COMMA  this entire array has is of a type int which says that all
the elements of this array are integers and x 10 .PERIOD  So ,COMMA  let us quickly have a look at the
memory scenario .PERIOD  Say in the memory ,COMMA  this is my memory and this is the memory and in
the memory some locations are kept for the array x ;SEMICOLON  that means ,COMMA  start from here and
maybe up to this .PERIOD 

Now ,COMMA  how much space will be given to the array must be known to the compiler because
the compiler just like the compiler allocates variables to different memory locations the
compiler will also have to allocate locations memory locations for the array elements .PERIOD 
Now ,COMMA  when I said int x 10 ;SEMICOLON  that means ,COMMA  the compiler will store space equivalent to 10
integers ,COMMA  10 integers in the memory ,COMMA  10 consecutive places for 10 consecutive one after
another no gap elements ,COMMA  10 consecutive integer places in the memory .PERIOD  Therefore ,COMMA  how
many can you tell me ,COMMA  how many bytes are required for that ?QUESTIONMARK  Integers and I have
assumed that any every integer is taking two bytes ,COMMA  integer is taking two bytes .PERIOD  If I
assume that then I will require 20 bytes here .PERIOD  So ,COMMA  there will be 20 locations each location
consisting of two bytes in this way we will go on ,COMMA  right .PERIOD 
So ,COMMA  you must understand when I declare this ,COMMA  what is the meaning of this .PERIOD  Dimension of
the array means that I am storing ,COMMA  I am reserving ,COMMA  I am reserving the compiler reserves
the space for 10 integers and that has to be done before the array is used ,COMMA  before the array
is used therefore ,COMMA  it must be declared before so that the compiler while it is compiling the
program can allocate enough space .PERIOD 

So ,COMMA  and now individual elements are accessed by specifying the index .PERIOD  So ,COMMA  here x ,COMMA  this x
is a 10 element one dimensional array linear .PERIOD  Now ,COMMA  comes a peculiar thing if you look at
this ,COMMA  we are saying that each of these elements are stored in these locations and which are
identifiable and accessible by the indices .PERIOD  Now ,COMMA  in C language each index ,COMMA  the index
value starts from 0 .PERIOD  So ,COMMA  the first element although while discussing we are saying x 1 say
I was drawing an array like this where I was saying that these elements are the first
element x 1 ,COMMA  x 2 ,COMMA  that is true ,COMMA  x 3 ,COMMA  x 4 ,COMMA  x 5 ,COMMA  but in C these elements are counted the
counting is started from 0 ,COMMA  there is a reason for that which will also be evident soon .PERIOD 
Just remember for the time being that the first element therefore ,COMMA  x 1 is actually
represented in C as x then the square bracket followed by the index and the first one will
be x 0 ,COMMA  second one will be x 1 ,COMMA  therefore ,COMMA  can you tell me what will be the last element of
this array ?QUESTIONMARK  How do I represent that ?QUESTIONMARK  Yes ,COMMA  you are right x 5 will be nothing ,COMMA  but x 4 yeah .PERIOD 
Since I am starting with 0 I can go up to 4 .PERIOD  Here in this example as you can see that I
have got 10 elements in the array therefore ,COMMA  I start from 0 and go up to 9 that is what is
followed in C language .PERIOD  There is a reason for that let me just briefly mention the reason
the reason would be this .PERIOD 

As I said that in the memory the array is stored in a particular region .PERIOD  When I declared it
as int x 10 then 20 bytes have been given to me and the array starts from this point which
has got some address maybe 1000 and this address is starting is 1002 .PERIOD 
Now ,COMMA  and I know that each one is of size 2 .PERIOD  So ,COMMA  when I say what is the address of x 1 .PERIOD 
What is x 1 ?QUESTIONMARK  x 1 means here and I know the starting of this array .PERIOD  So ,COMMA  start address plus
index times number of bytes for integer will give me the actual address .PERIOD  So ,COMMA  for the first
address what will be the index x 0 ?QUESTIONMARK  So ,COMMA  my start address is thousand for the first one
thousand plus 0 times 2 .PERIOD  So ,COMMA  that will be 1000 for x 1 1000 plus 1 times 2 .PERIOD  So ,COMMA  that will be
1002 ,COMMA  for x 5 ,COMMA  x 5 in this way is which element ;SEMICOLON  6th element .PERIOD 
So ,COMMA  that one will be here 1 2 3 4 5 6 ,COMMA  1 2 3 4 5 6 this element .PERIOD  And what would be its
address ?QUESTIONMARK  The address will be 1000 plus 5 times 2 ;SEMICOLON  that means ,COMMA  1010 it starts from 1010 .PERIOD 
So ,COMMA  1002 ,COMMA  1004 ,COMMA  1006 ,COMMA  1008 ,COMMA  1010 here it will start .PERIOD  So ,COMMA  this is basically the offset .PERIOD  How
much I shift from the top ,COMMA  that is the reason the ease of computation of the address of any
of the index any index ,COMMA  any element with any element with a particular index can be done
using this method this formula and therefore ,COMMA  we start with 0 that is a specific reason for
starting with 0 ,COMMA  all right .PERIOD  So ,COMMA  this is a 10 element one dimensional array that we have
seen .PERIOD  Let us move ahead .PERIOD 

So ,COMMA  like variables the arrays that are used in a program must be declared before they are
used the general syntax .PERIOD  Just like in integer or float we had declared them as in float
before they are used .PERIOD  Why do I need to declare them before they are used ?QUESTIONMARK  Because the
compiler needs to allocate space for that otherwise the compiler does not know what type
of variable it is therefore ,COMMA  we also have to do the same for the array and the general
syntax will be type ,COMMA  array name ,COMMA  size .PERIOD  Now ,COMMA  again here the size I mean the dimension .PERIOD 
Type specifies the type of the element that will be contained in the array it can be int ,COMMA 
float ,COMMA  char or whatever .PERIOD 
So ,COMMA  I have got fields like say here I can have an array I can dictate as float the array name
can be my array and size may be 20 .PERIOD  Now ,COMMA  this one specifies that this array can hold only
floating point numbers ,COMMA  and suppose floating point numbers are 4 bytes each then for
how much memory will be reserved for this 80 bytes will be reserved for this because 20
is a size ;SEMICOLON  that means ,COMMA  the maximum size that the array can take .PERIOD  And what is my array ?QUESTIONMARK 
Everything a just like every variable must have a name this array my this area also has
got a name called my array .PERIOD  And so what will be the indices ?QUESTIONMARK  I am repeating the thing my
array is 0 .PERIOD  So ,COMMA  I am writing ma for short 0 and what would be the last element here ma
for size 20 ,COMMA  it will be 19 ,COMMA  is it all right .PERIOD 
So ,COMMA  this is the general syntax which a must put and also there should be a semicolon at
the end ,COMMA  just like other declaration there is no other major difference here .PERIOD 

Size is an integer constant here I am calling it dimension that is it is a maximum number
of elements that can be stored inside the array .PERIOD  Suppose I have got so much space kept
for storing an array all right ,COMMA  so much space many many elements can be stored I have
reserved so much space ,COMMA  but in my actual working I am using only some spaces and these
are not touched that is allowed that means ,COMMA  but the reverse is not allowed .PERIOD  Unless I can ,COMMA  I
have got the space unless I have got space I cannot store them .PERIOD  So ,COMMA  I must reserve the
space beforehand but .PERIOD  So ,COMMA  that is why I want to I was mentioning this maximum space as
dimension and the actual number of spaces which you are using to be size of the array all
right .PERIOD 

The reverse is not true because suppose I have an ;SEMICOLON  I have reserved .PERIOD  So ,COMMA  much space for an
array and I go I go beyond that then these marks are spaces for other variables like a b c ,COMMA 
their data will be destroyed by my data which I am taking as an array .PERIOD  Therefore ,COMMA  we
must restrict to this ,COMMA  but suppose out of this I am using only this much in my parlance I
am calling it size and this to be the dimension you can call it in this example in the slide
we are calling this to be the size of the array there is a maximum size of them .PERIOD  So ,COMMA  what
is dimension ?QUESTIONMARK  Dimension is the maximum size that the array can be off ,COMMA  but in practice in
actual running it can be less than that ,COMMA  but not more than that .PERIOD 

So ,COMMA  I hope that part is clear to you .PERIOD  So ,COMMA  here what did I write ?QUESTIONMARK  int marks 5 what does it
mean ?QUESTIONMARK  It means I am storing marks and the marks are all integers right 50 ,COMMA  55 ,COMMA  60 ,COMMA  100 I
am storing integer marks ;SEMICOLON  and how many marks can I store ?QUESTIONMARK  5 .PERIOD  So ,COMMA  what will be the
indices ?QUESTIONMARK  0 marks 0 to marks 4 that is the index limit because I am starting from 0 I can
have only 5 positions .PERIOD  So ,COMMA  marks is an array containing maximum of 5 integers .PERIOD 
If a teacher decides that he will give fractional marks that somebody can get 62 .PERIOD 5
somebody can get 70 .PERIOD 2 ,COMMA  somebody can get 59 .PERIOD 7 then what change should we do the
change that we should do is this will be replaced with float .PERIOD  And if I say in my class there
can be maximum 20 students then what else should I change ,COMMA  I should change this and
make it 20 that is how I should declare all right .PERIOD 

Here are few examples int x 10 ;SEMICOLON  that means ,COMMA  x is an integer .PERIOD  How do we read it ?QUESTIONMARK  x is an
integer x is an array of integers of size or dimension 10 .PERIOD  char line 80 ;SEMICOLON  that means what ?QUESTIONMARK 
that means ,COMMA  line is a variable array of type character .PERIOD  So ,COMMA  what will it be ?QUESTIONMARK  There will be 80
such positions usually when we take a printout usually when we take a printout of
characters the lines were conventionally 80 characters in a line .PERIOD  So ,COMMA  there will be there
will be positions like this all through maximum 80 all right .PERIOD  So ,COMMA  the size will be 80 and
this variable is known as a line and what can it hold it can hold a characters like a ,COMMA  sorry
a there can be a space ,COMMA  space is also a character I denote space as a blank like this then

maybe x is a character ,COMMA  then there is a blank a blank is also varied character then c ,COMMA  then
d ,COMMA  all those things can be there .PERIOD 
So ,COMMA  it is an array of say ultimately say p is the last character something like this .PERIOD 
Altogether 80 spaces for character I keep in my variable line and what is the type of the
variable that type of the variable is an array ,COMMA  array of character all right .PERIOD 

Similarly ,COMMA  I am saying that there are 150 points ,COMMA  there can be 150 points and each of those
points are floating point numbers .PERIOD  Say name ,COMMA  I just stored a name ,COMMA  I want to store the
name of a person say name S Ravikumar is the name of a student and I want to store it in
a computer .PERIOD  How do I store it ?QUESTIONMARK  I can store it in the form of an array where each of the
elements is a character first one is S then dot then r then a v i k u m a and I need one
more space r .PERIOD 
So ,COMMA  you see I needed one more space here .PERIOD  Why ?QUESTIONMARK  Because I had taken I did not have
enough space here .PERIOD  Now ,COMMA  each of them is a character by the way you know that a
character is denoted like this so and so forth .PERIOD  Now ,COMMA  what this line says is that name is a
variable which has got that the capability of holding 35 such characters ,COMMA  it has got the
ability of storing 35 such characters at the most .PERIOD 
Now ,COMMA  how much space should we keep ?QUESTIONMARK  How much should I keep here ?QUESTIONMARK  If we are not
sure of the exact size of the array we can define an area of large size .PERIOD  Say if I think if I

have got no idea of how the what are the typical Indian names for example ,COMMA  or American
names for example ,COMMA  I can keep name 100 ,COMMA  but is it advisable not always .PERIOD  When I really do
not have any idea I have got no other way ,COMMA  but to do it ,COMMA  but if I have an idea of how much
the name length can be at the most I should keep so much size because if I keep an
arbitrarily large size then what am I wasting ,COMMA  I am wasting my memory space because
each of these are a memory location .PERIOD 
Suppose beyond this never a name can extent to then I should not keep this part in the
name .PERIOD  But when I have got no idea of course ,COMMA  I have to keep a bigger large size .PERIOD  So ,COMMA  that
is the difference between the actual dimension of the array how much reserve we do and
for a S Kumar ,COMMA  S Ravikumar for example ,COMMA  my actual size is 1 2 3 4 5 6 7 8 9 10 11 all
right out of 35 ,COMMA  35 was the available number of spaces .PERIOD 

So ,COMMA  when we say it is int marks 50 .PERIOD  Suppose in my class I have got say 10 students and I
am going to store the marks of only one subject in that case there is no point storing so
much space I mean it is like reserving so much space for the variable marks .PERIOD  If I know
since I know only 10 students are there ,COMMA  if I know beforehand then I can I could have
written int marks 10 or if I had known that sometimes the number of students in the class
are 10 sometimes 15 ,COMMA  but never more than 20 then I could have kept marks 20 ,COMMA  but I
should not keep marks 50 .PERIOD  I hope the point is clear now .PERIOD 

Now ,COMMA  I have already described this how an array is stored in a memory .PERIOD  Starting from a
given memory just let us have a revision of this ,COMMA  starting from a given memory location
the successive array locations this is very important ,COMMA  the successive array elements are
allocated spaces in consecutive memory locations one after another .PERIOD 
So ,COMMA  array a will have memory locations one after another like this let now the same
computation let us do it again .PERIOD  Let x be the starting address of the array sorry let x be the
starting address of the area address ,COMMA  this is the address and k is the number of bytes
allocated power array element I had shown it for an integer now I am showing it in a
generalized form ,COMMA  x was the first starting location say 1000 or whatever and k is the
number of bytes allocated .PERIOD 
Now ,COMMA  then the next one will be x plus k because it started with x and needed k locations
the next one will start from x plus k ,COMMA  the next one will start from x plus 2 k like that the
ith element therefore ,COMMA  will be as we had computed earlier will be x plus i k and since we
started with 0 that will be perfectly all right .PERIOD  Element a i will be located some a i will be
located the address say a i here will be located starting at x plus i times k .PERIOD  Just a little bit
of puzzle here I have written it here .PERIOD  Like this a common mistake could be that I what
would have happened if I had written it like this .PERIOD  What is the problem of writing in this
way ?QUESTIONMARK  the problem is ;SEMICOLON  what is i k ?QUESTIONMARK  i k is not i times k not i multiplied by k ,COMMA  but i k is
another variable name all right .PERIOD 

So ,COMMA  these two are not the same thing .PERIOD  Whenever we go for programming we should be
very careful .PERIOD  So ,COMMA  first array index is assumed to start at 0 ,COMMA  in C we are doing that .PERIOD 

So ,COMMA  a particularly element of an array can be accessed by specifying two things .PERIOD  What are
the two things ?QUESTIONMARK  Name of the array ?QUESTIONMARK  Index ,COMMA  index is nothing but the relative position of the
array .PERIOD  We will continue with this discussion further .PERIOD 

So ,COMMA  we now know that an array is identified by a name of the array .PERIOD  Some name like x ,COMMA 
num ,COMMA  whatever and there is an index num i or say num 4 ,COMMA  num 5 etcetera .PERIOD  So ,COMMA  by this
index ,COMMA  by this index we identify which particular element of the array I am referring to .PERIOD 

Now ,COMMA  in c also you have said that the array starts from 0 ,COMMA  the index of ,COMMA  the value of the
index starts from 0 ok .PERIOD 
Next .PERIOD  So ,COMMA  when we have an area defined as int x 10 ,COMMA  the index are from 0 x ,COMMA  x 0 to x 9 all
right .PERIOD  The first element can be accessed as x 0 first element can be accessed as x 0 and
the fourth element as x 3 ,COMMA  the tenth element as x 9 .PERIOD 

I hope this is clear to you by now that this one is arrays x .PERIOD  So ,COMMA  this is x 0 ,COMMA  this is x 1 ,COMMA  the
fourth element will be 3 and the last element will be x 9 .PERIOD 
So ,COMMA  that is how the array elements are addressed ,COMMA  how they are referred to by the indices .PERIOD 

Now ,COMMA  these indices must be integers .PERIOD  Now ,COMMA  the indices must be
integers that is very important .PERIOD  So ,COMMA  if I have got an array defined as int x n ,COMMA  where n is the
size of the array then the value of this n this index value of this index must lie between 0

to n minus 1 .PERIOD  So ,COMMA  if it were twenty then the value must lie between 0 to 19 where n is the
number of elements in the array .PERIOD 
Now ,COMMA  you can see here in this example that it is not the case that always I have to put a
fixed integer as the index of course ,COMMA  I can write for an array ,COMMA  say an array is a I can
always refer to some element of the array as say a 4 for the fifth element or I can have
some other integer value x and suppose x is 2 now and if I refer I can refer to the same
thing as a x plus 2 ;SEMICOLON  that means ,COMMA  this will also evaluate to 4 and this will also point to the
fifth element of the array .PERIOD  Now ,COMMA  one thing that we have to be careful about that this value
that is computed lies between in this range between 0 to n minus 1 .PERIOD 
So ,COMMA  here is another example where the array index value has been computed through an
expression 3 times x minus y is assigned .PERIOD  So ,COMMA  suppose here you can see that we are
talking of two variable ,COMMA  two array variables .PERIOD 

So ,COMMA  let us draw a picture .PERIOD  A picture always clarifies the things much better .PERIOD  So ,COMMA  let us
have an array a and array b ,COMMA  a and b are two arrays right .PERIOD 
So ,COMMA  suppose x is 2 and y is 3 then this statement what does it do ?QUESTIONMARK  A assigned x plus a x
plus 2 ,COMMA  x is 2 plus 2 ;SEMICOLON  that means ,COMMA  a 4 right .PERIOD  So ,COMMA  a 4 the fifth element is being assigned the
value 25 .PERIOD  And what is being done here ?QUESTIONMARK  x is 2 a 10 minus x .PERIOD  So ,COMMA  that is a 8 ;SEMICOLON  that means ,COMMA 
the ninth element ,COMMA  let us have the fifth let me make it a little bigger suppose this is the

suppose this is the ninth element a 9 ,COMMA  a 8 sorry a 8 this is 8 .PERIOD  So ,COMMA  that was suppose 30 that
is being taken plus 5 is being added to that .PERIOD  So ,COMMA  30 plus 5 that is 35 .PERIOD 
Now ,COMMA  note this ,COMMA  this part is being evaluated .PERIOD  What is being done in evaluating this part ?QUESTIONMARK  I
have got x to be 2 .PERIOD  So ,COMMA  I am computing 10 minus x I get that to be 8 ;SEMICOLON  that means ,COMMA  I want a
particular variable which is stored in stored as a 8 ;SEMICOLON  that means ,COMMA  in the nineth location of
the array a and that is 30 .PERIOD  I take that value 30 and add 5 to that ,COMMA  so I get 35 .PERIOD  And then
what do I do ?QUESTIONMARK  I store it in the array b and wearing in the array b .PERIOD 
Now ,COMMA  I will compute this part 3 times x ,COMMA  x was 2 .PERIOD  So ,COMMA  3 times 2 is 6 minus y ,COMMA  y was 3 .PERIOD  So ,COMMA 
it will be 3 .PERIOD  So ,COMMA  in b 3 ,COMMA  b 0 ,COMMA  b 1 ,COMMA  b 2 ,COMMA  b 3 ;SEMICOLON  that means ,COMMA  again in the 4th element of this array
b 3 I will be storing the value 35 .PERIOD  So ,COMMA  now ,COMMA  the array b will have the value 35 here .PERIOD  I hope
this is clear .PERIOD  So ,COMMA  you have to be very clear about the distinction between the array index
and the value of the array .PERIOD 
So ,COMMA  this 30 that I got after computing the index a 8 that was telling me where in the array
I should look at to get that value .PERIOD  And then that was just a value and with that value I had
another value 5 I added them together ,COMMA  I added them together and got the value 35 .PERIOD  Now ,COMMA 
I see where I am going to store that for that again I compute the index here and I
compute the index the index must be within the range 0 to n minus 1 ,COMMA  I compute that and
I find that the index is 3 ;SEMICOLON  that means ,COMMA  in b 3 I have to store the value and go to b 3 and
store the value .PERIOD  I hope this is clear right .PERIOD 

Now ,COMMA  in C ,COMMA  there is a word of caution here that in the language C the array bounds are not
checked for example ,COMMA  int I have got declared int marks 5 ;SEMICOLON  that means ,COMMA  I have got an array
marks whose size is 5 ,COMMA  a dimension is 5 ;SEMICOLON  that means ,COMMA  at least I can have 5 elements in that
all right .PERIOD  Now ,COMMA  here what I am trying to do ,COMMA  here what I am trying to do is I am trying to
write 75 in marks 8 ,COMMA  but there is no space for marks 8 ,COMMA  it was 5 6 7 8 this is the place
where I am going to trying to write 75 .PERIOD 
Now ,COMMA  it would be good if the compiler could give me any error that hey you had declared
it that size to be 5 and you are going beyond the border all right ,COMMA  you are crossing the
border .PERIOD  So ,COMMA  be careful warning syntax error or whatever syntax error and you are not
allowed to do that ,COMMA  but unfortunately array bounds are often not checked .PERIOD  So ,COMMA  what can
happen if you are not careful ,COMMA  then it will not necessarily cause an error ,COMMA  but will be
writing something here all right ,COMMA  it will be writing something at this point which might be
when I allocated the compiler allocated the memory this part was for the marks and this
part were for other variables x y p and whatever value of p was there that is overwritten
with 75 .PERIOD  So ,COMMA  one must be very careful about this when writing the programs and running
it .PERIOD 
Suppose it is a very common thing that often you will find that there are some funny
errors occurring and the reason for that maybe you have crossed the array boundary .PERIOD 

So ,COMMA  it can result in unpredictable results .PERIOD  So ,COMMA  general form of initialization of arrays
whereas ,COMMA  the array name size with some list of values how do we .PERIOD  So ,COMMA  recall that we had
done we can do initialization slight int x equal to 25 semi code ,COMMA  where I declare x to be
an integer and also initialize it to a particular value .PERIOD 
The same thing can be done for arrays for example ,COMMA  I can write int marks 5 72 ,COMMA  83 ,COMMA  65 ,COMMA  80
16 .PERIOD  Note that this initialization is within this two curly braces .PERIOD  That means ,COMMA  here I am
creating an array whose name is marks and the values are 72 for mark 0 ,COMMA  83 for marks 1 ,COMMA 
65 for marks 2 ,COMMA  80 for marks 3 and 76 for marks 4 ,COMMA  0 1 2 3 4 5 elements .PERIOD  I can declare in
this way this is one form of initialization .PERIOD  Remember that here we are putting square
brackets for declaring the dimension ,COMMA  but here we are putting curly braces .PERIOD 

Similarly ,COMMA  this one char name 4 I have just typed in an array ,COMMA  so the array has got 4
elements and what is stored here A m i t ,COMMA  Amit .PERIOD  So ,COMMA  basically the name is Amit .PERIOD  So ,COMMA  that
is coming as a string of 4 characters .PERIOD  Although I use the word string be careful about that
because string has got a little more thing to it which I will describe later ,COMMA  but right now it
is an array of characters ,COMMA  the characters array of characters of size 4 .PERIOD 
Now ,COMMA  there are some special cases the number of the ,COMMA  if the number of values in the list is
less than the number of elements the remaining elements are automatically set to 0 are
automatically set to 0 .PERIOD  For example ,COMMA  in this case I have got a variable what is the name of
the array here the name of that is total and what type of array is it ,COMMA  it is an array of

floating point numbers and so there are 5 elements ,COMMA  1 ,COMMA  2 ,COMMA  I have got 5 spaces ,COMMA  2 3 4 and 5 .PERIOD 
There are 5 spaces yeah and I have loaded initialize it to this value .PERIOD 
So ,COMMA  here it is 24 .PERIOD 2 ,COMMA  the next one is minus 12 .PERIOD 5 ,COMMA  the next one is 35 .PERIOD 1 .PERIOD  The remaining
elements which are not filled up are filled up with 0s automatically by the compiler if it
is less .PERIOD  Now ,COMMA  be careful that sometimes some compilers behave in a are implemented
without doing this bit and therefore ,COMMA  you must check whether your compiler usually the
standard compilers do that ,COMMA  but you should be careful about it .PERIOD 

So ,COMMA  total will be this as I have said here .PERIOD  The size may be omitted in such cases the
compiler automatically allocates enough space for the initialize variables .PERIOD  So ,COMMA  when I am
initializing it then it is possible that I can write I can leave out this size because I am
already writing it here in this form therefore ,COMMA  in this case what will happen flag and array
will be created just for the initialized values .PERIOD  So ,COMMA  a 4 element space will be given to you
which will be 1 1 and 0 because I have not mentioned anything here ,COMMA  but I must give this
symbol because just to distinguish it between int flag and int flag this because this is just
a variable integer variable this is an integer array .PERIOD  So ,COMMA  you must be careful about this too .PERIOD 

So ,COMMA  similarly I could have done char name ,COMMA  I did not put anything here and just write A m
i t .PERIOD 

Now ,COMMA  let us come to this example finding the minimum of 10 numbers .PERIOD  Now ,COMMA  we are
doing our first programming with arrays .PERIOD  We are doing the first programming using the
arrays .PERIOD 
Now ,COMMA  here what we are doing is first we are reading the numbers I am reading the
numbers all right .PERIOD  I am reading the numbers so and then I am storing them in an array .PERIOD 

So ,COMMA  let us look at this line by line .PERIOD  Let us look at the declarations ;SEMICOLON  int a 10 what does it
mean that I have got an array of size 10 and the name of the array is a all right ,COMMA  there is
space for 10 elements a 0 to a 9 .PERIOD 
Next ,COMMA  I have got another variable I one variable another variable mean .PERIOD  So ,COMMA  that is my
declaration part now I am printing here give 10 values .PERIOD  So ,COMMA  on the screen I will find that
give 10 values and then backslash n .PERIOD 
So ,COMMA  now the user is entering 10 values and what am I doing ?QUESTIONMARK  I am reading those 10
values .PERIOD  Now ,COMMA  compare when you till now when we read the different integers what did
you do we wrote it like this right ,COMMA  scanf ,COMMA  percentage d meaning that is an integer
ampersand ,COMMA  num something like that we did to read an integer called num .PERIOD  Compare that
with what we have done here .PERIOD  Here what we have done is scanf percentage d remains the
same because whatever I am reading is nothing ,COMMA  but an integer and ampersand a i ;SEMICOLON  that
means ,COMMA  this array is ith element I am reading ,COMMA  this means a I means I am reading the ith
element of this array a .PERIOD  What is the value of i ?QUESTIONMARK  i is 0 initially .PERIOD 
So ,COMMA  first time whenever I am I have asked 10 values .PERIOD  So ,COMMA  i is 0 ,COMMA  first i is pointing here .PERIOD  So ,COMMA 
i is 0 .PERIOD  So ,COMMA  this ;SEMICOLON  that means ,COMMA  this is pointing here .PERIOD  I read a particular value 25 ,COMMA  I store it here
all right .PERIOD  Then I go in the loop what happens ?QUESTIONMARK  i plus plus ,COMMA  i is incremented to 1 ;SEMICOLON  please
observe this carefully this variable is incremented to 1 ;SEMICOLON  that means ,COMMA  now the index shifts
from here to here a 1 and I read and that is less than 10 typical for loop .PERIOD  So ,COMMA  I come here
read the second value say 3 .PERIOD  Go back increment I it becomes 2 less than 10 I come here
let this brings 2 ,COMMA  means again this is changed to the next element all right and I read the
next value which may be 37 .PERIOD  In that way I go on and read 10 values .PERIOD  Every time I am
reading one particular integer and that is being ,COMMA  where am I storing it that that is the
importance of this ampersand ;SEMICOLON  that means ,COMMA  that I am reading this at the address of a i ,COMMA  so
at this location .PERIOD 
So ,COMMA  this is the first part ,COMMA  first part of the program that has read the array .PERIOD  Now I want to
find out the minimum of the array .PERIOD  Now ,COMMA  let us see .PERIOD 

Let me now .PERIOD  So ,COMMA  is this part clear how we read the array now ?QUESTIONMARK  So ,COMMA  in this way suppose I
have read the array some array like say 5 ,COMMA  3 ,COMMA  200 ,COMMA  75 ,COMMA  1 .PERIOD  Now ,COMMA  in this part of the program
I am trying to find the minimum and that is typically what we did last time ,COMMA  done here in
a little bit different way I am starting with a min mean which is very large .PERIOD  So ,COMMA  I am
assuming that there will be no data given at this point ,COMMA  at this point no data will be given
which is as large as 9 9 9 9 9 ,COMMA  I am assuming that .PERIOD 
So ,COMMA  again in a for loop here i is starting from 0 ,COMMA  that is i is pointing here .PERIOD  I am comparing
a i ;SEMICOLON  that means ,COMMA  a 0 a 0 we with min a 0 is less than min therefore ,COMMA  I can assign a 0 to min .PERIOD 
So ,COMMA  my min becomes 5 .PERIOD  I go back to the loop i is incremented .PERIOD  So ,COMMA  i is incremented and i
comes here ;SEMICOLON  less than 10 ,COMMA  so I come here and again compare a i .PERIOD  What is a i ?QUESTIONMARK  a i is this
value 3 ,COMMA  is 3 less than min yes .PERIOD  So ,COMMA  the min becomes 3 .PERIOD  I again go back increment the
index .PERIOD 
So ,COMMA  you see in this for loop I am incrementing the index .PERIOD  We will see how we can write it
in different ways .PERIOD  Now ,COMMA  this is a very important exercise and you will have to program it
yourself meet with errors at several times ,COMMA  but then ultimately we will find it that is not
that difficult .PERIOD  So ,COMMA  i is now 3 ,COMMA  I again compare 200 with min now 200 is not less than the
min .PERIOD  I go back to the loop I is incremented ,COMMA  75 is not less than the min I come here ,COMMA  1 is
less than the mean .PERIOD  So ,COMMA  this will be like this in this way it goes on .PERIOD 

So ,COMMA  here we could find two distinct applications of this for loop ,COMMA  one for reading the array
and storing it in a set of locations and the other one is looking through that array for
every element I am looking through this area and I am finding the minimum .PERIOD  Now ,COMMA  let us
do a little bit of exercise before we conclude this lecture today .PERIOD  Say I want to read an
array of integers and I want to print the array .PERIOD  So ,COMMA  what should I do ?QUESTIONMARK  I am leaving out the
standard include stdio dot h declaration ,COMMA  declarations let me do ;SEMICOLON  int let me call it ,COMMA  an array
m underscore a meaning my array and let the size be 10 all right .PERIOD 

Also i ,COMMA  and then index i index need not be i ,COMMA  but it must be an integer variable and then I
am starting to read the array ,COMMA  I am trying to read the array .PERIOD  So ,COMMA  my program started here .PERIOD 
For reading the array ,COMMA  I am doing for i assign 0 ,COMMA  i less than less than 10 ,COMMA  i plus plus scanf
percentage d .PERIOD  And what am I reading ?QUESTIONMARK  m a i .PERIOD  So ,COMMA  in a loop I will be reading m a 0 ,COMMA  m a 1 ,COMMA 
m a 2 like that and then I want to print the array .PERIOD 
So ,COMMA  suppose I have read an array which is something like 3 2 4 5 1 .PERIOD  Now ,COMMA  I want to print
the array .PERIOD  So ,COMMA  what shall I do ?QUESTIONMARK  I will just simply again I will take one elements one by
one and will be printing them .PERIOD  So ,COMMA  I can write for i assign 0 ,COMMA  i less than 10 i plus plus ;SEMICOLON  that
means ,COMMA  I will be doing this .PERIOD  So ,COMMA  i is starting with 0 and will go up to this here I am
assuming that there are 10 elements here although I have shown only 5 ,COMMA  then printf I can
say that ,COMMA  so I am printing the value of m a this percentage d .PERIOD  So ,COMMA  these things will be as it

is printed except for this is percentage d backslash n and sorry backslash n and then it is
continuing m underscore a i .PERIOD  Let us see what will happen and then I conclude this .PERIOD 
So ,COMMA  I have stored this now I am printing this .PERIOD  What will be printed ?QUESTIONMARK  Some printing will be
something like this let me use another color for this .PERIOD  What will be printed is the value
first iteration .PERIOD  First iteration what will be printed .PERIOD  The value of m a ;SEMICOLON  what is the value of
i ?QUESTIONMARK  I am sorry here ,COMMA  there should be another one I have written wrong they are two
percentage d is ,COMMA  so here should be i comma this all right .PERIOD  So ,COMMA  I will repeat again .PERIOD  The
value of m a .PERIOD  Then this ,COMMA  then this part will come and this will correspond to the first
variable that is i .PERIOD  What is the value of i ?QUESTIONMARK  Value of i is 0 is ,COMMA  then the second with ,COMMA  second
place holder that is m a 0s value ;SEMICOLON  that means ,COMMA  it is 3 backslash n .PERIOD  Again it will go in the
loop and what will it again print ,COMMA  the value of m underscore a will be printed as it is
percentage d the value of the index of m a 1 is then the value m a 1 is 2 ,COMMA  is 2 like that it
will be printed .PERIOD  So ,COMMA  these are two fundamental operations of reading an array and printing
an array .PERIOD  We will continue further with the arrays .PERIOD 

So ,COMMA  we saw a program where we are finding the minimum of a set of 10 numbers .PERIOD 

So ,COMMA  here the program is restricted as you can see to 10 numbers and accordingly I have
declared the array a to be of size 10 and also this iteration values are also iteration limit
has been kept to 10 .PERIOD  Now ,COMMA  when we did that just a quick recapitulation of what we did in
the last lecture that here is the array declaration and this is where we are accessing the
array elements .PERIOD  Here you can see I am accessing the array element a i ,COMMA  a particular array
element here and assigning that to another variable mean .PERIOD 
Now ,COMMA  here it is very important how am I reading the element .PERIOD  Now ,COMMA  since an array
consists of a number of elements sorry ,COMMA  the since the array consists of a number of
elements I have to read them in a loop that is a very fundamental thing that you one
should understand that at a time I cannot read the entire array in one shot ,COMMA  except for the
case where I initialize it and when I declared the array I give int a ,COMMA  so and so values
within curly bracket that is one way .PERIOD  But if you have to do it at runtime ;SEMICOLON  that means ,COMMA 
whenever the you asking the program is running and you asking from the user that you

entered the values then you have to take one bit of value at a time just like this and store
it in the array .PERIOD 
So ,COMMA  that has to be done in a loop for by varying this indexes one after another as the
index moves I load the different locations with the values .PERIOD  Now ,COMMA  given this we can have
an alternate version of the same program .PERIOD 

You can see that here we have added one line that is this line ,COMMA  define size 10 .PERIOD  This is
again the use of hash define that we had learnt when we defined pi to be 3 point we had
encountered this defined pi 3 .PERIOD 14 etcetera etcetera .PERIOD  So ,COMMA  similarly here I am defining size a
variable size to have the value 10 ,COMMA  therefore ,COMMA  I now ,COMMA  can write this dimension as size .PERIOD 
Now ,COMMA  please note that the compiler look at it from the angle of the compiler ,COMMA  the compiler
will try to allocate some memory location some amount of memory location ok .PERIOD  Now ,COMMA  if
there be a variable size it really does not know how much memory location to allocate ,COMMA 
but since I have defined it earlier it now ,COMMA  knows size means 10 .PERIOD  So ,COMMA  it will replace int size
with int size sorry ,COMMA  int a size to be int a size 10 .PERIOD 
Now ,COMMA  next thing you do is wherever I had i less than 10 I make it size i less than size here
also for the for loop I make i is less than size .PERIOD  Why did I do that ?QUESTIONMARK  What is the advantage
of doing it ?QUESTIONMARK  Now ,COMMA  suppose you have got this program and how many places is size being
used it is being used in 1 2 3 places in another program it could have been used in more

number of places .PERIOD  Here we have not printed the array ,COMMA  I have only printed the minimum .PERIOD 
So ,COMMA  there could be more places where sites could be used .PERIOD 
Now ,COMMA  suppose I want to modify this program ,COMMA  or reuse this program for an array of size
100 only thing I need to do is I change this 10 to 100 .PERIOD  And please note that after defined
any hash define does not have a semicolon because these are not part of the program ,COMMA 
these are commands to the compiler or pre processing commands .PERIOD 

So ,COMMA  I if I could make it 100 then this would be replaced by 100 it would be a 100 and
here it should be i less than 100 automatically ,COMMA  i less than 100 .PERIOD  I need not change it at all
the places that is the advantage of the hash define .PERIOD 

So ,COMMA  we change we can change only one line to change the problem size .PERIOD  The problem
size from 10 to 100 to 1000 we can change by just changing one line .PERIOD 

Here is another version of the program .PERIOD  Here we have not defined hash defined ,COMMA  but I
have kept a large size 100 .PERIOD  Now ,COMMA  so ,COMMA  I have got an array space of 100 elements all right
100 elements .PERIOD  So ,COMMA  much space is kept for me by this line .PERIOD  Now ,COMMA  what I am doing is I am
asking from the user you please tell me how many elements you are going to input .PERIOD 
Suppose here and that I am taking as a variable n ,COMMA  n is a variable where I am just asking

the user give the number of elements n and when the user is typing say 25 then that goes
as n .PERIOD  So ,COMMA  out of now ,COMMA  this 25 is of course ,COMMA  less than the size of this which is 100 it is less
than that .PERIOD 
So ,COMMA  now ,COMMA  I will just work not for 100 elements ,COMMA  but for 25 elements why because the user
has already told me that I want to input 25 elements .PERIOD  Therefore ,COMMA  what modification
should I do ?QUESTIONMARK  Again here I want to make it interactive .PERIOD  So ,COMMA  I again tell the user on the
screen you will see this message input all in integers and the user is entering them one
after another .PERIOD  He can type in 25 enter 35 enter 42 enter like that or he can give space and
go on typing that .PERIOD 
So ,COMMA  for i less than 0 to n ,COMMA  now what is n ?QUESTIONMARK  n is 25 .PERIOD  So ,COMMA  now ,COMMA  it is for i to i ,COMMA  0 to 25 I read the
number .PERIOD  So ,COMMA  I will be reading 25 numbers here 5 ,COMMA  20 ,COMMA  16 ,COMMA  12 ,COMMA  9 etcetera etcetera I go on
and I will go up to 25 not 100 all these .PERIOD  So ,COMMA  this space will be wasted ,COMMA  there is a wasted
space .PERIOD  Why wasted space ?QUESTIONMARK  Because I had deserved 100 locations ,COMMA  but the user has just
agreed to give only 25 numbers and then the remaining part remains the same here also I
will be dealing with n .PERIOD  Why n ?QUESTIONMARK  I will be searching .PERIOD  So ,COMMA  when I did this the array that I got
is actually although they were 100 elements the array was actually of 25 elements right ,COMMA 
the array was of 25 elements .PERIOD  So ,COMMA  I will have to find the minimum within this zone and I
need not go here .PERIOD 

So ,COMMA  that is another version of the same program .PERIOD  So ,COMMA  here what is done is we define an
array of larger size and only use the required amount out of that all right .PERIOD  Now ,COMMA  let us do
a programming ourselves .PERIOD  Suppose I want to read the some integers and I want to find
out the sum of all the integers that old example that we had done earlier .PERIOD  How did we do
it earlier let us recall .PERIOD 

We did let me write it in this way sum there was something like sum assign 0 ,COMMA  then
printf ,COMMA  enter the number ,COMMA  then scanf percentage d and num sum equals sum plus num and
then this has to be done in a loop ok .PERIOD 
So ,COMMA  watch how can I make a loop out of this .PERIOD  So ,COMMA  I also read another variable the number
of numbers .PERIOD  So ,COMMA  sum n was read here .PERIOD  So ,COMMA  I had done some scanf .PERIOD  I would say let us say
of 10 numbers .PERIOD  So ,COMMA  I need not scanf .PERIOD  So ,COMMA  this thing I have to loop right this part I have to
loop how long .PERIOD  So ,COMMA  what should I put here ?QUESTIONMARK  At the beginning for doing the loop for i ,COMMA 
since I know beforehand that there are 10 numbers ,COMMA  i assign 0 ,COMMA  i less than 10 ,COMMA  i plus plus
then I put a parenthesis here and a parenthesis here .PERIOD  So ,COMMA  and the first statement comes
here .PERIOD  Confusing ?QUESTIONMARK  Should I write it again or is it clear .PERIOD 

So ,COMMA  I can write for i assign 0 ,COMMA  i less than 10 ,COMMA  i plus plus ,COMMA  printf please enter the number
backslash n ,COMMA  then here I had done sum assign 0 scanf percentage d and num sum assigned
sum plus num that is how the loop will go on .PERIOD  But here I am not remembering the
number .PERIOD 
So ,COMMA  what I can do using an array what I can do is ,COMMA  let me now do it using an array int ,COMMA 
num say 10 ,COMMA  comma i is another integer variable .PERIOD  Now ,COMMA  and also I need sum sorry sum is
also another integer ,COMMA  sum .PERIOD 

Now ,COMMA  I will first read the array ,COMMA  the first is reading the array .PERIOD  So ,COMMA  let me put a comment
read the numbers all the numbers earlier you see the scanf every time I was doing scanf I
was reading the number .PERIOD  Here I am reading the numbers and storing them .PERIOD 
So ,COMMA  what should I do ?QUESTIONMARK  For i 0 to i less than 10 ,COMMA  i plus plus let us increment the array .PERIOD 
What am I doing ?QUESTIONMARK  Printf enter number backslash n scanf .PERIOD  Now ,COMMA  what should I do ?QUESTIONMARK  I am
reading an integer ,COMMA  so percentage d and ampersand .PERIOD  What should it be ?QUESTIONMARK  What am I
reading first ?QUESTIONMARK  Here is an array whose name is num .PERIOD  So ,COMMA  what is the first thing that I will
be reading ?QUESTIONMARK  First thing that I will be reading is num 0 this element ,COMMA  so scanf percentage d
and num i .PERIOD  Why i ?QUESTIONMARK  Because i is the index and I can see that initially i is 0 .PERIOD  So ,COMMA  whatever is
being scanned will be stored here then I will go back in this loop then the next one will
be stored then the next one will be stored in this way the entire array will be stored after
that I am trying to find the sum .PERIOD  So ,COMMA  now add the next part that I do is add the elements .PERIOD 
Now ,COMMA  in this here I will have to again add the elements .PERIOD  So ,COMMA  suppose the ,COMMA  suppose the
array that has been formed has got some elements like say 5 7 13 12 6 so and so forth .PERIOD 
So ,COMMA  this I have to add this with this then I will get a sum and with that 12 ,COMMA  I will be
adding 13 .PERIOD  So ,COMMA  I will be getting 25 ,COMMA  then 25 and 12 ,COMMA  37 in that way I will go on .PERIOD 
So ,COMMA  here I initialize sum to be 0 and then for again I assign the same index I can use ,COMMA  I
could have used other index also i less than 10 sorry i plus plus .PERIOD  I hope you remember
that after each of these we put a semicolon right in for loop ,COMMA  some assigned some plus
num i .PERIOD  So ,COMMA  what will happen ?QUESTIONMARK  Sum was 0 ,COMMA  sum is 0 .PERIOD  First ,COMMA  in the first iteration of the loop
what will happen ?QUESTIONMARK  I take my value of i is 0 .PERIOD  So ,COMMA  num i will be taken and what is num i ,COMMA 
the first element of the num array .PERIOD  So ,COMMA  that is 5 sum plus 5 .PERIOD  So ,COMMA  sum will be 5 .PERIOD 
Now ,COMMA  next I go back here i becomes 1 .PERIOD  So ,COMMA  i come to the second element and i add that
with sum .PERIOD  So ,COMMA  sum becomes 12 automatically go there I take the index is updated ,COMMA  i is
being updated here .PERIOD  So ,COMMA  I take the third element and add with sum ,COMMA  so it becomes 25 and
in this way I go on adding them all the elements in an area .PERIOD  So ,COMMA  the same thing I could do
using ,COMMA  but in this case what is the advantage that I am getting ?QUESTIONMARK  I have got ,COMMA  I have not
forgotten the numbers that I have read .PERIOD  So ,COMMA  I can do that and again I can print all these
numbers I can say now ,COMMA  the sum of these numbers is so much .PERIOD 
So ,COMMA  that is how we can use an array .PERIOD  Now ,COMMA  suppose I had ,COMMA  I had to find the average of the
elements what should I do ?QUESTIONMARK  I have got the sum here .PERIOD  And then find average ,COMMA  what should

I do here ?QUESTIONMARK  Here of course ,COMMA  I will need another variable average and so I can say and
average is sum divided by 10 .PERIOD  There is a mistake that is there .PERIOD  What is the mistake can
you find out ?QUESTIONMARK  Here I found sum that is ok ,COMMA  and then I am finding the average and why I
am why while I am finding the average I am dividing some whatever sum I got here by
the number of elements which is 10 ,COMMA  I knew beforehand that these are 10 elements .PERIOD 
Where is the error ?QUESTIONMARK  What is the mistake ?QUESTIONMARK  The mistake is that the average cannot be need
not be an integer right .PERIOD  Suppose my sum was 25 and I divide by 10 ,COMMA  so it to be 2 .PERIOD 5 .PERIOD 
Therefore this average should not be kept here I should have declared it as a float
average and not with the int right .PERIOD  So ,COMMA  you must be very careful about it .PERIOD  So ,COMMA  this is how
what we have shown here is how we can read an array and how you can use an array .PERIOD 

So ,COMMA  let us look at this example of computing the grade point average of the students .PERIOD  Let
us try to understand what this program does .PERIOD 
We have defined a variable n sub to be 6 ,COMMA  this n sub means number of subjects all right .PERIOD 
Now ,COMMA  there are 6 subjects .PERIOD  So ,COMMA  0 ,COMMA  1 ,COMMA  subject 0 ,COMMA  subject 1 ,COMMA  subject 2 ,COMMA  subject 3 ,COMMA  subject 4 ,COMMA 
subject 5 ,COMMA  now for each of them we are taking a great point which is nothing ,COMMA  but a mark
say ,COMMA  an integer 3 or 5 or 6 whatever ,COMMA  for every how many 6 .PERIOD  Here you see I have used
define so this line essentially means great point ,COMMA  6 ,COMMA  for 6 subjects and credit for each
subject .PERIOD  So ,COMMA  suppose I have got the subject and the great point and each subject has got a
credit and I have got 6 subjects .PERIOD 

So ,COMMA  subject 0 has got a great point ,COMMA  he has got a great point of 3 ,COMMA  maybe he has got a b
grade or whatever and the credit ;SEMICOLON  that means ,COMMA  the importance of that subject is 5 ,COMMA  subject
1 he has got a great point of 5 ,COMMA  he did really well here and the credit of that was also 5 .PERIOD 
There was another subject 2 in which his great point was 4 and the credit of that subject
was 4 that is the importance weightage .PERIOD  The subject 3 he got 5 and the credit was 3 like
that and since we have got 6 subjects let us do that .PERIOD  Subject 4 his credit he got 3 and the
importance was 4 and this one he got 5 out of 5 and the credit was again 4 .PERIOD 
Now ,COMMA  the credit point is the great point is computed here as for each of them we will
multiply the great point with the credit .PERIOD  So ,COMMA  it will be 3 times 5 ;SEMICOLON  that means ,COMMA  15 plus 5
times 5 that is 25 plus 4 times 4 that is 16 ,COMMA  then 15 ,COMMA  then 12 ,COMMA  then 20 and all these are
added up .PERIOD  So ,COMMA  40 ,COMMA  56 ,COMMA  66 ,COMMA  71 and 12 ,COMMA  71 and 12 is a 83 and 20 .PERIOD  So ,COMMA  he got 103 points .PERIOD  And
how many credits were there ?QUESTIONMARK  5 5 ,COMMA  10 ,COMMA  10 and 7 17 and 8 ,COMMA  25 .PERIOD 
So ,COMMA  his grade point average gpa will be when I divide this by 25 his thing will be 4 point
something ,COMMA  4 .PERIOD 1 etcetera .PERIOD  So ,COMMA  4 .PERIOD 15 or something like that .PERIOD  So ,COMMA  this is what I want to
compute .PERIOD 

Therefore ,COMMA  what I need is to find out that ,COMMA  I have to find the sigma of the sum of the credit
for a course i times the great point of that course i ,COMMA  I will do it for all the courses and then
the whole thing should be divided by the total number of credits ,COMMA  total number of credits .PERIOD 

Now ,COMMA  let us see how we have done ,COMMA  we can do this program .PERIOD  Here we can find that the
great point for 6 and credit for 6 and there is I the great points sum .PERIOD  So ,COMMA  I have to do this
sum is 0 credit sum is 0 and I have to find out a gpa .PERIOD  So ,COMMA  what I am asking from the user
here input great points and credits for the 6 subjects .PERIOD 

So ,COMMA  where are those being stored ?QUESTIONMARK  Those are being stored in two different arrays .PERIOD  Here is
the great point array ,COMMA  this thing and there is another credit array 6 subjects .PERIOD 
So ,COMMA  I read for each of the subjects i less than ,COMMA  i 0 to n sub ,COMMA  I read the great point say 3 and
the credit for that subject say 4 .PERIOD  And again I go and store the great point of that subject
great point that is been obtained is 5 and say credit is 3 .PERIOD  In that way I go on filling up
reading 2 arrays .PERIOD  So ,COMMA  here I am reading two arrays you see ,COMMA  here I am reading two arrays
in one scanf statement and through one for loop ,COMMA  through one for loop I am filling up
these two arrays .PERIOD  So ,COMMA  the reading part is complete here .PERIOD 
Next I come to the computation .PERIOD  Grade point sum will be you ,COMMA  now know what is meant
by this .PERIOD  This means grade point sum is equal to grade point sum plus grade point i times
credit i .PERIOD  So ,COMMA  it is gp sum is whatever is the gp sum initially gp sum was made 0 ,COMMA  gp sum
plus grade point i times the credit of i and that has to be done in a loop just as we had
added the elements of an array .PERIOD  So ,COMMA  and credit sum also I am also finding out the credit
sum the credit sum was 0 .PERIOD  So ,COMMA  whatever the credits are I am also adding them .PERIOD  So ,COMMA  by
adding this array I am getting the total number of credits here and here I am getting the

grade points sum .PERIOD  Now ,COMMA  the grade point I have sum ,COMMA  grade point average is grade point
sum by credits sum and then I print out the gpa .PERIOD 
So ,COMMA  please try to understand this part .PERIOD  What I am trying to do is sigma grade point i ,COMMA  times
credit i divided by sigma of credit i .PERIOD  So ,COMMA  the sigma of credit i is being computed here this
is computing sigma of credit i .PERIOD  Why ?QUESTIONMARK  Because this is being done in a loop and here I am
doing this part sigma of grade point 5 times credit i and adding that with grade point
sum .PERIOD  So ,COMMA  these are very useful program which illustrates a number of things and in the
assignments you will be given more number of programs to do which will give you a
very good practice .PERIOD 

We were discussing about arrays and we have seen how we can read an array ,COMMA  we have
seen how we can print an array ,COMMA  we have also seen how we can access the different
elements of an array using for loops and while loops .PERIOD 

Now ,COMMA  couple of things that we cannot do using an array are as you can see here we
cannot use .PERIOD  These equalities ,COMMA  this assignment for assigning one array variable to another ,COMMA 
for example ,COMMA  if I have ,COMMA  suppose I have one array A suppose I have one array A which is
this array having some elements suppose it is an integer array and the elements here are 1
5 6 7 9 10 .PERIOD 

Now ,COMMA  and there is another array B like this ,COMMA  I want that this data be transferred to 1 to this
array B as 1 5 6 7 9 10 .PERIOD  Now ,COMMA  that I cannot do using A assigned B ,COMMA  I cannot do this or B
assigned A ,COMMA  I am sorry this is wrong using B assigned a i cannot do that .PERIOD  However ,COMMA  it is
true that A is also a variable of type array and B is also a variable of type array .PERIOD  But for
other variable types for example ,COMMA  if A let us say A is a integer variable and B is another
integer variable and a was 15 and then I could have assigned B assigned A .PERIOD  So ,COMMA  B will
become 15 ,COMMA  but this sort of straightforward assignment cannot be done in the case of an
array .PERIOD  What we have to do in order to ,COMMA  this such in order to do such assignments in an
array is that we will have to do it component by component element by element .PERIOD 

For example ,COMMA  I can do this let me again take another array A .PERIOD  Now ,COMMA  this time I take an
array A to be a little smaller of say 4 elements 1 3 2 7 and there is another element B and
I actually intend my intention is that the data in A goes to the array B .PERIOD  Now ,COMMA  as I said for
an array I have to do it element by element .PERIOD  So ,COMMA  suppose this there are 4 elements in the
array and I write a for loop for i equals 0 ,COMMA  i less than equal to 3 ,COMMA  i plus plus .PERIOD  B i is
assigned A i what will happen through this ?QUESTIONMARK  A i ,COMMA  i is 0 .PERIOD  So ,COMMA  A i ;SEMICOLON  that means ,COMMA  0 this element
will be taken and that will be copied to the 0th element of B here ,COMMA  both of them are i ,COMMA  so
that 0 .PERIOD  So ,COMMA  this will become 1 .PERIOD 
Next i is incremented ,COMMA  so i becomes 1 .PERIOD  So ,COMMA  this element is being pointed at and I transfer
this element to the corresponding element this will also be incremented i ,COMMA  this is also i ,COMMA  so
i is 1 .PERIOD  So ,COMMA  this will be copied here similarly for this element next in this loop I will be
incremented and this will be loaded here .PERIOD  Similarly ,COMMA  for the last element it will go on .PERIOD 
Therefore ,COMMA  ultimately I will get the same thing 1 3 2 7 as was my intention ,COMMA  but I cannot
do it directly I have to do it in the form of a loop ,COMMA  element by element I have to transfer
them all right .PERIOD  So ,COMMA  we cannot use this assignment directly .PERIOD  What else am I prohibited to
do .PERIOD  So ,COMMA  A and B are two arrays I cannot do this .PERIOD 
Also I cannot compare two arrays using this sort of equality checker .PERIOD  Earlier we have
seen that I can check whether two elements are equal logical operation I could do it using
normal a equals b ,COMMA  I am sorry a is b .PERIOD  If a was a variable 15 and b was another variable 15

in that case a equality checker b will lead to a value 1 or 2 .PERIOD  But if a is an array and b is
another array I cannot do it directly in that way .PERIOD 

There also I can write a piece of program in which I can check them element by element .PERIOD 
So ,COMMA  please note suppose I have got an array a which is 2 4 5 7 .PERIOD  Another array b is 2 4 5 7
then these two arrays are equal .PERIOD  However ,COMMA  if I have an array with the same elements ,COMMA  but
in a different arrangement say for example ,COMMA  2 5 4 7 these two l this a and c are not the
same therefore ,COMMA  how can I compare how can I compare these two arrays how can I
compare them .PERIOD  In order to compare these two arrays a and b what I need to do is I have
to again write a small loop like for let me do it clearly .PERIOD 

Say I have got an array 2 5 7 4 another array 2 5 7 4 ,COMMA  a and b are the equal I can compare
them I want to compare them compare a and b .PERIOD  Now ,COMMA  what can I do ?QUESTIONMARK  I can do it in this
way for i 0 ,COMMA  i less than equal to 3 because there are 4 elements in the array ,COMMA  i plus plus .PERIOD 
Suppose I put a flag here a variable flag equals 1 ,COMMA  suppose I keep a flag variable I have
initialize it to 1 all right .PERIOD  Now ,COMMA  for i equal to 1 to 0 or let me make it simpler I keep it 0
initially this is 0 .PERIOD 
So ,COMMA  now I do if a i is equal to b i flag is assigned 1 and flag is assigned 1 ,COMMA  else flag
assigned 0 and I come out of this .PERIOD  So ,COMMA  what I am trying to do is here let me let me the
avoid this part for the time being let us see we will develop it gradually .PERIOD  What will
happen here if this is done let us see ,COMMA  for if I do this piece if I run this piece of code then
what will happen .PERIOD  For i equal to 0 ;SEMICOLON  that means ,COMMA  I will be comparing with this .PERIOD 

And if a i is equal to a i ;SEMICOLON  that means ,COMMA  I am comparing these two if these two are equal
then flag is 1 ;SEMICOLON  that means ,COMMA  till .PERIOD  Now ,COMMA  it is one ,COMMA  but this will go on here ,COMMA  so here 1 .PERIOD  Now ,COMMA  5
and 5 is 1 fine ,COMMA  7 and 7 is compared again it is written 1 ,COMMA  4 and 4 again it is written 1 .PERIOD  So ,COMMA 
it has been done and ultimately come out with the value of flag ultimately I come out
when I come out of this the value of flag is 1 and so I can say if flag is one then they are
equal .PERIOD  But there is some problem with this program what is that ?QUESTIONMARK  First of all every time I
was assigning flag to be 1 ,COMMA  that is one problem .PERIOD 
Now ,COMMA  suppose another problem is suppose this value is 6 then what will happen let us
trace this once again 2 and 2 will match .PERIOD  So ,COMMA  the value of flag will be 1 fine .PERIOD  5 and 5 will
be matched ,COMMA  again I am not bothering about how many times unnecessarily I am writing
into flag that apart flag will be 1 .PERIOD  Now ,COMMA  7 and 6 they are not equal to 1 .PERIOD  So ,COMMA  I will come
out of this if statement ,COMMA  but will go again in the loop .PERIOD  So ,COMMA  what should I do here ?QUESTIONMARK  If these
are this is not equal ,COMMA  not equal then I will have to set flag to 0 if there is a mismatch .PERIOD  So ,COMMA 
if I do it like this then what will happen ?QUESTIONMARK  It is this part ,COMMA  if a i is equal to b i then flag will
be one and else ;SEMICOLON  that means ,COMMA  with this else flag will be 0 .PERIOD 
So ,COMMA  ultimately now ,COMMA  suppose ,COMMA  but here again there is a problem what will happen .PERIOD  So ,COMMA  7
and 6 are not matching .PERIOD  So ,COMMA  this is not true .PERIOD  So ,COMMA  flag will be 0 and then I will again go into
the loop because the loop is loop has not yet ended and here I will find that these two
elements are equal 4 and 4 .PERIOD  So ,COMMA  it will come at this point and flag will be 1 and then I

come out of the loop I will come out with flag equal to 1 ,COMMA  but these two arrays are not
equal because I can see that the elements are different .PERIOD 
So ,COMMA  this problem this program will not solve my purpose .PERIOD  I leave it to you for a while to
see how to think how you can solve this problem you need to apply your mind a little bit
to write this piece of program which will simply check whether two arrays are equal or
not if they are equal .PERIOD  That means ,COMMA  if the elements are the same at every position
corresponding position the elements are same in that case it will come out with a flag
value is 1 ,COMMA  otherwise it will come out of the flag value of 0 ,COMMA  that is the task .PERIOD  I hope you
understand where the problem is in this problem ,COMMA  in this program .PERIOD 

You see here had the mismatch been at the last point last moment ,COMMA  at the last element 7 6
then it would have worked fine .PERIOD  So ,COMMA  that is why at the beginning we said this is not just C
programming ,COMMA  it is learning to write programs using logic .PERIOD  Suppose this .PERIOD  this was 7 and
this was 3 then the errors are not equal ,COMMA  array are not equal ,COMMA  here flag would be 1 ,COMMA  here
flag would be 1 ,COMMA  here flag would be 1 ,COMMA  here flag would be 0 and I had come out and my
answer would be correct by chance .PERIOD  The answer is correct by chance because as we have
seen that here if I have an error if I have a mismatch here and suppose here the things are
all right then I would once gate the flag is 0 ,COMMA  but next time that flag will be made to 1 and
ultimately when I come out I will have the flag value to be 1 .PERIOD  So ,COMMA  the correct answer has

eluded me .PERIOD  So ,COMMA  you just think of how I can modify this program such that I get the
correct result as I intended .PERIOD 
So ,COMMA  we cannot use these directly ,COMMA  directly it compare the array variables I cannot
compare .PERIOD  What else ?QUESTIONMARK  So ,COMMA  if a assigned b this sort of thing I cannot do .PERIOD  Also the other
thing that I cannot do is scanf and printf statements I cannot read the array in one shot
that is not allowed ;SEMICOLON  scanf and printf I could normally ,COMMA  normally what could I do .PERIOD 

Normally if I have a variable a sum variable value 5 I could have simply done printf
percentage d a .PERIOD  So ,COMMA  this could be printed .PERIOD  Similarly I could have done scanf ,COMMA  percentage d
and they I could have read a value here .PERIOD  But if it is an array I cannot do it in this way we
already know how we can do that .PERIOD  We know that in order to read an array what we need
to do is read it again in a loop in a for loop element by element so ,COMMA  it can be for i assign
0 ,COMMA  i less than equal to whatever 3 ,COMMA  i plus plus ,COMMA  scanf percentage d and a i .PERIOD 

So ,COMMA  this array a will be red element by element I equal to 0 .PERIOD  So ,COMMA  first this element will be
red same might be 5 ,COMMA  whatever element is 5 there might be 7 etcetera in that way I can
read them element by element .PERIOD  Similarly for printing an array 6 4 ,COMMA  for printing an array I
can simply again do that for say j assign 0 ,COMMA  j let me change a little bit ,COMMA  is any trouble here
j less than 3 ,COMMA  j plus plus ,COMMA  printf percentage d a i .PERIOD  Here of course ,COMMA  I do not give the scanf
again .PERIOD 
Now ,COMMA  is any problem with this ?QUESTIONMARK  Here I made i less than equal to 3 ,COMMA  here I am making j
less than 3 for the same size of array you can think of ,COMMA  you can look at it this is also
correct because here I am starting with 1 .PERIOD  So ,COMMA  1 I am looking at .PERIOD  Now ,COMMA  there is a mistake
here ,COMMA  I have done a couple of mistakes .PERIOD  What will happen here ?QUESTIONMARK  j first of all this was a
unintentional mistake .PERIOD  So ,COMMA  this is j .PERIOD 
Now ,COMMA  how will the array be printed here if I do it in this way ?QUESTIONMARK  What will be printed ?QUESTIONMARK  Here
first thing that we printed is j ,COMMA  a j .PERIOD  What is the value of j ?QUESTIONMARK  1 .PERIOD  So ,COMMA  what is a j a 1 ;SEMICOLON  that is this
element .PERIOD  So ,COMMA  7 will be printed .PERIOD  Suppose I have got a backslash n here .PERIOD  So ,COMMA  7 will be ,COMMA  7
will be printed ,COMMA  then 6 will be printed because i is now 2 ,COMMA  i is now 3 ,COMMA  then 4 will be
printed ,COMMA  but till less than 3 .PERIOD  So ,COMMA  therefore ,COMMA  1 2 3 this will not be printed .PERIOD  So ,COMMA  and also again
I am missing this one .PERIOD  So ,COMMA  what should I do ?QUESTIONMARK  What should I do ?QUESTIONMARK  I can make it j minus 1
what will happen in that case ?QUESTIONMARK  I am printing j is 1 and I am printing a j minus 1 ;SEMICOLON  that
means ,COMMA  I am printing a 0 5 .PERIOD  Next a j becomes 2 .PERIOD  So ,COMMA  I will be printing j minus 1 ;SEMICOLON  that

means ,COMMA  2 minus 1 a 1 ,COMMA  7 then 6 .PERIOD  So ,COMMA  7 then j becomes 2 then j becomes 3 .PERIOD  So ,COMMA  3 minus 1 2 ,COMMA 
I have printed a 2 have printed .PERIOD 
Now ,COMMA  j will be increment it will be 3 the last one will not be printed .PERIOD  So ,COMMA  the here also I
have to make it less than equal to 3 .PERIOD  Was this one alright ?QUESTIONMARK  Just quickly check .PERIOD  This is a
common source of error I am reading this array .PERIOD  Let me do it again I am reading this
array ,COMMA  a 0 then I have read a 0 ,COMMA  then i is incremented ,COMMA  so the 4 elements ,COMMA  so I will come up
to a 3 .PERIOD  So ,COMMA  the second one I am reading the second one a i is 1 .PERIOD  So ,COMMA  a 1 ,COMMA  i is next 2 a 2 and
then a 3 .PERIOD  So ,COMMA  this is ok .PERIOD  So ,COMMA  you have to be a little careful about all this .PERIOD 
So ,COMMA  reading and printing ,COMMA  reading and printing we cannot directly do we have also to do it
through a loop .PERIOD  So ,COMMA  I cannot do like this .PERIOD 

How to copy elements of one array to another ?QUESTIONMARK  By copying individual elements I have
already shown that .PERIOD  So ,COMMA  that is what we have to say about arrays right .PERIOD  Now ,COMMA  will come to
some examples say I want to this is an example of copying an array there are ,COMMA  there are
two arrays a 25 and B 25 .PERIOD  So ,COMMA  I am trying to copy them .PERIOD  So ,COMMA  you know that I can do it by
copying it in this way .PERIOD 

Now ,COMMA  some problems we will like to try out .PERIOD  Now ,COMMA  one is finding the mean and standard
deviation of a set of n numbers .PERIOD  I leave this standard deviation part we can try to do that
mean you know mean is the arithmetic average .PERIOD  So ,COMMA  I will first try to find write a program
where all of you will be able to write find the mean and standard deviation of a set of n
numbers .PERIOD 

So ,COMMA  what are you going to do ?QUESTIONMARK  Mean means the average right .PERIOD  So ,COMMA  I add the numbers all
the numbers suppose my array is a .PERIOD  So ,COMMA  each element I designate as a i is an element .PERIOD  So ,COMMA 

I will have sigma a i ,COMMA  i varying from 1 to n whatever this size is divided by n that is the
average I add all the numbers .PERIOD  So ,COMMA  it is simple to write the program .PERIOD  Suppose I have read
the array I have first of all I have to read the elements in an array .PERIOD 
So ,COMMA  summarizing all what we have learnt what should be my first statement first
statement is declaring the array .PERIOD  So ,COMMA  let me declare an array ,COMMA  int a suppose the size of the
array is 5 ,COMMA  maximum size possible .PERIOD  And I also have sum and I have got another variable
avg all our integers ,COMMA  again avg may not be integer ,COMMA  mean may not be integer .PERIOD  So ,COMMA  and then
I have got another float avg right .PERIOD 
Now ,COMMA  first I have to read the array .PERIOD  So ,COMMA  read the numbers ,COMMA  I am making a shortcut I am
leaving out the printf statement please enter the array that part I am leaving out .PERIOD  Then
what I am doing here ?QUESTIONMARK  Here of course ,COMMA  for i assigned 0 ,COMMA  i less than suppose there are 5
elements ,COMMA  i less than 5 ,COMMA  i plus plus .PERIOD  If it was some other value then I would have put it n
here and I had to read the n before I read the array ,COMMA  all right .PERIOD 
So ,COMMA  I do this and then initially I can make it the sum here to be sum is initialized to 0 all
right .PERIOD  Now ,COMMA  for i equal to 0 ,COMMA  i less than m ,COMMA  i plus plus I read the array I am just now
reading the array .PERIOD  So ,COMMA  what I do ?QUESTIONMARK  Scanf ,COMMA  percentage d ,COMMA  ampersand ,COMMA  a i ,COMMA  I am reading that
and then here in this for loop I can repeatedly compute the sum ,COMMA  sum equals sum plus a i .PERIOD 
So ,COMMA  I will get the sum here ultimately at the end of the loop ,COMMA  at the end of the loop I will
get the sum .PERIOD  So ,COMMA  now ,COMMA  here I can write average is sum divided by whatever the value was
I have taken 5 to be a fixed value ,COMMA  so I divide with 5 and that is the average .PERIOD  So ,COMMA  in that
way I can find out the mean this value .PERIOD  The next task is computing the standard
deviation .PERIOD  So ,COMMA  that I leave to you for the time being .PERIOD  We will take it up later .PERIOD 

So ,COMMA  we were looking at computing standard deviation .PERIOD  So ,COMMA  standard deviation is mean ;SEMICOLON  we
have seen .PERIOD 

Now ,COMMA  standard deviation is if the mean is suppose the mean is represented by mu then I
take the sum of the deviation from the mean for every element of the array .PERIOD  So ,COMMA  the array
was a with every element being called a i .PERIOD 

So ,COMMA  what I am trying to do is ,COMMA  I am taking the difference of a i from the mean and since its
difference can be suppose there are some values and this is the mean and the value can
be a little away from the mean on this side more than the mean or less than the mean .PERIOD  So ,COMMA 
we take the square of the mean square of the difference and I do that for all the elements
I equals 1 to n right and then I take the square root of the whole thing .PERIOD  That is my
standard deviation other my variance .PERIOD  So ,COMMA  I can compute either this or this ,COMMA  whatever I
like .PERIOD 
So ,COMMA  you will simply understand that in the code that we have given little earlier then there
we had computed the mean ;SEMICOLON  that means ,COMMA  mu has been computed which was the average
that we computed last time .PERIOD  So ,COMMA  if I have read the elements in an array whatever the
elements are 5 7 3 2 and I have computed the mean mu who has been computed mean is
of 12 3 15 ;SEMICOLON  17 divided by 4 .PERIOD  So ,COMMA  it is 4 point something 4 .PERIOD 1 ,COMMA  4 .PERIOD 25 right that is my mean .PERIOD 
So ,COMMA  now ,COMMA  for every element again in this array I find out for i assign 0 ,COMMA  i less than equal to
3 ,COMMA  i plus plus what do I do ?QUESTIONMARK  For every element I have got the mu and let us call it average
right .PERIOD 
So ,COMMA  sum was 0 what is it look like ,COMMA  sum was 0 ,COMMA  sum will be now sum plus I am getting
sigma of mu minus a i whole square .PERIOD  So ,COMMA  sum plus average minus a i times average
minus a i ,COMMA  all right .PERIOD  So ,COMMA  that is the square average is mu minus a i that is .PERIOD  So ,COMMA  I am doing
this square and I am repeatedly doing this and getting the new sum and at the end of this

loop therefore ,COMMA  I have got this .PERIOD  So ,COMMA  I can see std ,COMMA  it is a dev let me call it standard
deviation is square root of the sum all right ,COMMA  in that way I can find out the standard
deviation also .PERIOD 

Now ,COMMA  let us come to the now what is the application what is the meaning of this .PERIOD  So ,COMMA  with
these say in a class you are you are supposed to write a program where you want to find
out say in a class of physics .PERIOD  What is the average of the numbers of all the students ?QUESTIONMARK  So ,COMMA  I
will find out the mean and mean of the class marks right .PERIOD  Similarly I can find out that
what is the standard deviation ,COMMA  how much did it vary ,COMMA  that also I can find out .PERIOD 
Now ,COMMA  let us look at this new another problem .PERIOD  Say a shop stores in different types of
items ,COMMA  n different types of items .PERIOD  Now ,COMMA  given the number of items of each type sold
during a given month and the corresponding unit price is compute the total monthly sell .PERIOD 
So ,COMMA  what is the scenario ?QUESTIONMARK  The scenario is this .PERIOD 

I have got say 5 items ,COMMA  item 1 ,COMMA  item 2 ,COMMA  item 3 ,COMMA  item 4 and item 5 .PERIOD  And let me call it the
item ,COMMA  let me call it on this side let me call it this array is item price ,COMMA  item cost ,COMMA  item cost .PERIOD 
Suppose the cost here is 7 and half rupees per item of type 0 ,COMMA  25 for item of type 1 ,COMMA  this is
0 ,COMMA  this is 1 ,COMMA  this is 2 ,COMMA  this is 3 ,COMMA  this is 4 .PERIOD  So ,COMMA  the item cost for this for item of type 2 is 12 .PERIOD 5 ,COMMA 
item of type 3 is 10 ,COMMA  item of this is item of type 4 is 50 rupees .PERIOD 
Now ,COMMA  I want to store how many items of each type has been sold .PERIOD  So ,COMMA  I take another array
and call it items sold .PERIOD  Suppose 5 items have been sold of type 0 ,COMMA  6 items here of type 1 ,COMMA  2
items of type 2 ,COMMA  4 items of type 3 and 2 items of type 1 .PERIOD  Now ,COMMA  my question is what is the
total sell ?QUESTIONMARK  So ,COMMA  what should I do ?QUESTIONMARK  You can easily understand that the here is the item cost .PERIOD 
So ,COMMA  I have to multiply this with this ,COMMA  this with this and add all these costs .PERIOD  So ,COMMA  it will be
7 .PERIOD 5 times 5 it will be 7 .PERIOD 5 times 5 plus 25 times 6 plus so and so forth in that way I can
find the total cost .PERIOD  So ,COMMA  what will the program look like ?QUESTIONMARK  The program will look like I will
be needing to arrays item cost and items sold and they should be of the same size ,COMMA 
assuming that I know beforehand that there are 5 items .PERIOD 

So ,COMMA  I can start with item cost of type 5 ,COMMA  but this will be cost will be of type float and there
will be another the number of items is ,COMMA  item sold the number of items sold is integer .PERIOD  So ,COMMA 
I will have this ,COMMA  I am not showing the part that here I am reading the two arrays .PERIOD  So ,COMMA  after
I read the arrays I will have two arrays like this ,COMMA  one is an integer array another is a
floating point array this is the float and this is an integer .PERIOD 
Now ,COMMA  my actual body of the program will be in a loop for say I am doing it using for say
i assign 0 ,COMMA  i less than equal to 4 since the size is 5 ,COMMA  i plus plus .PERIOD  And what do I do here ?QUESTIONMARK 
What do I do in the body of the for loop ?QUESTIONMARK  I take ok ,COMMA  I write actually only one statement
will do there is no harm in putting this bracket .PERIOD  Total sale which was a variable of type
float total sale is ,COMMA  total sale was initialized to 0 ,COMMA  total sale plus item cost i times multiplied
by item sold i .PERIOD  So ,COMMA  this will be done in a loop .PERIOD 
And so I will take the first item ,COMMA  item cost 0 multiply with that with item cost item sold 0 ,COMMA 
add that with the total sale which was initialized to 0 .PERIOD  So ,COMMA  here I can have float total sale
initialized to 0 ,COMMA  0 point 0 all right ,COMMA  I can do that .PERIOD  So ,COMMA  now ,COMMA  I am doing it in a loop .PERIOD  So ,COMMA  first
I multiply these two add it to total sales ,COMMA  next again in the next iteration i is implemented
I take these two and multiply them and add it to the total sale then I do this two and
multiply them add it to the total sale and I go on in this way .PERIOD  This is ,COMMA  this is in this way
by using this array I will be able to add all these values and I will get the total sale at the
end .PERIOD 

So ,COMMA  here we could see two very nice examples of application of arrays .PERIOD  Now ,COMMA  one another
problem that I gave you I mean as I was while comparing the arrays you can do it in
multiple ways that they were as two arrays you must have solved it by now ,COMMA  that they
were two arrays like this 7 ,COMMA  7 ,COMMA  5 ,COMMA  5 ,COMMA  here 6 ,COMMA  here 4 ,COMMA  but again 3 ,COMMA  3 .PERIOD 

So ,COMMA  everywhere they are matching ,COMMA  but intermediate they were affected and I had a flag
value so flag was initialized to 1 .PERIOD  And then in a for loop then in the for loop I was
checking this was a and this was b ,COMMA  flag was initialized to 1 ,COMMA  if a i is equal to b i this I can
do because here I am doing it element wise then flag equal to 1 else flag equal to 0 and I
can do exit and I come out of the loop straightway ,COMMA  I come out of the loop .PERIOD  Because it
does not really matter at which position the mismatch occurs ,COMMA  as soon as the mismatch
occurs I can say that flag is 0 and so I come out .PERIOD  So ,COMMA  when I was comparing this
whenever I find a mismatch the flag will become 0 and it will not be reset to 1 again
because of this match ,COMMA  because this part is not being computed I need not compute it .PERIOD  I
need not compute it because my objective was to see if the two arrays are equal and here
the violation has already occurred .PERIOD  So ,COMMA  they are not equal .PERIOD 
However so ,COMMA  that is one way you can try it with while loop also .PERIOD  You can try with while
to solve the same problem .PERIOD  Another point is here the time and again here ,COMMA  here ,COMMA 
everywhere I am setting the flag to 1 ,COMMA  I could have changed that also here if what did I

need to do I go on I haves in take flag to 1 and the condition I simply change I just
change the condition if a i is not equal to b i ,COMMA  then make flag 0 exit .PERIOD 

I could have done this .PERIOD  As long as this condition is not holding I am going on doing the
loop is it clear ,COMMA  I will go on doing the loop as long as there is no mismatch ,COMMA  this condition
means mismatch .PERIOD  As soon as there is a mismatch I will set the flag to 0 and exit .PERIOD  There is
another way of solving the problem .PERIOD  So ,COMMA  you have to think logically what exactly you
need to do and what exactly you are writing what is the flow and what is happening with
the variables and I always suggest that you have small pictures of the different variables
and see how they are changing in the course of running the program .PERIOD 
Now so ,COMMA  we have seen a useful commercial .PERIOD  So ,COMMA  called toy commercial problem that how
I can find out the cost of a total sales or monthly sales .PERIOD  So ,COMMA  and here the number of items
sold per month are given then you can do it .PERIOD 
Well ,COMMA  next let us look at a very important thing called searching .PERIOD  Searching is a
fundamental task in any and in fact ,COMMA  in many computations .PERIOD  In many computations we
need to search .PERIOD  What do we search ?QUESTIONMARK  There are different types of searches ,COMMA  but we will be
now talking about the simplest possible search that is we are trying to find out whether a
particular element is there in an array right .PERIOD 

Say ,COMMA  so the purpose is to check if a given element which is known as the key is there in
the array or not .PERIOD  We will first talk about the array is not arranged in any order and we
will do that .PERIOD 

So ,COMMA  suppose I ask the question that is there any even number in the set of numbers given ,COMMA 
suppose there are some numbers given 5 7 2 9 1 8 3 like that .PERIOD  I want to see and suppose
this is a huge this is a list of hundred numbers .PERIOD  I want to find out whether there is any
particular number forget about even number ,COMMA  for the time being for the timing let us

assume that I want to see whether in this list any 4 is there ,COMMA  is there any 4 in the list that is
the question that we are asking .PERIOD  The answer can be either yes or no .PERIOD 
If it is yes then the next question comes where in the list is it there ,COMMA  is it where means in
which position it is there .PERIOD  I may ask like to know the position or I may not like to know
the position I would be satisfied to know whether this list contains any 4 or not all right ;SEMICOLON 
so 5 7 2 9 1 8 3 .PERIOD 

So ,COMMA  again 5 7 2 9 1 8 3 and my key is 4 because I am interested in the existence of 4 .PERIOD  So ,COMMA 
instead of writing the c which you will be writing I will be discussing how to approach
this problem what would the pseudo code be and I am sure in the assignments in your
practice you can write the program .PERIOD  So ,COMMA  I know I need to know beforehand this list .PERIOD  So ,COMMA 
so I need to know a list which may be an integer list of might be here 7 numbers ,COMMA  I need
to know that also I need to know which key I am searching for .PERIOD 

Once I know these two ,COMMA  I know 5 7 2 9 1 8 3 is my list and I know that 4 is my key then
how should I go about it .PERIOD 
I have got 4 in mind .PERIOD  I start to look at as if I am looking at through some means at
different positions I look at this position and check this element and compare this
element with the key and I ask are they equal .PERIOD  If the answer is yes ,COMMA  then obviously I can
say that 4 is in the list .PERIOD  But as you can see it is not true ,COMMA  so in case of no I will shift my
focus from here to here and I will now compare with 4 this element 7 ,COMMA  are they equal ,COMMA  no
then I will again shift the focus and I will go on shift the focus and I will compare with
this element with the key all right .PERIOD  In that I will go on .PERIOD  How long shall I go on till the end
of the list .PERIOD 

If suppose here there was a 4 ,COMMA  instead of 1 there was a 4 here ,COMMA  suppose instead of 1 there
was a 4 here .PERIOD  Then when my focus changes to this point and then again comes to this
point and then I find that this element is matching the key value ,COMMA  then I can exit and say
yes ,COMMA  4 is there in the list .PERIOD  Then if there is other question has to be answered that 4 is there ,COMMA 
but where is 4 ,COMMA  where is 4 ,COMMA  in that case what would be an answer be .PERIOD  Your answer would
be this position .PERIOD  And what is this position ?QUESTIONMARK  This position is nothing ,COMMA  but the current index
current value of the index .PERIOD  Here the index started this is my index which was shifting .PERIOD 

So ,COMMA  now we can think of the algorithm I have got 5 7 2 9 1 8 3 and my key is 4 .PERIOD  So ,COMMA  I will
be doing .PERIOD  So ,COMMA  this is a loop which is a list for i equals 0 ;SEMICOLON  that means ,COMMA  the focus or the
index i less than equal to 1 2 3 4 5 6 7 6 ,COMMA  i plus plus ,COMMA  i plus plus .PERIOD  If least i ,COMMA  that means ,COMMA  the
ith element of the list is equal to the key then I can say found assigned 1 .PERIOD  And what is
found ?QUESTIONMARK  Found is some variable which I have initialized at this point initially nothing is
found it is not found .PERIOD  So ,COMMA  found is 0 initially I have not found the key here I am
comparing as soon as I compare I put found equal to 1 and then I can exit or this
automatically this loop will go on .PERIOD 
Now ,COMMA  if I do it in this way what is the problem ?QUESTIONMARK  Suppose my key was ,COMMA  suppose my key
was 1 then it goes on i 0 ,COMMA  this is never happening found is still 0 ,COMMA  it goes on it comes to
here and I count come to found equal to 1 and then I can say if found equal to 1 ,COMMA  I can
printf ,COMMA  printf key found at position percentage d i .PERIOD  So ,COMMA  at that point I can also print that it
has been found here right .PERIOD  In the worst case what can happen ?QUESTIONMARK  Found will remain 0 ,COMMA 
found will remain 0 and I will come to the end of this point when I come here I can
check if found is 0 ,COMMA  printf key not found ;SEMICOLON  if I do not find it .PERIOD  There can be different flavors
of the same problem .PERIOD 

The other flavor could be that suppose this element 1 is there at multiple places suppose
it is also here .PERIOD  Then what will this program result in ?QUESTIONMARK  What would be its output ?QUESTIONMARK  I will go
on checking here I will check the for loop is extending up to which part ;SEMICOLON  the for loop is

extending up to this ,COMMA  this position and this is separate I should not have I should have
written it on the on this side .PERIOD 
So ,COMMA  I go on checking this .PERIOD  So ,COMMA  key is found at position number 0 1 2 3 4 ,COMMA  key is found at
position 4 .PERIOD  The list is not exhausted ultimately it will come to this point and when it and
again it will say the key is found at position 6 ,COMMA  twice it will it is found it will be told like
that keys it will print twice .PERIOD  If at the end it comes and still the key the value of the
variable found is 0 then it will say print is not found .PERIOD 

I could have also say the same thing same problem I do ,COMMA  say suppose I have got a list 5 7
9 2 1 3 1 the question is how many ones are there .PERIOD  The same algorithm will do ,COMMA  the same
algorithm will work right .PERIOD  What is the same the algorithm ?QUESTIONMARK  The algorithm is I start from
one point from this beginning I let me draw it in this way if this be an array where all my
elements are there ,COMMA  5 7 9 2 1 3 1 I start from the beginning i equals 0 and for every
element I compare with the key and go on till the end .PERIOD 
Now ,COMMA  if I want to do this what is the additional variable that I will require ?QUESTIONMARK  I will require
another variable count which is initially 0 other than found which is also false .PERIOD  So ,COMMA 
whenever I find a 1 and my key is 1 .PERIOD  So ,COMMA  whenever I find a 1 I will say found is equal to
1 and also I will do count plus plus and I will continue .PERIOD  Here I come and I will find I will
have the value of count to be 2 .PERIOD  So ,COMMA  I can also ,COMMA  so I can say that here I could print where

found is becoming 1 .PERIOD  So ,COMMA  I can also ,COMMA  I can say at which position it is a found and how
many times it is found .PERIOD 

Now ,COMMA  it can another flavor could be that I have got this say this array ;SEMICOLON  I have got this
array and some array 6 3 2 9 1 5 and whenever I have been given a key say the key is 2 ,COMMA 
as soon as I find 2 that is enough for me .PERIOD  I just want to know whether 2 is there in the
list ,COMMA  I am not interested to know how many times it is there or in which position it is there
or at best I may like to know at which position I you found it first .PERIOD  So ,COMMA  what I can do ,COMMA  I
will go on searching like this and whenever you find 2 then you print that I have found 2
here and exit .PERIOD 
So ,COMMA  what will you do ?QUESTIONMARK  The loop will be ,COMMA  the loop inside the loop you will have you can do
it like this that if a i or list i ,COMMA  let us I was writing list i is not equal to key all right for you
could have done it by while also n minus 1 i plus plus you go on doing this .PERIOD  If list i is not
is sorry is if it is equal to the key what I have done is equal to key say found equal to 1
and printf the position and exit and you need not go through the entire loop .PERIOD  Now ,COMMA  there
are ,COMMA  so that is this sort of search which I am doing in a linear way from one side to the
other is known as linear search .PERIOD  It is the simple ,COMMA  very simple search for a particular
element .PERIOD  We will see a little bit more on this in the next lecture .PERIOD 

We were discussing about strings and in today’s discussion ,COMMA  let me recapitulate what we
or the last part of what we discussed in the earlier lecture .PERIOD 

How can we read words from this from an input say ?QUESTIONMARK  So ,COMMA  there we had introduced ,COMMA  this
percentage is format with that ,COMMA  with percentage is if we read a name ,COMMA  then it has to be
noted that the ampersand is not needed in this case right the ampersand is not needed
when I am reading a string when I am reading a string I do not need that ampersand .PERIOD 
Now ,COMMA  the point to remember is that whenever I am reading this in this way the string will
be read until there is some blank white space this is also called as white space or a tab
sign or a carriage return or enter is pressed .PERIOD  So ,COMMA  if I type on a b c and then I type blank ,COMMA 
then this a b c will be taken as the word .PERIOD  So ,COMMA  when I perform scan if in this form in name
then a b c will go in the name alright .PERIOD  So ,COMMA  this is what we had seen last time .PERIOD 

So ,COMMA  that is why this example was given if we type Rupak Biswas since after Rupak ,COMMA  there
is a blank we will stop at that point of time .PERIOD  The name will be assigned to Rupak ok
name will be assigned to the string Rupak name will be assign the string Rupak .PERIOD 

On the other hand when we read a line of text if I suppose I want to read say this Rupak
Biswas ,COMMA  I want to read this blank also this entire thing the entire sentence ,COMMA  I want to read
a quick brown fox I want to read .PERIOD 
So ,COMMA  I want to read this characters as well as this blank space is everything then what will
be my delimiter ?QUESTIONMARK  My delimiter will be the carriage return the return carriage return or
that is often designated as backslash n .PERIOD  So ,COMMA  till I get a backslash n ,COMMA  I will go on reading
this that is how I want I can read a line .PERIOD 

So ,COMMA  in order to do that we can use the gate care function for the purpose by gate care
function we will be getting the characters one after another ,COMMA  and I will go on getting the
functions till the I mean I will be going on getting the characters ,COMMA  till I come to a
character that is carriage return designating that there is an that is an end of the line .PERIOD 

So ,COMMA  for example ,COMMA  here a line has been defined to be of maximum length 81 ,COMMA  typically as I
said a line consist of 80 characters and you must be understanding now realizing now
that why I put 81 ,COMMA  the reason is here I need a space for backslash 0 .PERIOD  And I put c to be 0 c
is the number of characters c is here designating the number of characters read ,COMMA  all right .PERIOD 

Now ,COMMA  here we are doing it through a do while statement ,COMMA  you can see that we can do a we
are doing it through a do while .PERIOD  So ,COMMA  I am reading one character here say x and that I am
reading it though to get char ,COMMA  and that character that has been read is coming to the
variable array line all right line c c was initially 0 .PERIOD 
So ,COMMA  here I put x ,COMMA  then I go up then character I go on I read it and then found that their
character is not ampersand .PERIOD  I go back again and read another character say x y increase c .PERIOD 
So ,COMMA  c is now pointing here ,COMMA  c is now pointing here and I again go back now suppose a
blank has been typed in .PERIOD  So ,COMMA  I come here get char is blank .PERIOD  So ,COMMA  that comes here and then c
is pointing to the next position here ,COMMA  and then I go again here and suppose I type in p .PERIOD  So ,COMMA 
the c is now pointing here ,COMMA  and then after that I read the character and the character was
ampersand I mean the character was backslash n ;SEMICOLON  that means ,COMMA  the end of the character .PERIOD 
So ,COMMA  I put backslash n here ,COMMA  whatever it was there and c is pointing here .PERIOD  Now I have after
insertion of backslash n ,COMMA  I come and find here that well what I have entered is backslash
n .PERIOD  Now backslash n should not be there instead of that we should have backslash 0
therefore ,COMMA  I will come back I will decrement c by ones position .PERIOD  So ,COMMA  it will come here and
I will replace this with backslash 0 right here I will bring in backslash 0 will come here .PERIOD 
So ,COMMA  the pattern that will be stored do will be x y blank p backslash 0 .PERIOD  So ,COMMA  that is what this
thing will look like in that way I am reading a line that is how we are reading a line .PERIOD  So ,COMMA 
we have seen that we can read characters as a character array .PERIOD 

Char some line in this way line 81 .PERIOD  Now this line I can read character by character or I
can type in line to be x y blank p that is also will do the same thing ,COMMA  otherwise ,COMMA  I could
have copied it character by character both of them are equivalent ,COMMA  all right .PERIOD 

So ,COMMA  here we have read the character until the char return or backslash n is encountered
and then we make it a valid string by replacing backslash n by backslash 0 .PERIOD 

An alternative approach of reading a line can be this that I just specify the format ,COMMA  here
till now what we have seen is that our formats could be percentage s percentage d

percentage f like that .PERIOD  I can also specify my format in this way as you can see here ,COMMA  what
it means is anything I am sorry what happened ;SEMICOLON  anything that is a b c d or whatever that
this entire thing and here there is a blank ,COMMA  I do not know what is happening here ,COMMA  here
you can see there is a blank here .PERIOD 
So ;SEMICOLON  that means ,COMMA  what is allowed ?QUESTIONMARK  Anything including bank blank capital A to Z
everything is allowed as members of the variable line .PERIOD  Similarly here the specification is
that it can be char at this is a wild card it is called ;SEMICOLON  that means ,COMMA  we can put in anything
preceding backslash n .PERIOD  So ,COMMA  this means it is a wild card ;SEMICOLON  that means ,COMMA  anything can come
here as a character ,COMMA  that can be a member of the variable line .PERIOD  So ,COMMA  that is also another way
of specifying it .PERIOD 
Now ,COMMA  these are specifics to the language c of course .PERIOD 

Now it is easier relatively simpler to display strings on the screen we can simply do a
string ,COMMA  we can display the string with percentage x s and followed by the string name that
is simpler now we come to a very important aspect how do we process character strings .PERIOD 

Now ,COMMA  for that we have got several c library functions we will soon come to functions and
we have already seen different types of functions like square root ,COMMA  maybe did you see and
we have seen we have seen the standard functions like scan f ,COMMA  print f all those things .PERIOD 
Similarly we have got c libraries built in library functions ,COMMA  for character string
manipulation how are they looking like ?QUESTIONMARK  They are we have to in order to do that .PERIOD 

Say one is s t r c p y ;SEMICOLON  that means ,COMMA  string copy ;SEMICOLON  that means ,COMMA  if I have a string here say
string here is my sorry let me put a blank here ,COMMA  my space job .PERIOD  Suppose these are string A
and I want to copy it to another string B .PERIOD  So ,COMMA  B will also therefore ,COMMA  have my blank job .PERIOD 
So ,COMMA  that is that can be done by string copy function s t r c p y how can that be done ?QUESTIONMARK  We
also have a similar thing like string length s t r l e n which means that I have got a string
say my job again ,COMMA  blank job and automatically there is a backslash 0 at the end .PERIOD 

So ,COMMA  when I copy it ,COMMA  then this will also be with s t r c p y 