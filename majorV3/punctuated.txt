mensional table where ,COMMA I have got 5 .PERIOD This is my x and this is my y .PERIOD So ,COMMA 5 corresponding to that ,COMMA 7 first row that is the first point ,COMMA I could have taken 0 0 also that would be another one .PERIOD So ,COMMA 10 corresponding to that 16 then 15 corresponding ,COMMA to that 18 ,COMMA So in that way it could go on that means ,COMMA whatever is this function f x a function can be represented as an array a 2 dimensional array so that all as a table .PERIOD So ,COMMA this we have to remember either as 1 array or as 2 arrays because if this was integer this was float then I would have needed 2 different arrays .PERIOD So ,COMMA here is a function ,COMMA now ,COMMA let us look at ,COMMA another aspect I do not have the function ,COMMA but I have got some data right .PERIOD So ,COMMA here ,COMMA x and here is y and I have got some data points for x equal to this is the y point .PERIOD So ,COMMA if I call it x 0 this is y 0 .PERIOD Next ,COMMA one could be here - ,COMMA x 1 it is y 1 .PERIOD Here ,COMMA maybe it has come down for x 2 it is ,COMMA y 2 .PERIOD So ,COMMA I do not have a function right now but I have got different data points and I have to find ,COMMA out the function .PERIOD So ,COMMA that is also another very interesting thing finding out the function that can represent this distribution of data points might be here again there is x 3 ,COMMA and it is again gone up here .PERIOD So ,COMMA it is not a straight line if I want to fit a ,COMMA curve to meet that ,COMMA how will that ,COMMA curve look like .PERIOD The .PERIOD curve will be something like this right and I ,COMMA have to find out what function is this curve what is the function ,COMMA I do not know as it that is another ,COMMA challenging point .PERIOD So ,COMMA first of all graphs or data points ,COMMA graphs can be represented as table and the distribution of data points can also be represented as table because here in this scenario ,COMMA I do not have a function but certainly I have got the x and y values known to me .PERIOD Therefore ,COMMA I can represent that as a table .PERIOD Another point to note here is that usually this independent variable the sampling points that I am taking our usual equidistant .PERIOD So ,COMMA I can say x 1 minus x 0 is some value .PERIOD h x 2 minus x 1 will be the same .PERIOD h .PERIOD Usually ,COMMA we represent that in order to see a fixed incremental increase of the independent variable how much does ,COMMA the dependent variable vary .PERIOD So ,COMMA I can say ,COMMA in general x ,COMMA i plus 1 minus x i is equal to .PERIOD h right .PERIOD So ,COMMA this is typically how we write now ,COMMA We have got a number of problems to solve using data .PERIOD So ,COMMA for example let us start with one problem finding the root of a function some function fx .PERIOD Now ,COMMA finding the root means essentially it is solving the equation .PERIOD So ,COMMA if ,COMMA I have got a function fx then my equation is fx equals 0 ,COMMA and I want to solve this right and I want to find out that root at least 1 root .PERIOD Now ,COMMA what do I mean by the root .PERIOD Say there ,COMMA is a function like this .PERIOD So ,COMMA for what value of x f ,COMMA x equal to 0 is the equation .PERIOD So ,COMMA this one is fx y or fx ,COMMA So ,COMMA we are to find out for what value of x for which value of x f x is 0 .PERIOD So ,COMMA that is the root .PERIOD Now ,COMMA this particular function if this be an fx then it has got ,COMMA 2 distinct roots another function could be something like this could be just like this ,COMMA where I have got one root this is the point where f x equal to 0 all right .PERIOD So ,COMMA one of the major problems is finding out the root of a function or we will say in general the root of a polynomial .PERIOD Why are we saying a polynomial ,COMMA Because ,COMMA you know that any function say .PERIOD fx is equal to 3 x ,COMMA squared plus 2 x plus 3 is a polynomial of degree 2 or this is f 1 x I could have another f 2 ,COMMA x as 4 x ,COMMA this is a ,COMMA polynomial of the 4 x plus 3 maybe .PERIOD Now ,COMMA anybody who remembers cool coordinate geometry ,COMMA this is a linear equation ,COMMA because ,COMMA it ,COMMA is ,COMMA a ,COMMA polynomial of degree 1 that means if we ,COMMA say this to be y then this is y equals m x plus c .PERIOD So ,COMMA m this 4 is nothing ,COMMA but the slope of this straight line .PERIOD So ,COMMA there will be some slope of this straight line this is ,COMMA linear .PERIOD This one is not linear this quadratic ,COMMA So ,COMMA I can have the different functions ,COMMA which can be written as a polynomial and when the ,COMMA polynomial is equated to 0 ,COMMA it becomes an equation and we want to solve ,COMMA that equation Problem number ,COMMA 2 is interpolating a function I will describe what ,COMMA interpolation is a little later .PERIOD But ,COMMA before that let us try to see a very simple way of finding the root of a function say I have got a function x and y alright and a function is something like this ,COMMA Now ,COMMA I want to find out this point ,COMMA What is the value of x .PERIOD This value for which this y is 0 .PERIOD Now ,COMMA the method that we will be talking about is known as the ,COMMA bisection method .PERIOD This ,COMMA is ;SEMICOLON a ;SEMICOLON very ,COMMA common ,COMMA and ;SEMICOLON interesting ;SEMICOLON approach ;SEMICOLON you ,COMMA have seen in binary search also we have ,COMMA partitioned the array ,COMMA into 2 ,COMMA halves ,COMMA and ,COMMA then went ,COMMA to one ,COMMA half Very similar ,COMMA to that let ,COMMA us see how ,COMMA the bisection method ,COMMA tries to find out the ,COMMA root First ,COMMA we start finding 2 arbitrary points ,COMMA say x0 and x1 such that ,COMMA fx0 and fx1 are of different signs So here you can see this is ,COMMA plus ,COMMA this ,COMMA is minus f ,COMMA x1 is the ,COMMA y value corresponding to x 1 So if the y value of x0 and x1 are ,COMMA opposite then it ,COMMA is ,COMMA immediately understood ,COMMA that the ,COMMA root ,COMMA must lie somewhere in ,COMMA between So ,COMMA we ,COMMA will then try ,COMMA to find out the midpoint of x0 and ,COMMA x1 ,COMMA Suppose ,COMMA the midpoint of x0 and x1 is x2 So if x2 fx 2 and ,COMMA f x0 are out of ,COMMA opposite ,COMMA sign then the root must be ,COMMA I have ,COMMA (I ,COMMA have ,COMMA reduced my space right) so it is between ,COMMA x2 and x0 ,COMMA So ,COMMA I again ,COMMA find ,COMMA out the value ,COMMA the ,COMMA midpoint ,COMMA of x2 and x0 Suppose ,COMMA that midpoint is ,COMMA here suppose this ,COMMA is x3 and these ,COMMA 2 fx3 ,COMMA and fx2 are of opposite ,COMMA signs ,COMMA Therefore ,COMMA I will find the mid midpoint of these 2 .PERIOD So ,COMMA suppose the midpoint of these two is this x 4 here .PERIOD Now ,COMMA still this one and this one are of opposite sides therefore ,COMMA I will try to find out the ,COMMA midpoint of these two .PERIOD So ,COMMA I will come somewhere here ,COMMA In that way we approach ,COMMA till what till we find ,COMMA that the value of y is very close to 0 very close to 0 .PERIOD Why am I saying very close to 0 not exactly 0 there are reasons for that reasons we are coming to that A computer works with finite representation of numbers .PERIOD So ,COMMA we may not get exact 0 but ,COMMA suppose I get this and then I can assume that to be 0 because ,COMMA it is very small and often we call it that that the value of ,COMMA fx at that point is less than equal to some very small value epsilon that will decide a prior .PERIOD So ,COMMA however ,COMMA so you have seen this approach .PERIOD Now ,COMMA one thing that you can quickly think of that ,COMMA how would ,COMMA I know that these ,COMMA 2 are of opposite signs ,COMMA fx 1 and fx 0 are of opposite signs .PERIOD If I take the product of this if I take the product of this ,COMMA then obviously if they are opposite signs the product will be negative that is less than 0 .PERIOD So ,COMMA at every point we check whether they are less than 0 .PERIOD If there is no root suppose it goes like this then I will not find any point where ,COMMA they are of opposite signs ok .PERIOD So ,COMMA that is the basic idea of bisection method .PERIOD Now ,COMMA when I carry it out through a computer such attempts to solve such problems known as programming numerical methods .PERIOD We ,COMMA will start with some representative relatively easy one examples of those .PERIOD Some numerical methods one of them is finding the root of a function root of a ,COMMA polynomial .PERIOD Now ,COMMA while doing these numerical methods we always encounter errors ,COMMA and our algorithm will be better if the error is less .PERIOD Now ,COMMA what ,COMMA do I mean by error .PERIOD Say I am computing 4 by 3 .PERIOD Now ,COMMA what is the correct result the most accurate .PERIOD Do you know that no it is 1 3 3 3 3 it goes on .PERIOD Now ;SEMICOLON you ;SEMICOLON know ;SEMICOLON our ,COMMA computers ;SEMICOLON have ;SEMICOLON got ;SEMICOLON some ,COMMA storage ;SEMICOLON locations ,COMMA of some ,COMMA 8 ,COMMA by 8 ,COMMA bits or 16 ,COMMA bits like ,COMMA that ,COMMA So depending on that ,COMMA I ,COMMA have got ,COMMA a finite capacity to store the data Therefore I may represent this as says 1 ,COMMA 3 3 ,COMMA 3 3 I ,COMMA just start ,COMMA with ,COMMA say 6 digits all ,COMMA right 6 7 8 I ,COMMA can store ,COMMA 8 digits maximum ,COMMA 6 after decimal ,COMMA 1 decimal and this so 6 places Therefore ,COMMA the ,COMMA actual ,COMMA thing was much ,COMMA more ,COMMA So I am ,COMMA actually ,COMMA committing ,COMMA some error ,COMMA So the ,COMMA error in ,COMMA computation is the exact value the difference ,COMMA of the exact ,COMMA value ,COMMA by this ,COMMA m and ,COMMA the ,COMMA computed value it can be ,COMMA positive or ,COMMA negative all ,COMMA right Suppose ,COMMA the ,COMMA result is actually ,COMMA 1 5 2 3 ,COMMA that is the exact ,COMMA value ,COMMA suppose and ,COMMA during ,COMMA my computation I ,COMMA got ,COMMA 1 5 ,COMMA 2 2 ,COMMA 8 2 3 then ,COMMA the error ,COMMA is the ,COMMA difference between ,COMMA these 2 ,COMMA and ,COMMA the error is therefore if ,COMMA I ,COMMA subtract this it will be ,COMMA 0 ,COMMA 0 0 0 ,COMMA 0 0 ,COMMA 1 7 7 - ,COMMA that is the ,COMMA error ,COMMA Now ,COMMA the ,COMMA smaller this error is more accurate ,COMMA my result is I think it ,COMMA is very clear Now ,COMMA there are 2 types of errors also one is a ,COMMA round off error for example here I could have rounded it off as 1 5 2 3 ,COMMA So ,COMMA suppose the actual thing was this and I rounded it to 1 5 2 ,COMMA by ,COMMA approximating ,COMMA if ,COMMA I go by 2 bits ,COMMA That is one type of error other type of error is truncation error -this was there I have just ,COMMA dropped this 1 5 2 because ,COMMA I could not store more .PERIOD So ,COMMA there are two types of errors right .PERIOD So ,COMMA truncation error and round off error .PERIOD Another term that you need to know is the absolute error ,COMMA -absolute error is nothing but the absolute value of the error and relative error is absolute error divided by exact value the absolute of the ,COMMA exact value Absolute error is the ,COMMA error’s ,COMMA absolute part by ,COMMA the exact value and percentage error will be relative error times 1000 relative error times 1000 .PERIOD So ,COMMA we can say that percentage error is relative error in to 100 .PERIOD So ,COMMA now just look at this have a quick look at these definitions ,COMMA Absolute error means the absolute value of the ,COMMA error relative error is absolute error divided by the exact value ,COMMA and then we come to the percentage error which is ,COMMA relative error times 100 .PERIOD Now ,COMMA another important thing that we have to consider is accumulated error ,COMMA but that will consider later .PERIOD In ,COMMA the next lecture we will move .PERIOD So ,COMMA whatever we do the way we do the computation we must be very careful about the algorithm be such that it is it does not accommodate too much error .PERIOD However discussing about error analysis ,COMMA in general is beyond the scope of ,COMMA this course right now .PERIOD So ,COMMA we will in the next lecture start with the ,COMMA bisection method as ,COMMA I have explained ,COMMA and then move to some other methods ,COMMA We were talking about errors and round off errors and percentage errors .PERIOD Now ,COMMA I will briefly show you that if we commit an error how that error continuously gets accumulated and ultimately has a much larger effect ,COMMA For example suppose the exact value is 9 9 8 and we compute 10 all right .PERIOD So ,COMMA the ,COMMA inherent error first the error actually is 0 0 2 right ,COMMA Now ,COMMA as we go on iterating suppose x 1 is 10 times x 0 then the exact value should be 99 8 but ,COMMA here we will get ,COMMA 100 .PERIOD So ,COMMA you can see ,COMMA that the error has increased to how much 0 2 .PERIOD Now ,COMMA if the next iteration x 2 is again 10 times x 1 ,COMMA then it will be 9 9 8 whereas the computed value will be 1000 .PERIOD So ,COMMA the error is ,COMMA becoming 2 .PERIOD So ,COMMA you see how with if we start with an inherent error ,COMMA how that error accumulates over time Ok ,COMMA So ,COMMA we can say a very ,COMMA important term is relative accumulation of error which is accumulated error divided by exact value for that iteration .PERIOD For example in the first iteration the accumulated error was 0 0 2 divided by the exact value which was 9 9 8 but later on it became 0 2 divided by 99 8 .PERIOD So ,COMMA this is this was 0 002004 but ,COMMA whatever that is it is not that important I do not want to confuse with you with this .PERIOD Now ,COMMA there are some cases where this accumulation of error actually goes on increasing .PERIOD If the rate of accumulation error decreases or if the rate of ,COMMA accumulated error increases ,COMMA but ,COMMA the rate of relative error decreases then we call it a ,COMMA stable algorithm .PERIOD However I am not going into the details and the ,COMMA intricacies of this but this is just to give you an idea ,COMMA how the error ,COMMA propagates through iterations .PERIOD So ,COMMA we must be very conscious about the rate of increase of this error ,COMMA With these words we move to the algorithm which we are planning to discuss in this lecture that is a bisection method I have already told you that the bisection method is given a particular function some function on this x and y axis ,COMMA If ,COMMA I have some function that moves in this way then we start with any two points any two points arbitrary points here and maybe here now these two points will not do .PERIOD Because ,COMMA if I select these two points then both of them are positive so that if I had selected this point for ,COMMA example these two points x 0 ,COMMA and x 1 ,COMMA that would not have served my purpose ,COMMA because I do not know where the root is there or not .PERIOD So ,COMMA I would rather select two points ,COMMA which are of opposite signs and therefore I know that somewhere in between the root lies .PERIOD So ,COMMA I will take the midpoint of this somehow here if this point is negative then I will keep the positive fixed and I will find out the value of y .PERIOD So ,COMMA these two are opposite signs .PERIOD So ,COMMA the root must be somewhere here .PERIOD So ,COMMA in that way I come to this one and find out the value of the root here .PERIOD In that way I go on dividing it till ,COMMA I come very close to the root as it is being shown here ,COMMA It is very close to the root .PERIOD Now ,COMMA how close that will depend on my decision that is ,COMMA the basic approach of bisection method .PERIOD So ,COMMA with that let us try to have a look at the algorithm therefore first we start we define the function f x and get the value of the interval A ,COMMA B that is there is a function .PERIOD So ,COMMA here there is a function and the function can be long enough .PERIOD So ,COMMA I take the limits I have to find out the root within this interval a and b and ,COMMA I find out how much error is required .PERIOD So ,COMMA how much error is ,COMMA acceptable .PERIOD So ,COMMA this allowed error is the ,COMMA epsilon that I was talking of and also the number of iterations because it may be that in some case I am not finding the root because I am going on looking at say for example this sort of scenario and my a is here my b is here .PERIOD Then obviously ,COMMA the root does not lie between this .PERIOD So ,COMMA I will go on doing this bisection and again i am doing this bisection for ,COMMA how long will I go on .PERIOD But ,COMMA still it may be that I might not find the root therefore there is a maximum limit that is kept -number of iterations .PERIOD Now ,COMMA I initialise I to be 1 just some index to be ,COMMA 1 and then ,COMMA I call a ,COMMA subroutine or a function bisect the midpoint .PERIOD So ,COMMA here is a sub subroutine you see ,COMMA what it does .PERIOD Or a function .PERIOD What does it do here .PERIOD It finds out between ,COMMA A and B the midpoint and increments the iteration and prints the value of x 1 x 1 is a middle point .PERIOD So ,COMMA if ,COMMA my function was like this and this was a this was b then the root mass lies somewhere here I find out the midpoint of this .PERIOD So ,COMMA this becomes x 1 .PERIOD There is a next one and what is the iteration .PERIOD Next is F that means F mid less than 0 .PERIOD So ,COMMA there can be 2 things .PERIOD Here I select this to be my b and this to be my a .PERIOD Now ,COMMA obviously if I take the midpoint then the .PERIOD midpoint will be somewhere here a and b are of different signs .PERIOD If F mid is not less than 0 then ,COMMA a should be x that means I will now move it on this side and this should be the next a and between these two I ,COMMA will have to find out and every time ,COMMA I am trying to find out -whatever value of F X that ,COMMA I compute is it less than the absolute error .PERIOD If yes then - x I am getting my solution otherwise I am going on doing this .PERIOD So ,COMMA this is a flow chart of the whole thing but I think you will be more interested in looking at the algorithm .PERIOD Let us look at the algorithm for a second and the program .PERIOD Here is algorithm you see ,COMMA this is much more understandable to you I read x 1 ,COMMA x 2 and the error .PERIOD Here x 1 and x 2 are the initial guesses all right .PERIOD Here is my thing ,COMMA I have taken this is x 2 ,COMMA this is x 1 ‘e’ is absolute error that means how much error is permissible compute F 1 that is FX 1 compute for this function this value and f 2 compute this value .PERIOD If f 1 and f 2 the product of these two is greater than 0 that means my initial ,COMMA guesses are wrong because both of them are positive then I can do many things I will ,COMMA instead of going ,COMMA to 11(my initial ,COMMA guesses are wrong) I will again ask for new guess all right .PERIOD So ,COMMA I take a new guess and I find that it is less than 0 .PERIOD Then I take in this step x ,COMMA 1 plus x 2 mid of that .PERIOD So ,COMMA suppose mid of that is this one and that is becoming x read this as fx 1 minus ,COMMA fx 2 divided by x is less than e then display x that means if my error between these 2 points the ,COMMA difference is ,COMMA less is 0 0 0 0 2 and that I can assume as 0 then I will display ,COMMA this particular value of x .PERIOD So ,COMMA right now it is not the case otherwise I will make this f to be fx I take this all right .PERIOD Now ,COMMA between these two I again divide I come here and in this way I go on alright .PERIOD So ,COMMA you will be able to write the program as the program runs .PERIOD So ,COMMA just to show you (I am ,COMMA sure you can write the program ,COMMA yourself) how can ,COMMA you translate this in the form of a code .PERIOD So ,COMMA here you see let us try to understand this code it is a C program for the bisection method I have included a st stdio dot .PERIOD h math dot .PERIOD h and there is some function because I have to find the root of a particular polynomial .PERIOD So ,COMMA for example here it is given this is a polynomial .PERIOD So ,COMMA what is this polynomial ,COMMA it is x cube minus 4 x minus 9 .PERIOD So ,COMMA that value of fx has to be computed .PERIOD So ,COMMA the function is the fun ,COMMA fun is the name of the function then ,COMMA there is another function bisection this function performs ,COMMA and prints the result of one iteration .PERIOD So ,COMMA it is a plus b by 2 ,COMMA now in an earlier lecture we had talked about this -what is this .PERIOD Because ,COMMA here when I am calling this function I am calling by reference how ,COMMA I ,COMMA am just passing the address x and whatever I do here once again is a part of revision you can see .PERIOD If ,COMMA I come here - float star x that means what x is some variable ,COMMA and ,COMMA I ,COMMA have just passed the address of that .PERIOD So ,COMMA star x is the content of this say 50 .PERIOD So ,COMMA I passed it on and in the main function I am passing on the address of x .PERIOD This we have seen earlier .PERIOD So ,COMMA I am taking the midpoint and incrementing the iteration iteration is also a call by reference and float a float b are two points in between ,COMMA which have been passed on .PERIOD Now ,COMMA what is being done in the main function ,COMMA In the main function I am setting the iteration to be 0 and here I am saying how many iterations are permitted Maximum number of iterations x a b allowed error and some x 1 value is given Enter the values of a b allowed error and maximum iterations .PERIOD So ,COMMA all these ,COMMA I read - the range a and b between which points I have to do a and b and ,COMMA how much is the allowed error and ,COMMA what is the maximum number of iterations ,COMMA Then with this I call bisection .PERIOD What do ,COMMA I do Bisection and x ,COMMA that means this will give me the midpoint I will call bisection here - a b iterations .PERIOD So ,COMMA a is being passed here b is being passed here ,COMMA and the number ,COMMA of iterations is being passed here .PERIOD Now ,COMMA here I am finding the midpoint and that .PERIOD midpoint is being returned here is common and ,COMMA then here at this point I call the function ,COMMA that is I am computing the polynomial .PERIOD If the ,COMMA polynomial ie the value ,COMMA of the polynomial at a and the value of the ,COMMA polynomial at ,COMMA x there is a midpoint that is less than 0 .PERIOD So ,COMMA what happened .PERIOD This was my scenario here was a and here was b now let me draw it .PERIOD So ,COMMA here was b and here was a .PERIOD So ,COMMA now what I do I got the meet point somewhere here then the value of the function at this point and the value of the function at this point is a negative .PERIOD Therefore ,COMMA I move this ,COMMA b to x x is becoming b and ,COMMA I do the same thing .PERIOD Otherwise ,COMMA if it was on the other side I would have made x to be a .PERIOD Is this clear ,COMMA Then again I call bisection .PERIOD After calling bisection I find ,COMMA if the absolute error of x 1 minus x is less than the allowed error ,COMMA then I will print the root .PERIOD So ,COMMA this will go on until I exceed the maximum iteration .PERIOD So ,COMMA this is how ,COMMA I code and all of you should be able to practice this yourself .PERIOD Next we will move to another algorithm which is that another method which is known as the Newton-Raphson method ,COMMA This method adopts a different approach to find the root of the function let us try to understand this briefly .PERIOD So ,COMMA I have got a function like this now Newton-Raphson method what it does is it starts at some x 0 and the corresponding value of the function at x 0 is f x 0 ,COMMA Now ,COMMA what it does it finds out the tangent at this point .PERIOD So ,COMMA what would that tangent be .PERIOD That ,COMMA tangent is nothing but f prime x 0 because ,COMMA we know prime means d y dx .PERIOD So ,COMMA I draw the tangent here the tangent intersects the x axis ,COMMA at some point .PERIOD Let this be the value x 1 ,COMMA I drew the tangent and got the value x 1 I come here and from here and from here for f ,COMMA x 1 at every stage have to check whether the value is close to 0 or not obviously ,COMMA this is not the case .PERIOD Therefore ,COMMA I draw another tangent from here and ,COMMA what is this tangent .PERIOD This tangent is f dash x 1 derivative at this point .PERIOD So ,COMMA this becomes x 2 ,COMMA now ,COMMA I find out f x 2 ,COMMA Now ,COMMA I again compare whether f x 2 to is very close to 0 or not ,COMMA Still it is not the case .PERIOD So ,COMMA I draw a tangent at this point ,COMMA So ,COMMA this is x 3 ,COMMA and I find out if x 3 .PERIOD Suppose this value f x 3 is very close to 0 .PERIOD Suppose this is within my allowed error then x 3 is the root .PERIOD Otherwise ,COMMA if ,COMMA it was not there from here again I would have to draw a tangent in this way it goes all right .PERIOD So ,COMMA this is the essence of Newton-Raphsons method .PERIOD So ,COMMA what are you doing here .PERIOD We are taking a function starting with a point ,COMMA and ,COMMA finding a ,COMMA tangent to that curve to the function at that point and see where that tangent ,COMMA intersects the ,COMMA x axis from there I find out f x 2 and then I go on doing this .PERIOD So ,COMMA I think this ,COMMA geometrical .PERIOD exposition will be very helpful to you .PERIOD So ,COMMA next ,COMMA let us try to see how Newton-Raphson method works .PERIOD So ,COMMA at every stage x n plus 1 is x n minus f x n by f dash x n why .PERIOD Because ,COMMA of the simple reason that I had this curve and this was my x n from there I drew the tangent .PERIOD So ,COMMA this was f x n and I drew the ,COMMA tangent here then if I divide this and subtract from here I will get this ,COMMA x n plus 1 here .PERIOD So ,COMMA you see it is coming in the other way because at every stage I am computing this ,COMMA Next here x ,COMMA n is the current known value of x f x n represents the value of the function f ,COMMA dashed x n is the ,COMMA derivative of the slope at that ,COMMA point x n plus 1 represents the next ,COMMA x value that you are trying to find .PERIOD So ,COMMA this expression is coming from the fact that f ,COMMA x by d x where d x is ,COMMA delta minus x therefore the term f x by f dash takes is actually the value of d x that means by how much I should count down .PERIOD So ,COMMA you can see from this expression f x by f prime x is f x by f x by delta x that means the delta x actually this is the ,COMMA delta ,COMMA x part and that means ,COMMA how I am shifting this x .PERIOD So ,COMMA the x was here and I am shifting it ,COMMA by delta x and coming here again shifting it by ,COMMA delta x and coming here like that ,COMMA I am going all right .PERIOD So ,COMMA suppose fx was x square minus 4 then f prime x is ,COMMA obviously ,COMMA 2 ,COMMA x and x 0 was 6 suppose I assumed x 0 to be 6 .PERIOD So ,COMMA here is how it goes .PERIOD First ,COMMA iteration x 0 is 6 f x 0 is supposed 32 32 ,COMMA because 6 squared 36 minus 4 f prime ,COMMA x is what f prime ,COMMA x is 2 x that is 12 .PERIOD This ,COMMA is x n and the next value will be x n that means 6 minus 32 by 12 .PERIOD So ,COMMA whatever that is I subtract and I get the 3 3 3 next iteration I come to 3 3 3 .PERIOD So ,COMMA it was something like this that I started with 6 ,COMMA and then I moved to 3 3 3 .PERIOD So ,COMMA you see it is converging very fast 3 3 3 then at ,COMMA 3 3 3 the value of fx 1 is 7 0 9 here if you compute this the ,COMMA derivative will be twice of this that is 6 6 6 ,COMMA derivative is 2 ,COMMA x 6 6 6 .PERIOD If I subtract this 6 6 6 divided by 7 0 9 subtract it from 3 3 3 is 2 2 7 .PERIOD So ,COMMA my ,COMMA dx is 1 0 6 I go on like this and ultimately I come to a ,COMMA dx of 0 ,COMMA 01 I assume .PERIOD So ,COMMA next time ,COMMA it is 2 2 ,COMMA 7 ,COMMA I start with that again find the next value to be 2 2 7 so it will be 2 0 1 and with 2 0 1 I compute and gradually you see the ,COMMA dx is coming down .PERIOD As the .PERIOD dx is coming down ,COMMA that means I am approaching the actual root .PERIOD So ,COMMA this is Newton-Raphson method and we can very easily code it .PERIOD So ,COMMA here is an example .PERIOD Now ,COMMA you can see this ,COMMA it starts with 6 goes to 3 3 3 then from 3 3 3 ,COMMA I am coming to 2 2 7 then from 2 2 7 I am coming here and gradually the error is not increasing .PERIOD So ,COMMA it is very much converging .PERIOD So ,COMMA I get the solution with 2 0 1 ,COMMA So ,COMMA quickly ,COMMA the algorithm will look like this - again I will read x the a maximum error allowed number of iterations and ,COMMA d d is for checking the slope here are the comments - x is the initial guess absolutely error is e n is the number of iterations .PERIOD So ,COMMA do in a loop i to n in steps of 2 f x ,COMMA f is equal to f x and ,COMMA then f 1 is f prime x .PERIOD Now ,COMMA these are 2 functions which you have to write and now why am ,COMMA I keeping this check .PERIOD Why am I keeping ,COMMA this check f 1 ,COMMA which is a slope if f ,COMMA dashed x is too small that means what that the slope is nearly horizontal that means I am not going to get something like this ,COMMA If I come to this point and try to find a slope of this the slope will be very horizontal .PERIOD So ,COMMA this is not a good choice .PERIOD In ,COMMA that case I have to reduce it and come to a point where I can find a slope all right .PERIOD Now ,COMMA in that way I go on ,COMMA and find the whether it is coming to the close to the root and go on .PERIOD Now ,COMMA if it goes on the iteration goes on say for example it is possible that I am missing the loop coming close to ,COMMA that- say a ,COMMA curve like this .PERIOD The ,COMMA slope of the ,COMMA curve was such that I was trying to come here and somehow I miss the root ,COMMA I go to another point .PERIOD So ,COMMA that is another special case I need not bother you with that right now .PERIOD So ,COMMA let us have a quick look at the program .PERIOD So ,COMMA here we are trying to find out the root of a function ,COMMA x log x to the base 10 minus 1 2 .PERIOD So ,COMMA that is the function that function is ,COMMA embodied in another C function .PERIOD Now ,COMMA d f is nothing but f dashed x .PERIOD So ,COMMA if this function is given I also keep f dashed x written .PERIOD So ,COMMA this is f x this is f dashed x .PERIOD Now ,COMMA I know I have already pre ,COMMA coded them and ,COMMA that will return me the value for different values of x .PERIOD So ,COMMA now again I read as scan f i read the initial x 0 the allowed error the maximum iteration .PERIOD Now ,COMMA then in this loop what I do I find fx by f dashed x and ,COMMA that is .PERIOD h -how much ,COMMA I should change the initial value .PERIOD The initial value was x 0 with which I started I subtract that ,COMMA and come to the next point .PERIOD If absolute value at that point is less than error then that is a solution .PERIOD Otherwise ,COMMA I will go up and repeat this .PERIOD Now ,COMMA if I go on and ultimately ,COMMA if I ,COMMA overshoot the maximum iteration then I can say that the required solution does not converge or the iterations are inefficient ,COMMA So ,COMMA Newton-Raphson usually gives us a very fast way of finding the root ,COMMA but sometimes it does not converge and that ,COMMA is one problem of that ,COMMA However there are many other sophisticated ways of finding roots just to summarise I would ,COMMA like to say that ,COMMA what we have learnt in the past couple of lectures is that ,COMMA one of the major ,COMMA technological ,COMMA requirements a computational requirements are finding roots of ,COMMA polynomials for many solutions for many engineering solutions I have to solve ,COMMA equations .PERIOD For that there are many methods we have just gone through to simpler methods one is the ,COMMA bisection method and the other one that we saw just now is the Newton-Raphson method ,COMMA Next we look at something else called interpolation and other things .PERIOD Thank you ,COMMA Today we will first discuss a technique called ,COMMA interpolation .PERIOD We have seen ,COMMA how a ,COMMA function can be represented in a computer in the ,COMMA form of a table or a 2 2-dimensional array .PERIOD Now ,COMMA what is interpolation .PERIOD Let us try to understand .PERIOD Say ,COMMA I have got a function where ,COMMA I know the ,COMMA I have got a function which is something like this .PERIOD But ,COMMA I do not know the function before that all right .PERIOD If I had known the function or tje description of this function in that case given any x I could have found out the corresponding y right .PERIOD But ,COMMA suppose the function is not given instead what is given to us are for some specific x’s (say ,COMMA x 1) I have been given this value all right ,COMMA This value of y ,COMMA For x equal ,COMMA to 2 ,COMMA I have been given this value of y all right .PERIOD This particular value ,COMMA of y .PERIOD Similarly ,COMMA for 3 I am given a particular value of y ,COMMA but I do not know what is the value of this function for 1 5 .PERIOD So ,COMMA if I call this to be the function f of ,COMMA x then f of 1 5 is not known ,COMMA Although I know that f of 1 is say something 2 5 I know f of 2 to be may be 3 2 f of 3 maybe something like 4 .PERIOD But ,COMMA this information is known to me .PERIOD Given ;SEMICOLON this ;SEMICOLON known ;SEMICOLON part ,COMMA can ,COMMA I ;SEMICOLON find ,COMMA out ,COMMA what ;SEMICOLON are the intermediate ,COMMA values for if ,COMMA 1 58 1 3 2 5 2 6 That ,COMMA is the task ,COMMA of interpolation ,COMMA that ,COMMA means given ,COMMA some values known I ,COMMA want to ,COMMA find out ,COMMA the ,COMMA value of the function for ,COMMA some independent value ,COMMA of ,COMMA the ,COMMA dependent ,COMMA variable ,COMMA So for a ,COMMA particular x ,COMMA what is ,COMMA the part What is the y ,COMMA That’s ,COMMA what I ,COMMA want to find Now ,COMMA you see you can look ,COMMA at ,COMMA this blue ,COMMA line and say that ,COMMA it’s ,COMMA so ,COMMA simply you ,COMMA draw it like this ,COMMA and you ,COMMA will find the value of y But ,COMMA unfortunately what I have is ,COMMA not the blue line What I have is only ,COMMA the rate ,COMMA crosses and this ,COMMA line ,COMMA is not ,COMMA there ,COMMA I do ,COMMA not know these ,COMMA 3 ,COMMA points ,COMMA - ,COMMA whether ,COMMA the curve is something like ,COMMA this ,COMMA or the ,COMMA curve could be ,COMMA a ,COMMA straight line ,COMMA through this ,COMMA points ,COMMA right In ,COMMA that case ,COMMA you see if ,COMMA it was the case then the value of ,COMMA x ,COMMA this particular ,COMMA x ,COMMA would be different from ,COMMA this ,COMMA So ,COMMA I have to actually see ,COMMA that ,COMMA what ,COMMA is the curve ,COMMA that best fits ,COMMA all these given ,COMMA points ,COMMA This ,COMMA problem ,COMMA is known as interpolation ,COMMA Now ,COMMA I can extend it ,COMMA suppose some table is given to you where values for f 1 2 and 3 are given and so the range is from one to 3 ,COMMA but ,COMMA you are asked for some particular x prime which is beyond this range .PERIOD In that case ,COMMA it is also interpolation on the other side that means beyond the boundary .PERIOD That is known as extrapolation all right .PERIOD Right now so basically the concept of ,COMMA extrapolation and interpolation are always the same .PERIOD So ,COMMA here what I will try to see is given some values of fx some known of fx for some particular x’s how do you find out the value of fx for some intermediate value of x .PERIOD That is the task of interpolation .PERIOD Now ,COMMA here I show I had shown a curve usually you can also start with a table like this where some x’s are given .PERIOD (Refer Slide Time: 06:03)say ,COMMA 0 1 0 2 0 3 0 4 0 5 and for ,COMMA each of them we have got some y value 2 7 3 2 1 6 ,COMMA comes down again say 0 6 and again it goes up say 3 2 .PERIOD Now ,COMMA if this be the table then my question is for ,COMMA interpolation what is the value .PERIOD What is the value for x ,COMMA which is 0 27 .PERIOD What is the value of this .PERIOD So ,COMMA that is the task of interpretation .PERIOD Now ,COMMA obviously a simplest possible thing is ,COMMA if I can fit in a line which is known as a linear interpolation .PERIOD So ,COMMA I have got some points here all right ,COMMA I try to fit in a line in between them ,COMMA or let me do it in a different way not exactly this line ,COMMA because this line is matching 2 points ,COMMA but not the others .PERIOD So ,COMMA this is by y and this is x .PERIOD So ,COMMA there could be some points like this something here and something here like this equidistant points Somehow I draw line like this .PERIOD It is a straight line although my drawing is a little curved ,COMMA but it is a straight line .PERIOD So ,COMMA one way is that I try to find out a line such ,COMMA that I minimise the error .PERIOD So ,COMMA of course if I assume that this line is representing my function then I can see there is some error here there is some error here ,COMMA and in other places ,COMMA I could have fitted another line also I could have changed this line a little bit ,COMMA One of the ways is to find the line that minimises the error .PERIOD Now ,COMMA it depends on how you define the error .PERIOD Now ,COMMA here ,COMMA you can see it is a negative error it is a positive error like ,COMMA that it can go on .PERIOD So ,COMMA one way is to find the line such that the ,COMMA squared sum of squared error is minimised .PERIOD That can be one way that means what is an error error ,COMMA When ei is (when I take whatever value my line is saying let let me call it li ) ,COMMA whatever is the actual value minus ,COMMA yi ,COMMA If I consider that to be the error or the other way now you can see ,COMMA it is a positive or negative when I take the error of all these .PERIOD So ,COMMA that could be a sum of error .PERIOD But ;SEMICOLON here ,COMMA what ;SEMICOLON I ;SEMICOLON am ,COMMA saying ;SEMICOLON is ;SEMICOLON that ;SEMICOLON I ;SEMICOLON can ;SEMICOLON have the ,COMMA square ,COMMA of this error and I can try ,COMMA to ,COMMA find out a line such that ,COMMA ei square is minimise ,COMMA so ,COMMA that I get ,COMMA a very good line Now ,COMMA suppose I get ,COMMA a very good line like this then ,COMMA I ,COMMA will have I have the equation of that line ,COMMA Now given 2 ,COMMA points it is ,COMMA very simple ,COMMA right ,COMMA let us take ,COMMA the ,COMMA simplest case first ,COMMA So if ,COMMA there be ,COMMA only 2 points given then ,COMMA I can certainly draw a ,COMMA unique ,COMMA line between ,COMMA these ,COMMA 2 ,COMMA points right ,COMMA So I can find out the equation of these So this is x or ,COMMA school ,COMMA level co ordinate ,COMMA geometry x1 ,COMMA y ,COMMA 1 ,COMMA x 2 y ,COMMA 2 So you can find ,COMMA out the ,COMMA slope ,COMMA of ,COMMA this line You can ,COMMA find the slope of this line ,COMMA which will be ,COMMA nothing but ,COMMA y 2 minus y 1 divided ,COMMA by ,COMMA x 2 minus ,COMMA x 1 So once you get ,COMMA the ,COMMA slope then ,COMMA you ,COMMA can ,COMMA find out the ,COMMA line ,COMMA So ,COMMA the ,COMMA school ,COMMA level equations like ,COMMA y minus ,COMMA y ,COMMA 1 ,COMMA is ,COMMA equal to m into x minus ,COMMA x 1 ,COMMA where m is ,COMMA this m is a ,COMMA slope So ,COMMA you can find the line ,COMMA so when you find the line then your problem is solved ,COMMA Suppose you get a line of the equation a x plus c c is this and ,COMMA you get the coefficients like this .PERIOD Now given any x I give x prime then from that equation I can straight way find the value of y a x prime plus c right That’s straight forward but the problem is that often it is not only 2 points but the points are rather distributed as I was showing in the earlier one like this ,COMMA Where I do not get an exact line that is cutting through all the points .PERIOD Here I will ,COMMA try to minimise the error and I will choose such a line .PERIOD Now when I choose such a line that means I have chosen an equation ,COMMA Therefore ,COMMA again from the linear equation ,COMMA I can find out the value of y ,COMMA for any given x .PERIOD So this approach is known as linear interpolation however the linear ,COMMA interpolation often as you can see the error will be there .PERIOD So people try to find out more accurate solutions .PERIOD So ;SEMICOLON first ;SEMICOLON of ,COMMA all ,COMMA we ;SEMICOLON have ;SEMICOLON seen ;SEMICOLON what ;SEMICOLON is ;SEMICOLON linear ;SEMICOLON interpolation ,COMMA the ,COMMA basic idea ,COMMA is very ,COMMA simple we ,COMMA try to ,COMMA fit in the ,COMMA best possible straight ,COMMA line through all ,COMMA the points So that ,COMMA the error is ,COMMA minimised total ,COMMA error ,COMMA is ,COMMA minimised So ,COMMA one ,COMMA way is ,COMMA to ,COMMA minimise the sum of the squares ,COMMA or there ,COMMA could ,COMMA be ,COMMA some ,COMMA other measures you ,COMMA can take for error ,COMMA that should be minimised so you get ,COMMA a ,COMMA line ,COMMA to your satisfaction So once you get a line to your ,COMMA satisfaction you ,COMMA know the equation of the line ,COMMA Therefore given any x you ,COMMA can ,COMMA find the corresponding ,COMMA y ,COMMA Now fitting this line ,COMMA always the there may be ,COMMA situations where the points are ,COMMA distributed ,COMMA in such ,COMMA a ,COMMA way ,COMMA for example points ,COMMA are ,COMMA something like ,COMMA this all right ,COMMA is very ,COMMA difficult ,COMMA to find ,COMMA the line over ,COMMA here So often I I ,COMMA would like to find out ,COMMA a ,COMMA curve or ,COMMA maybe another ,COMMA curve even better ,COMMA that can ,COMMA be that goes through these ,COMMA points like this ,COMMA where ,COMMA I have ,COMMA got errors but I ,COMMA am ,COMMA trying to ,COMMA fit in ,COMMA a curve So ,COMMA that ,COMMA is ,COMMA not a line this ,COMMA is not ,COMMA a ,COMMA linear interpolation where are further extensions like quadratic interpolation spline ,COMMA interpolation ,COMMA cubic spline and all those .PERIOD So ,COMMA it is better to know the names spline interpolation quadratic interpolation ,COMMA where I want to fit in a quadratic ,COMMA curve etc .PERIOD But ,COMMA today we will discuss another interpolation technique which is known as LaGrange interpolation in the name of the ,COMMA mathematician who ,COMMA invented it .PERIOD So ,COMMA let us have a look at the lagrange interpolation Interpolation as you have understood is given a set of k plus 1 data points - x 0 y 0 ,COMMA x 1 y 1 x 2 ,COMMA y 2 like that up to x k ,COMMA y k so many data points are given .PERIOD The ,COMMA LaGrange .PERIOD polynomial is this - I have to find out for a particular ,COMMA x x minus xn divided by xj minus xm ,COMMA where m is varying from 0 to k .PERIOD For ,COMMA all these m is varying .PERIOD So ,COMMA x 0 x 1 x 2 x 3 for all these I will do that and ,COMMA xj minus xm where j is for a particular ,COMMA LaGrange ,COMMA interpolation .PERIOD So ,COMMA you see it is for l 1 x it will be x minus ,COMMA x 0 by ,COMMA x 1 minus x 0 x minus x 0 by x 1 minus x 0 like that it will go on all right so this is the LaGrange ,COMMA polynomial .PERIOD So ,COMMA using this polynomial let us ,COMMA see how it ,COMMA works just to give you an example I have reproduced that polynomial that I had shown in the earlier slide here again you can say this .PERIOD Now ,COMMA suppose ,COMMA I have got the points given - look here the points at a given are for x value 1 fx is 1 ,COMMA For ,COMMA x value 2 ,COMMA fx is 4 3 and this 9 .PERIOD So ,COMMA I have to fit in a ,COMMA polynomial .PERIOD So ,COMMA my ,COMMA polynomial is Lx ,COMMA now each term of this is one lx .PERIOD So ,COMMA this is l 1 x this is l 2 x this is l 3 x like that ok .PERIOD So ,COMMA you see the value of x is 1 1 times x minus x m ,COMMA M will be something that would be not the same as j .PERIOD So ,COMMA it will be ,COMMA I have got the 3 ,COMMA points so I will not take ,COMMA this 1 x minus 2 divided by 1 minus 2 times the second term x minus 3 divided by 1 minus 3 plus 4 now I am taking this one so it is 4 and in that case ,COMMA I leave out 2 my x j is now 2 .PERIOD So ,COMMA x minus ,COMMA 1( I will not take x minus 2 here .PERIOD Because ,COMMA look at this m not equal to j .PERIOD So ,COMMA for the other x’s I have selected this row .PERIOD So ,COMMA I will only concentrate on the other ,COMMA rows) divided by 2 minus 1 into x minus 3 the other row divided by 2 minus 3 .PERIOD Here ,COMMA I take 9 - this value and I am taking this row .PERIOD Now ,COMMA so now I am taking this row right ,COMMA I have taken 9 .PERIOD So ,COMMA x minus 1 by 3 minus 1 x minus 2 by 3 minus 2 .PERIOD If I solve this ,COMMA I am getting a polynomial ,COMMA x square Possibly you can see that is a perfect fit with the given data points - ,COMMA x 1 fx is x square that is 1 2 it is ,COMMA x square 4 3 it is x ,COMMA squared 9 .PERIOD So ,COMMA it is in ,COMMA this case there is no it is absolutely a perfect fit .PERIOD So ,COMMA this is how I get the polynomial all right ,COMMA Let us try once again .PERIOD For these data value for ,COMMA x 0 equal to 1 the ,COMMA fx is 1 for x equal to 2 it is 8 for x equal to 3 it is 27 .PERIOD So ,COMMA obviously ,COMMA you can see ,COMMA it is no longer x square all right ,COMMA It is not also x ,COMMA cube because here it is cube ,COMMA it is matching the cube it is actually x cube right .PERIOD But ,COMMA let us try to fit in a ,COMMA polynomial ,COMMA here ,COMMA So ,COMMA what is that ,COMMA polynomial using ,COMMA the ,COMMA LaGrange method ,COMMA I will first check one .PERIOD So ,COMMA I am taking first row taking this value one here then x minus 2 1 minus 2 Times x minus 3 1 minus 3 plus next time I take the second row 8 times ,COMMA x minus 1 divided by 2 minus 1 because here it is the value is 2 .PERIOD For the third row it will be again x minus 1 3 minus 1 x minus 2 6 minus 2 .PERIOD By doing this I am not getting x cube ,COMMA which would be a ,COMMA perfect fit but I am getting a close enough polynomial which is 6 ,COMMA x square minus 11 x plus 6 which will be approximating the ,COMMA cube function very closely you can see that .PERIOD So ,COMMA it is not that ,COMMA LaGrange .PERIOD polynomial will always give you the ,COMMA perfect fit ,COMMA but it gives you a very close fit .PERIOD So ,COMMA this is what is known as LaGrange ,COMMA interpolation .PERIOD So ,COMMA if ,COMMA I want to write a program and try to solve it I left to implement a function I have ,COMMA to write a function that will implement this or this right .PERIOD Let us see how we can do that .PERIOD So ,COMMA here is an algorithm scan the number of data available for x and y values .PERIOD Now ,COMMA here there is the how many data points .PERIOD This is telling ,COMMA how many data points ,COMMA you are finding the data .PERIOD Now ,COMMA here loop for i equal to number of data factor then here you are computing this .PERIOD Here you see what we are trying to do .PERIOD At this point we have just read the data and here in a loop ,COMMA we are trying to compute here we are finding the sum .PERIOD But ,COMMA here in the loop I am finding the factor so ,COMMA if you go to the earlier the slide you will find that I have got these are my factors right I am finding each of these factors I am multiplying them this is a factor this whole thing is a ,COMMA factor and then ,COMMA I multiply that with the ,COMMA coefficient ,COMMA and add them up .PERIOD So ,COMMA I am doing the summation at the end .PERIOD So ,COMMA here you see that I am taking the factor then I am taking whatever is the value ,COMMA (this part you can yourself compute) .PERIOD The key part is computation of the factor part where ,COMMA I am showing this part you can see that for I 0 to data i plus plus I am initially a factor is one .PERIOD Because ,COMMA I am multiplying that then if i is not equal to j I will take factor times the value minus the data .PERIOD So ,COMMA then ultimately I am printing the coefficient ,COMMA So ,COMMA you can translate that into in the form of a c function .PERIOD That is the basic idea of LaGrange ,COMMA interpolation you can similarly write programs for linear ,COMMA interpolation and other interpretation techniques .PERIOD So ,COMMA the point of ,COMMA this course is not because ,COMMA I assume that you now know how to do programming and these are simple loop type of programming .PERIOD So ,COMMA you will be able to do that .PERIOD So ,COMMA whenever you want to solve apply some numerical methods you will have to first look at the technique then try to find out the expression and you will have to write an algorithm ,COMMA so that you can solve it ,COMMA ok .PERIOD In the next lecture ,COMMA we will discuss 2 other very interesting techniques for integration and differential equation solver .PERIOD Thank you .PERIOD In this lecture we will be looking at another numerical method technique we will actually look at two .PERIOD First ,COMMA we look at integration how we can integrate a function there are several methods for doing that ,COMMA We will ,COMMA look at only one method and you can after that you can look up at for other methods .PERIOD Next will proceed to see how ordinary differential equation can be solved using numerical techniques using program ,COMMA So ,COMMA first of all let us start with integration .PERIOD Now ,COMMA all of you know what .PERIOD integration means given a particular function ,COMMA integration is say I have got a function like this and ,COMMA I want to integrate .PERIOD Suppose this function is f x ,COMMA and I want to integrate it within the range a and b .PERIOD So ,COMMA we write that as integral a to b of f x and you also know that this ,COMMA integration actually means the area that is under this curve .PERIOD This value is the integration .PERIOD So ,COMMA we will look at how we can solved this ,COMMA problem .PERIOD The simplest a very simple method is a ,COMMA trapezoidal method which will discuss here ,COMMA Let me go back to this this case .PERIOD Now ,COMMA you can see that I can approximate this ,COMMA curve in a very simplistic case using a trapezoid .PERIOD So ,COMMA I have got a trapezoid here let me draw ,COMMA in blue .PERIOD So ,COMMA the area under this trapezoid is approximating the area under the curve ,COMMA but ,COMMA that is becoming possible here (except for this error) ,COMMA because the .PERIOD curve was very much not very skewed in that sense but if the ,COMMA curve where something like this .PERIOD If it was something like this and ,COMMA I was trying to integrate it between these rangers then if I had fitted a ,COMMA trapezoid here then the amount of error would be much more because I will be committing errors at this points ,COMMA I am not considering this ,COMMA I am over considering this points etc ,COMMA So ,COMMA the error will be more .PERIOD So ,COMMA it is not always the case that a simple trapezoid one single trapezoid will solve but ,COMMA let us start with that and try to understand how we can go ahead with the problem .PERIOD So ,COMMA the area under the curve in this particular curve as you can see here this particular curve that has gone through this is a trapezoid under the curve is a trapezoid .PERIOD This part ,COMMA if I assumed to be a trapezoid ,COMMA in that case the integral of f x d x is the area of the trapezoid and we know that the area of a ,COMMA trapezoid is not nothing but half the sum of the parallel sides that means f a plus f b divided by the height .PERIOD Now ,COMMA if I look at it these are the parallel sides then the height is this - b minus a this amount right ,COMMA So ,COMMA this is a ,COMMA known result therefore I can see if I can ,COMMA approximate a curve by a single trapezoid ,COMMA in this way b minus a times f a f b plus f a by 2 or f a plus f b by 2 but ,COMMA of course we will see that there ,COMMA can be errors due to this approximation but this is a simple formula which we can quickly compute .PERIOD It is very easy to write a program for that ,COMMA you have got a function that will compute the curve .PERIOD So ,COMMA you call it for a and call it for b and compute this expression you will get the ,COMMA integral all right .PERIOD So ,COMMA here is an example why is it important suppose a vertical distance is covered by a ,COMMA rocket from time 8 to 30 .PERIOD So ,COMMA my ,COMMA timeline is from 8 ,COMMA seconds to 30 .PERIOD seconds is given by this formula .PERIOD So ,COMMA the ,COMMA vertical distance overall the total vertical distances is this is - a complicated formula .PERIOD Now ,COMMA using single segment trapezoidal rule let us try to find the distance covered .PERIOD So ,COMMA we know for 8 ,COMMA and for 30 if I compute this function (this was my function) .PERIOD So ,COMMA for f 8 my function is yielding this value and for f 30 the function is yielding this value .PERIOD We can compute using your calculator you can find ,COMMA it out but ,COMMA you need not do right now .PERIOD So ,COMMA you can compute the values at these 2 points because this is the overall function .PERIOD So ,COMMA this is the f 8 and f 30 .PERIOD So ,COMMA what will be my ,COMMA integral .PERIOD My .PERIOD integral will therefore be 30 minus 8 b minus a f a plus ab by 2 .PERIOD So ,COMMA that is coming to 11868 meter the distance covered is this but however the exact value ,COMMA if ,COMMA you computed the exact value if you do a ,COMMA detailed computation will be 11061 ,COMMA meter .PERIOD So ,COMMA there is an error obviously there is an error ,COMMA because I have ,COMMA approximated the curve using a trapezoid .PERIOD Now ,COMMA let us see how great is the error .PERIOD So ,COMMA we can see that the true error is minus 807 meter right that is quite significant 800 meters and the absolute ,COMMA relative error which is the actual error ie true value and the computed value and divided by the true value you find that I am getting more than ,COMMA 7 percent error how can ,COMMA you better it .PERIOD So ,COMMA our answer will be instead of ,COMMA fitting in a single trapezoid I can try to fit in more than one trapezoid here like something like this - I fit in one trapezoid here I fit in another trapezoid here and hereby I can approximate I can minimise my error to some extent .PERIOD So ,COMMA here ;SEMICOLON what ,COMMA we ;SEMICOLON are ;SEMICOLON trying ;SEMICOLON to ,COMMA do ;SEMICOLON instead ;SEMICOLON of ,COMMA taking ,COMMA 8 and ,COMMA 30 and fitting in one ,COMMA trapezoid ,COMMA for the whole thing what we are ,COMMA trying to ,COMMA do ,COMMA is we ,COMMA are fitting in ,COMMA one trapezoid for ,COMMA 8 to 19 ,COMMA and other for 19 ,COMMA to ,COMMA 30 ,COMMA So now again using the same ,COMMA formula we ,COMMA find ,COMMA then here is ,COMMA one ,COMMA 19 ,COMMA to 8 to 19 this ,COMMA is ,COMMA the ,COMMA integral plus ,COMMA the other trapezoid ,COMMA is ,COMMA giving ,COMMA me ,COMMA this So I am fitting in 2 trapezoids ,COMMA now ,COMMA So ,COMMA if I do ,COMMA that then ,COMMA let us ,COMMA see whether ,COMMA the result ,COMMA is ,COMMA being bettered So I ,COMMA compute f 8 at f 30 and f19 and compute ,COMMA both ,COMMA of ,COMMA these values ,COMMA the ,COMMA areas under the curve here and here ,COMMA and ,COMMA the ,COMMA result is ,COMMA 11266 meters Now ,COMMA how far is it ,COMMA from the ,COMMA actual ,COMMA Now you ,COMMA can see that the true ,COMMA error has ,COMMA reduced from ,COMMA 807 ,COMMA meters ,COMMA to ,COMMA 205 meters So ,COMMA that tells ,COMMA us that ,COMMA if we can extend ,COMMA this procedure ,COMMA and fitting more and ,COMMA smaller ,COMMA but more number ,COMMA of ,COMMA trapezoids my ,COMMA error will come down further still (Refer Slide Time: 09:34) The ,COMMA multiple ,COMMA segment trapezoidal rule ,COMMA therefore ,COMMA is ,COMMA that ,COMMA we divide ,COMMA into equal ,COMMA segments ,COMMA So ,COMMA here is one ,COMMA trapezoid here is another trapezoid here is another trapezoid and ,COMMA here is another trapezoid I am getting 4 trapezoids here and trying to formulate this I can do that in this way .PERIOD So the .PERIOD integral is this whole thing ,COMMA which will be a sum of these trapezoids .PERIOD Remember these lines these distance is the same .PERIOD So ,COMMA I am dividing b minus a by some particular value n and that is ,COMMA my .PERIOD h .PERIOD So this is .PERIOD h this is .PERIOD h this is ,COMMA h like that I am going for ,COMMA equidistant points and ,COMMA drawing the trapezoid from there .PERIOD So therefore if I follow this as is shown in this way the trapezoidal rule can be ,COMMA written as integral from a to b is sum of half fn plus fn plus 1 that is f a plus f b by 2 times the particular distance that is there x ,COMMA o x 1 minus a x 2 minus x 1 .PERIOD Usually do it in the equidistant way Ok .PERIOD So now multi segment trapezoidal rule is therefore an integral I which can be broken down ,COMMA this is simple .PERIOD From a to a ,COMMA plus .PERIOD h ,COMMA I can have f x d x a plus .PERIOD h to a plus 2 .PERIOD h f ,COMMA x d x plus a plus n minus 2 .PERIOD h to a plus n minus 1 .PERIOD h f x d x a plus n minus 1 .PERIOD h to ,COMMA b .PERIOD So ,COMMA all the segment serving as it together Applying this I get this formula b by a divided by 2 n ,COMMA because 2 is coming n times .PERIOD So ,COMMA f a plus f b plus 2 into f a plus ih because that is coming twice here once and here once you see here if a plus .PERIOD h will come then here a plus .PERIOD h will come right .PERIOD So ,COMMA using this let us do the example again the same thing using ,COMMA 2 segment ,COMMA Trapezoidal ,COMMA rule we could find that the error is coming down .PERIOD We have already seen that the true value of error is coming down .PERIOD And ,COMMA the absolute ,COMMA relative error has come to 1 853 .PERIOD So ,COMMA now ,COMMA let us come to ,COMMA c programming straightway how can we encode ,COMMA it using a c program you see here .PERIOD So ,COMMA I am ,COMMA reproducing the result here again .PERIOD So ,COMMA integral ,COMMA of f x d x between a and b will be .PERIOD h by 2 f a plus 2 f a plus .PERIOD h plus 2 f a plus 2 .PERIOD h why this 2 is coming because in the first zone f a and f a plus .PERIOD h ,COMMA second zone f a plus .PERIOD h plus f a plus 2 .PERIOD h .PERIOD So ,COMMA each of these intermediate points are coming twice that is ,COMMA why ,COMMA this is 2 ,COMMA and I have got this formula .PERIOD Now ,COMMA as a ,COMMA c programmer your task is very simple you see here that I have defined n i whatever I am asking the user for the necessary inputs how many number of subintervals that you want to have .PERIOD The initial limit a you are reading ,COMMA the ,COMMA initial limit b all those things you are reading .PERIOD Now ,COMMA the integral computation is done here ,COMMA What is being done I am finding out the absolute value ,COMMA of b ( b minus a divided by n and I am taking the absolute value of ,COMMA that) because ,COMMA it could have gone on the other side also .PERIOD So ,COMMA now here I am just computing the sum what sum .PERIOD This part .PERIOD Initially ,COMMA x is a plus i .PERIOD h ,COMMA sum is sum plus f x .PERIOD So next time it is becoming 2 I am adding all those things here .PERIOD So ,COMMA here ,COMMA I am in a loop I am doing a plus i .PERIOD h initially i is 1 .PERIOD So ,COMMA 1 .PERIOD h 2 ,COMMA h like that I am going on ,COMMA Ultimately and I am completing the sum here some plus f ,COMMA x and note that f ,COMMA x is a separate function that is being kept somewhere here and then ultimately ,COMMA I find the sum sum is these ,COMMA things - a plus .PERIOD h these points .PERIOD Now ,COMMA integral is .PERIOD h by 2- this part f a plus f b plus f a plus ,COMMA f ,COMMA b plus twice the sum a plus a .PERIOD h a plus 2 ,COMMA h a ,COMMA plus k .PERIOD h like that ,COMMA t a plus i .PERIOD h has been completed inside this loop and that I had with 2 ,COMMA here and ,COMMA here is my integral .PERIOD So ,COMMA that is the ,COMMA trapezoidal rule .PERIOD The program is ,COMMA so simple if you understand the ,COMMA concep .PERIOD Next we will move to another very important engineering computation that is needed in solving ordinary differential equations Quickly lets all of you know what a differential equation is ,COMMA We will in particular look at Runge Kutta fourth order method and here I will show examples that you can also find in this site of University of South Florida numerical methods and I have taken the slides from them with the permission ,COMMA Now ,COMMA you see how to write an ordinary differential equation .PERIOD Now ,COMMA an ordinary ,COMMA differential equation you know ,COMMA -it is d ,COMMA y d x f x y .PERIOD So ,COMMA how do I write it I write it as suppose this is something ,COMMA that is given d ,COMMA y d x plus 2 y is 1 3 into e power minus x and what is this part .PERIOD This is the initial condition ,COMMA Now ,COMMA this can be rewritten as (just by changing the directions because I have to bring it to this form) d y d ,COMMA x is 1 3 e minus x minus 2 y .PERIOD So ,COMMA in this case we will assume that our f x y there is a d y d x which is 1 3 - ,COMMA this thing ten e to the power minus x minus 2 y this is our differential equation that we will have to solve ,COMMA (Refer Slide Time: 17:18) .PERIOD So ,COMMA for d y d x the ,COMMA Runge Kutta fourth order method ( I am not going into the derivation of it for positive of time and you can always look at look into this at any ,COMMA website or ,COMMA you ,COMMA can look at any numerical method textbook) takes 4 terms and if this is the ,COMMA expression given this d y d x my task of solving a differential equation is to find a particular y right .PERIOD So ,COMMA what we are trying to do y i plus 1 is y i some particular y i plus 1 by 6 followed by a term and what is that term k 1 plus 2 k 2 plus 2 k 3 plus k 4 - this whole thing multiplied by .PERIOD h H is the again the sampling that is the distance between the individual points that we looked at ,COMMA now what is k 1 .PERIOD When I am taking for y i f x i y i - that particular function is k 1 .PERIOD What is k 2 .PERIOD Suppose there is a curve .PERIOD Now ,COMMA I have been given the slope I do not know the ,COMMA curve .PERIOD If know the curve then I can find out the value of any particular y ,COMMA i plus 1 given any y i .PERIOD Now given any y i I am trying to guess the curve right I am trying to solve the ,COMMA curve .PERIOD So ,COMMA x i was ,COMMA here x i plus half ,COMMA h ,COMMA I am taking whatever was my .PERIOD h I am taking half of ,COMMA h and what is the y part of this function y i plus half of k 1 .PERIOD h .PERIOD So ,COMMA because k 1 was f i k 1 was the function that was ,COMMA giving y given an x .PERIOD So ,COMMA I am taking this .PERIOD What is k 3 ,COMMA This part is same x i plus half .PERIOD h but this part is now becoming much more ,COMMA predictive .PERIOD So ,COMMA it is half of k 2 ,COMMA h that means whatever has been completed here times .PERIOD h and k 4 is x ,COMMA i plus ,COMMA h the last one is x i plus .PERIOD h because I am trying to solve the equation within this zone .PERIOD h .PERIOD So ,COMMA x ,COMMA i plus .PERIOD h i start with x i and this is x ,COMMA i plus ,COMMA h times k 3 .PERIOD h .PERIOD Here there is no half .PERIOD Now ,COMMA this derivation you can look at but ultimately I multiply it with 1 by 6 .PERIOD So ,COMMA given this Runge Kutta formula let us quickly look at an example that we have a nice thing to look at .PERIOD Suppose ,COMMA a ,COMMA ball is at 1200 Kelvin and is allowed to cool down in air in an ,COMMA ambient temperature of ,COMMA 300 Kelvin .PERIOD So ,COMMA here the ball was heated and the ,COMMA air is cooling it down Assuming that the heat is lost only due to radiation the differential equation for the temperature is given here ,COMMA This one where theta 0 we know the initial condition is 1200 Kelvin Find the temperature at t 480 .PERIOD So ,COMMA what is my x i .PERIOD So ,COMMA now if I assume a step size of 240 I want to find out the temperature at 480 .PERIOD So ,COMMA suppose it was at a particular temperature after 480 seconds .PERIOD So ,COMMA here is the time it was at 1200 and I have got some radiation formula using which ,COMMA it is coming down .PERIOD So ,COMMA I want to find out what would the temperature be at ,COMMA 480 ,COMMA seconds from the starting point where it was at 1200 degree ,COMMA Kelvin I want to find out this temperature .PERIOD That is the y i I want to find out given the slope of this differential equation .PERIOD So ,COMMA assuming a step size of each to be ,COMMA 240 if I take half of this then 240 then d theta d t you can compute that here .PERIOD So ,COMMA my formula will be theta i plus k 1 plus 2 k 2 plus 2 k 3 plus k 4 divided by 6 times ,COMMA h that is the ,COMMA Runge Kutta formula .PERIOD So ,COMMA that is what I want to find out .PERIOD So ,COMMA step 1 - you see I am not going into all these ,COMMA calculations ,COMMA but ,COMMA I am finding out the value of k 1 I am finding out the value of k 2 using this value of k ,COMMA 1 k 1 is being used here and ,COMMA I find out the value of k 2 .PERIOD Again the value of k ,COMMA 2 is being used here ,COMMA I find out the value of k 3 and k 3 is being used here I find out the value of k 4 I find out those values ,COMMA manually .PERIOD So ,COMMA the solution therefore the ,COMMA theta 0 ,COMMA was ,COMMA 1200 initial condition and here I put in the values of this times .PERIOD h ,COMMA h was 240 .PERIOD So ,COMMA I have taken it at the midpoint .PERIOD So ,COMMA I find that ,COMMA the temperature that would be would be ,COMMA 675 ,COMMA 65 that is the approximate temperature at 240 .PERIOD So ,COMMA this will be the value at 240 .PERIOD Next I have to find out at 480 .PERIOD So ,COMMA what would ,COMMA I do Step 2 ,COMMA I have taken had half point I found out now my initial value ,COMMA theta 0 is changing .PERIOD Now ,COMMA again do the same thing - find out k 1 find out k 2 find out k 3 find out k 4 .PERIOD Now ,COMMA with this initial condition (using the same function ) what will be .PERIOD h .PERIOD h will ,COMMA be ,COMMA again 240 because I have to find it out at 480 degree temperature .PERIOD So ,COMMA now I find out that using theta on is now 675 65 that is approximate value that I got earlier and I compute this I find out using the same Runge Kutta method that this is the approximate temperature ,COMMA at at 480 seconds which is ,COMMA 594 91 degree Kelvin .PERIOD This is how we apply Runge Kutta method and it’s very useful .PERIOD So ,COMMA the exact solution of the differential equation is ,COMMA 647 57 if I solve it ,COMMA now we got it it was how much 594 91 and 594 91 ,COMMA So ,COMMA it was not very far .PERIOD It around 50 degree ,COMMA Kelvin that is ,COMMA certainly an approximation .PERIOD So ,COMMA now ,COMMA we have understood what is Runge Kutta method .PERIOD Now ,COMMA I want to write a c program for it .PERIOD Again you might find the approach to be mathematically very novel maybe intricate you may find some initial difficulty in understanding but I am sure you will understand it very fast ,COMMA but you will see that encoding it as a c program is or as a program is really simple .PERIOD Now ,COMMA you are learning C in ,COMMA future will be using MATLAB and other things you will be able to solve it very easily I am showing you the ,COMMA c solution here .PERIOD On this side I have kept what we learnt till now y ,COMMA i plus 1 ,COMMA that means in our case the temperature at 480 degree ,COMMA it is temperature at 240 degree plus this and k 1 is f x y k 2 is f x i this one f x i plus half ,COMMA h plus y ,COMMA i plus half k 1 ,COMMA h etc ,COMMA So ,COMMA now ,COMMA let us look at the program we have got the math function and everything ready .PERIOD Now ,COMMA somehow ,COMMA this ,COMMA function has to be written .PERIOD Now ,COMMA this function here its being shown as a very simple function ,COMMA it can be any function the differential equation function ,COMMA the earlier functions that we have shown or the thelog function which you will have to write .PERIOD So ,COMMA here is an example of a simple function x minus y by x plus y ,COMMA With the dy dx given that will come in this function .PERIOD So ,COMMA now you see here I did how many times .PERIOD And .PERIOD h value x 0 x 1 value all these things I read .PERIOD Now ,COMMA the key things comes here this is the implementation of the ,COMMA Runge Kutta method .PERIOD So ,COMMA very simple ,COMMA you see I am computing k 1 k one is f x 0 y 0 .PERIOD So ,COMMA I am coming to this function computing ,COMMA x 0 ,COMMA y 0 then I am going back computing k 2 for x 0 plus ,COMMA h by 2 ,COMMA h has been read .PERIOD This ,COMMA h has been read then y 0 plus m 1 I am sorry here it should be k 1 this would be k 2 all these m’s you should read it as k .PERIOD This is k 3 ,COMMA this is k 2 times .PERIOD h .PERIOD So ,COMMA actually we are computing this thing straight way and then y is assigned y plus k ,COMMA h .PERIOD So ,COMMA it will be this statement will be ,COMMA y plus k .PERIOD h and x plus .PERIOD h I am incrementing x and going on I am doing it for 2 ,COMMA intervals till ,COMMA I come over here .PERIOD So ,COMMA I ultimately come to this print f and I print the value of y for a particular x that is the Runge Kutta .PERIOD So ,COMMA this is in a straight way amenable to some c program and ,COMMA for each of these f’s ,COMMA you are calling the function every time .PERIOD So ,COMMA this is the Runge Kutta method for solving a differential equation .PERIOD So ,COMMA I will encourage you to look at other methods of ,COMMA a integration like Simpsons one third rule which is a very popular method .PERIOD This ;SEMICOLON is ;SEMICOLON known ,COMMA as ,COMMA Runge ;SEMICOLON Kutta ,COMMA fourth ;SEMICOLON order ;SEMICOLON method because ,COMMA we are taking 4 terms here but this works ,COMMA very ,COMMA well for ,COMMA most of the ,COMMA engineering problems So I will encourage you to ,COMMA write ,COMMA programs ,COMMA on this ,COMMA and later on hence forth we ,COMMA will move to another interesting aspect that is known as recursion ,COMMA a new ,COMMA style of programming which will take up in ,COMMA the next ,COMMA lecture Thank you ,COMMA Today ,COMMA we ,COMMA will be discussing ,COMMA on a ,COMMA new concept of programming ,COMMA which is very ,COMMA interesting but possibly not very ,COMMA much familiar to ,COMMA you That is ,COMMA known as Recursion You know repetitions how they ,COMMA are implemented in C ,COMMA programming Whenever ,COMMA I ,COMMA want ,COMMA to ,COMMA do ,COMMA a particular work ,COMMA For ,COMMA example ,COMMA I want to ,COMMA add 10 ,COMMA numbers then I add ,COMMA the sum ,COMMA with ,COMMA sum plus sum a ,COMMA i ,COMMA with i equal to 1 and then I repeat it ,COMMA i ,COMMA plus ,COMMA plus ,COMMA and I go on ,COMMA repeating it ,COMMA and ,COMMA this repetition ,COMMA is ,COMMA done ,COMMA in ,COMMA the form ,COMMA of ,COMMA a for ,COMMA loop ,COMMA or ,COMMA while ,COMMA loop ,COMMA Now ,COMMA recursion is ,COMMA a ,COMMA different ,COMMA way of ,COMMA doing ,COMMA this ,COMMA When ,COMMA a ,COMMA function calls ,COMMA itself ,COMMA that means a function a ,COMMA particular ,COMMA function ,COMMA will have ,COMMA some inputs ,COMMA and ,COMMA we will deliver one ,COMMA output ,COMMA Now ,COMMA you know nesting of functions that in order to achieve this objective of taking ,COMMA these inputs and delivering these outputs a function could call other functions from another function and then ultimately return to this function ,COMMA which could be done and this was known as nesting .PERIOD But ,COMMA recursion is a little different here there is a function which is supposed to be to deliver some output ,COMMA Now ,COMMA in order to do this it is actually repeating itself ,COMMA that means let me give you an example .PERIOD Suppose I have a machine ,COMMA which can generate 1 apple it can generate 1 apple produce 1 apple or maybe let us say it produces a vending machine which can deliver 1 coke alright 1 piece of coke or1 can of coke .PERIOD So ,COMMA you put in some input some commands and it ,COMMA gives you 1 coke .PERIOD Now ,COMMA it has been asked to ,COMMA deliver 5 cokes .PERIOD So ,COMMA how can you deliver 5 cokes .PERIOD It can deliver only 1 coke at a time ,COMMA So ,COMMA as we know in our knowledge of iteration this is some function function is delivering coke .PERIOD So ,COMMA it can be repeated this switch can be pressed there is a switch it can be pressed 5 ,COMMA times .PERIOD So ,COMMA first 1 ,COMMA coke comes out second coke comes out so that means this is being repeated 5 times .PERIOD So ,COMMA that is the conventional way of iterating repeating the same thing in order to get the 5 cokes .PERIOD Let us try to do it in another way let us assume that this ,COMMA machine can deliver ,COMMA 1 coke at a time ,COMMA but it can also clone itself .PERIOD So ,COMMA let us see how it looks like .PERIOD So ,COMMA I need 5 cokes but I can deliver only 1 .PERIOD So ,COMMA I can deliver only 1 coke but I will not deliver it till I am ensured that ,COMMA all the 5 cokes are deliverable .PERIOD So ,COMMA what it does ,COMMA It ,COMMA clones itself makes another one copy of itself say and activates - this using which I can deliver one coke .PERIOD So ,COMMA I asked him to give a 4 cokes ,COMMA Now ,COMMA this one can also deliver only 1 coke and finds that ok I cannot deliver everything .PERIOD So ,COMMA I keep 1 coke ready but I cloned myself and another copy I ,COMMA activate him - this machine and say please ,COMMA deliver 3 cokes ,COMMA but it cannot also deliver 3 cokes it can deliver only 1 .PERIOD So ,COMMA nothing is being delivered but only kept noted .PERIOD So ,COMMA it puts somebody another ,COMMA clone ,COMMA please ,COMMA deliver 2 cokes I have got 1 .PERIOD So ,COMMA it is also not delivering because it is not being able to satisfy the request of 2 ,COMMA cokes which has been opposed by this machine .PERIOD So ,COMMA it now comes to another clone .PERIOD So ,COMMA asks this clone ,COMMA please deliver 1 coke .PERIOD Now ,COMMA as you know this machine can deliver 1 coke .PERIOD So ,COMMA now it delivers ,COMMA 1 coke and tells ok ,COMMA I have delivered .PERIOD Now ,COMMA this one then since it has ,COMMA delivered it ,COMMA delivers the other coke ,COMMA which it could do it also tells it’s requestor its earlier version that I have done my thing you do yours ,COMMA So ,COMMA what will it do ,COMMA Remember ,COMMA it can only deliver one ,COMMA coke at a time .PERIOD So ,COMMA it will deliver another coke it passes on to its caller or its ,COMMA generator ,COMMA that I have delivered .PERIOD So ,COMMA it ,COMMA delivers the other coke ,COMMA and ultimately this one also knows that it’s child has delivered the coke .PERIOD So ,COMMA ultimately we get 5 cokes .PERIOD This was one this is one way in which ,COMMA if each of this function each of these ,COMMA blocks although they are the same function is being activated with different ,COMMA requests and they are waiting till the request can be ,COMMA fulfilled .PERIOD But ,COMMA in the meanwhile it is passing ,COMMA on the request to another one ,COMMA and as soon as this could fulfil it it passes it on and then ,COMMA it goes back .PERIOD In the case of iteration ,COMMA what would have happened 5 cokes would be generated by calling the same function .PERIOD So ,COMMA if I call each of these as functions then there is no difference between these function the only difference is the value with which it is being called and this process is successful because ,COMMA ultimately there will be a situation when this function of this machine will be able to deliver ,COMMA what it has been asked to- deliver 1 coke .PERIOD So ,COMMA that will be done .PERIOD Therefore ,COMMA we can go back ,COMMA and have ,COMMA everybody else deliver the same thing this is the principle of recursion ,COMMA I just used it as a fun example but let us now come to a little more ,COMMA serious look at this .PERIOD So ,COMMA it is a process by which a function calls itself repeatedly either directly like X is calling X or cyclically in a chain like ,COMMA X is calling Y Y is calling X basically used for repetitive computations .PERIOD So ,COMMA the best thing is you look at this example .PERIOD All of us know that factorial 5 is nothing but 5 4 times 4 times 3 times 2 times 1 .PERIOD Now ,COMMA you see the same thing I can say what is this part 4 multiplied by 3 multiplied by 2 multiplied by 1 this is factorial 4 .PERIOD So ,COMMA you see ,COMMA I am expressing factorial 5 factorial function in terms of itself 5 times factorial 4 ,COMMA and factorial ,COMMA 4 can again be expressed as 4 times factorial 3 and factorial 3 can be expressed as 3 times factorial 2 and factorial 2 ,COMMA and be expressed in terms of factorial 1 .PERIOD So ,COMMA 5 4 3 2 ,COMMA and factorial 1 is the end .PERIOD So ,COMMA that is 1 .PERIOD So ,COMMA I am certainly getting the factorial there without any further expansion .PERIOD So ,COMMA we can write in general factorial of n is n times factorial of n ,COMMA minus 1 and factorial of n minus 1 will be n minus 1 into factorial of n minus 2 factorial of n minus ,COMMA 2 will be n minus 2 into factorial of n minus 3 ,COMMA In that way it will go on ,COMMA but it will be successful only if there is a terminating point where which we often call the basis condition I hope you have understood this .PERIOD So ,COMMA two conditions are to be satisfied in order for us to write a recursive formula ,COMMA One is - it ,COMMA should be possible to express ,COMMA the problem in the recursive form just like factorial ,COMMA n is n times factorial n minus 1 and also there is another point ,COMMA that is the problem statement must include a stopping condition what was my stopping condition in the case of factorial .PERIOD Factorial 1 is ,COMMA 1 .PERIOD So ,COMMA that was the stopping condition what was the stopping condition in the example of delivering the coke .PERIOD When the machine was asked to deliver only 1 coke then it can complete .PERIOD So ,COMMA that is a ,COMMA stopping condition and then we go back .PERIOD So ,COMMA the ,COMMA stopping factorial n is 1 if n is equal to 0 or n equal to 1 otherwise it is n into factorial n minus 1 if n is greater than 0 .PERIOD So ,COMMA ultimately it will go on and ultimately it will conclude .PERIOD Another example greatest common divisor we can express that in a recursive form it is very interesting ,COMMA you can look at it that the greatest common divisor of the same number is itself that is the key to the logic GCD of m and ,COMMA m is m and GCD of m and n is GCD of m minus n and n or the other way .PERIOD So ,COMMA for ,COMMA example GCD of 15 and 5 also 75 and 15 will be GCD of ,COMMA 60 and 15 GCD of 60 and 15 would be for GCD of 45 and 15 GCD of 45 15 would be GCD of 30 and 15 GCD of 30 and ,COMMA 15 will be GCD of 15 and 15 .PERIOD Now ,COMMA I have got the stopping condition that GCD of the same number will be 15 .PERIOD So ,COMMA my result will be 15 is it clear .PERIOD So ,COMMA that is a recursive definition of GCD ,COMMA So ,COMMA most of the interesting problems can be expressed in the form of in the recursive form and that helps in writing a very second and tight code .PERIOD Here ,COMMA is another example of recursion Fibonacci series - a series like this one then one then 2 2 is what the sum of the previous 2 elements 1 plus 1 and 3 what is 3 3 is the sum of the previous two 2 and 1 then 5 what is 5 5 is the sum of the previous two .PERIOD Then ,COMMA 8 what is 8 8 is the sum of the previous two 5 and 3 then 13 what is 13 13 is the sum of the previous two 8 and 5 then 21 what is 21 21 is the sum of the previous two 13 and 8 you can see how nice this pattern is .PERIOD Can you think of ,COMMA how ,COMMA we can write it in a recursive form how ,COMMA we can express it in a recursive form .PERIOD If you think a little bit it will be very easy it ,COMMA will be something like Fibonacci number of n is Fibonacci of n minus 1 plus Fibonacci n minus 2 .PERIOD So ,COMMA n 21- this one is the sum of the earlier 2 Fibonacci sequences .PERIOD Now ,COMMA f n minus 2 will be ,COMMA what will be f n minus 3 plus f n minus 4 .PERIOD Similarly ,COMMA f n minus 1 will be f n minus 2 ,COMMA plus fn minus 3 in that it will go on ,COMMA but when ,COMMA will it stop .PERIOD The stopping condition is that Fibonacci of 1 is one .PERIOD We will see that .PERIOD So ,COMMA if we try to express it in the recursive form it turns out to be Fibonacci of 0 is 1 .PERIOD That ,COMMA means the first element is one Fibonacci of 1 is 1 .PERIOD There is a second element then Fibonacci of n is Fibonacci of n minus 1 plus Fibonacci of n minus 2 .PERIOD So ,COMMA now suppose ,COMMA I give you Fibonacci of 5 ,COMMA how do you write that .PERIOD It will be Fibonacci of ,COMMA 5 it will be Fibonacci of 4 plus Fibonacci of 3 and ,COMMA Fibonacci of 3 will be Fibonacci of 2 plus Fibonacci of 1 and Fibonacci of 1 we know is 1 .PERIOD So ,COMMA I know this and then Fibonacci of 2 will be Fibonacci of 1 plus Fibonacci ,COMMA of 0 I know that this is 1 .PERIOD So ,COMMA I get this this is done .PERIOD Similarly ,COMMA once this is done I got this number .PERIOD So ,COMMA what would that be .PERIOD This will be 2 and so third one will be 2 then Fibonacci of 4 will be 2 plus 3 5 in that way it will go on .PERIOD Now ,COMMA we see how we can write a function how we can express this Fibonacci or this factorial the recursive expression in the form of a function ,COMMA Let us see here I am writing this you had seen earlier functions written for factorial .PERIOD So ,COMMA you can see ,COMMA factorial n is if n equal to 0 return 1 otherwise return n times factorial n minus 1 .PERIOD So ,COMMA what will happen ,COMMA How will this be executed .PERIOD What will it return .PERIOD While returning it will again call this function again this function will start in the same way just by ,COMMA replacing n with n minus 1 and here ,COMMA it will come out with n minus 2 .PERIOD So ,COMMA it will again be called with n minus 2 and so on and ,COMMA so forth .PERIOD It will go on .PERIOD Now ,COMMA how is that executed .PERIOD The function as I said is not executed immediately when I asked that coke machine to ,COMMA deliver 5 ,COMMA cokes it did not deliver immediately it could deliver 1 coke but ,COMMA held it back ,COMMA but created another machine to deliver n minus 1 ,COMMA cokes and that machine ,COMMA held it back and generated another machine to ,COMMA deliver n minus 2 cokes .PERIOD In this way it went on .PERIOD They are kept aside on a stack one after another until the ,COMMA stopping condition is encountered .PERIOD So ,COMMA it remembered that I have to deliver one .PERIOD So ,COMMA if you look at this ,COMMA I do not know whether that will visible or not ,COMMA Here here you see everybody remembered that ,COMMA I have to deliver but they did not deliver when the stopping condition was met after that this back chain ,COMMA started .PERIOD So ,COMMA they are ,COMMA kept .PERIOD aside .PERIOD but not delivered immediately .PERIOD Then the function calls are executed in reverse order .PERIOD Again ,COMMA you can see that they are executed in reverse order in order to get the solution .PERIOD Say I am calculating factorial 4 first the function calls will be processed ,COMMA Factorial ,COMMA 4 is factorial 4 times factorial 3 then factorial 3 is 3 times factorial 2 factorial 2 is 2 times factorial 1 factorial 1 is 1 times factorial 0 and factorial 0 is 1 .PERIOD Now ,COMMA the actual values will return in the reverse order 1 into 1 is 1 ,COMMA So factorial 1 is complete .PERIOD So ,COMMA 1 into 2 is 2 that goes ,COMMA here fact 2 is 2 in that way it goes on .PERIOD So ,COMMA it goes back in this direction ultimately we get the result from here .PERIOD So ,COMMA the actual values return in reverse order .PERIOD So ,COMMA factorial 0 ,COMMA is 1 factorial 1 is 1 times 1 is 1 now the reverse order is being done 2 into 1 is 2 3 into ,COMMA 2 ,COMMA is 6 ,COMMA and 4 into 6 6 24 in that way it is being computed .PERIOD So ,COMMA here is a stack .PERIOD Stack is a data structure stack is a way of storing data where we stored the data just ,COMMA where whatever comes in first obviously goes out last because if I put something here and above that ,COMMA I put something just like a stack of books ,COMMA you will have to take it out in the other way this ,COMMA one will come out first then this one will come out ,COMMA then this one will come out .PERIOD So ,COMMA let us see how it works .PERIOD So ,COMMA factorial 4 factor step 0 executes factorial 4 .PERIOD Now ,COMMA return 4 times factorial 3 you see here is the recursive call it is calling itself return 4 times factorial 3 what is factorial 3 ,COMMA oh you do not know what is factorial 3 ,COMMA Return 3 times factorial true 2 ,COMMA Oh you do not know what is factorial clue 2 .PERIOD Then return 2 into factorial 1 or you still do not know what is factorial 1 Return 1 into factorial ,COMMA 0 and so now you know factorial 0 is 1 .PERIOD So ,COMMA you get 1 and now you could not answer these questions earlier so I have broken it down and given you an easier solution ,COMMA And so now you go back here and you return one into one then you ,COMMA go back here return 1 into 2 return 2 and you go back here ,COMMA This is ,COMMA what is meant by recursion if we ,COMMA redo it if we .PERIOD So ,COMMA here is the computer implementation of that factorial if n is less than 0 return 1 return n times factorial n ,COMMA minus 1 .PERIOD So ,COMMA computes 5 .PERIOD So ,COMMA it is again recursively expressing itself f 4 is being expressed in terms of f 3 everything is being expressed f is being expressed in terms of f f 3 is being expressed in terms of f 2 f ,COMMA 2 is being expressed in terms of f 1 f 1 is being expressed in terms of f 0 and I know what f 0 is .PERIOD So ,COMMA f 0 is 1 .PERIOD So ,COMMA I ,COMMA go back and I know that now f 0 is 1 .PERIOD Therefore ,COMMA f 1 is 1 into 1 and in this way I go back .PERIOD Now ,COMMA you ,COMMA see it had ,COMMA expanded in this way .PERIOD Now ,COMMA it is ,COMMA shrinking 1 into 1 is 1 .PERIOD So ,COMMA now I know factorial 1 .PERIOD So ,COMMA this will shrink now I know what is factorial 2 that is 2 .PERIOD So ,COMMA this will shrink 3 into 2 6 it is ,COMMA shrinking coming here - 24 and then here it is 120 that is how as if in a spring it got ,COMMA expanded and then it contracted back this is recursion return it ultimately returns factorial 5 to be 120 .PERIOD Another ,COMMA example will be ,COMMA Fibonacci number .PERIOD We ,COMMA will explain it in the next lecture .PERIOD So ,COMMA we are looking at recursion and that is a new style of programming where we can express a particular function in terms of itself like I can express factorial n in terms of factorial n into factorial n minus 1 ok .PERIOD Another ,COMMA very common example and easy example of recursion is Fibonacci numbers we have already told you what Fibonacci sequence is the Fibonacci sequence can be expressed as f 0 the 0th Fibonacci number is 0 .PERIOD The ,COMMA next one is also 1 .PERIOD And henceforth all other ones are sum of the previous two so 0 1 1 2 3 5 8 13 21 so and so forth ,COMMA Therefore ,COMMA we should be able to define it in terms of a recursive function because ,COMMA you can see this function f and this function f are the same only variations are in ,COMMA these parameters I am ,COMMA expressing the same function in terms of these parameters .PERIOD So ,COMMA the function definition will be is very simple f int end some integer if n is less than 2 then return n if n is less than 2 if it is 0 then 0 .PERIOD If it is 1 ,COMMA then it is 1 otherwise what did you return Return f n minus 1 plus f ,COMMA n minus 2 sum of the previous 2 ,COMMA Fibonacci numbers .PERIOD Now ,COMMA this is interesting because again if you see how this will be computed it will be first expanding ,COMMA what are the things ,COMMA I have to compute and ,COMMA when it meets stopping condition then it starts collecting back and comes back .PERIOD If ,COMMA I want to compute Fibonacci of 4 how many times will that function be called .PERIOD Let us look at the expansion of this .PERIOD So ,COMMA how will ,COMMA it happen I want to compute ,COMMA Fibonacci of 4 ,COMMA which is ,COMMA Fibonacci of 3 ,COMMA Fibonacci of 2 these ,COMMA 2 should be added .PERIOD So ,COMMA I have not yet have found out anything I am just decomposing the problem .PERIOD There is a very very important concept that ,COMMA in order to solve the problem ,COMMA I want to decompose ,COMMA it into smaller sub problems .PERIOD For f 4 I have to solve it by solving f 3 and f 2 .PERIOD Now ,COMMA for solving f 3 ,COMMA I have to solve f 2 and f 1 I further ,COMMA decomposed it ,COMMA Now ,COMMA for solving f 2 I have to solve f 1 and f 0 .PERIOD Even now the entire thing has not been broken down f 2 for that ,COMMA I have to solve f 1 and f ,COMMA 0 .PERIOD Now ,COMMA I have expanded the whole thing .PERIOD Now ,COMMA I know that f 1 is 1 f 0 is 1 .PERIOD So ,COMMA f 2 will be 1 plus 1 2 ,COMMA this is known all these endpoints of this structure are known - 1 0 1 1 0 1 .PERIOD So ,COMMA I go on adding them and ultimately I will get f 4 .PERIOD Now ,COMMA it is in a way inefficient ,COMMA because the same thing is being computed repeatedly but to a practiced programmer ,COMMA it will make your programming much more easier I mean less line lines of codes if you can express it in a much better way .PERIOD So ,COMMA you can see here how many times the function was called 1 2 ,COMMA 3 4 5 6 7 8 9 times 9 times the same function was called in order to compute f 4 .PERIOD Now ,COMMA the stopping condition of the base condition is very very important .PERIOD So ,COMMA if n is 0 or n is 1 then I return 1 this is the base case unless I reach at this point I will not be able to compute the entire solution Return Fibonacci of n minus 1 plus Fibonacci of n minus 2 - that is the code for the Fibonacci ,COMMA number .PERIOD Now ,COMMA whenever I will have too many calls in that case ,COMMA I should avoid them as much as possible and .PERIOD So ,COMMA what ,COMMA is the difference Between recursion and iteration .PERIOD In iteration there is an explicit loop ,COMMA for ,COMMA i equals 0 i less than equal to n minus 1 i plus plus .PERIOD So ,COMMA there is an explicit loop whereas in case of recursion it is repeated function calls Termination iteration if the loop condition is no longer satisfied while this condition do if that condition fails then we come ,COMMA out of the loop .PERIOD In ,COMMA the case of recursion the base condition must be recognised whenever we are getting the base condition factorial one or factorial 0 Fibonacci of 0 or ,COMMA Fibonacci of 1 .PERIOD So ,COMMA those are the base conditions if wrongly programmed ,COMMA both can have infinite loop .PERIOD So ,COMMA the performance wise iteration often gives faster result ,COMMA but ,COMMA it is a good software engineering practice to gradually get accustomed to recursion as you do more and more programming you will see that you will be able to express the things in a much subtler way .PERIOD So ,COMMA whenever there is ,COMMA a performance issue try to avoid recursion ,COMMA it will require additional memory also .PERIOD There is a particular type of storage that ,COMMA is required in recursion that is known as stack .PERIOD Stack is a last in first out type of structure Briefly ,COMMA let me tell you how this thing is done ,COMMA because stack is nothing ,COMMA but a structure where we can push in data from one side - say I put say 5 first I push .PERIOD So ,COMMA 5 comes here ,COMMA then I push 4 then I do ,COMMA n minus 1 3 is ,COMMA pushed ,COMMA then 2 is pushed then n minus 1 again and 1 is pushed .PERIOD Now ,COMMA when I take out the data the data will come out as 1 then 2 then 3 ,COMMA then 4 then 5 in the reverse order .PERIOD So ,COMMA the 2 operations are push and pop Popping out from the stack and pushing inside the stack .PERIOD So ,COMMA this stack data structure becomes very handy for implementation of function recursive functions we will show some examples .PERIOD Like ,COMMA here ,COMMA for example I want to compute the gcd of a b .PERIOD Now ,COMMA typically ,COMMA what happens is I call this gcd is computed I return ,COMMA Now ,COMMA here when ,COMMA I call something say ,COMMA I ,COMMA was here my program flow was here ,COMMA I went in .PERIOD So ,COMMA when I went in all the local variables and everything here were stored and I had to remember ,COMMA where I will be returning back .PERIOD So ,COMMA all those things are stored in the stack and without a stack data structure it is very difficult to implement recursion ,COMMA and for that matter any function call .PERIOD So ,COMMA you see here is a function and so all those return addresses are stored before call this stack was empty now after its returning it is taking ,COMMA out from the top of the ,COMMA stack and again I come to know where I was .PERIOD So ,COMMA that is so similarly ,COMMA you see here N choose r a b that means n c r n choose r ,COMMA if I compute then ,COMMA n choose r is ,COMMA factorial r divided by factorial of n minus r or some people write it in this way - factorial of n minus r .PERIOD So ,COMMA how did I do that .PERIOD So ,COMMA how ,COMMA can I implement it .PERIOD So ,COMMA here n c r has been called from here factorial has been called and then where do I return I have to come here ultimately I have to return here .PERIOD So ,COMMA I should not lose the path .PERIOD So ,COMMA what the ,COMMA stack does is when I make the call the first call the local variables here will be stored here on the stack and again ,COMMA I make another call from here .PERIOD So ,COMMA local variables are there I am calling fact as I go in here the local variables here has ,COMMA stacked up and then when I return this part will be taken out and passed on to this .PERIOD So ,COMMA as it returns this part is taken out and I am here it can again continue and then it returns when it returns here this part will be taken out .PERIOD So ,COMMA that is for normal function call ,COMMA how the stack remembers ,COMMA where I should go back ,COMMA In the case of recursive calls what happens what we have seen is activation record gets pushed into the stack when a function ,COMMA I will call is made .PERIOD In ,COMMA recursion a function calls itself .PERIOD So ,COMMA several function calls are going on with none of the calls getting back ,COMMA So ,COMMA all the activation records are collected .PERIOD So ,COMMA you need not delve into that too much ,COMMA I will show it by an example of a computing factorial ,COMMA So ,COMMA an activation record is the local variables ,COMMA and the return value what the function should return ,COMMA and where it should ,COMMA return .PERIOD So ,COMMA that with that say the main function is calling fact 3 and here is a fact n ,COMMA if n equal to 0 return one otherwise n times fact n minus 1 .PERIOD So ,COMMA main calls fact .PERIOD So ,COMMA when it calls the value n is equal to ,COMMA 3 so there is no return value the return address is in the main ,COMMA I am remembering that .PERIOD Next again fact is calling itself ,COMMA so now fact is calling fact 3 is calling fact 2 and my return address is fact .PERIOD So ,COMMA you see ,COMMA it has been stacked up .PERIOD Next fact 2 will call fact 1 so what is this .PERIOD The stack is growing and its return is in fact .PERIOD Now ,COMMA next time ,COMMA it will be fact 0 ,COMMA Till now there was no return value .PERIOD Now ,COMMA the return value is 1 and ,COMMA return addresses fact .PERIOD So ,COMMA as I do that I return ,COMMA then I have got a return value ,COMMA because now I have come to this point ,COMMA So ,COMMA 1 into 1 will be 1 and I ,COMMA am returning to fact as I return the stack will ,COMMA contract and ,COMMA what is the return result 2 times 1 that is 2 that is a factorial 2 and ,COMMA I am returning to fact .PERIOD So ,COMMA I return again .PERIOD Now ,COMMA I am coming for last time in the fact with n equal to 3 that started here .PERIOD So ,COMMA and the result is 6 .PERIOD Now ,COMMA I return to main ,COMMA So ,COMMA at every stage look at this ,COMMA I know I remember from where I ,COMMA started and from where I am returning back nothing is lost using this stack ,COMMA So ,COMMA stack is a very interesting data structure that helps us in many ways especially in implementing things like recursion .PERIOD So ,COMMA one assignment that ,COMMA I am leaving to you do ,COMMA it yourself trace the ,COMMA activation ,COMMA record for the following version of ,COMMA Fibonacci .PERIOD Please note down the code include stdio dot .PERIOD h int f f is the Fibonacci function a and b if n is less than 2 return n if it is 0 then return 0 .PERIOD If it is 1 return 1 otherwise a is ,COMMA fn minus 1 b is fn minus 2 ,COMMA I have done it in a different way fn minus 1 and fn minus 2 .PERIOD So ,COMMA if n minus 1 has to be solved separately and fn minus 2 should be solved separately then we will return a plus b then the main will ,COMMA print .PERIOD So ,COMMA just for fun you try to draw the ,COMMA activation record of ,COMMA this version of the function please note it down ,COMMA take some time and note down this function and you see on this side ,COMMA I have shown .PERIOD How the activation record will look like local variables you can see n a and b Return value you have to keep whether it is ,COMMA in Fibonacci or in main either in main or in x or y ,COMMA This is x and ,COMMA this is y alright not these ,COMMA 2 these are not aligned properly ,COMMA Here is the return to the main either return to main or to x or to y and ,COMMA what is the return value Draw the activation record of this and then we will see how much you could do it I am sure you will be able to do it .PERIOD So ,COMMA today ,COMMA we have learnt a new style of programming that is recursion ,COMMA and also we discussed in the last class .PERIOD So ,COMMA recursion is a type of writing functions where the function calls itself and that makes many functions to be written much more subtle and that is a very good software engineering practice Although as a ,COMMA beginner .PERIOD If you find difficulty in that you need not bother too much about it ,COMMA you have got iteration at your disposal and you can solve most of the problems with iteration practically all the problems you can do ,COMMA May be in some cases ,COMMA it may be a little more difficult to write ,COMMA but ultimately it is will be possible .PERIOD So ,COMMA if you find difficulty with recursion you can set it aside for the time being but we have to discuss it because that is a very nice way of writing functions we will continue with the concept of structures in the next lecture a new thing will be introduced that is called structure .PERIOD Thank you ,COMMA Earlier we had talked about storage of data in arrays .PERIOD Now ,COMMA what we found ,COMMA what we mentioned in the case of arrays is that in an array we can store data only of a particular type say an array of integers or an ,COMMA array of floats or an array of characters ,COMMA but we could not mix different types in the same array ,COMMA For example we had faced the problem of representing the student’s database where we will have the student’s name as well ,COMMA as the student’s marks .PERIOD So ,COMMA we needed something like ,COMMA this actually that is what was desired that will have the names here and the names will be nothing but an array of characters .PERIOD So ,COMMA here will be some names ABC and here will be the marks 56 A .PERIOD Now ,COMMA this representation requires two arrays one is the representing the names and the other is representing marks ,COMMA Now ,COMMA however as the diagram is showing here we are trying to represent them in an unified structure in the same structure ,COMMA but that is not possible in the case of an array ,COMMA here we have got ,COMMA 2 different data types .PERIOD This is an array of characters ,COMMA and this is an integer .PERIOD For ,COMMA example we can we can see that if I had stored something lets say .PERIOD For example ,COMMA I want to store a graph where at every point 1 2 3 ,COMMA seconds for example this time in ,COMMA seconds and here ,COMMA I am measuring the temperature and ,COMMA if I have a graph which is something like this ,COMMA I cannot say that at every point the temperature will also be an integer therefore .PERIOD So ,COMMA suppose here at point number 2 the temperature is 50 34 at point number 3 the temperature can ,COMMA be 70 2 .PERIOD So ,COMMA if I had tried to represent that in the form of a 2D array in that case it ,COMMA wouldn’t have been possible because a 2D array is also an array and ,COMMA therefore is of only one type .PERIOD We ,COMMA have to declare a 2D array as an array of integer or as an array of characters or array of float .PERIOD So ,COMMA I cannot represent that in a 2D array where one side say for example one column will be temperature and another ,COMMA column will be the time its time and temperature .PERIOD So ,COMMA that ,COMMA wont possibly be ,COMMA executed in a 2 dimensional array ,COMMA because while time will be an integer (1 2 3) ,COMMA temperatures can ,COMMA be something different 50 6 70 3 etc .PERIOD So ,COMMA an array is not possible .PERIOD So ,COMMA our question is then what is the type of data structure what is the type of arrangement by which I can represent data of different types together .PERIOD The answer to that is what we will be looking at today that is structure Structures ,COMMA in C allows us to represent a ,COMMA combination of different data types ,COMMA For example ,COMMA let me give an example of a structure say I want to define student data and student data will consist of the student name lets say the department of the student roll number of the student may be the CGPA of the ,COMMA student grade point average of the student etc .PERIOD If I want to store them together as a common piece the student data ,COMMA then this ,COMMA entire thing ,COMMA has got components of different data types .PERIOD For example what will be student name say for example .PERIOD Amith will be either a string or an array of character department somebody can say mechanical engineering that can also be a character string whereas roll number .PERIOD 748 will be an integer ,COMMA and CGPA say 7 8 will be a floating point number .PERIOD So ,COMMA what we can see that in ,COMMA order to store the student data we have to have a mixture of different data types .PERIOD So ,COMMA a structure allows us to do exactly this where I can consider this student data as a ,COMMA structure .PERIOD So ,COMMA let me redraw it in a different way .PERIOD So ,COMMA I draw a box which is ,COMMA representing the student data I name it stud data and I have got different fields in this .PERIOD Each field has gotten some identification .PERIOD So ,COMMA this field is storing the name and this ,COMMA field is basically of a type character array .PERIOD So ,COMMA another field is name is department and its type is also character array another field remember that I every time ,COMMA I am using that term field of student data .PERIOD So ,COMMA name department ,COMMA what else do we have - ,COMMA role number which will be of type integer and ,COMMA CGPA which will be float ,COMMA Suppose there is no other field .PERIOD So ,COMMA we call this entire box to be a structure - ,COMMA this is a structure and what is contained in this structure .PERIOD There are 4 fields that define the structure - the 4 fields are name department roll number and CGPA these 4 fields are defining a structure .PERIOD Now ,COMMA C allows us to define structures of this type and we learn how ,COMMA we can define such things and let us go ahead a little bit what is a structure ,COMMA It is a convenient tool for handling a group of logically related data items here ,COMMA Of course the logically related data items were the different information fields or information component that are related to a particular student .PERIOD So ,COMMA till now we ,COMMA saw very simple data structures like array .PERIOD Now ,COMMA here for example I have got related components - student name roll number and marks or CGPA or for example a real part and imaginary part of a complex number .PERIOD For ,COMMA example if I had tried this ,COMMA a complex number (all of ,COMMA you know that a complex number is expressed as a plus ib) where x is a complex number a plus ,COMMA i b .PERIOD So ,COMMA maybe x is equal to 4 plus i 3 .PERIOD All of you are aware of that .PERIOD Now ,COMMA how do I represent I know how could ,COMMA I can ,COMMA represent an integer I know how I can represent a floating point number but now the question is how I can represent such a complex number .PERIOD Now ,COMMA well let me have a structure like this ,COMMA which will have 2 ,COMMA fields one is the ,COMMA real part there is a real part .PERIOD So ,COMMA I call it the real part another part is the imaginary part and I can store this number simply as 4 3 .PERIOD So ,COMMA the imaginary part is 3 and the real part is 4 .PERIOD So ,COMMA the complex number instead of being an integer or a float is essentially a structure .PERIOD This is another very common and easy use of structures ,COMMA So ,COMMA whenever I refer to this variable x which is of type complex I will be referring to this structure and neither at 4 or nor at 3 I will be looking at this whole thing .PERIOD So ,COMMA so it ,COMMA helps us in organising the complex data in a much ,COMMA more meaningful way ,COMMA The individual structure elements that I was talking of ,COMMA which ,COMMA i was mentioning as fields is also known as ,COMMA members .PERIOD Now ,COMMA you will also find other names of structures .PERIOD So ,COMMA structures ,COMMA are sometimes called records and each of these horizontal boxes that we are drawing ,COMMA are called fields of that record or when we referred to it as structures we call each of those smaller boxes as ,COMMA members .PERIOD So ,COMMA the composition of a structure can be defined ,COMMA as follows .PERIOD See in a structure I can put a ,COMMA tag now this is very important ,COMMA what is the tag that ,COMMA I am putting over here .PERIOD Say for example earlier ,COMMA I was talking of student data .PERIOD So ,COMMA my tag could be stud data as I had written .PERIOD So ,COMMA I have to write struct stud data and inside that I have got several members and what where my members .PERIOD My member was name my member was roll number ,COMMA department and CGPA .PERIOD So ,COMMA I had 4 members .PERIOD Now ,COMMA each of these were of different types that is something which is very important to understand ,COMMA So ,COMMA struct is the required keyword ,COMMA I must write this word - struct .PERIOD This ,COMMA ‘tag’ is the name of the structure like stud data .PERIOD So ,COMMA that is a structure .PERIOD Just as we had done for other variables ,COMMA we had done say int x float y etcetera .PERIOD So ,COMMA here also instead of int or float ,COMMA I have to say struct and what is struct .PERIOD That is defined .PERIOD So ,COMMA first of all I have to define the structure Int and float ,COMMA are defined by default any c compiler will understand what int or float is but if I write struct then by default the compiler will not understand what the structure is ,COMMA because there can be different structure one structure can be ,COMMA for student names one structure can be for book details - if I had thought of a book detail ,COMMA and wanted to store that in a structure what will be the components .PERIOD The ,COMMA members will be of course the title of ,COMMA the book the author of the book the publisher year of publication the ISBN number etc .PERIOD So ,COMMA therefore each of these .PERIOD members will again be of different types ,COMMA So ,COMMA it will be a heterogeneous ,COMMA organisation just as it was with the student data .PERIOD If I want to define books for example I would have to write struct book followed by the definition of the ,COMMA members .PERIOD So ,COMMA this is equivalent to as if I am drawing a structure and its name is becoming - book and ,COMMA I am defining what are the members of this structure .PERIOD Let us move a little ahead .PERIOD So ,COMMA member 1 member 2 etcetera are individual member declarations .PERIOD We ,COMMA will see more examples of this .PERIOD The individual members can be of different types and ,COMMA that ,COMMA is the beauty of structure the individual members can be ordinarily ,COMMA variables pointers arrays or other structures it can even be other structure that is very important it can be some variable just as name or it can be an array - say name was a character array or it can even be a structure .PERIOD That means I can have a structure within a structure .PERIOD So ,COMMA it is possible that I will have something like this ,COMMA One field of the structure is a character array another field of the structure can be an integer variable or another field of the structure can be a structure itself it can be another structure where there are more ,COMMA members inside ,COMMA that is also possible .PERIOD So ,COMMA that is the ,COMMA beauty and the flexibility that we get from structures .PERIOD So ,COMMA the member names within a particular structure must be distinct from one another we cannot put the same name to 2 different structures .PERIOD Once ,COMMA a structure has been defined individual structure type variables can be declared as (we will ,COMMA see) struct tag variable one variable 2 variable n I think it will be much more clearer if we go through an example let us look at this example A .PERIOD First ,COMMA I start with a structure definition - struct student ,COMMA and then I put just 2 parentheses to show that there will be some ,COMMA members defined inside .PERIOD Now ,COMMA how do I define the members ,COMMA I say that one member is name which is an array of character .PERIOD The next one is roll number which is an integer .PERIOD So ,COMMA roll number is a variable I said ,COMMA that a structure can field can be variable or can be array or can be another structure .PERIOD So ,COMMA here is an example where ,COMMA you have an array and a variable of type int again total marks can be integer data of birth can be character and sizes .PERIOD So ,COMMA data .PERIOD birth is again of type array character array because the date of birth can be say 10 Jan 2010 .PERIOD So like that it can be a character array .PERIOD So ,COMMA this is ,COMMA how a structure is defined .PERIOD Now ,COMMA I am now defining the variables ,COMMA I have defined the structures here .PERIOD So ,COMMA I know once the compiler reads this and finds that well ,COMMA I some definition of some variable called student ,COMMA I know that that is a structure and what is the constituent of that structure ,COMMA That will be these fields .PERIOD Now ,COMMA this is just a type - just as we had int float etcetera or char those where data types ,COMMA Now ,COMMA I am saying that I have got a structure of type this ,COMMA where there are 4 fields but the data has not yet been put .PERIOD This is very important though there are 4 fields one field is name and ,COMMA I say that is an ,COMMA array of thirty characters and there is a role number roll which is an int total marks is an integer and date of .PERIOD birth is an array but you see that there are no data already put inside this array .PERIOD Now ,COMMA we have name variables - a 1 a 2 a 3 are variables of type student structure and what is that student structure this is a structure .PERIOD So ,COMMA a 1 will just be a copy of this structure and a variable a 1 may have (if ,COMMA I take ,COMMA this) may have some name like amith ,COMMA here roll number may be 560 and total ,COMMA maybe 700 and date of ,COMMA birth can be something .PERIOD That is one particular instance of this particular structure that has been defined .PERIOD This part must be very clear to all of you .PERIOD So ,COMMA I have defined 3 variables a 1 a 2 and a 3 each of ,COMMA type ,COMMA what kind of type type structure student .PERIOD So ,COMMA type is struct student .PERIOD We have got these fields as its constituents so struct student tells us a new data type and these are the variables of ,COMMA the data type .PERIOD So ,COMMA it is also possible to write it in a much more compact form like .PERIOD So ,COMMA struct tag and then i write struct student and I declare char name 40 int roll no int total marks char date of ,COMMA birth 10 and ,COMMA then ,COMMA I could have put the variables a 1 a 2 a 3 inside this note here the semicolon is ,COMMA coming here that is that is the end of the definition .PERIOD So ,COMMA here I have done it in a much more compact form compared to the earlier one ,COMMA In this form ,COMMA of course this ,COMMA tag is optional ,COMMA (Refer Slide Time: 22:40) .PERIOD So ,COMMA what I mean is say I define once again let me give an example to you say a complex number I can write that as struct complex and members are int(need not be always int) .PERIOD So ,COMMA instead if I want to store data of ,COMMA type say 4 5 plus i ,COMMA 7 ,COMMA 2 ,COMMA then I would need ,COMMA float real float imaginary and that is the end of the structure and I can say struct complex x 1 ,COMMA x 2 this is one way of representing structure .PERIOD What does ,COMMA it mean ,COMMA It means that I have first defined the structure called complex which will have these 2 components and then I defined that x 1 and x 2 are 2 variables of ,COMMA type this complex .PERIOD If I do it in this way ,COMMA I have got an advantage that later on I can define some other variables also ,COMMA y1 y 2 over ,COMMA here or I can also define it as struct float real part .PERIOD So ,COMMA that you do not face confusion let us float real part float imaginary part and then I can say ,COMMA x 1 x ,COMMA 2 .PERIOD Note that here I have not written the thing complex I have not written it ,COMMA I could have written it would not have affected me in any adverse way but it is not necessary to write it over here .PERIOD So ,COMMA if I write this how will the compiler interpret it Always you should think ,COMMA when compiler looks at it ,COMMA what will it think what would it possibly do .PERIOD So ,COMMA the compiler is trying to understand ,COMMA ok now there is no ambiguity because it knows that ,COMMA x 1 and x ,COMMA 2 are 2 variables of type structure and the structure is defined here itself I need not give any name but the advantage of giving a name is say I give the name complex here .PERIOD Here ,COMMA I have defined x 1 and x 2 if I had done it ,COMMA in this ,COMMA way I could have later on down the line in this program have written ,COMMA struct complex say y 1 z 1( its possible because I have already defined struct complex ) .PERIOD So ,COMMA there is a choice over here which you can think of let us go ahead a ,COMMA little bit .PERIOD So ,COMMA in this case the tag is optional .PERIOD So ,COMMA here is an example we will conclude this lecture with this example .PERIOD So ,COMMA struct student character name thirty ,COMMA int ,COMMA roll number int total marks character data birth 10 a ,COMMA 1 a 2 a 3 that means a 1 a 2 ,COMMA and a 3 are 3 students 3 pieces of student information or I could have done it in the way I have just now shown the same thing without giving any tag over here these are equivalent .PERIOD Now ,COMMA next lecture we will talk about ,COMMA how do you process a structure that will come in the next lecture .PERIOD So ,COMMA in the last lecture we had seen how a structure is defined .PERIOD Now ,COMMA we will see more examples of that ,COMMA in this course .PERIOD So ,COMMA today we will be ,COMMA concentrating on how a particular structure can be processed .PERIOD In order to process a structure we can we have to process every field of the structure .PERIOD We can operate on every field of the structure .PERIOD So ,COMMA we can see that a structure how can we access the member of a structure ,COMMA Say ,COMMA for example there is a variable like name .PERIOD So ,COMMA we can say ,COMMA overalls name of the structure is say student all right and ,COMMA in the inside student we have got name roll number etcetera now I can .PERIOD So ,COMMA my variable is say all right ,COMMA let me say I have defined like this struct student then all these then the variables are a 1 a 2 a 3 I am sure ,COMMA you are getting confused a little bit .PERIOD So ,COMMA let us define it in the proper way as we are done in the last class .PERIOD Suppose ,COMMA I define struct student char name 10 int roll number all right ,COMMA suppose only two fields are there and I also say that the variable is variables are x 1 comma x 2 these are 2 variables of the type of this structure whose name is student .PERIOD So ,COMMA what is my variable named x 1 .PERIOD So ,COMMA here ,COMMA I can say x 1 x 1 dot this is the dot operator which tells about the member now which member say I want to get the roll number x 1 dot roll number assign 720 all right .PERIOD So ,COMMA this is how ,COMMA I can get access to a particular member of a particular structure .PERIOD So ,COMMA I can also ,COMMA similarly write x 2 dot name .PERIOD Because ,COMMA that ,COMMA members name is name right name 3 is j all right because name has got a 10 field character ok I could have written x 2 ,COMMA dot name and I could have assigned a string to this all these are possible .PERIOD So ,COMMA if this is clear then we go ahead a little bit were variable refers this variable is referring to is referring to the name of a structure type variable and member is the referring to the field or the particular member element ok ,COMMA The examples are a 1 dot name ,COMMA a 1 dot roll number a 3 dot date of birth etcetera .PERIOD So ,COMMA now here let us take the old example that we had seen that is a complex number and how we can perform complex number addition .PERIOD Now ,COMMA just to ,COMMA refresh your mind say ,COMMA I have I have got two complex numbers x ,COMMA and y and I want to perform x ,COMMA plus y ,COMMA Suppose x is a plus i b and y is m plus in then x plus y is the real ,COMMA parts are added separately .PERIOD So ,COMMA it is a plus m plus i then the imaginary parts are added separately b plus n that we know from our school level knowledge .PERIOD Now ,COMMA how can ,COMMA I perform this addition using the concept of a structure .PERIOD So ,COMMA here you see in the program ,COMMA we define a ,COMMA structure called complex ,COMMA and there are three variables a b and c of this structure type of type complex all right .PERIOD Now ,COMMA what are .PERIOD There that components are one is float sorry I am sorry one is real part another is ,COMMA I should rename this is actually the imaginary part its renamed in this way here in this program it would have been better if we I had written float real part float imaginary part however .PERIOD Now ,COMMA scan f I am reading the two numbers a is a variable a is real part is being read and a is complex part is being read note the format statements because both of them are float we are putting ,COMMA percentage f all right ,COMMA And so ,COMMA I read a .PERIOD So ,COMMA you see normally I would have just done scan f ,COMMA amperes and a but here ,COMMA I have to do separately I have to read the real part and the imaginary part ,COMMA then the sum is being stored in c .PERIOD So ,COMMA c is real will be ,COMMA c is the sum ,COMMA So ,COMMA it is real will be sorry ,COMMA it is a real part will be the real part of a plus the real part of b and the imaginary part or the as it is written here complex part is the complex part of imaginary part of a plus the imaginary part of b .PERIOD Then I am printing look at how I am printing it printing percentage f ,COMMA the real part of ,COMMA c and plus then I put j and then the complex part of c .PERIOD So ,COMMA what is being done is suppose I have got 2 numbers 3 4 plus here I am using j some people I usually use ,COMMA i or j whatever you do .PERIOD So ,COMMA you write 7 2 that is a is real part is this and b is real part is say 4 6 plus j 3 8 now if I add them c will be these real parts are being added ,COMMA So ,COMMA it is 8 0 plus the imaginary part is added that is 11 j 11 all right .PERIOD So ,COMMA what will be printed is 8 ,COMMA plus j then the complex part 7 0 .PERIOD So ,COMMA this is a I think this is clear to you this not very difficult to understand let us move ahead .PERIOD So ,COMMA you have seen here if you note here you have got the structure definition specified ,COMMA and here are the very variable definitions .PERIOD And here we are doing the reading and adding them part by part how am I accessing the members I am accessing the members ,COMMA using this dot operator and whenever I am reading the member I am actually reading the members I am not reading the structure as ,COMMA a ,COMMA whole .PERIOD Now ,COMMA one thing to note is when ,COMMA I am declaring this structure inside the main ,COMMA then the ,COMMA scope of these variables real and complex etcetera or this structure as such is its scope is within the main .PERIOD So ,COMMA if a structure is defined within a function then as we exit that function the life of that particular structure will end at that point .PERIOD Now ,COMMA there are some things which we can do in a much more simpler way you remember that in the case of arrays we could not compare arrays together .PERIOD That array a 1 is equal to a 2 that ,COMMA was not possible ,COMMA if we had to compare the array I had to check them element by element .PERIOD On ,COMMA the other hand in the case of a structure a structure variable can be directly assigned to another structure variable of the same type .PERIOD For example here ,COMMA if a is a structure then I can assign another structure b to it directly .PERIOD So ,COMMA all the elements if they are of course of the same type .PERIOD So ,COMMA here is one structure here is another structure now if I do this operation that means assignment then this will be copied here this will be copied ,COMMA here this will be copied here this will be copied here all right .PERIOD But ,COMMA if a and b where arrays in that case that would not have been possible that a is an array and b is an array .PERIOD So ,COMMA the elements just by assigning a ,COMMA assign b I could not assign these ,COMMA b elements to a ,COMMA that is not allowed in the case of an array however that is possible in the case of a structure Secondly now here one important thing is ,COMMA that they must be of the same type all right otherwise of course the members and the fields will not match .PERIOD So ,COMMA a 1 assigned a 2 I can do all the individual ,COMMA members get assigned Two structure variables cannot be compared for equality or inequality .PERIOD Now ,COMMA this is important that two structure variables I cannot compare them that structure a 1 whether that is equal to a 2 that will have to do compare I mean what I said just a couple of minutes back was inadvertent that is wrong Structures we cannot compare ,COMMA we can assign in a short but comparison of structures we cannot do as a whole all right Two structure variables cannot be compared for equality or ,COMMA inequality now for that what we have to do we can write a simple function say I can write and you can take it as an assignment that we can write struct ,COMMA comp struct c m p where you will take 2 structures as input and we will compare them and how do you compare them ,COMMA We will do say variable a 1 dot member 1 equals to is whether its if it is equal to variable a 2 dot member 1 in that way if you do then it is possible .PERIOD So ,COMMA what we can do here is I have got two structures and there are 2 variables of the same type of the same structure type one is a 1 and one is a 2 ,COMMA and I have got some values here all right ,COMMA And say this is member 1 member 2 member 3 member 4 like that now in order to compare if I want to compare them what I have to do I will have to see if this is a 1 a 1 dot m 1 is this also m 1 is equal to a 2 dot m 1 and a 1 dot m ,COMMA 2 is equal to a 2 dot m 2 and so and so forth .PERIOD If I do then return 1 that could be my function that means if all these are matching ,COMMA then only I will say that they have been compared to be the same otherwise it will return false .PERIOD So ,COMMA here other else return false .PERIOD So ,COMMA you have to write it nicely you can take it up take it up as an ,COMMA assignment arrays of structures .PERIOD Now ,COMMA once we know this ,COMMA we can now make an array of structure why is that useful let us take one problem .PERIOD Let us say that I am trying to store the information of a class of students .PERIOD Where maybe ,COMMA there are say 40 students and their information about each student has got different components name in a particular class roll number and say marks total marks .PERIOD So ,COMMA marks is an integer ,COMMA let me say roll number is also an integer and name is a character array something all right .PERIOD Now ,COMMA that so this box this can be also depicted as a box having three fields name roll number and marks but I want to have that for all the 40 students .PERIOD So ,COMMA I will have 40 such small boxes each having 3 fields one after another .PERIOD So ,COMMA that can be represented as an array ,COMMA you know that in an array ,COMMA we can store data of only the same type .PERIOD So ,COMMA that is not causing any problem here because each of ,COMMA these boxes are of the type struct students therefore ,COMMA I can very well consider them to be an array of such structures .PERIOD So ,COMMA if I call this class is this array then each of these boxes are an element of that array ,COMMA So ,COMMA if I say class 0 which element am I looking at .PERIOD This element right ,COMMA if I take class 0 dot name then which field am I looking at .PERIOD This particular field ,COMMA if I write class 2 dot roll number which field am I looking at Class 2 .PERIOD So ,COMMA it is an array 0 1 2 ,COMMA you know that just in c any array starts with 0 .PERIOD So ,COMMA 0 1 2 I come over here and which field am ,COMMA I looking at roll number roll number is the second field .PERIOD In that way I can access each element of this array either as a structure or as an individual member of that structure all right .PERIOD So ,COMMA in such cases or the same thing could be applicable ,COMMA if I want to represent a library .PERIOD So ,COMMA in that case what will happen A library will consist of books right .PERIOD So ,COMMA suppose it is a small ,COMMA library where I have got a library of 20 books all right 20 books .PERIOD So ,COMMA books is an array of type what or let me let me name it different way .PERIOD So ,COMMA I am say in my library is consisting of 20 books at most ,COMMA and what is the type of library when we write in a array .PERIOD We write int a 20 float a 20 like that .PERIOD So ,COMMA here what is the type of library .PERIOD Type of library will be struct book .PERIOD So ,COMMA because every element of this library ,COMMA when ,COMMA I write int a 20 that means I am talking of an array where there are 20 elements and each element is of type int .PERIOD So ,COMMA when I am talking of this struct book library 20 ,COMMA what will that mean .PERIOD That will mean that here is an array library having 20 such field ,COMMA 20 such positions elements and each element is a ,COMMA structure called book ,COMMA I have not defined here the structure of book .PERIOD So ,COMMA I should have ,COMMA done it earlier .PERIOD Suppose I do here struct book char name 10 semicolon that is the name of the book ,COMMA Char author 10 the author of the book int ,COMMA ISBN and I close that .PERIOD Suppose this is a structure of the ,COMMA book having 3 fields only I have it could have been more fields number of pages year of publication etcetera I am not showing that .PERIOD So ,COMMA each of ,COMMA these elements have got 3 fields here name which is itself an array of 10 characters author ,COMMA which is itself an array of 10 characters and an integer ,COMMA ISBN number .PERIOD So ,COMMA this is the whole element the first or ,COMMA 1 element of the array library .PERIOD And library is an array which houses ,COMMA 20 at ,COMMA the most such individual structures .PERIOD So ,COMMA if I say library 3 dot ISBN where am I going which one I am referring to 0 1 2 3 library 3 ,COMMA and the last element of that this is the ISBN number because this is a last one all right .PERIOD So ,COMMA therefore using structure ,COMMA allows us to store different types of data together and again array of structure is a very powerful facility that has been given to us using which we can store many more things and ,COMMA we get much more flexibility .PERIOD Let us go here once a structure has been defined like the structure book that was defined we can declared an array of structures for example struct student class 50 .PERIOD So ,COMMA note here that class is an array having 50 elements .PERIOD So ,COMMA it is something like this ,COMMA here is class with 50 elements 0 to 49 and what is each element .PERIOD Each of these elements is a structure of type student must have been defined somewhere earlier .PERIOD The individual ,COMMA members can be accessed by class whichever element are you want to have say for example struct student one field is int roll number there is a name there is marks and character .PERIOD So ,COMMA this is the student and I have got 3 variables a 1 a 2 a 3 .PERIOD The array element within the structure and ,COMMA I have defined an array earlier that is a class of 50 right .PERIOD So ,COMMA now I have got an array of which every element is a structure like this and the structures are variables a 1 these are also the student variables also my class is consisting of the same structure .PERIOD The array element within the structure can be accessed as now you can very easily guess if a 1 dot marks 2 .PERIOD Now ,COMMA here this example is telling us something more here this example is showing that any element of have and a member of this structure student can also be an array that ,COMMA we had defined earlier this is also an array .PERIOD Now ,COMMA suppose I have got this student a 1 his name is a roll number is say 1 and marks is itself an array where the marks of literature history geography maths ,COMMA science everything is stored and the date of .PERIOD birth is a character array all right ,COMMA Now ,COMMA so ,COMMA it is say ,COMMA 07 ,COMMA 07 2007 .PERIOD So ,COMMA that is a character array .PERIOD Now ,COMMA when I am saying a 1 marks 2 that means I am going to this field is the marks field I am going to the a 1 structure a 1 variable and I ,COMMA am taking its structure and coming to the marks field or membership member and I am coming to the element 0 1 2 this particular element this particular element ,COMMA I am coming to by this this you must understand .PERIOD So ,COMMA I can have an array within a structure also I can have an array of structure .PERIOD Till now what we are discussing was and here what we discussed was an array of structure right .PERIOD And here ,COMMA what we have just now shown you is what we have just now shown you is an example of that an array can also be a part of a structure .PERIOD Next lecture we will be talking about a new thing that is that is also very important type def ,COMMA That is very much useful for that facilitates us to create new type definitions and we can write much simpler programs with this we will take it up in the next lecture .PERIOD We were discussing about structures and in particular we have discussed about the way the structure is formed and in that context we have seen that a structure can contain within itself some members which can also be a structure themselves .PERIOD For example this one member ,COMMA which can itself be a structure consisting of other members .PERIOD So ,COMMA this is a structure struct S in ,COMMA which there is another struct say P which is a member of this also some member can be an array .PERIOD This can be say name 10 char that means it is a character array of name 10 similarly it could be some member like int marks 20 .PERIOD Now ,COMMA we have seen that we can have arrays within structure also in the last lecture we have talked about arrays of structure .PERIOD So ,COMMA there is a scope of confusion between these two that is why I want to make ,COMMA it clearer that there can be an array within a structure as a member .PERIOD So ,COMMA the other thing is we can have an array of structure .PERIOD So ,COMMA in this case we have got an array every element of that array is a structure of a particular type .PERIOD We know that an array can hold data elements of the same type .PERIOD So ,COMMA if ,COMMA I have one particular structure defined like say student it can be an array of students .PERIOD So ,COMMA each of ,COMMA them is of the type student .PERIOD So ,COMMA these two must be differentiated very clearly all right .PERIOD So ,COMMA as you can see that here a structure member can be an array we saw it in the last class last lecture that say for example a structure student has got an array char character array name thirty all right this is a part of an array .PERIOD Now ,COMMA we know arrays within structure and we have also seen arrays of structure where ,COMMA we can have a number of elements of that particular structure .PERIOD So ,COMMA here we have seen that we have got a an array class the array is class which can hold up to 50 elements ,COMMA and each element of this class is a structure of type student .PERIOD When ,COMMA I come to say class i then I am actually accessing a structure a particular structure in that array .PERIOD Now ,COMMA that structure has got number of fields therefore if I ,COMMA have class i dot name then ,COMMA I will get a particular name (if that be the field) or ,COMMA I can say class 2 dot roll number .PERIOD So ,COMMA here there is an array of structures and we can handle them just as in this case where the index is pointing to the particular element ,COMMA and ,COMMA then by dot operator we are going inside that element and looking at that array ,COMMA Whereas in the case of an array within a structure we look at that in a different way suppose if I come to the structure student and suppose there is a variable of variable of name say a 1 as of type student then I can say a 1 dot name and I can take a particular character of that .PERIOD So ,COMMA look at the difference of ,COMMA this this is one and the other one was class i dot name j .PERIOD So ,COMMA here ,COMMA I am accessing the particular element from that structure and here ,COMMA I am coming to the structure and going to that array element within that structure .PERIOD So ,COMMA this is an usual point of confusion among many students that is why I was repeating this ,COMMA Next we will start looking at an important style of writing programs which is typedef .PERIOD That facilitates our programming with structure ,COMMA As the name typedef implies we are defining some type .PERIOD We know that ,COMMA int is a type ,COMMA float is a type data type char is a type etcetera .PERIOD Now ,COMMA I can also define my own type which I will be using in my program using this typedef command .PERIOD So ,COMMA we may define a structured data type using a typedef ,COMMA command like this ,COMMA let us see the syntax .PERIOD The syntax is I say ,COMMA typedef struct member ,COMMA variable 1 ,COMMA member variable 2 member variable n and then some tag .PERIOD Tag is the name of the new data type .PERIOD Let me illustrate this by differentiating this with the earlier thing .PERIOD Earlier we had written something like this struct student ,COMMA Then ,COMMA char name 10 int roll number .PERIOD So ,COMMA I was defining a structure in this way and I was later on referring to ,COMMA the structure as struct student say student 1 student 2 in this way .PERIOD Now ,COMMA what I am trying to do ,COMMA here is I am trying to define ,COMMA a type suppose I do not write this what I am doing instead I am saying ,COMMA typedef struct same thing char name 10 int roll number and naming this type as student ,COMMA If I do this then next time when I declare the student 1 and student 2 I will do it in a different way I can do it much simply .PERIOD See how I am writing now in the red box .PERIOD If ,COMMA I just simply write student student 1 comma student 2 that is sufficient ,COMMA Compare this with the way we had declared int x float y .PERIOD So ,COMMA here ,COMMA int and float were some types now here student 1 student 2 are two variables of type student .PERIOD Now ,COMMA this type is ,COMMA not a default type it is not pre- defined in c but I can use it because I have been already using this typedef statement has defined the structure as student .PERIOD But ,COMMA please differentiate between this and the normal definition of the student as we do normally .PERIOD Say struct something and then I say student I say struct ,COMMA (we have seen this) and ,COMMA I write the members here and ,COMMA then define that structure as the type student .PERIOD Now ,COMMA this is a definition for a particular structure as student ,COMMA Now ,COMMA this if I have to use it then I have to say struct student followed by a 1 a 2 student 1 student 2 whatever .PERIOD But ,COMMA in this case if I do this ,COMMA typedef I am saved from this problem .PERIOD So ,COMMA let us have a little look at how we will go about it .PERIOD So ,COMMA that is ,COMMA a ,COMMA tag .PERIOD So ,COMMA here typedef a particular structure just like ,COMMA here it could be char name or int roll note the semicolon at the end of ,COMMA if all this declarations ultimately ,COMMA I name this tag semi say ,COMMA for example here as student .PERIOD So ,COMMA tag is the name of the new data type .PERIOD So ,COMMA given that ,COMMA here is an example of complex number .PERIOD So ,COMMA we are defining a type called complex ignore this .PERIOD So ,COMMA typedef something having real part and an imaginary part is known as a data type complex and then I am saying complex a b c just like int a b c float a b c I can write complex a b c ,COMMA because complex has already been defined here .PERIOD Because ,COMMA complex has ,COMMA already been defined so I think this is clear right .PERIOD Next ,COMMA we move to how do we initialise a structure .PERIOD We saw that we can initialise an array similarly we can initialise a structure as well .PERIOD Say a structure variables may be initialised following similar rules like an array .PERIOD The values are provided in a within the second braces separated by commas for example here complex a Complex a is a complex variable 1 0 comma 2 0 ,COMMA what does it imply .PERIOD It implies that ‘a’ is a structure having two fields and one field is 1 0 another is 2 0 .PERIOD Similarly ,COMMA b is another field which is initialised ,COMMA to minus 3 0 and 4 0 .PERIOD Just as we did it in the case of arrays we do it for individual structural variables here but you have to put all the values initial values for all the fields of the array .PERIOD (Refer Slide Time: 16:12) .PERIOD So ,COMMA this is what happens through this initialisation .PERIOD The last thing that we will be talking about is parameter passing in a function .PERIOD How do we pass a structure as a parameter to a function ,COMMA We have seen how arrays can be passed ,COMMA similarly how can we pass structures to a function like any other variable .PERIOD Just like any other variable we can pass it like for example here you can see that ,COMMA there is a swap between complex variable a and complex variable b .PERIOD Now ,COMMA a and ,COMMA b are both structures .PERIOD So ,COMMA I am saying just as we use to write void swap int a ,COMMA int b just like that here I write complex a complex b .PERIOD It is also a call by value ,COMMA Now ,COMMA so here is again the typical assignment .PERIOD So ,COMMA here is an example program using typedef .PERIOD What is being done here is I am defining a type complex ,COMMA typedef struct ,COMMA - they are two parts real and imaginary and this data ,COMMA type is known as complex .PERIOD Now ,COMMA I am writing a function swap .PERIOD So ,COMMA I am taking another variable which is of type complex ,COMMA tmp is of type complex .PERIOD So ,COMMA when ,COMMA I do assign a to tmp then this tmp variable which is of type complex will copy the variables (say here it was 3 0 and minus 2) so this will come here it will become 3 0 and this will become minus 2 .PERIOD So ,COMMA that is tmp .PERIOD Now ,COMMA I copy b to a ,COMMA I am sorry not this one ,COMMA there was some b and the values of b are copied to a not here these are copied here and here .PERIOD So ,COMMA it might be that ,COMMA this is changed to 5 this is changed to minus 2 5 and then I copy tmp to b .PERIOD So ,COMMA this is again copied back .PERIOD So ,COMMA member by member the copy is done .PERIOD So ,COMMA here we illustrate what you mean by typedef and a function that is using it .PERIOD So ,COMMA now suppose how can we print ,COMMA a structure .PERIOD Say here is a function the main function is calling print x and print y .PERIOD So ,COMMA say ,COMMA for example my main function is initialising ,COMMA (now you understand all this things) x to 4 x real part to 4 imaginary part to 5 right and y’s real part to 10 and imaginary part to 15 .PERIOD So ,COMMA now I am calling ,COMMA print x .PERIOD So ,COMMA it is calling print x .PERIOD So ,COMMA x is being copied call by value to another local variable a which is local to this function print .PERIOD So ,COMMA a is holding the complex variable x and print f a dot real a dot imaginary .PERIOD So ,COMMA field by field ,COMMA I print them .PERIOD Then I come back I print ,COMMA y Y is copied to a and the same thing happens then I call swap .PERIOD Now ,COMMA swap as a function that we just now saw where we take tmp and we copy it to tmp and then I copy b to a and then tmp to a in that way we carry out the swapping .PERIOD So ,COMMA it is purely call by value and then I print x and print y ,COMMA After I swap what will happen in this case .PERIOD If I go back to this case ,COMMA where I am passing among this a and b the x ,COMMA and y are being swapped inside that function ,COMMA but will that be swapped in actuality .PERIOD You check that ,COMMA yourself .PERIOD How do we return a structure from a function .PERIOD Suppose I have done something but in this earlier case where ,COMMA x and ,COMMA y were being swapped inside the function but ,COMMA when I come back to the main my x y remains the same .PERIOD So ,COMMA if we if we want to return the function for example here I carry out a real plus b real (I make it tmp) .PERIOD So ,COMMA here is an example of adding two complex numbers here complex a and complex b are two variables which have been passed on as parameter here and I have got a ,COMMA tmp as a local function a local variable .PERIOD So ,COMMA tmp dot real is ,COMMA copping a dot real plus b dot real .PERIOD So ,COMMA what is happening ,COMMA Here I have got structure a with a real part and an imaginary part .PERIOD So ,COMMA 3 0 4 2 another is b which is 2 5 ,COMMA and may be 3 6 .PERIOD Now ,COMMA when I am adding two complex numbers you remember we discussed it in last class also ,COMMA I first add this two .PERIOD So ,COMMA a real is added to b real .PERIOD So ,COMMA this is tmp where I am getting 5 5 and then imaginary ,COMMA I am getting 7 ,COMMA 8 and now ,COMMA I return tmp .PERIOD Now ,COMMA in the main function if ,COMMA I had written something like say x and y were two complex variables and what ,COMMA I did was I added x y assigned to some other complex variable z in that case this .PERIOD tmp will be assigned to this complex variable z that is how ,COMMA we can return a structure from a Function .PERIOD So ,COMMA structure facilitates us in many ways but ,COMMA direct arithmetic operations are not possible with structure variables ,COMMA that means ,COMMA I cannot just add a and b when both of them are structures I have to do the arithmetic operations over its members .PERIOD So ,COMMA with that we conclude our discussion on structures ,COMMA and ,COMMA you will be given assignments on structures and ,COMMA this will ,COMMA enable you to write different types of handle different types of data types together and using the typedef you can design your own complex data type which you can utilise further .PERIOD So ,COMMA please practice using structures it is not at all difficult only a little practice and a little understanding is required .PERIOD Thank you .PERIOD In ,COMMA today’s lecture we will look at very important concept of programming it is required to conceptualise ,COMMA and understand this thing very well so that you can have more flexibility with programming .PERIOD We have visited this idea the concept of pointers earlier in the context of our discussions of call by value and call by reference .PERIOD So ,COMMA if you ,COMMA recall at that time we had we had talked about the variables which are in the memory right .PERIOD So ,COMMA suppose I am talking of a variable - x y z is the name of a variable .PERIOD So ,COMMA that variable has got some address that address maybe say 5000 in the memory and who has allocated this address .PERIOD That address has been allocated by the compiler .PERIOD Now ,COMMA if I have another memory location say a part of this which I am just drawing separately whose address is say 7000 .PERIOD Say ,COMMA this one - 7000 and inside this location 7000 as it’s content I write 5000 and I say that whatever is ,COMMA the content of this location 7000 that is the variable I am interested in .PERIOD So ,COMMA can I say that if I now give a symbolic name p to this 7000 or say this is p ,COMMA that this p is pointing to x y z ,COMMA because p is containing the address of x y z ,COMMA Therefore ,COMMA p is a pointer to a variable x y z .PERIOD Right now p is pointing to x y z but ,COMMA if I just change the value of this location 7000 and make it say 6000 then it will probably point to some other location here .PERIOD So ,COMMA p is therefore a pointer variable but ,COMMA when I say that it is a pointer variable then ,COMMA it is not pointing to any particular data it can point to a type of data .PERIOD So ,COMMA instead of making this statement that p is a pointer variable to a variable x y z .PERIOD Say this one is p q r now as I change this now p is a pointer variable to a variable p q r .PERIOD So ,COMMA if I generalis it lets say that in this situation where I have got x y z at 5000 and p q r at 6000 and 7000 is a pointer p then ,COMMA I can say p is a pointer variable pointing ,COMMA (say x y z and p q r ,COMMA who are both integers) to an integer or it could be a float or it could be a some other data type .PERIOD So ,COMMA pointed to a particular data type .PERIOD Why I specify the data type will be clear in some time from now .PERIOD The most important concept here is that p is a pointer p is a variable and variable is holding some value and that value is nothing but an address of another variable all right address of another variable .PERIOD So ,COMMA now let us look at this the basic concept every stored data items occupies one or more memory cells whenever we declare a variable the system allocates memory locations to that variable we know that very well so need not spend more time on that .PERIOD Now ,COMMA this is important you already ,COMMA know that the number of memory cells required to store a data item depends on its type typically for char we need one byte for int we need two bytes for float we need four bytes etcetera .PERIOD So ,COMMA since every byte in memory has an ,COMMA unique address this location will also have its unique address .PERIOD Every element will have a unique address .PERIOD So ,COMMA let us see here the same example consider the statement int x y z assigned 50 ,COMMA This statement means that the compiler will allocate for this x y z some location and put the value 50 in that location .PERIOD Suppose the address of x y z is 1380 .PERIOD Here ,COMMA x y z is a variable ,COMMA and 50 is the value and ,COMMA 1380 is the address of that variable we know that we have discussed it earlier .PERIOD Now ,COMMA during execution of the program when the program is being executed ,COMMA the system always associates the name x y z with the address ,COMMA 1380 .PERIOD So ,COMMA whenever in the program ,COMMA we find x ,COMMA y z the variable ,COMMA x y z being ,COMMA referred it will go to the memory location thirteen eighty ,COMMA and fetch that .PERIOD So ,COMMA the value ,COMMA 50 can ,COMMA therefore be accessed by going to the location 1380 and accessing it .PERIOD Now ,COMMA the variables which are holding these addresses are known as the pointers .PERIOD Now ,COMMA memory address is just numbers .PERIOD So ,COMMA I can also store them in some variables and these variables which are for example ,COMMA the address of the variable that will hold the address of variable x y z is the pointer to x y z .PERIOD So ,COMMA it is also naturally stored in some memory location .PERIOD So ,COMMA this is just the example that ,COMMA I was discussing right now .PERIOD Suppose ;SEMICOLON we ;SEMICOLON assign ;SEMICOLON the ;SEMICOLON address ,COMMA of ;SEMICOLON x ,COMMA y ;SEMICOLON z ;SEMICOLON to a ,COMMA variable p then ,COMMA p is ,COMMA said to point to ,COMMA the variable ,COMMA x y z ,COMMA I ,COMMA was comfortably ,COMMA drawing ,COMMA this ,COMMA that ,COMMA there is ,COMMA 5000 ,COMMA here ,COMMA x ,COMMA y ,COMMA z and ,COMMA 5000 here and I was simply saying that this variable which was in location 7000 was ,COMMA pointing to this that ,COMMA means this was being loaded with ,COMMA 5000 ,COMMA How is that being done ,COMMA How ,COMMA is 5000 ,COMMA being written inside this ,COMMA location The ,COMMA statement is ,COMMA just like any ,COMMA other assignment ,COMMA It will ,COMMA be ,COMMA that these variables ,COMMA name ,COMMA is p p is assigned the address of x ,COMMA y ,COMMA z So p assigned and x y z Here ,COMMA we ,COMMA can ,COMMA see that the variable ,COMMA x ,COMMA y z is the address is 1380 value is 50 P is a pointer variable ,COMMA whose ,COMMA value ,COMMA is 1380 because it is ,COMMA pointing to x ,COMMA y ,COMMA z ,COMMA In our ,COMMA diagram that I was ,COMMA drawing ,COMMA by hand this p was holding the value 5000 ,COMMA and its ,COMMA address here is say ,COMMA 2545 ,COMMA in my diagram it ,COMMA was 7000 So this ,COMMA is a picture ,COMMA 1380 ,COMMA is ,COMMA the address ,COMMA of ,COMMA 50 and p which is ,COMMA located as 2545 ,COMMA is holding the ,COMMA address 1380 Whenever ,COMMA you find difficulty in dealing with pointers my suggestion to the student is to draw a piece of diagram and ,COMMA then make the whole picture clear in front of you .PERIOD Now ,COMMA you know that if ,COMMA I put the operator and ampersand immediately before the variable it will return the address of the variable and x y z will give me the say the value 1380 ,COMMA which is the address of x y z .PERIOD The address of x y z is assigned .PERIOD This operator ,COMMA ‘and’ can be used only with a simple variable or with an array element ,COMMA For example ‘and’ distance ‘and’ ,COMMA x 0 that means the address of the first location of the array x and of x ,COMMA i minus 2 .PERIOD Now ,COMMA what is illegal .PERIOD This is illegal the reason is ,COMMA obvious ,COMMA Two thirty ,COMMA 5 ,COMMA is not a variable it is a constant .PERIOD So ,COMMA it does not have any fixed position in the memory .PERIOD So ;SEMICOLON it ;SEMICOLON is ;SEMICOLON not ;SEMICOLON a ;SEMICOLON memory ;SEMICOLON location ;SEMICOLON therefore ;SEMICOLON it ;SEMICOLON does ;SEMICOLON not have ,COMMA address so its meaningless ,COMMA Pointing to ,COMMA a ,COMMA constant ,COMMA is ,COMMA not possible I ,COMMA cannot say and ,COMMA arr ,COMMA because this ,COMMA shows ,COMMA that ,COMMA arr ,COMMA is a ,COMMA particular ,COMMA variable ,COMMA but ,COMMA it is ,COMMA an ,COMMA array ,COMMA therefore ,COMMA I ,COMMA cannot ,COMMA show ,COMMA it like this it is ,COMMA just ,COMMA pointing ,COMMA at ,COMMA an array ,COMMA name it is not ,COMMA pointing at the array We cannot also do this and a plus b ,COMMA - ,COMMA that is also not possible because(Refer ,COMMA Time: 12:19) if I have a ,COMMA as ,COMMA some value and b ,COMMA has ,COMMA some value then I add ,COMMA them ,COMMA and it ,COMMA will be ,COMMA a value and a ,COMMA value does not have ,COMMA any address ,COMMA that is pointing ,COMMA at an expression So ,COMMA here is a quick example I think I had shown this to you ,COMMA earlier say I ,COMMA have got a number ,COMMA of variables - one character one double floats I ,COMMA am assigning some ,COMMA values ,COMMA to ,COMMA these here ,COMMA I ,COMMA am putting some values ,COMMA and ,COMMA print ,COMMA f a particular variable ‘a’ is stored ,COMMA in ,COMMA the address anda b is stored in address andb ,COMMA c is ,COMMA stored in address andc so ,COMMA and ,COMMA so forth ,COMMA therefore ,COMMA if ,COMMA we run it we will ,COMMA get the ,COMMA addresses ,COMMA So ,COMMA 10 is stored in location so and so 2 ,COMMA 5 is stored in location so and so all right .PERIOD Now ,COMMA here ,COMMA incidentally all ,COMMA these are contiguous locations but ,COMMA they may not be contiguous locations also ,COMMA So ,COMMA 10 is stored in location ,COMMA ‘a’ having the value 10 is stored in location so and so like that it goes on .PERIOD So ,COMMA pointer declarations ,COMMA when ,COMMA we declare some variable as a pointer the typical the standard form is this Data type shown in red ,COMMA (that is very ,COMMA important) and this star - this is something new that you also saw when we were discussing call by reference for example int is a type star x y z x what does it mean .PERIOD It means that x is a pointer which is enabled or ,COMMA which is allowed to point to variables of type integer ,COMMA Only integers can be pointed to by x .PERIOD So ,COMMA similarly ,COMMA I could have said float star p that means p will be a pointer that can only be pointing to floating point numbers .PERIOD So ,COMMA three things are specified in this disk in this declaration .PERIOD One is that this star tells that the variable pointer name or p ,COMMA whatever you call it is a pointer variable not a normal variable and ,COMMA asterisk is telling that it is a pointer variable Pointer name is a variable ,COMMA therefore ,COMMA it needs a memory location and pointer name points to a variable of the specified data type .PERIOD So ,COMMA these three things ,COMMA you must remember ,COMMA when ,COMMA you are handling with the pointer .PERIOD So ,COMMA here is an example int star count what does it mean .PERIOD That means count is a pointer variable .PERIOD Why a pointer variable .PERIOD Because ,COMMA this is preceded with the star and where can this pointer variable point to .PERIOD To all data type data variables of type integer ,COMMA Speed is again a pointer ,COMMA because it has ,COMMA got this ,COMMA asterisk and ,COMMA where can speed point to Speed can point to variables of type float .PERIOD Once ,COMMA a pointer variable has been declared it can be made to point to a variable using an assignment statement like this - int star p x y z .PERIOD So ,COMMA int star p is a pointer variable ,COMMA x y z is an integer .PERIOD So ,COMMA you see by the same declaration I have declared two things - one is a pointer to an integer and an integer .PERIOD So ,COMMA if I make such an assignment like p is assigned and x y z .PERIOD So ,COMMA x y z is here and ,COMMA its location can be 5000 and p is a pointer variable and so when I do this assignment this might be in the location 7000 but when I do this what it does is it loads this 5000 here .PERIOD So ,COMMA now p is pointing to x y z ,COMMA I hope ,COMMA it is clear now .PERIOD So ,COMMA this is called pointer initialisation ,COMMA The things to remember is the pointer variables must always point to an ,COMMA item of the same type ,COMMA One pointer variable either ,COMMA it points to an integer or it points to a ,COMMA float or it points to an array of characters whatever it is .PERIOD Now ,COMMA so here for example ,COMMA this is an error why it is this is an error ,COMMA X is of type floating point x is a variable and p is a pointer which is allowed to point to only integer ,COMMA but ,COMMA here ,COMMA I have made an assignment where I am assigning to p the address of the floating point number - that is not allowed .PERIOD So ,COMMA therefore I am forcing p to point to x but the type of p and the type of x are different .PERIOD So ,COMMA assigning an absolute address to a pointer is prohibited .PERIOD You cannot do this you cannot force a pointer to a constant value that you must keep in mind .PERIOD So ,COMMA how do I access a variable through a pointer .PERIOD Once a pointer has been assigned the address of a variable the value of ,COMMA the variable can be accessed through the indirection operation ,COMMA So ,COMMA let us give an example first .PERIOD For ,COMMA example a b are two integers .PERIOD Let us draw this I am sorry suppose a is a location ,COMMA b is another location both of them are integers and ,COMMA p is a variable which is allowed to point to integers and what I do I ,COMMA assign to p the address of a .PERIOD So ,COMMA the address of ‘a’ let us say is 1000 or 100 .PERIOD So ,COMMA 100 is written here .PERIOD So ,COMMA it comes here .PERIOD So ,COMMA what did this statement do 100 was the address of a that has been assigned to p .PERIOD Now ,COMMA what is being done by this B is being assigned star p b is getting the content of wherever ,COMMA p is pointing .PERIOD Suppose this was 50 then b is getting 50 .PERIOD So ,COMMA little bit of confusion can occur ,COMMA because ,COMMA of these two star ps ,COMMA Please understand that this star is just telling you that p is a pointer because it is coming in a declaration statement .PERIOD On the other hand here .PERIOD it’s is not a declaration statement is an assignment statement ,COMMA I have already declared p to be a pointer .PERIOD So ,COMMA p is a pointer .PERIOD So ,COMMA once a pointer has been assigned the address of a variable that is done in this step the value of the variable can be accessed using the ,COMMA indirection operation that means ,COMMA which variable say I could have done p assigned ,COMMA b assigned a .PERIOD Instead of doing that ,COMMA what I am saying is ,COMMA (just note my two English statements) one is the value of a is being assigned to b or b is being assigned the value of a ,COMMA this is statement number 1 statement number 2 is ,COMMA b is being assigned the value of the variable that is ,COMMA being pointed at by p .PERIOD So ,COMMA here one is b is assigned the value of a one statement .PERIOD Here ,COMMA that is this statement .PERIOD And this statement is b is assigned the value ,COMMA (instead ‘of’ a I am saying is being assigned the value) of the variable pointed ,COMMA by p .PERIOD So ,COMMA this is an ,COMMA indirect way of saying that .PERIOD So ,COMMA this is something that you must very clearly understand look at this once again .PERIOD So ,COMMA I can now say that this thing is equivalent to b assigned a ,COMMA but ,COMMA I have done that in a indirect way .PERIOD If you have understood this then ,COMMA pointer should be clear to you here lets look ,COMMA at one example integer ,COMMA a b c assign 5 and p is a pointer to integers .PERIOD Now ,COMMA in this statement ,COMMA what has been done ‘a’ has being assigned 4 times c plus 5 .PERIOD So ,COMMA c is being added to 5 .PERIOD So ,COMMA it is becoming 10 and 4 times 10 is 40 40 is being assigned to a .PERIOD Here what is being done ,COMMA P is being assigned ,COMMA c is address .PERIOD So ,COMMA wherever c was let’s say address 1000 .PERIOD So ,COMMA that is being assigned to a variable p .PERIOD So ,COMMA p is becoming 1000 .PERIOD Now ,COMMA b ,COMMA what is b being assigned b is being assigned 4 times star p plus 5 .PERIOD What is star p ,COMMA Star p is nothing but the variable c it’s pointing to that and ,COMMA whatever was its value suppose it was 10 it was sorry it was 5 .PERIOD So ,COMMA that value is being taken and 5 is being ,COMMA added to that .PERIOD So ,COMMA it becomes 10 times this .PERIOD So ,COMMA these two are essentially equivalent .PERIOD So ,COMMA here is another example you have seen this example very similar to this that I am defining a pointer p ,COMMA t r is a ,COMMA pointer x is 10 you just think of ,COMMA what it should print X is 10 p t r is the address of x and ,COMMA y is being assigned star p t r what does this mean P t r is pointing to 10 and y is being assigned to star p t r that means ,COMMA y is being assigned to 10 or rather I should say y is being assigned x and x was 10 .PERIOD So ,COMMA y is become becoming 10 .PERIOD Now ,COMMA if I ,COMMA print instead of x what will be printed .PERIOD Instead of x ,COMMA the value of x will be printed 10 is stored in the address this .PERIOD Similarly ,COMMA now what is this ‘star and ,COMMA x’ - what does this mean ‘and .PERIOD x’ is the address of x and where ,COMMA that is pointing to - these two should be same .PERIOD So ,COMMA if ,COMMA you look at if you look at the result - this is equivalent why ‘And .PERIOD x’ is the address of x ,COMMA and star just like star p ,COMMA that means the content of where the pointer is pointing to .PERIOD So ,COMMA these two are same right ,COMMA So ,COMMA ptr is ‘and x’ .PERIOD So ,COMMA these two are all equivalent ok .PERIOD If ,COMMA I say ‘and ,COMMA x’ that means ,COMMA I am taking the address of star ptr .PERIOD So ,COMMA this is something you can play with yourself and you will ,COMMA get a printout like this .PERIOD So ,COMMA these two are the same .PERIOD Now ,COMMA here we are coming to something more which is known as pointer expressions and ,COMMA we will deal with that in the next lecture .PERIOD So ,COMMA we were discussing about pointers and we have seen that pointer is a variable .PERIOD So ,COMMA it is a variable but a variable that points to some other variable but ,COMMA naturally the question that can .PERIOD arise is since pointers are variables ,COMMA so ,COMMA you should be able to do some sort of operations like arithmetic operations on ,COMMA them .PERIOD So ,COMMA the answer is yes we can do that and in today’s lecture we will look at exactly that - pointer expressions .PERIOD Now ,COMMA this concept of pointers is a ,COMMA very strong component of the c language and it is not the case that ,COMMA in all languages this pointer is there but we are discussing pointers ,COMMA specifically because it will give you a very good idea about what indirection is ,COMMA We had mentioned about indirection right .PERIOD So ,COMMA for example I am just before moving into the actual discussion ,COMMA let me come to this that - ,COMMA what is an indirection Somebody ,COMMA asks you the address of toms house you can do two things - you can either give him the address of toms house or you can give him the address of johns house .PERIOD So ,COMMA that he goes to ,COMMA johns house and asks john to get the address ,COMMA of toms house .PERIOD So ,COMMA I do not know ,COMMA toms address but I know ,COMMA john who knows toms address .PERIOD This is indirection - one level of indirection .PERIOD Another level of indirection could be that ,COMMA (second level of indirection) ,COMMA You can go to ,COMMA ram and .PERIOD ram will know the address of ,COMMA john who knows the address of ,COMMA tom .PERIOD So ,COMMA that is second level of indirection .PERIOD So ,COMMA in our case we have got a particular variable p let me just call this variable x and that ,COMMA x has got some value I am not saying that x has also got an address .PERIOD But ,COMMA I am not saying what is the value of x .PERIOD What is x .PERIOD That is my question and instead of answering that ,COMMA I am giving you a pointer to x and I am asking that ,COMMA ok ,COMMA I tell you ,COMMA I will give you the answer go to p ,COMMA and find x right .PERIOD So ,COMMA then p must be assigned the address of x .PERIOD So ,COMMA I go to this then I come to p and get the value ,COMMA of ,COMMA x as I want to have that in some other variable v where I want to have star p .PERIOD So ,COMMA indirectly I could have done simply - v assigned x .PERIOD These two are equivalent that is what we discussed in the last class right .PERIOD That is why it is an indirection that often comes in very handy very useful ,COMMA when we carry out many computations .PERIOD So ,COMMA like other variables pointer variables can also be used in expressions .PERIOD If p 1 and ,COMMA p 2 are two pointers the following statements are valid - star p 1 plus star p 2 .PERIOD So ,COMMA what is being meant by that ,COMMA Suppose p ,COMMA 1 is pointing to something where there is 50 ,COMMA and p 2 is pointing to something which is stored as 60 - then what is sum .PERIOD Sum becomes 50 plus 60 star p 1 plus star p 2 50 plus 60 so that should be 110 .PERIOD Next similarly ,COMMA I can have this .PERIOD But ,COMMA here it would be easier nicer to read if I had put parentheses .PERIOD So ,COMMA that I had not confused about this Asterix and this Asterix .PERIOD These have got completely different significances this is a multiplication and this .PERIOD astrix is saying it is a content of a particular pointer .PERIOD So ,COMMA similarly the these two are equivalent of course I have already shown that .PERIOD Now ,COMMA this is also possible star p 1 .PERIOD So ,COMMA in my earlier drawing p 1 was 50 ,COMMA 50 plus ,COMMA 2 - that is coming over here .PERIOD So ,COMMA whenever ,COMMA you are finding difficulty as I ,COMMA suggested just draw a simple diagram ,COMMA p ,COMMA 1 is pointing to some other variable which has got the value 40 .PERIOD So ,COMMA star p 1 is what Star p 1 is that particular - variable x and plus 2 that is equivalent to x plus 2 which is 42 .PERIOD So ,COMMA this one is being modified to 42 .PERIOD Similarly ,COMMA I can do other operations like this ,COMMA where ,COMMA you must understand that this is actually just like another variable - an integer variable or ,COMMA whatever type of variable p1 is and it is simple ,COMMA No other complications in that .PERIOD Now ,COMMA what are allowed in ,COMMA C .PERIOD There are certain things are allowed in C ,COMMA and some things are not allowed in C I can add an integer to a pointer I can subtract an integer from a pointer I can subtract one pointer from another and say if p 1 and p 2 are both pointers to the same ,COMMA array ,COMMA then p 2 minus p 1 gives the number of elements between p 1 and p 2 ,COMMA For example suppose here there is an array .PERIOD So ,COMMA p 1 is pointing here and p 2 is pointing here .PERIOD Then ,COMMA the number of elements p 2 minus p 1 will be just ,COMMA the subtraction of these addresses .PERIOD Suppose this was 500 501 (if it is a character) 502 503 .PERIOD So ,COMMA I have got three elements in between right .PERIOD So ,COMMA these are all allowed ,COMMA I can subtract an integer from a pointer I can add an integer to a pointer ,COMMA So ,COMMA if I add an integer to a pointer that is p 1 p 1 plus 1 ,COMMA So ,COMMA that means it will point to this point this element .PERIOD What are not allowed .PERIOD The things that are not allowed are you cannot add two pointers .PERIOD The reason is obvious - p ,COMMA 1 is a pointer and p 2 is a pointer ,COMMA Now ,COMMA these two are two different locations .PERIOD So ,COMMA say p 1 is in location ,COMMA 7000 pointing to some variable and p 2 is in location 10 .PERIOD 000 pointing to some other variable .PERIOD So ,COMMA what does p 1 plus p 2 mean 7 .PERIOD 000 plus 10 ,COMMA 000 - 17 ,COMMA 000 that does not mean anything .PERIOD That can be a point to some garbage value or something else .PERIOD So ,COMMA that is not allowed ,COMMA Compiler will hold you for ,COMMA that multiply or divide a pointer in an expression that is also not allowed .PERIOD You cannot multiply you can just add an integer subtract an integer or subtract one pointer from another these three you can do .PERIOD Here is something which is known as a scale factor ,COMMA let us see whether you understand this or not .PERIOD We have seen that an integer value can be added or subtracted .PERIOD So ,COMMA here let us look at this p 1 and p 2 are two pointers of type integer I mean when p 1 is pointing to an integer p 2 is also pointing to an integer all right .PERIOD Now ,COMMA i j are two integer variables p 1 is p 1 plus 1 so that means what ,COMMA p 1 was pointing somewhere ,COMMA but ,COMMA I am just adding some constant to that .PERIOD So ,COMMA here is a memory location and say p 1 is pointing to this and suppose it is an integer so ,COMMA this is pointing to an integer .PERIOD Now ,COMMA p 1 plus one means this will point to the next integer .PERIOD Now ,COMMA I am not saying that if an integer takes two bytes each of them are of two bytes .PERIOD So ,COMMA it just comes to the next integer ,COMMA That is why the type is important Depending on the type it is updating either by 2 or by 1 but p 1 plus 1 means I am going to the next p ,COMMA 2 is assigned p 1 plus j ,COMMA where j can be something .PERIOD So ,COMMA p 2 was pointing somewhere ,COMMA here ,COMMA I am upgrading that with the j value going to the j th next .PERIOD Similarly ,COMMA p 2 plus plus p 2 assigned ,COMMA any arithmetic operation I can do all right .PERIOD In reality ,COMMA it is not the integer value ,COMMA which is added or subtracted but rather ,COMMA the scale factor times the value - that is one times the size of the integer if it were .PERIOD So ,COMMA it is j times the size of an integer 2 bytes 4 bytes - that is what that is why it is called the scale factor .PERIOD So ,COMMA this is not ,COMMA this 1 but one next two next here j th next it is like that .PERIOD So ,COMMA for character the scale factor is 1 integer is 4 if ,COMMA 4 bytes take one integer float 4 .PERIOD Now ,COMMA this could be 2 - that depends on ,COMMA what the scale factor is .PERIOD So ,COMMA if I write here for an integer pointer assuming the my computer is actually doing ,COMMA this - that each of them is 4 then p 1 plus plus is adding p 1 by 4 ,COMMA so it is going to the next integer .PERIOD Now ,COMMA in between there are 4 bytes .PERIOD So ,COMMA I am going to the next integer .PERIOD So ,COMMA there is one quick way of finding out how we can find out what is the representation in my system .PERIOD There is a nice inbuilt function called size of .PERIOD So ,COMMA if I give size of int the system returns me the value 4 or 2 depending on how much how many bytes does int consume .PERIOD Similarly ,COMMA I could have given size of float - that will tell me ,COMMA how many bytes has a float ,COMMA consumed so and ,COMMA so forth .PERIOD So ,COMMA that is one way to find the scale ,COMMA factors .PERIOD So ,COMMA number of bytes occupied by float is size of float .PERIOD If you give that the system will give you the number of bytes required for that representation .PERIOD So ,COMMA if in a system you would run this ,COMMA and you find that it is float is ,COMMA 4 int is 4 then you know what my scale factor is .PERIOD Now ,COMMA just like and for every case we are thinking of how do we pass an array to a function how do ,COMMA we pass a structure to a function here again we ,COMMA look at how do we pass a pointer to a function .PERIOD Pointers are often passed as parameters to a function and if you have thought about it ,COMMA you must have already discovered .PERIOD Now ,COMMA always it allows the data items within the calling programs to be accessed by the function ,COMMA altered ,COMMA and then ,COMMA returned to the calling function in the altered form this says the calling by reference .PERIOD Normally ,COMMA arguments are passed to a function by value we had discussed this ,COMMA Now ,COMMA this is called as call by reference or call by address now you can see this - how this is done .PERIOD Because ,COMMA in call by value we have seen that in the swap function for example it was swapped within the function but that x y ,COMMA and the main functions x y were two different ,COMMA entities therefore whatever change was there that was lost .PERIOD But ,COMMA if I had just passed ,COMMA on the pointer then whatever change I ,COMMA do in the pointer in that particular location I simply pass on the address and make a change over there then the change is reflected because it is the same location ,COMMA that is known as call by reference .PERIOD Now ,COMMA here is an example you have ,COMMA seen this passing by value I am repeating this - a was 5 and b was 20 I call swap a b .PERIOD Here what happened x was 5 b was 20 I changed it .PERIOD Now ,COMMA x was 20 ,COMMA and b was 5 but when I returned and printed this a and b they were completely different .PERIOD So ,COMMA swapping was not reflected .PERIOD Therefore ,COMMA here x and y was swapped but a ,COMMA and b do not swap .PERIOD So ,COMMA the output will be the same 5 and 20 .PERIOD But ,COMMA if I had done through reference here you see how I pass it on .PERIOD Here ,COMMA what I am passing you have must have thought about it Swap instead of ,COMMA sending that value what I am .PERIOD sending is the address of that address of a and address of and here inside the function what I am a what am I ,COMMA accepting I am accepting the pointer .PERIOD So ,COMMA here (x and .PERIOD y) I know that what is coming to me is a pointer ,COMMA We ,COMMA discussed it earlier also ,COMMA but let me repeat ,COMMA because there is a very fundamental idea a is 5 ,COMMA b is 20 and ,COMMA now I swap .PERIOD So ,COMMA here do I have x .PERIOD No I have got this x ,COMMA which is nothing but ‘and ,COMMA a’ and I have ,COMMA got this y which is nothing but ‘and b’ .PERIOD So ,COMMA therefore they are pointing to these points .PERIOD Now ,COMMA when I swap ,COMMA I am actually swapping the content of x .PERIOD So ,COMMA the content of x that means here that is going to t and then content of y indirection ,COMMA I go from here follow my ,COMMA cursor I go here and ,COMMA that one is going as the content of a content of x .PERIOD So ,COMMA here it is becoming 20 and then ,COMMA t is coming as a content of y .PERIOD What is y y is here .PERIOD So ,COMMA this is coming as 5 .PERIOD So ,COMMA when ,COMMA I come out and print here - a and b as you can see has changed .PERIOD So ,COMMA you see how did I pass on the parameter .PERIOD Look at this - I have passed on the address and ,COMMA I have accepted them in my function as the pointer .PERIOD So ,COMMA with this we will get the correct answer x and y swap a and b also swap .PERIOD So ,COMMA the answer is - that is correct one as we expected .PERIOD So ,COMMA now let us skip this a little bit and let us go to something else as pointers and arrays ,COMMA When an array is declared the compiler allocates a base address and sufficient amount of ,COMMA storage .PERIOD You know that when I declare something as an array int a 10 and if ,COMMA I say that int I have discovered using size of fact that int takes 4 bytes then for every element 4 bytes are kept ,COMMA and 40 such locations are allocated for the array a .PERIOD Now ,COMMA when I refer to this array a because we saw ,COMMA that we pass on an array by reference to a function the reason behind that is that this name array a is the same as a pointer to the first location of the array .PERIOD So ,COMMA it is as if equivalent to a is a pointer that is pointing to the first location of this array a .PERIOD They are equivalent .PERIOD So ,COMMA the base address is a location of the first element of the array the compiler also defines the array name as a constant pointer to the first ,COMMA When I declared it with the compiler it also keeps a constant ,COMMA pointer that pointer ,COMMA you cannot change ok .PERIOD For example when I say x 5 1 2 3 4 5 ,COMMA then suppose the base address is 2500 each integer requires 4 bytes then ,COMMA the elements will be x 0 will be 2500 x 1 will ,COMMA be 2504 so and so forth ,COMMA and the pointer will be 2500 ,COMMA If ,COMMA we go up 2500 .PERIOD So ,COMMA there is a pointer x - which means ‘and address of ,COMMA x 0’ ,COMMA which is ,COMMA 2500 .PERIOD So ,COMMA p assigned x and p assigned ‘and of x 0 are equivalent .PERIOD So ,COMMA we can access ,COMMA successive values of ,COMMA x by using p plus plus or p minus minus to move from one element to another .PERIOD So ,COMMA I have got the p I have got this pointer ,COMMA which is pointing to the array ,COMMA I cannot change that pointer but ,COMMA if I do p plus plus - this pointing to ,COMMA the first element ,COMMA then ,COMMA I go to the next element of the array record by the scale factor .PERIOD So ,COMMA this is if I do p plus plus I am actually doing p plus 4 .PERIOD In that way ,COMMA I can move across .PERIOD So ,COMMA the ,COMMA relationships should be clear here .PERIOD So ,COMMA p plus 1 is the next one p plus 2 is the next one - that we have already explained .PERIOD So ,COMMA here is a function to find average here ,COMMA you see ,COMMA we have got a main program where I have got an array 100 elements for k 0 to n I am reading k and then I am calling this average ,COMMA x ,COMMA I am calling average x n .PERIOD Now ,COMMA here what goes in average ,COMMA x ,COMMA n ,COMMA you have seen this now I am passing the pointer .PERIOD When I am saying I am just passing the array actually I have passed on the pointer .PERIOD So ,COMMA whatever ,COMMA I did ,COMMA I am doing here I am taking another star p which is local which is pointing to the array .PERIOD So ,COMMA my array was here and I am putting another pointer p ,COMMA which is pointing to this array and array means what .PERIOD Array means the first location of the array .PERIOD Then ,COMMA I carry on the sum here I carry on with p ,COMMA Here you see what ,COMMA I do ,COMMA I take p and then I change p .PERIOD Sum assigns star p plus i .PERIOD So ,COMMA p plus 1 p plus 2 p ,COMMA plus3 ,COMMA and star p plus 1 p plus 2 means the content of this these contents .PERIOD So ,COMMA here in this way I am getting the sum ,COMMA and what do I return Return float sum by size .PERIOD So ,COMMA I get sum ,COMMA obviously the array was integer ,COMMA but now this is something called typecasting- although it was float I put it in a bracket .PERIOD That means whatever is coming here I am converting that to float ,COMMA Sum will be an array sum of all integers will be an integer ,COMMA but when I divide by that although I did not declare ‘sum’ to be ah a ,COMMA floating point number just by this sort of type typecasting ,COMMA I can make it a floating point number and then ,COMMA how do I return it .PERIOD Yes you might have guessed correctly that I do not need to return it because whatever ,COMMA I have done ,COMMA here ,COMMA when I passed an array ,COMMA whatever was done that is being done here and what I am returning I am returning this to the average .PERIOD So ,COMMA I will get this value all right .PERIOD So ,COMMA this should be clear .PERIOD So ,COMMA its clarified .PERIOD Now ,COMMA next thing that I will be discussing a little bit is dynamic memory allocation I will take little time to explain that and that is a very important concept and after that we will move to a some discussions basic discussions on file ,COMMA We have seen ,COMMA how structures are represented we have also learnt about pointers .PERIOD So ,COMMA today we will be looking at the structures once again in a different light .PERIOD As you can see here a structure can be declared as is shown here the student structure struct stud is consisting of three members or three fields .PERIOD So ,COMMA they are - the role the department code which is a character array and ,COMMA cgpa which is a floating point number and a ,COMMA b c are three variables of the type s t ,COMMA u d stud .PERIOD The individual structure elements you ,COMMA now can be accessed by a dot role ,COMMA So ,COMMA a is this field or b dot role c dot ,COMMA c g p a .PERIOD So ,COMMA with this dot operator we can access them .PERIOD This was known to us right .PERIOD Now ,COMMA we can also we have seen that ,COMMA we can define an array ,COMMA of structures where class is an array of students class size is 100 and each element is a structure ,COMMA of type stud ,COMMA The structure elements of the individual ,COMMA records can be accessed with this dot operator like class ,COMMA i any particular element of that say for example here .PERIOD So ,COMMA this is class i where i is this index I come over here and get a particular field of this .PERIOD So ,COMMA this has got a number of fields .PERIOD So ,COMMA I am coming to the role field or the ,COMMA department code field dot the cgpa field .PERIOD This ,COMMA was also known to us .PERIOD So ,COMMA here we are trying to apply that to an example sorting by roll numbers .PERIOD So ,COMMA here ,COMMA we have got a set of students look at the declaration here Struct stud is the structure having role department code and cgpa .PERIOD Now ,COMMA in the main function what are you doing .PERIOD We ,COMMA are defining struct student class 100 ,COMMA Now ,COMMA struct start has been declared it has been declared globally even before main that is possible .PERIOD Here I am saying that class 100 is one array and ,COMMA t and there are some integers .PERIOD ’t’ is again a structure ,COMMA t is also a structure of type stud .PERIOD Now ,COMMA I am reading the number of students how many students are there in the class .PERIOD The array can ,COMMA accommodate at most 100 but ,COMMA I am reading the value n .PERIOD Now ,COMMA for each of the elements ,COMMA (look at this is our familiar for loop here) for ,COMMA k 0 to less n I am scanning the class the roll number of that particular student the department code ,COMMA and the c g p .PERIOD So ,COMMA in that way I read here ,COMMA I am reading the array all right .PERIOD The array is being read here at this point right .PERIOD Now ,COMMA what I am doing now .PERIOD Next ,COMMA let us look at this loop .PERIOD What are you doing here .PERIOD For some value of j if the role of ,COMMA that student so here I have got my array I am coming to j a particular element and looking at the role number field if that is greater than some other value k if it is greater than the roll value of k ,COMMA then I am exchanging them just as we sort .PERIOD Now ,COMMA what are we sorting here in that example earlier that we had done ,COMMA we are sorting integers or sorting real numbers .PERIOD Here what we are doing we are sorting the entire structure as you can see the ,COMMA j is coming to t .PERIOD So ,COMMA t is again a structure k is coming to j and so this is a swap operation swapping structures .PERIOD It is called swapping the structures and this I am doing ,COMMA for k which is a internal variable and j is the external variable .PERIOD So ,COMMA my diagram should be a little different .PERIOD So ,COMMA for every j I am looking at one j and I am varying k from here .PERIOD This is k k is varying from this point to this ,COMMA point to the end of the structure and comparing with this j value .PERIOD If ,COMMA this is any element that is less that is coming over here and ,COMMA it is being swapped .PERIOD So ,COMMA you have seen this swap algorithm earlier .PERIOD So ,COMMA that is being swapped here and then I update j and I go on doing this .PERIOD So ,COMMA this is ,COMMA how I can apply the sorting algorithm that we had learnt ,COMMA for sorting student records all right ,COMMA Next the other ,COMMA thing that we have to look at is pointers and structures .PERIOD How they can be intermingled .PERIOD You may recall that the name of an array stands ,COMMA for the zeroth element of the array .PERIOD So ,COMMA if this is an array of the name a then the name a and a 0 are synonymous and so a can be considered to be a pointer that is pointing to a 0 all right .PERIOD Now consider the declaration .PERIOD This ,COMMA is also true for the names of arrays of structures .PERIOD So ,COMMA if I have a declaration like this you look at the declaration yourself .PERIOD So ,COMMA you can see student is a structure and I have declared of the type student and array class 100 and star p ,COMMA t r .PERIOD Now ,COMMA what is star ptr .PERIOD What does it mean .PERIOD You know by now .PERIOD Just as we had done this (keep it side by side ) ,COMMA int ,COMMA star p what does it mean ,COMMA It means that p is a pointer that points to integer data type ,COMMA Here it means that ptr is a pointer that points to stud type of structures ,COMMA So ,COMMA now what do I have I have got an array called class each element of which ,COMMA is of type student ,COMMA structure and I have got a pointer ptr ,COMMA which ,COMMA can point to such structures .PERIOD It can point to such structures -any of these I have not yet initialised this ,COMMA The name class therefore represents the address of the zeroth element of the structure array .PERIOD So ,COMMA if I have this then this class means it is a pointer that is pointing to this element plus 0 .PERIOD Just like an array and ptr is a pointer to the data objects of type struct that we have seen .PERIOD The assignment - class assigned to ptr ,COMMA what will it make .PERIOD It will make ptr to point to the first element of the array .PERIOD Here is class ,COMMA and ,COMMA ptr is now pointing .PERIOD (when ,COMMA I do ,COMMA this assignment note that they are of the same type) to this element ,COMMA So ,COMMA it will assign ptr to class 0 understood ,COMMA When the pointer ptr is incremented by 1 that is ptr plus plus ,COMMA you should be able to tell me what will happen ,COMMA The ptr will be incremented to the next element of the array .PERIOD So the actual increment will be by a scale factor and what is that scale factor ,COMMA That scale factor is size of stud size of the structure stud and you know that ,COMMA it has got a roll number it has got c g p a .PERIOD So depending on the different data types that are .PERIOD housed is inside that structure it will vary .PERIOD So the value of ,COMMA ptr will point to the next element which will be incremented by size of stud .PERIOD So its permit to point to the next record ,COMMA Once ,COMMA ptr points to a structure variable now ,COMMA this is something new the pointers can be accessed as ptr role that is possible .PERIOD So ,COMMA let us see ,COMMA what is happening ,COMMA you are being introduced to this operator the arrow operator .PERIOD So ,COMMA here or this only comes if the left side ,COMMA of this operator is a pointer .PERIOD So ,COMMA if suppose ,COMMA I have got some structure and pointer p or ptr is pointing to this structure and it has got different fields say ,COMMA cgpa is a field .PERIOD If I write ptr arrow c g p a that means that I am now pointing to this I am actually accessing this element of the structure ,COMMA Just as suppose this structure is class and this element is class 1 say I could have written class 1 dot cgpa and here I have already done this the pointer ptr was assigned to class 0 and then I did ptr plus plus that means now where is ptr pointing to ptr is pointing to class 1 .PERIOD So ,COMMA I can now also do ptr arrow cgpa .PERIOD These two are equivalent this ,COMMA and this are equivalent .PERIOD So ,COMMA here also you can understand this .PERIOD So ,COMMA let us move ahead .PERIOD Similarly ,COMMA I can go ,COMMA to another field by ,COMMA ptr slash department code I can go ptr ,COMMA cgpa ptr roll this symbol is naturally called the arrow operator .PERIOD You can read this type def now here I am defining a type ,COMMA the name of the type is complex and what is this type complex .PERIOD It is a structure with a real and imaginary ,COMMA part this is what we ,COMMA saw earlier ,COMMA Next I have got a function - print complex star what does it mean ,COMMA A is a pointer to type complex .PERIOD So ,COMMA print f ,COMMA whatever there are two placeholders - a real a imaginary .PERIOD So ,COMMA why is it possible ‘a’ is a pointer .PERIOD So ,COMMA it is pointing to some complex number whatever that is ‘a’ is a pointer pointing to that and ,COMMA I am going to the real part I am printing a real and this part is a imaginary .PERIOD So ,COMMA this is what is being done by this piece of function code .PERIOD So ,COMMA now swap reference I have got complex a and complex b I am sorry it is not visible here a and b there are two pointers in complex .PERIOD So ,COMMA there is t m p I take another structure named ,COMMA t m p of type complex and ,COMMA I swap the pointers here .PERIOD That is why you can you can work it out that that means that ,COMMA ‘a’ was pointing to some structure and that ‘a’ is pointing to this structure and this particular structure is copied to another structure temp then ‘b’ was pointing to another structure b and a are swapped ,COMMA So ,COMMA now ,COMMA ‘b’ is pointing to this and ‘a’ is pointing this next I am making b point to this .PERIOD So ,COMMA that is how a swap operation can be done and how we passed on the parameter to this .PERIOD So ,COMMA the main program can be ,COMMA can define complex x 10 and 3 y is minus 20 minus 10 because of the resolution it is not visible .PERIOD So ,COMMA print x and y then swap reference print x and y .PERIOD Now ,COMMA can you guess and tell me whether the swapping will work in ,COMMA this case or not .PERIOD The answer is yes ,COMMA it will work ,COMMA because it is a call by reference .PERIOD So ,COMMA whatever I am swapping here that will be reflected in the main program also .PERIOD So ,COMMA here is an example .PERIOD So ,COMMA let us move ahead .PERIOD Now ,COMMA one warning is there that when using a structure pointers ,COMMA we should take ,COMMA care of the operator precedence .PERIOD Because ,COMMA here we have seen the star symbol as well as dot symbol now this dot has a higher precedence than star what does it mean ,COMMA It means that if ,COMMA I have got something like ptr roll ,COMMA and star ptr dot roll the dot will have a higher precedence .PERIOD So ,COMMA these two are the ,COMMA same thing - ptr roll .PERIOD (ptr is a pointer and the roll is that particular field) and star ptr is what Star ptr is the particular structure and I am going to the roll field of that structure .PERIOD But ,COMMA if I had done this that would be an error why .PERIOD That would be an error because this dot operator has got higher precedence than this star operator .PERIOD So ,COMMA basically I will try to ,COMMA get the role filled from the pointer p t r but that is not the case there is no roll field inside the pointer p t r .PERIOD The ,COMMA roll field is there in the content of the pointer ptr that is star p t r .PERIOD So ,COMMA I must make first star ptr within bracket ,COMMA then dot roll .PERIOD So ,COMMA this is correct but this is wrong the and the operator arrow enjoys the highest priority among operators among all these operators it has got the highest priority .PERIOD So ,COMMA here in this ,COMMA case what will happen plus plus ptr arrow roll - as we have said that this has got the highest priority ,COMMA we will go to where the ptr is and go to the roll field of that and after that we will increment this plus plus although it is shown as a pre increment .PERIOD So ,COMMA that will not have higher precedence than the arrow operator .PERIOD So ,COMMA if I want to first increment the ptr and then get the roll then I should do plus plus ptr arrow roll which will do the intended thing I hope this is clear this part .PERIOD Now structures and functions Structures can be passed as argument to a function and a function that ,COMMA we have already seen A function can also return a structure .PERIOD So ,COMMA we have seen that using two complex numbers how we can do that .PERIOD So ,COMMA here again we look at that example that we have got a complex structure with two fields ,COMMA I have now changed ,COMMA the names - float r e and float i m and in the main function I am scanning and a dot r e real part of a imaginary part of a then real part of b ,COMMA then imaginary part of b and ,COMMA then I call the function add a b .PERIOD What is happening ,COMMA here when I call this add a b .PERIOD What am I passing I am passing a b and here x y .PERIOD So ,COMMA it is a call by value .PERIOD So ,COMMA here this is copied now i have struct complex x y ,COMMA (there is no problem here it is not like swap I just want to add) .PERIOD So ,COMMA I have got two internal variables x and y and t that new structure t is taking x’s real part and y’s real part then I am getting the real part of ,COMMA t ,COMMA and in the imaginary part of t there is nothing here .PERIOD There is an excess space .PERIOD In the imaginary part of t I take the imaginary part of x and the imaginary part of y then I am returning this ,COMMA t to c where c is also of type complex since the types are matching I can pass it on over there ,COMMA Now ,COMMA this is one way of adding the complex numbers .PERIOD Now ,COMMA if this is clear now let us look at an ,COMMA alternative way of using the pointers .PERIOD Here I just changed this other things are the same .PERIOD What I am doing ,COMMA here is I have called them passing the address now I am passing the pointers .PERIOD In the earlier case I was passing the value here and now I am passing the pointers I am passing address of a address of b ,COMMA and address of c .PERIOD Now ,COMMA inside this add function ,COMMA what am I doing I am taking x and y .PERIOD So ,COMMA these are pointers I am taking them and t ,COMMA t is real .PERIOD So ,COMMA t ,COMMA is a pointer that is pointing to another structure of the type complex and ,COMMA t is r e t arrow r ,COMMA e means a real field of this t will be taking the real part of x and real part of y .PERIOD So ,COMMA here x plus y the sum will come this the real part of x and real part of y will come here and here the imaginary part of x and y will be added .PERIOD Now ,COMMA when here ,COMMA I am not returning any t because this t is nothing but this c ,COMMA So ,COMMA this t and ,COMMA c are mapped ,COMMA it is a call by reference .PERIOD So ,COMMA c is also actually pointing over here .PERIOD So ,COMMA I get the result here .PERIOD So ,COMMA this is another way in which in structures we can use pointers also .PERIOD So ,COMMA these are relatively more advanced aspects and you will gradually practice this and we will get familiar .PERIOD Thank ,COMMA you ,COMMA We have looked at pointers and structures in detail and we have also seen ,COMMA how structures can also utilise pointers or in other words how pointers can be used in conjunction with structures .PERIOD Now ,COMMA we look at another very interesting use of pointers but in general ,COMMA let me say that it is a very fundamental concept from the memory allocation point of view Dynamic memory ,COMMA allocation is what we will be discussing now .PERIOD Now ,COMMA what if there is a dynamic memory allocation then ,COMMA obviously there must be something called the static memory allocation now what is static memory allocation .PERIOD When we declare an array say ,COMMA int A 20 you know that the compiler will allocate 20 locations 20 locations to house 20 integers to you and that will be named as A or you can also consider that there is a pointer ,COMMA A ,COMMA which is pointing to the first element of the array .PERIOD But ,COMMA you have got space for 20 locations 20 integers allocated to you .PERIOD So ,COMMA now you know size of .PERIOD So ,COMMA how many bytes will be required .PERIOD You can say 20 times size of int .PERIOD So ,COMMA size of ,COMMA int will return you how many bytes your particular system allocates for an integer and 20 such ,COMMA allocation .PERIOD So ,COMMA so many bytes will be allocated to you .PERIOD Now ,COMMA when that is statically allocated that is allocated at compile time ,COMMA so when we say static allocation that means allocation at compile time right .PERIOD Now ,COMMA if for some reason you need more than 20 integers to be stored in this array A you will need to redefine this whole thing or in some cases we do not know we do not have an idea of how many ,COMMA date data items will come for example ,COMMA you was you are actually storing student ,COMMA records in an array class and you do not know how many students will join that class beforehand .PERIOD If you know that beforehand its fine or if you have an idea that what is the maximum number of students that can come then its fine you can allocate it in the form of static allocation as we do in ,COMMA an array .PERIOD However when we do not know and the information comes at a runtime that means when is being executed that will lead to what we call ,COMMA dynamic allocation ,COMMA of memory .PERIOD So ,COMMA let us look at ,COMMA how we can handle it .PERIOD So ,COMMA the basic idea is I have already explained that we have an amount of data we cannot predict beforehand .PERIOD So ,COMMA we will use effectively whose dynamic memory allocation technique to do that ,COMMA Now ,COMMA C language requires a number of elements to be specified in compiled time when we define in an array we need to specify that in compile time .PERIOD Now ,COMMA often that leads to wastage of memory or program failure .PERIOD Why a program failure .PERIOD Program failure will occur because if we exceed the amount of space that has been ,COMMA allocated there will be a ,COMMA failure the program will give an error or it will ,COMMA exit abnormally .PERIOD However ,COMMA if we take recourse to dynamic memory allocation we can solve this problem how Memory space required can be specified at ,COMMA the time of execution how can we do that ,COMMA how can I ,COMMA specify the amount of memory required at the time of execution .PERIOD If while running the program just like the instructions and operators if we had some special means some special command some special operator by ,COMMA which we can grab memory then it’s possible .PERIOD Now ,COMMA here you should understand that who allocates memory to us .PERIOD It is the operating system which ,COMMA allocates the memory to us .PERIOD So ,COMMA this like the print f scan f all those things are system calls .PERIOD We are making calls to the operating system ,COMMA which is doing the required thing for us .PERIOD Similarly ,COMMA there is a function called ,COMMA Malloc - Memory Allocated malloc using ,COMMA which we can grab memory from the operating system ,COMMA how let us look at this ,COMMA In memory in C I have got different types of variables ,COMMA that is not so much relevant right now ,COMMA What is needed is this part ,COMMA These global variables and instructions are there always specified .PERIOD The local variables are there and ,COMMA there is some free memory .PERIOD We can take from this free memory and use them as our local variables ,COMMA The ,COMMA free region ,COMMA is has got a name heap ,COMMA Now ,COMMA the most important thing is that we need some functions which will give my program some memory addresses or ,COMMA memory blocks from the operating system storage of memory which is ,COMMA known as heap from there it will be allocated to my program all right .PERIOD So ,COMMA for that we have got four different functions - one is malloc ,COMMA what does malloc do .PERIOD Malloc allocates the requested number of bytes ,COMMA and returns a pointer to ,COMMA the first byte of the allocated space .PERIOD So ,COMMA what it does is something like this what is happening .PERIOD (Refer Time: 08:31) .PERIOD Malloc allocates a requested number of bytes and returns a pointer to the first byte of the allocated space .PERIOD So ,COMMA let us try to explain this .PERIOD So ,COMMA when I do malloc it is just like a function and it will return some memory bytes some memory bytes .PERIOD How many memory bytes .PERIOD It will depend on what I am ,COMMA requesting for .PERIOD It is a requested number of bytes .PERIOD So ,COMMA malloc will have some parameters which will show later .PERIOD So ,COMMA it will give some give me some amount of memory .PERIOD Now ,COMMA the operating system has got some free memory spread here and there .PERIOD So ,COMMA from there it is giving me some piece of memory but how do I know ,COMMA where is that piece of memory .PERIOD For ,COMMA that it is returning me a pointer say pointer p which is telling me that if you follow this pointer you will get this piece of memory location .PERIOD So ,COMMA let us proceed a little bit .PERIOD Now ,COMMA similarly when this memory block is given ,COMMA in response to malloc request the actual memory is not initialised to some value .PERIOD It can have any garbage value .PERIOD But ,COMMA if I apply calloc then it allocates space for the array of elements and initialises them to zero and returns a pointer .PERIOD So ,COMMA in this case if I want to have a chunk of memory ,COMMA where everything has been initialised to zero ,COMMA then I should use calloc .PERIOD On the other hand the free function call will return this amount of memory ,COMMA that was given ,COMMA to me in request to ,COMMA malloc will be returned back to the heap returned back to the operating system so that it can be utilised by somebody else in future all right .PERIOD So ,COMMA realloc modifies the size of the previously allocated space .PERIOD So ,COMMA I have got some ,COMMA allocation and ,COMMA then I think that allocation is not enough I want to change it I can use realloc ,COMMA However we will be ,COMMA mostly concerned with malloc and free in our discussion .PERIOD So ,COMMA a block of memory can be allocated using the function malloc ,COMMA and it reserves a block of memory and returns a pointer of type void .PERIOD You know every pointer has got some type but in this case with malloc returns some memory block the pointer that it has returned is of type void but ,COMMA then we have to do something .PERIOD What we need to do I know why I needed this memory .PERIOD So ,COMMA accordingly I will have to do that typecasting .PERIOD So ,COMMA once it returns me of type void but that return pointer can be assigned to any pointer type .PERIOD So ,COMMA here you see .PERIOD So ,COMMA here please note malloc has got a parameter of byte size - how much memory I want the amount of bytes which is required .PERIOD Now ,COMMA this malloc has returned me up to this it has returned me a pointer ,COMMA and pointer is of type void ,COMMA but suppose ,COMMA if this amount of memory I want for the purpose of storing integer array then this type will be ,COMMA int star that means I am casting this .PERIOD What ,COMMA is malloc returning ,COMMA Malloc is returning a pointer some pointer but that pointer was of type void .PERIOD Now ,COMMA when I am typecasting it to int star then this void is no longer it’s type it is becoming of type int ,COMMA and ,COMMA then I am assigning it to another variable p t r .PERIOD So ,COMMA think of two things first of all ,COMMA you have to decide on ,COMMA how many bytes you want .PERIOD Accordingly ,COMMA you do malloc and then ,COMMA what type ,COMMA of data you want to store there .PERIOD So ,COMMA accordingly you do this ,COMMA typecasting like int star float star char star whatever you do and ,COMMA then you assign it to a particular pointer .PERIOD Let us see how it will work .PERIOD So ,COMMA let us look an example .PERIOD Here how do ,COMMA I know how many bytes I need ,COMMA Suppose ,COMMA I need to store an element an array of 100 integers .PERIOD So ,COMMA what I do here is I ask for malloc 100 times size of int size ,COMMA of int if it is 4 ,COMMA if ,COMMA int is 4 then I am getting 400 bytes ,COMMA Now ,COMMA these 400 bytes that have been given to me is being pointed by some pointer of type void .PERIOD So ,COMMA next I make it int star and put it to p .PERIOD So ,COMMA p is now an integer pointer that is pointing to this entire block of 400 integers .PERIOD So ,COMMA a memory space equivalent to ,COMMA 100 times the size we have got .PERIOD So ,COMMA here 400 bytes of space and p is a pointer pointing to the beginning of this .PERIOD So ,COMMA I have got this just using malloc it was not declared beforehand .PERIOD Now ,COMMA so this 100 can also be a variable n if I read a particular variable n now how many students are there scan ,COMMA f m and n .PERIOD So ,COMMA I read the number of students then I can multiply that with n as well .PERIOD Next ,COMMA you see here I am seeking memory for 20 characters I do malloc 20 because I know a character takes one byte and then the pointer is of type ,COMMA void I am typecasting it to type character char star and assigning it to c p t r .PERIOD Now ,COMMA it is actually wrong it is allocating 20 bytes of space for the pointer .PERIOD So ,COMMA integer character was simple ,COMMA now I want to have for space for the entire structure students ,COMMA now that size is larger .PERIOD So ,COMMA I do not know .PERIOD So ,COMMA I just have ,COMMA employ this function size ,COMMA of struct ,COMMA stud .PERIOD So ,COMMA I gets how many bytes .PERIOD Say it requires say 40 bytes and say 10 such for 10 such students or n such ,COMMA students I multiply with that I get ,COMMA so much memory now I have to typecast that to struct stud star and that goes as a structure pointer .PERIOD Now ,COMMA malloc always allocates a block of contiguous bytes .PERIOD Now ,COMMA suppose you are asking for 100 bytes and 100 bytes are not available then malloc will not be able to allocate you the space in that case malloc will return in null .PERIOD That is a null pointer that is a special character special value it will return ,COMMA that shows that ,COMMA I could not allocate a space .PERIOD So ,COMMA I could not allocate it to you a valid pointer .PERIOD So ,COMMA it is a null pointer meaning thereby ,COMMA I failed in allocating your memory .PERIOD So ,COMMA here is an example ,COMMA Here let us look ,COMMA at it from one side - ,COMMA I n float is a pointer height is a pointer of type float sum is 0 and average .PERIOD So ;SEMICOLON what ,COMMA am ;SEMICOLON I ;SEMICOLON trying ;SEMICOLON to ;SEMICOLON do ;SEMICOLON Probably ;SEMICOLON I ;SEMICOLON am ;SEMICOLON trying to find the ,COMMA average height of the ,COMMA class ,COMMA So input ,COMMA the ,COMMA number of ,COMMA students and I am ,COMMA reading ,COMMA ampersand So ,COMMA this one is ,COMMA ampersand n ,COMMA So ,COMMA this is n number ,COMMA of students Now ,COMMA see ,COMMA I did ,COMMA not know how many students are there So I am ,COMMA getting this number of ,COMMA students here ,COMMA I am ,COMMA getting n number of students here Now ,COMMA I want to have ,COMMA an ,COMMA amount of spaces for the height So what ,COMMA I am ,COMMA doing I am ,COMMA allocating n number of ,COMMA spaces ,COMMA n ,COMMA is a ,COMMA variable here and size of ,COMMA float whatever size ,COMMA of float ,COMMA is ,COMMA 4 bytes So n times 4 bytes ,COMMA so much space is being allocated ,COMMA and the ,COMMA pointer is ,COMMA height is a pointer of type float So ,COMMA this ,COMMA pointer is ,COMMA being type casted to ,COMMA float Then I get the ,COMMA input scan ,COMMA f in ,COMMA a loop ,COMMA I am getting the heights ,COMMA one after another ,COMMA in an array and I am finding ,COMMA the ,COMMA sum of the heights finding the ,COMMA average of the ,COMMA heights ,COMMA where ,COMMA I am dividing ,COMMA sum ,COMMA which ,COMMA is ,COMMA a floating ,COMMA point number with ,COMMA float n Here is another example of ,COMMA typecasting So you see I am dividing by n ,COMMA but this is a floating point real number n was an integer .PERIOD So I convert it to float and convert it divided .PERIOD So this is how malloc works now .PERIOD So ,COMMA we have explained that .PERIOD Similarly the general format for freeing space is using by using the free function .PERIOD So general now suppose I have got a space ,COMMA allocated to me and that space the only handle to that space is to the pointer p .PERIOD So ,COMMA I free that pointer I free p .PERIOD So the pointer ,COMMA is ,COMMA freed that means this pointer is .PERIOD freed means this location this amount of memory goes back to the storage of the operating system and ,COMMA that is the heap .PERIOD So ,COMMA whatever ,COMMA we got in malloc that gives us some idea about how we can get space and reallocate space .PERIOD Now briefly we I will be talking for the next 5 or 10 minutes on file handling there is not much to understand about file handling thus ,COMMA you will learn as you do .PERIOD Now what is a file .PERIOD That is something you have to understand .PERIOD File is something ,COMMA where I want to write something write or read from .PERIOD So ,COMMA I want to store something I will take a particular file all right and I will open that file and ,COMMA then I will write in the into that file then close that file and then in that way I may have 10 ,COMMA files .PERIOD Now ,COMMA at a particular point of time ,COMMA I want to read ,COMMA a particular thing .PERIOD So ,COMMA I choose the particular file what do I do next .PERIOD Open the file and read the file .PERIOD Now ,COMMA some files may be allowed to be read by others some files can only be ,COMMA written in to and not read from some files can have the option of read or write both .PERIOD So ,COMMA file is some space where I will be writing or reading from some storage .PERIOD So ,COMMA this is there in the secondary memory and till now whatever variables we are talking about those who are ,COMMA all in the primary memory .PERIOD So ,COMMA if I store it in a file it goes into the secondary memory .PERIOD So ,COMMA let us have a little idea of how files are handled .PERIOD So ,COMMA now again now we have learnt pointers .PERIOD So ,COMMA any file can be accessed using a pointer .PERIOD Just as if ,COMMA I have the file of income tax .PERIOD So ,COMMA I will have a pointer that there is the file of income tax here ,COMMA there is some file of road tax it will be ,COMMA here some file of your ,COMMA salary ,COMMA it will be somewhere here some file of your expenses it will be somewhere else .PERIOD So ,COMMA there will be pointers .PERIOD So ,COMMA we use in c ,COMMA the file star .PERIOD We use file star to represent pointed to a file ,COMMA and ,COMMA if open is the command ,COMMA for opening a file .PERIOD If a file cannot be opened then it will return a null just as in the case of malloc we saw if nothing could be ,COMMA returned it was returning a null .PERIOD So ,COMMA here for example you see f p t r is a pointer of type file .PERIOD That means f p ,COMMA t r will be pointing to file .PERIOD Now ,COMMA I have got a character file name .PERIOD whic is an array file 2 dot dat it is a data file .PERIOD So ,COMMA fptr ,COMMA is f open file name and here when I do f open I give the file name as well as the mode in which it can be ,COMMA opened and this ,COMMA w means it is in the right mode .PERIOD So ,COMMA what have I done here ,COMMA I have called f open .PERIOD So ,COMMA I am trying to open the file .PERIOD So ,COMMA this f open will return up file pointer .PERIOD Now ,COMMA if this file pointer is null that means there was some error in file creation otherwise it will go on doing something .PERIOD So ,COMMA quickly let us look at this when I do f open ,COMMA it will open a file and will open it in a particular mode read or write whatever I specify and it will return me a pointer ,COMMA If a file is created successfully ,COMMA it will return me a non null pointer .PERIOD The second argument of f open is the mode and there are three ,COMMA modes R means the file is opened for reading w means it creates a file for writing and writes over all the previous contents .PERIOD So ,COMMA if I open it in the write mode whatever content was in that file is erased .PERIOD And a opens a file for ,COMMA appending that means ,COMMA whatever is there after that it will be added .PERIOD So ,COMMA if you have got something already stored and you do not want to ,COMMA destroy that and you want to add something more to that you will open it in mode a and rb reads a binary file raw bytes we need not bother about that .PERIOD There is a function called exit which you have seen sometimes in the ,COMMA emergency we can put exit minus one ,COMMA that means it tells ,COMMA that I have exited the function without success .PERIOD Now ,COMMA here you see use of exit file f pointer character file name is an array file 2 dot dat I tried to do ,COMMA something .PERIOD So ,COMMA the file pointer was null .PERIOD So ,COMMA if it is null then what can I do ,COMMA I will have to exit because of some reason the file could not be created .PERIOD So ,COMMA f open ,COMMA we have seen f print is a very important command f print works just like print f and s print f ,COMMA except that the first argument is a file pointer .PERIOD So ,COMMA we will see how it works .PERIOD So ,COMMA fptr ,COMMA is again the file ,COMMA pointer and I have opened the file dot dat in the right mode .PERIOD Now ,COMMA print f means now I am printing .PERIOD Where am I printing A file called file dot dat has been opened ,COMMA The name of the file is file dot dat ,COMMA and how do I identify it I identify it with the ,COMMA fptr the file pointer ok ,COMMA So ,COMMA it opened in the write mode .PERIOD So ,COMMA everything whatever was there has been erased .PERIOD So ,COMMA I am writing just as you have done print f ,COMMA then automatically by default it goes to the screen here it is not default here I have said fptr .PERIOD So ,COMMA whatever I write hello world it will be written in ,COMMA this file not in the screen ,COMMA Screen is another file but that is a default file Reading a data similarly we printed using f print f reading we can do using f scan f forget about that part look at this fptr - I am reading from not from the keyboard ,COMMA now I am reading x ,COMMA and y two integers from a file ,COMMA which is pointed out by f p t r and what is that file f p ,COMMA t ,COMMA r I have opened the file input dot dat .PERIOD So ,COMMA you see in that file input dot ,COMMA dat 20 and 30 was written and ,COMMA so f scan f ,COMMA I have read that that was input dot ,COMMA dat I have opened that in the read mode and ,COMMA I am reading from there .PERIOD So ,COMMA I am getting x to be 20 and y to be 30 not from the keyboard ,COMMA but from the file .PERIOD So ,COMMA now here are some powerful commands .PERIOD We can read a string using fgets from a file I can read a string .PERIOD So ,COMMA here you see a file is f p t r and ,COMMA a line is of size 1000 while f gets line is not null that means ,COMMA I am getting from f p ,COMMA t r a value and if it is not null that means it is not the end of the line the file is open I am reading the line using f gets I am getting the line f gets takes three arguments what are the three arguments its taking ,COMMA A string a maximum number of characters 1000 and a pointer from it returns .PERIOD If there is an error at the end of file ,COMMA it shows EOF which is the end of file .PERIOD Now ,COMMA this I think ,COMMA you can understand much better when you use yourself now when we open a file after that ,COMMA we must close that file we can simply use a command f close and the file pointer .PERIOD So ,COMMA here you see f p t r ,COMMA I ,COMMA opened the file in the right mode I have written hello world over here f print f means saying I am printing in the file and ,COMMA then f close ,COMMA I am ,COMMA closing the file by f close f p t r all right .PERIOD So ,COMMA here ,COMMA it is opening and here is access and here ,COMMA it’s closing .PERIOD You have seen that s ,COMMA t d in s t d out were two special cases of files which are default files and s t d error ,COMMA which was the printing of the error .PERIOD So ,COMMA here is an example program you can see that Main ,COMMA f ,COMMA print f s t d ,COMMA out give value of ,COMMA i that means where am I printing this .PERIOD Here ,COMMA I am printing it to the standard output ,COMMA I am reading I from the standard input .PERIOD Now ,COMMA f print f I am writing that the value of i is whatever value of i read .PERIOD So ,COMMA there is no error .PERIOD So ,COMMA give value of i it will first give value of i you give ,COMMA 15 then f print f that i then it will say value of ,COMMA i is equal to 15 ,COMMA and there are no error but an example to show error message .PERIOD If there is an error for example I am being returned a null pointer in that case I can use output s t d error and say the file failed to open the file that sort of message .PERIOD So ,COMMA now another thing I will just talk about here that will come in very handy to you that is say for example you must be ,COMMA running the programs and you after you compile the program and link them you are creating an executable file ,COMMA which is a dot out ( dot slash a dot ,COMMA out) .PERIOD Now ,COMMA usually what do you do .PERIOD You have got the dollar those of ,COMMA you using Linux shell a dot out right and return .PERIOD Now ,COMMA this dot slash a dot out what is it expecting .PERIOD The input from the keyboard s t d in and the output is going to std out but I do not want that ,COMMA I want that I have got a file ,COMMA where ,COMMA my input data is there I call that in dot dat and I have got another file which is known as out dot dat I want that the input to be taken from this .PERIOD So ,COMMA I want a dot out to read the data from here ,COMMA and the result should be written here I can do that in the unix environment very simply by this redirection operation .PERIOD You see a dot out will run taking data from in dot dat and sending the output data to out dot ,COMMA dat .PERIOD So ,COMMA say for ,COMMA example ,COMMA in dot dat has ,COMMA got 15 .PERIOD So ,COMMA I do that and the program runs ,COMMA and says give the value of i (think of the earlier example earlier program) and it reads from here and it prints the value of i to be15 .PERIOD So ,COMMA this whole thing is coming in out dot i .PERIOD So ,COMMA let us once ,COMMA again look at this thing .PERIOD Here ,COMMA I am asking them to give the value of i which is being given and that is being scanned from the input file and ,COMMA this is being written on the output file .PERIOD So ,COMMA in the output file both these things are being written consequently you ,COMMA see what I am getting is this output - out dot ,COMMA dat and in dot dat there are two files .PERIOD So ,COMMA this in this way ,COMMA you can use files for storing data ,COMMA you have to open the file let me ,COMMA summarise a little bit you will have to open the file in the read mode read the data from that file ,COMMA do the operation open another file in the write mode ,COMMA and write the data into that file Thereby ,COMMA whenever you require some file operations you can easily do that and ,COMMA this is one example that we have shown which is very common during running your programs .PERIOD If you store some data in a particular file and read from there and write into another file you can utilise this sort of structures this sort of commands .PERIOD So ,COMMA thank ,COMMA you very much ,COMMA I think you have got an overall idea of how to write c programs and solve problems using programs because our the essence of our course was to solve problems through c programming .PERIOD So ,COMMA you should choose different problems and you should try to write programs for solving those problems .PERIOD So ,COMMA first you have to find out the proper algorithm and ,COMMA then write the C code for that ,COMMA you have learnt everything about basic things about the C programming I have not touched upon some special ,COMMA features which you can also learn from the book like static variables and all those ,COMMA I have left out intentionally .PERIOD So ,COMMA that you are not ,COMMA overloaded you ,COMMA can solve it the more you run the programs using the basic concepts that has been taught ,COMMA you will be a good programmer and most importantly you will be able to think logically like a programmer you will be able to think of an algorithm and you will be able to translate that into ,COMMA a program .PERIOD Thank you very much 